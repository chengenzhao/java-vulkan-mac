// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1ColorConfig {
 *     StdVideoAV1ColorConfigFlags flags;
 *     uint8_t BitDepth;
 *     uint8_t subsampling_x;
 *     uint8_t subsampling_y;
 *     uint8_t reserved1;
 *     StdVideoAV1ColorPrimaries color_primaries;
 *     StdVideoAV1TransferCharacteristics transfer_characteristics;
 *     StdVideoAV1MatrixCoefficients matrix_coefficients;
 *     StdVideoAV1ChromaSamplePosition chroma_sample_position;
 * }
 * }
 */
public class StdVideoAV1ColorConfig {

    StdVideoAV1ColorConfig() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoAV1ColorConfigFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("BitDepth"),
        vulkan_h.C_CHAR.withName("subsampling_x"),
        vulkan_h.C_CHAR.withName("subsampling_y"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_INT.withName("color_primaries"),
        vulkan_h.C_INT.withName("transfer_characteristics"),
        vulkan_h.C_INT.withName("matrix_coefficients"),
        vulkan_h.C_INT.withName("chroma_sample_position")
    ).withName("StdVideoAV1ColorConfig");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorConfigFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorConfigFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorConfigFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorConfigFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte BitDepth$LAYOUT = (OfByte)$LAYOUT.select(groupElement("BitDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t BitDepth
     * }
     */
    public static final OfByte BitDepth$layout() {
        return BitDepth$LAYOUT;
    }

    private static final long BitDepth$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t BitDepth
     * }
     */
    public static final long BitDepth$offset() {
        return BitDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t BitDepth
     * }
     */
    public static byte BitDepth(MemorySegment struct) {
        return struct.get(BitDepth$LAYOUT, BitDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t BitDepth
     * }
     */
    public static void BitDepth(MemorySegment struct, byte fieldValue) {
        struct.set(BitDepth$LAYOUT, BitDepth$OFFSET, fieldValue);
    }

    private static final OfByte subsampling_x$LAYOUT = (OfByte)$LAYOUT.select(groupElement("subsampling_x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t subsampling_x
     * }
     */
    public static final OfByte subsampling_x$layout() {
        return subsampling_x$LAYOUT;
    }

    private static final long subsampling_x$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t subsampling_x
     * }
     */
    public static final long subsampling_x$offset() {
        return subsampling_x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t subsampling_x
     * }
     */
    public static byte subsampling_x(MemorySegment struct) {
        return struct.get(subsampling_x$LAYOUT, subsampling_x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t subsampling_x
     * }
     */
    public static void subsampling_x(MemorySegment struct, byte fieldValue) {
        struct.set(subsampling_x$LAYOUT, subsampling_x$OFFSET, fieldValue);
    }

    private static final OfByte subsampling_y$LAYOUT = (OfByte)$LAYOUT.select(groupElement("subsampling_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t subsampling_y
     * }
     */
    public static final OfByte subsampling_y$layout() {
        return subsampling_y$LAYOUT;
    }

    private static final long subsampling_y$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t subsampling_y
     * }
     */
    public static final long subsampling_y$offset() {
        return subsampling_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t subsampling_y
     * }
     */
    public static byte subsampling_y(MemorySegment struct) {
        return struct.get(subsampling_y$LAYOUT, subsampling_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t subsampling_y
     * }
     */
    public static void subsampling_y(MemorySegment struct, byte fieldValue) {
        struct.set(subsampling_y$LAYOUT, subsampling_y$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfInt color_primaries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("color_primaries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorPrimaries color_primaries
     * }
     */
    public static final OfInt color_primaries$layout() {
        return color_primaries$LAYOUT;
    }

    private static final long color_primaries$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorPrimaries color_primaries
     * }
     */
    public static final long color_primaries$offset() {
        return color_primaries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorPrimaries color_primaries
     * }
     */
    public static int color_primaries(MemorySegment struct) {
        return struct.get(color_primaries$LAYOUT, color_primaries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1ColorPrimaries color_primaries
     * }
     */
    public static void color_primaries(MemorySegment struct, int fieldValue) {
        struct.set(color_primaries$LAYOUT, color_primaries$OFFSET, fieldValue);
    }

    private static final OfInt transfer_characteristics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("transfer_characteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1TransferCharacteristics transfer_characteristics
     * }
     */
    public static final OfInt transfer_characteristics$layout() {
        return transfer_characteristics$LAYOUT;
    }

    private static final long transfer_characteristics$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1TransferCharacteristics transfer_characteristics
     * }
     */
    public static final long transfer_characteristics$offset() {
        return transfer_characteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1TransferCharacteristics transfer_characteristics
     * }
     */
    public static int transfer_characteristics(MemorySegment struct) {
        return struct.get(transfer_characteristics$LAYOUT, transfer_characteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1TransferCharacteristics transfer_characteristics
     * }
     */
    public static void transfer_characteristics(MemorySegment struct, int fieldValue) {
        struct.set(transfer_characteristics$LAYOUT, transfer_characteristics$OFFSET, fieldValue);
    }

    private static final OfInt matrix_coefficients$LAYOUT = (OfInt)$LAYOUT.select(groupElement("matrix_coefficients"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1MatrixCoefficients matrix_coefficients
     * }
     */
    public static final OfInt matrix_coefficients$layout() {
        return matrix_coefficients$LAYOUT;
    }

    private static final long matrix_coefficients$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1MatrixCoefficients matrix_coefficients
     * }
     */
    public static final long matrix_coefficients$offset() {
        return matrix_coefficients$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1MatrixCoefficients matrix_coefficients
     * }
     */
    public static int matrix_coefficients(MemorySegment struct) {
        return struct.get(matrix_coefficients$LAYOUT, matrix_coefficients$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1MatrixCoefficients matrix_coefficients
     * }
     */
    public static void matrix_coefficients(MemorySegment struct, int fieldValue) {
        struct.set(matrix_coefficients$LAYOUT, matrix_coefficients$OFFSET, fieldValue);
    }

    private static final OfInt chroma_sample_position$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chroma_sample_position"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1ChromaSamplePosition chroma_sample_position
     * }
     */
    public static final OfInt chroma_sample_position$layout() {
        return chroma_sample_position$LAYOUT;
    }

    private static final long chroma_sample_position$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1ChromaSamplePosition chroma_sample_position
     * }
     */
    public static final long chroma_sample_position$offset() {
        return chroma_sample_position$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1ChromaSamplePosition chroma_sample_position
     * }
     */
    public static int chroma_sample_position(MemorySegment struct) {
        return struct.get(chroma_sample_position$LAYOUT, chroma_sample_position$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1ChromaSamplePosition chroma_sample_position
     * }
     */
    public static void chroma_sample_position(MemorySegment struct, int fieldValue) {
        struct.set(chroma_sample_position$LAYOUT, chroma_sample_position$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

