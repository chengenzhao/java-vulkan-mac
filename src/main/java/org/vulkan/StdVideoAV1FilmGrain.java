// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1FilmGrain {
 *     StdVideoAV1FilmGrainFlags flags;
 *     uint8_t grain_scaling_minus_8;
 *     uint8_t ar_coeff_lag;
 *     uint8_t ar_coeff_shift_minus_6;
 *     uint8_t grain_scale_shift;
 *     uint16_t grain_seed;
 *     uint8_t film_grain_params_ref_idx;
 *     uint8_t num_y_points;
 *     uint8_t point_y_value[14];
 *     uint8_t point_y_scaling[14];
 *     uint8_t num_cb_points;
 *     uint8_t point_cb_value[10];
 *     uint8_t point_cb_scaling[10];
 *     uint8_t num_cr_points;
 *     uint8_t point_cr_value[10];
 *     uint8_t point_cr_scaling[10];
 *     int8_t ar_coeffs_y_plus_128[24];
 *     int8_t ar_coeffs_cb_plus_128[25];
 *     int8_t ar_coeffs_cr_plus_128[25];
 *     uint8_t cb_mult;
 *     uint8_t cb_luma_mult;
 *     uint16_t cb_offset;
 *     uint8_t cr_mult;
 *     uint8_t cr_luma_mult;
 *     uint16_t cr_offset;
 * }
 * }
 */
public class StdVideoAV1FilmGrain {

    StdVideoAV1FilmGrain() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoAV1FilmGrainFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("grain_scaling_minus_8"),
        vulkan_h.C_CHAR.withName("ar_coeff_lag"),
        vulkan_h.C_CHAR.withName("ar_coeff_shift_minus_6"),
        vulkan_h.C_CHAR.withName("grain_scale_shift"),
        vulkan_h.C_SHORT.withName("grain_seed"),
        vulkan_h.C_CHAR.withName("film_grain_params_ref_idx"),
        vulkan_h.C_CHAR.withName("num_y_points"),
        MemoryLayout.sequenceLayout(14, vulkan_h.C_CHAR).withName("point_y_value"),
        MemoryLayout.sequenceLayout(14, vulkan_h.C_CHAR).withName("point_y_scaling"),
        vulkan_h.C_CHAR.withName("num_cb_points"),
        MemoryLayout.sequenceLayout(10, vulkan_h.C_CHAR).withName("point_cb_value"),
        MemoryLayout.sequenceLayout(10, vulkan_h.C_CHAR).withName("point_cb_scaling"),
        vulkan_h.C_CHAR.withName("num_cr_points"),
        MemoryLayout.sequenceLayout(10, vulkan_h.C_CHAR).withName("point_cr_value"),
        MemoryLayout.sequenceLayout(10, vulkan_h.C_CHAR).withName("point_cr_scaling"),
        MemoryLayout.sequenceLayout(24, vulkan_h.C_CHAR).withName("ar_coeffs_y_plus_128"),
        MemoryLayout.sequenceLayout(25, vulkan_h.C_CHAR).withName("ar_coeffs_cb_plus_128"),
        MemoryLayout.sequenceLayout(25, vulkan_h.C_CHAR).withName("ar_coeffs_cr_plus_128"),
        vulkan_h.C_CHAR.withName("cb_mult"),
        vulkan_h.C_CHAR.withName("cb_luma_mult"),
        vulkan_h.C_SHORT.withName("cb_offset"),
        vulkan_h.C_CHAR.withName("cr_mult"),
        vulkan_h.C_CHAR.withName("cr_luma_mult"),
        vulkan_h.C_SHORT.withName("cr_offset")
    ).withName("StdVideoAV1FilmGrain");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1FilmGrainFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1FilmGrainFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1FilmGrainFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1FilmGrainFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte grain_scaling_minus_8$LAYOUT = (OfByte)$LAYOUT.select(groupElement("grain_scaling_minus_8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t grain_scaling_minus_8
     * }
     */
    public static final OfByte grain_scaling_minus_8$layout() {
        return grain_scaling_minus_8$LAYOUT;
    }

    private static final long grain_scaling_minus_8$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t grain_scaling_minus_8
     * }
     */
    public static final long grain_scaling_minus_8$offset() {
        return grain_scaling_minus_8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t grain_scaling_minus_8
     * }
     */
    public static byte grain_scaling_minus_8(MemorySegment struct) {
        return struct.get(grain_scaling_minus_8$LAYOUT, grain_scaling_minus_8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t grain_scaling_minus_8
     * }
     */
    public static void grain_scaling_minus_8(MemorySegment struct, byte fieldValue) {
        struct.set(grain_scaling_minus_8$LAYOUT, grain_scaling_minus_8$OFFSET, fieldValue);
    }

    private static final OfByte ar_coeff_lag$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ar_coeff_lag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_lag
     * }
     */
    public static final OfByte ar_coeff_lag$layout() {
        return ar_coeff_lag$LAYOUT;
    }

    private static final long ar_coeff_lag$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_lag
     * }
     */
    public static final long ar_coeff_lag$offset() {
        return ar_coeff_lag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_lag
     * }
     */
    public static byte ar_coeff_lag(MemorySegment struct) {
        return struct.get(ar_coeff_lag$LAYOUT, ar_coeff_lag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_lag
     * }
     */
    public static void ar_coeff_lag(MemorySegment struct, byte fieldValue) {
        struct.set(ar_coeff_lag$LAYOUT, ar_coeff_lag$OFFSET, fieldValue);
    }

    private static final OfByte ar_coeff_shift_minus_6$LAYOUT = (OfByte)$LAYOUT.select(groupElement("ar_coeff_shift_minus_6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_shift_minus_6
     * }
     */
    public static final OfByte ar_coeff_shift_minus_6$layout() {
        return ar_coeff_shift_minus_6$LAYOUT;
    }

    private static final long ar_coeff_shift_minus_6$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_shift_minus_6
     * }
     */
    public static final long ar_coeff_shift_minus_6$offset() {
        return ar_coeff_shift_minus_6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_shift_minus_6
     * }
     */
    public static byte ar_coeff_shift_minus_6(MemorySegment struct) {
        return struct.get(ar_coeff_shift_minus_6$LAYOUT, ar_coeff_shift_minus_6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t ar_coeff_shift_minus_6
     * }
     */
    public static void ar_coeff_shift_minus_6(MemorySegment struct, byte fieldValue) {
        struct.set(ar_coeff_shift_minus_6$LAYOUT, ar_coeff_shift_minus_6$OFFSET, fieldValue);
    }

    private static final OfByte grain_scale_shift$LAYOUT = (OfByte)$LAYOUT.select(groupElement("grain_scale_shift"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t grain_scale_shift
     * }
     */
    public static final OfByte grain_scale_shift$layout() {
        return grain_scale_shift$LAYOUT;
    }

    private static final long grain_scale_shift$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t grain_scale_shift
     * }
     */
    public static final long grain_scale_shift$offset() {
        return grain_scale_shift$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t grain_scale_shift
     * }
     */
    public static byte grain_scale_shift(MemorySegment struct) {
        return struct.get(grain_scale_shift$LAYOUT, grain_scale_shift$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t grain_scale_shift
     * }
     */
    public static void grain_scale_shift(MemorySegment struct, byte fieldValue) {
        struct.set(grain_scale_shift$LAYOUT, grain_scale_shift$OFFSET, fieldValue);
    }

    private static final OfShort grain_seed$LAYOUT = (OfShort)$LAYOUT.select(groupElement("grain_seed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t grain_seed
     * }
     */
    public static final OfShort grain_seed$layout() {
        return grain_seed$LAYOUT;
    }

    private static final long grain_seed$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t grain_seed
     * }
     */
    public static final long grain_seed$offset() {
        return grain_seed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t grain_seed
     * }
     */
    public static short grain_seed(MemorySegment struct) {
        return struct.get(grain_seed$LAYOUT, grain_seed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t grain_seed
     * }
     */
    public static void grain_seed(MemorySegment struct, short fieldValue) {
        struct.set(grain_seed$LAYOUT, grain_seed$OFFSET, fieldValue);
    }

    private static final OfByte film_grain_params_ref_idx$LAYOUT = (OfByte)$LAYOUT.select(groupElement("film_grain_params_ref_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t film_grain_params_ref_idx
     * }
     */
    public static final OfByte film_grain_params_ref_idx$layout() {
        return film_grain_params_ref_idx$LAYOUT;
    }

    private static final long film_grain_params_ref_idx$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t film_grain_params_ref_idx
     * }
     */
    public static final long film_grain_params_ref_idx$offset() {
        return film_grain_params_ref_idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t film_grain_params_ref_idx
     * }
     */
    public static byte film_grain_params_ref_idx(MemorySegment struct) {
        return struct.get(film_grain_params_ref_idx$LAYOUT, film_grain_params_ref_idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t film_grain_params_ref_idx
     * }
     */
    public static void film_grain_params_ref_idx(MemorySegment struct, byte fieldValue) {
        struct.set(film_grain_params_ref_idx$LAYOUT, film_grain_params_ref_idx$OFFSET, fieldValue);
    }

    private static final OfByte num_y_points$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_y_points"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_y_points
     * }
     */
    public static final OfByte num_y_points$layout() {
        return num_y_points$LAYOUT;
    }

    private static final long num_y_points$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_y_points
     * }
     */
    public static final long num_y_points$offset() {
        return num_y_points$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_y_points
     * }
     */
    public static byte num_y_points(MemorySegment struct) {
        return struct.get(num_y_points$LAYOUT, num_y_points$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_y_points
     * }
     */
    public static void num_y_points(MemorySegment struct, byte fieldValue) {
        struct.set(num_y_points$LAYOUT, num_y_points$OFFSET, fieldValue);
    }

    private static final SequenceLayout point_y_value$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("point_y_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t point_y_value[14]
     * }
     */
    public static final SequenceLayout point_y_value$layout() {
        return point_y_value$LAYOUT;
    }

    private static final long point_y_value$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t point_y_value[14]
     * }
     */
    public static final long point_y_value$offset() {
        return point_y_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t point_y_value[14]
     * }
     */
    public static MemorySegment point_y_value(MemorySegment struct) {
        return struct.asSlice(point_y_value$OFFSET, point_y_value$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t point_y_value[14]
     * }
     */
    public static void point_y_value(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, point_y_value$OFFSET, point_y_value$LAYOUT.byteSize());
    }

    private static long[] point_y_value$DIMS = { 14 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t point_y_value[14]
     * }
     */
    public static long[] point_y_value$dimensions() {
        return point_y_value$DIMS;
    }
    private static final VarHandle point_y_value$ELEM_HANDLE = point_y_value$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t point_y_value[14]
     * }
     */
    public static byte point_y_value(MemorySegment struct, long index0) {
        return (byte)point_y_value$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t point_y_value[14]
     * }
     */
    public static void point_y_value(MemorySegment struct, long index0, byte fieldValue) {
        point_y_value$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout point_y_scaling$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("point_y_scaling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t point_y_scaling[14]
     * }
     */
    public static final SequenceLayout point_y_scaling$layout() {
        return point_y_scaling$LAYOUT;
    }

    private static final long point_y_scaling$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t point_y_scaling[14]
     * }
     */
    public static final long point_y_scaling$offset() {
        return point_y_scaling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t point_y_scaling[14]
     * }
     */
    public static MemorySegment point_y_scaling(MemorySegment struct) {
        return struct.asSlice(point_y_scaling$OFFSET, point_y_scaling$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t point_y_scaling[14]
     * }
     */
    public static void point_y_scaling(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, point_y_scaling$OFFSET, point_y_scaling$LAYOUT.byteSize());
    }

    private static long[] point_y_scaling$DIMS = { 14 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t point_y_scaling[14]
     * }
     */
    public static long[] point_y_scaling$dimensions() {
        return point_y_scaling$DIMS;
    }
    private static final VarHandle point_y_scaling$ELEM_HANDLE = point_y_scaling$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t point_y_scaling[14]
     * }
     */
    public static byte point_y_scaling(MemorySegment struct, long index0) {
        return (byte)point_y_scaling$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t point_y_scaling[14]
     * }
     */
    public static void point_y_scaling(MemorySegment struct, long index0, byte fieldValue) {
        point_y_scaling$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte num_cb_points$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_cb_points"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_cb_points
     * }
     */
    public static final OfByte num_cb_points$layout() {
        return num_cb_points$LAYOUT;
    }

    private static final long num_cb_points$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_cb_points
     * }
     */
    public static final long num_cb_points$offset() {
        return num_cb_points$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_cb_points
     * }
     */
    public static byte num_cb_points(MemorySegment struct) {
        return struct.get(num_cb_points$LAYOUT, num_cb_points$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_cb_points
     * }
     */
    public static void num_cb_points(MemorySegment struct, byte fieldValue) {
        struct.set(num_cb_points$LAYOUT, num_cb_points$OFFSET, fieldValue);
    }

    private static final SequenceLayout point_cb_value$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("point_cb_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t point_cb_value[10]
     * }
     */
    public static final SequenceLayout point_cb_value$layout() {
        return point_cb_value$LAYOUT;
    }

    private static final long point_cb_value$OFFSET = 41;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t point_cb_value[10]
     * }
     */
    public static final long point_cb_value$offset() {
        return point_cb_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_value[10]
     * }
     */
    public static MemorySegment point_cb_value(MemorySegment struct) {
        return struct.asSlice(point_cb_value$OFFSET, point_cb_value$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_value[10]
     * }
     */
    public static void point_cb_value(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, point_cb_value$OFFSET, point_cb_value$LAYOUT.byteSize());
    }

    private static long[] point_cb_value$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t point_cb_value[10]
     * }
     */
    public static long[] point_cb_value$dimensions() {
        return point_cb_value$DIMS;
    }
    private static final VarHandle point_cb_value$ELEM_HANDLE = point_cb_value$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_value[10]
     * }
     */
    public static byte point_cb_value(MemorySegment struct, long index0) {
        return (byte)point_cb_value$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_value[10]
     * }
     */
    public static void point_cb_value(MemorySegment struct, long index0, byte fieldValue) {
        point_cb_value$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout point_cb_scaling$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("point_cb_scaling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t point_cb_scaling[10]
     * }
     */
    public static final SequenceLayout point_cb_scaling$layout() {
        return point_cb_scaling$LAYOUT;
    }

    private static final long point_cb_scaling$OFFSET = 51;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t point_cb_scaling[10]
     * }
     */
    public static final long point_cb_scaling$offset() {
        return point_cb_scaling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_scaling[10]
     * }
     */
    public static MemorySegment point_cb_scaling(MemorySegment struct) {
        return struct.asSlice(point_cb_scaling$OFFSET, point_cb_scaling$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_scaling[10]
     * }
     */
    public static void point_cb_scaling(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, point_cb_scaling$OFFSET, point_cb_scaling$LAYOUT.byteSize());
    }

    private static long[] point_cb_scaling$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t point_cb_scaling[10]
     * }
     */
    public static long[] point_cb_scaling$dimensions() {
        return point_cb_scaling$DIMS;
    }
    private static final VarHandle point_cb_scaling$ELEM_HANDLE = point_cb_scaling$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_scaling[10]
     * }
     */
    public static byte point_cb_scaling(MemorySegment struct, long index0) {
        return (byte)point_cb_scaling$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t point_cb_scaling[10]
     * }
     */
    public static void point_cb_scaling(MemorySegment struct, long index0, byte fieldValue) {
        point_cb_scaling$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte num_cr_points$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_cr_points"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_cr_points
     * }
     */
    public static final OfByte num_cr_points$layout() {
        return num_cr_points$LAYOUT;
    }

    private static final long num_cr_points$OFFSET = 61;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_cr_points
     * }
     */
    public static final long num_cr_points$offset() {
        return num_cr_points$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_cr_points
     * }
     */
    public static byte num_cr_points(MemorySegment struct) {
        return struct.get(num_cr_points$LAYOUT, num_cr_points$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_cr_points
     * }
     */
    public static void num_cr_points(MemorySegment struct, byte fieldValue) {
        struct.set(num_cr_points$LAYOUT, num_cr_points$OFFSET, fieldValue);
    }

    private static final SequenceLayout point_cr_value$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("point_cr_value"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t point_cr_value[10]
     * }
     */
    public static final SequenceLayout point_cr_value$layout() {
        return point_cr_value$LAYOUT;
    }

    private static final long point_cr_value$OFFSET = 62;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t point_cr_value[10]
     * }
     */
    public static final long point_cr_value$offset() {
        return point_cr_value$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_value[10]
     * }
     */
    public static MemorySegment point_cr_value(MemorySegment struct) {
        return struct.asSlice(point_cr_value$OFFSET, point_cr_value$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_value[10]
     * }
     */
    public static void point_cr_value(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, point_cr_value$OFFSET, point_cr_value$LAYOUT.byteSize());
    }

    private static long[] point_cr_value$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t point_cr_value[10]
     * }
     */
    public static long[] point_cr_value$dimensions() {
        return point_cr_value$DIMS;
    }
    private static final VarHandle point_cr_value$ELEM_HANDLE = point_cr_value$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_value[10]
     * }
     */
    public static byte point_cr_value(MemorySegment struct, long index0) {
        return (byte)point_cr_value$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_value[10]
     * }
     */
    public static void point_cr_value(MemorySegment struct, long index0, byte fieldValue) {
        point_cr_value$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout point_cr_scaling$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("point_cr_scaling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t point_cr_scaling[10]
     * }
     */
    public static final SequenceLayout point_cr_scaling$layout() {
        return point_cr_scaling$LAYOUT;
    }

    private static final long point_cr_scaling$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t point_cr_scaling[10]
     * }
     */
    public static final long point_cr_scaling$offset() {
        return point_cr_scaling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_scaling[10]
     * }
     */
    public static MemorySegment point_cr_scaling(MemorySegment struct) {
        return struct.asSlice(point_cr_scaling$OFFSET, point_cr_scaling$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_scaling[10]
     * }
     */
    public static void point_cr_scaling(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, point_cr_scaling$OFFSET, point_cr_scaling$LAYOUT.byteSize());
    }

    private static long[] point_cr_scaling$DIMS = { 10 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t point_cr_scaling[10]
     * }
     */
    public static long[] point_cr_scaling$dimensions() {
        return point_cr_scaling$DIMS;
    }
    private static final VarHandle point_cr_scaling$ELEM_HANDLE = point_cr_scaling$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_scaling[10]
     * }
     */
    public static byte point_cr_scaling(MemorySegment struct, long index0) {
        return (byte)point_cr_scaling$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t point_cr_scaling[10]
     * }
     */
    public static void point_cr_scaling(MemorySegment struct, long index0, byte fieldValue) {
        point_cr_scaling$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout ar_coeffs_y_plus_128$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ar_coeffs_y_plus_128"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_y_plus_128[24]
     * }
     */
    public static final SequenceLayout ar_coeffs_y_plus_128$layout() {
        return ar_coeffs_y_plus_128$LAYOUT;
    }

    private static final long ar_coeffs_y_plus_128$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_y_plus_128[24]
     * }
     */
    public static final long ar_coeffs_y_plus_128$offset() {
        return ar_coeffs_y_plus_128$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_y_plus_128[24]
     * }
     */
    public static MemorySegment ar_coeffs_y_plus_128(MemorySegment struct) {
        return struct.asSlice(ar_coeffs_y_plus_128$OFFSET, ar_coeffs_y_plus_128$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_y_plus_128[24]
     * }
     */
    public static void ar_coeffs_y_plus_128(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ar_coeffs_y_plus_128$OFFSET, ar_coeffs_y_plus_128$LAYOUT.byteSize());
    }

    private static long[] ar_coeffs_y_plus_128$DIMS = { 24 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_y_plus_128[24]
     * }
     */
    public static long[] ar_coeffs_y_plus_128$dimensions() {
        return ar_coeffs_y_plus_128$DIMS;
    }
    private static final VarHandle ar_coeffs_y_plus_128$ELEM_HANDLE = ar_coeffs_y_plus_128$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_y_plus_128[24]
     * }
     */
    public static byte ar_coeffs_y_plus_128(MemorySegment struct, long index0) {
        return (byte)ar_coeffs_y_plus_128$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_y_plus_128[24]
     * }
     */
    public static void ar_coeffs_y_plus_128(MemorySegment struct, long index0, byte fieldValue) {
        ar_coeffs_y_plus_128$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout ar_coeffs_cb_plus_128$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ar_coeffs_cb_plus_128"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cb_plus_128[25]
     * }
     */
    public static final SequenceLayout ar_coeffs_cb_plus_128$layout() {
        return ar_coeffs_cb_plus_128$LAYOUT;
    }

    private static final long ar_coeffs_cb_plus_128$OFFSET = 106;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cb_plus_128[25]
     * }
     */
    public static final long ar_coeffs_cb_plus_128$offset() {
        return ar_coeffs_cb_plus_128$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cb_plus_128[25]
     * }
     */
    public static MemorySegment ar_coeffs_cb_plus_128(MemorySegment struct) {
        return struct.asSlice(ar_coeffs_cb_plus_128$OFFSET, ar_coeffs_cb_plus_128$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cb_plus_128[25]
     * }
     */
    public static void ar_coeffs_cb_plus_128(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ar_coeffs_cb_plus_128$OFFSET, ar_coeffs_cb_plus_128$LAYOUT.byteSize());
    }

    private static long[] ar_coeffs_cb_plus_128$DIMS = { 25 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cb_plus_128[25]
     * }
     */
    public static long[] ar_coeffs_cb_plus_128$dimensions() {
        return ar_coeffs_cb_plus_128$DIMS;
    }
    private static final VarHandle ar_coeffs_cb_plus_128$ELEM_HANDLE = ar_coeffs_cb_plus_128$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cb_plus_128[25]
     * }
     */
    public static byte ar_coeffs_cb_plus_128(MemorySegment struct, long index0) {
        return (byte)ar_coeffs_cb_plus_128$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cb_plus_128[25]
     * }
     */
    public static void ar_coeffs_cb_plus_128(MemorySegment struct, long index0, byte fieldValue) {
        ar_coeffs_cb_plus_128$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout ar_coeffs_cr_plus_128$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ar_coeffs_cr_plus_128"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cr_plus_128[25]
     * }
     */
    public static final SequenceLayout ar_coeffs_cr_plus_128$layout() {
        return ar_coeffs_cr_plus_128$LAYOUT;
    }

    private static final long ar_coeffs_cr_plus_128$OFFSET = 131;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cr_plus_128[25]
     * }
     */
    public static final long ar_coeffs_cr_plus_128$offset() {
        return ar_coeffs_cr_plus_128$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cr_plus_128[25]
     * }
     */
    public static MemorySegment ar_coeffs_cr_plus_128(MemorySegment struct) {
        return struct.asSlice(ar_coeffs_cr_plus_128$OFFSET, ar_coeffs_cr_plus_128$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cr_plus_128[25]
     * }
     */
    public static void ar_coeffs_cr_plus_128(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ar_coeffs_cr_plus_128$OFFSET, ar_coeffs_cr_plus_128$LAYOUT.byteSize());
    }

    private static long[] ar_coeffs_cr_plus_128$DIMS = { 25 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cr_plus_128[25]
     * }
     */
    public static long[] ar_coeffs_cr_plus_128$dimensions() {
        return ar_coeffs_cr_plus_128$DIMS;
    }
    private static final VarHandle ar_coeffs_cr_plus_128$ELEM_HANDLE = ar_coeffs_cr_plus_128$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cr_plus_128[25]
     * }
     */
    public static byte ar_coeffs_cr_plus_128(MemorySegment struct, long index0) {
        return (byte)ar_coeffs_cr_plus_128$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t ar_coeffs_cr_plus_128[25]
     * }
     */
    public static void ar_coeffs_cr_plus_128(MemorySegment struct, long index0, byte fieldValue) {
        ar_coeffs_cr_plus_128$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte cb_mult$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cb_mult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cb_mult
     * }
     */
    public static final OfByte cb_mult$layout() {
        return cb_mult$LAYOUT;
    }

    private static final long cb_mult$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cb_mult
     * }
     */
    public static final long cb_mult$offset() {
        return cb_mult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cb_mult
     * }
     */
    public static byte cb_mult(MemorySegment struct) {
        return struct.get(cb_mult$LAYOUT, cb_mult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cb_mult
     * }
     */
    public static void cb_mult(MemorySegment struct, byte fieldValue) {
        struct.set(cb_mult$LAYOUT, cb_mult$OFFSET, fieldValue);
    }

    private static final OfByte cb_luma_mult$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cb_luma_mult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cb_luma_mult
     * }
     */
    public static final OfByte cb_luma_mult$layout() {
        return cb_luma_mult$LAYOUT;
    }

    private static final long cb_luma_mult$OFFSET = 157;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cb_luma_mult
     * }
     */
    public static final long cb_luma_mult$offset() {
        return cb_luma_mult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cb_luma_mult
     * }
     */
    public static byte cb_luma_mult(MemorySegment struct) {
        return struct.get(cb_luma_mult$LAYOUT, cb_luma_mult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cb_luma_mult
     * }
     */
    public static void cb_luma_mult(MemorySegment struct, byte fieldValue) {
        struct.set(cb_luma_mult$LAYOUT, cb_luma_mult$OFFSET, fieldValue);
    }

    private static final OfShort cb_offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cb_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t cb_offset
     * }
     */
    public static final OfShort cb_offset$layout() {
        return cb_offset$LAYOUT;
    }

    private static final long cb_offset$OFFSET = 158;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t cb_offset
     * }
     */
    public static final long cb_offset$offset() {
        return cb_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t cb_offset
     * }
     */
    public static short cb_offset(MemorySegment struct) {
        return struct.get(cb_offset$LAYOUT, cb_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t cb_offset
     * }
     */
    public static void cb_offset(MemorySegment struct, short fieldValue) {
        struct.set(cb_offset$LAYOUT, cb_offset$OFFSET, fieldValue);
    }

    private static final OfByte cr_mult$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cr_mult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cr_mult
     * }
     */
    public static final OfByte cr_mult$layout() {
        return cr_mult$LAYOUT;
    }

    private static final long cr_mult$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cr_mult
     * }
     */
    public static final long cr_mult$offset() {
        return cr_mult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cr_mult
     * }
     */
    public static byte cr_mult(MemorySegment struct) {
        return struct.get(cr_mult$LAYOUT, cr_mult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cr_mult
     * }
     */
    public static void cr_mult(MemorySegment struct, byte fieldValue) {
        struct.set(cr_mult$LAYOUT, cr_mult$OFFSET, fieldValue);
    }

    private static final OfByte cr_luma_mult$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cr_luma_mult"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cr_luma_mult
     * }
     */
    public static final OfByte cr_luma_mult$layout() {
        return cr_luma_mult$LAYOUT;
    }

    private static final long cr_luma_mult$OFFSET = 161;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cr_luma_mult
     * }
     */
    public static final long cr_luma_mult$offset() {
        return cr_luma_mult$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cr_luma_mult
     * }
     */
    public static byte cr_luma_mult(MemorySegment struct) {
        return struct.get(cr_luma_mult$LAYOUT, cr_luma_mult$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cr_luma_mult
     * }
     */
    public static void cr_luma_mult(MemorySegment struct, byte fieldValue) {
        struct.set(cr_luma_mult$LAYOUT, cr_luma_mult$OFFSET, fieldValue);
    }

    private static final OfShort cr_offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("cr_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t cr_offset
     * }
     */
    public static final OfShort cr_offset$layout() {
        return cr_offset$LAYOUT;
    }

    private static final long cr_offset$OFFSET = 162;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t cr_offset
     * }
     */
    public static final long cr_offset$offset() {
        return cr_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t cr_offset
     * }
     */
    public static short cr_offset(MemorySegment struct) {
        return struct.get(cr_offset$LAYOUT, cr_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t cr_offset
     * }
     */
    public static void cr_offset(MemorySegment struct, short fieldValue) {
        struct.set(cr_offset$LAYOUT, cr_offset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

