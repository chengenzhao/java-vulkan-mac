// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1GlobalMotion {
 *     uint8_t GmType[8];
 *     int32_t gm_params[8][6];
 * }
 * }
 */
public class StdVideoAV1GlobalMotion {

    StdVideoAV1GlobalMotion() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, vulkan_h.C_CHAR).withName("GmType"),
        MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(6, vulkan_h.C_INT)).withName("gm_params")
    ).withName("StdVideoAV1GlobalMotion");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout GmType$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("GmType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t GmType[8]
     * }
     */
    public static final SequenceLayout GmType$layout() {
        return GmType$LAYOUT;
    }

    private static final long GmType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t GmType[8]
     * }
     */
    public static final long GmType$offset() {
        return GmType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t GmType[8]
     * }
     */
    public static MemorySegment GmType(MemorySegment struct) {
        return struct.asSlice(GmType$OFFSET, GmType$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t GmType[8]
     * }
     */
    public static void GmType(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, GmType$OFFSET, GmType$LAYOUT.byteSize());
    }

    private static long[] GmType$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t GmType[8]
     * }
     */
    public static long[] GmType$dimensions() {
        return GmType$DIMS;
    }
    private static final VarHandle GmType$ELEM_HANDLE = GmType$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t GmType[8]
     * }
     */
    public static byte GmType(MemorySegment struct, long index0) {
        return (byte)GmType$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t GmType[8]
     * }
     */
    public static void GmType(MemorySegment struct, long index0, byte fieldValue) {
        GmType$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout gm_params$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("gm_params"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t gm_params[8][6]
     * }
     */
    public static final SequenceLayout gm_params$layout() {
        return gm_params$LAYOUT;
    }

    private static final long gm_params$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t gm_params[8][6]
     * }
     */
    public static final long gm_params$offset() {
        return gm_params$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t gm_params[8][6]
     * }
     */
    public static MemorySegment gm_params(MemorySegment struct) {
        return struct.asSlice(gm_params$OFFSET, gm_params$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t gm_params[8][6]
     * }
     */
    public static void gm_params(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, gm_params$OFFSET, gm_params$LAYOUT.byteSize());
    }

    private static long[] gm_params$DIMS = { 8, 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int32_t gm_params[8][6]
     * }
     */
    public static long[] gm_params$dimensions() {
        return gm_params$DIMS;
    }
    private static final VarHandle gm_params$ELEM_HANDLE = gm_params$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int32_t gm_params[8][6]
     * }
     */
    public static int gm_params(MemorySegment struct, long index0, long index1) {
        return (int)gm_params$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int32_t gm_params[8][6]
     * }
     */
    public static void gm_params(MemorySegment struct, long index0, long index1, int fieldValue) {
        gm_params$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

