// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1LoopRestoration {
 *     StdVideoAV1FrameRestorationType FrameRestorationType[3];
 *     uint16_t LoopRestorationSize[3];
 * }
 * }
 */
public class StdVideoAV1LoopRestoration {

    StdVideoAV1LoopRestoration() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("FrameRestorationType"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_SHORT).withName("LoopRestorationSize"),
        MemoryLayout.paddingLayout(2)
    ).withName("StdVideoAV1LoopRestoration");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout FrameRestorationType$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FrameRestorationType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameRestorationType FrameRestorationType[3]
     * }
     */
    public static final SequenceLayout FrameRestorationType$layout() {
        return FrameRestorationType$LAYOUT;
    }

    private static final long FrameRestorationType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameRestorationType FrameRestorationType[3]
     * }
     */
    public static final long FrameRestorationType$offset() {
        return FrameRestorationType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameRestorationType FrameRestorationType[3]
     * }
     */
    public static MemorySegment FrameRestorationType(MemorySegment struct) {
        return struct.asSlice(FrameRestorationType$OFFSET, FrameRestorationType$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameRestorationType FrameRestorationType[3]
     * }
     */
    public static void FrameRestorationType(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FrameRestorationType$OFFSET, FrameRestorationType$LAYOUT.byteSize());
    }

    private static long[] FrameRestorationType$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * StdVideoAV1FrameRestorationType FrameRestorationType[3]
     * }
     */
    public static long[] FrameRestorationType$dimensions() {
        return FrameRestorationType$DIMS;
    }
    private static final VarHandle FrameRestorationType$ELEM_HANDLE = FrameRestorationType$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameRestorationType FrameRestorationType[3]
     * }
     */
    public static int FrameRestorationType(MemorySegment struct, long index0) {
        return (int)FrameRestorationType$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameRestorationType FrameRestorationType[3]
     * }
     */
    public static void FrameRestorationType(MemorySegment struct, long index0, int fieldValue) {
        FrameRestorationType$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout LoopRestorationSize$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("LoopRestorationSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t LoopRestorationSize[3]
     * }
     */
    public static final SequenceLayout LoopRestorationSize$layout() {
        return LoopRestorationSize$LAYOUT;
    }

    private static final long LoopRestorationSize$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t LoopRestorationSize[3]
     * }
     */
    public static final long LoopRestorationSize$offset() {
        return LoopRestorationSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t LoopRestorationSize[3]
     * }
     */
    public static MemorySegment LoopRestorationSize(MemorySegment struct) {
        return struct.asSlice(LoopRestorationSize$OFFSET, LoopRestorationSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t LoopRestorationSize[3]
     * }
     */
    public static void LoopRestorationSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, LoopRestorationSize$OFFSET, LoopRestorationSize$LAYOUT.byteSize());
    }

    private static long[] LoopRestorationSize$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint16_t LoopRestorationSize[3]
     * }
     */
    public static long[] LoopRestorationSize$dimensions() {
        return LoopRestorationSize$DIMS;
    }
    private static final VarHandle LoopRestorationSize$ELEM_HANDLE = LoopRestorationSize$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint16_t LoopRestorationSize[3]
     * }
     */
    public static short LoopRestorationSize(MemorySegment struct, long index0) {
        return (short)LoopRestorationSize$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint16_t LoopRestorationSize[3]
     * }
     */
    public static void LoopRestorationSize(MemorySegment struct, long index0, short fieldValue) {
        LoopRestorationSize$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

