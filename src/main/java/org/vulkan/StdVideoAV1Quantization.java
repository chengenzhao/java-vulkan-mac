// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1Quantization {
 *     StdVideoAV1QuantizationFlags flags;
 *     uint8_t base_q_idx;
 *     int8_t DeltaQYDc;
 *     int8_t DeltaQUDc;
 *     int8_t DeltaQUAc;
 *     int8_t DeltaQVDc;
 *     int8_t DeltaQVAc;
 *     uint8_t qm_y;
 *     uint8_t qm_u;
 *     uint8_t qm_v;
 * }
 * }
 */
public class StdVideoAV1Quantization {

    StdVideoAV1Quantization() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoAV1QuantizationFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("base_q_idx"),
        vulkan_h.C_CHAR.withName("DeltaQYDc"),
        vulkan_h.C_CHAR.withName("DeltaQUDc"),
        vulkan_h.C_CHAR.withName("DeltaQUAc"),
        vulkan_h.C_CHAR.withName("DeltaQVDc"),
        vulkan_h.C_CHAR.withName("DeltaQVAc"),
        vulkan_h.C_CHAR.withName("qm_y"),
        vulkan_h.C_CHAR.withName("qm_u"),
        vulkan_h.C_CHAR.withName("qm_v"),
        MemoryLayout.paddingLayout(3)
    ).withName("StdVideoAV1Quantization");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1QuantizationFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1QuantizationFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1QuantizationFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1QuantizationFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte base_q_idx$LAYOUT = (OfByte)$LAYOUT.select(groupElement("base_q_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t base_q_idx
     * }
     */
    public static final OfByte base_q_idx$layout() {
        return base_q_idx$LAYOUT;
    }

    private static final long base_q_idx$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t base_q_idx
     * }
     */
    public static final long base_q_idx$offset() {
        return base_q_idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t base_q_idx
     * }
     */
    public static byte base_q_idx(MemorySegment struct) {
        return struct.get(base_q_idx$LAYOUT, base_q_idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t base_q_idx
     * }
     */
    public static void base_q_idx(MemorySegment struct, byte fieldValue) {
        struct.set(base_q_idx$LAYOUT, base_q_idx$OFFSET, fieldValue);
    }

    private static final OfByte DeltaQYDc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DeltaQYDc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t DeltaQYDc
     * }
     */
    public static final OfByte DeltaQYDc$layout() {
        return DeltaQYDc$LAYOUT;
    }

    private static final long DeltaQYDc$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t DeltaQYDc
     * }
     */
    public static final long DeltaQYDc$offset() {
        return DeltaQYDc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t DeltaQYDc
     * }
     */
    public static byte DeltaQYDc(MemorySegment struct) {
        return struct.get(DeltaQYDc$LAYOUT, DeltaQYDc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t DeltaQYDc
     * }
     */
    public static void DeltaQYDc(MemorySegment struct, byte fieldValue) {
        struct.set(DeltaQYDc$LAYOUT, DeltaQYDc$OFFSET, fieldValue);
    }

    private static final OfByte DeltaQUDc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DeltaQUDc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t DeltaQUDc
     * }
     */
    public static final OfByte DeltaQUDc$layout() {
        return DeltaQUDc$LAYOUT;
    }

    private static final long DeltaQUDc$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t DeltaQUDc
     * }
     */
    public static final long DeltaQUDc$offset() {
        return DeltaQUDc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t DeltaQUDc
     * }
     */
    public static byte DeltaQUDc(MemorySegment struct) {
        return struct.get(DeltaQUDc$LAYOUT, DeltaQUDc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t DeltaQUDc
     * }
     */
    public static void DeltaQUDc(MemorySegment struct, byte fieldValue) {
        struct.set(DeltaQUDc$LAYOUT, DeltaQUDc$OFFSET, fieldValue);
    }

    private static final OfByte DeltaQUAc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DeltaQUAc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t DeltaQUAc
     * }
     */
    public static final OfByte DeltaQUAc$layout() {
        return DeltaQUAc$LAYOUT;
    }

    private static final long DeltaQUAc$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t DeltaQUAc
     * }
     */
    public static final long DeltaQUAc$offset() {
        return DeltaQUAc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t DeltaQUAc
     * }
     */
    public static byte DeltaQUAc(MemorySegment struct) {
        return struct.get(DeltaQUAc$LAYOUT, DeltaQUAc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t DeltaQUAc
     * }
     */
    public static void DeltaQUAc(MemorySegment struct, byte fieldValue) {
        struct.set(DeltaQUAc$LAYOUT, DeltaQUAc$OFFSET, fieldValue);
    }

    private static final OfByte DeltaQVDc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DeltaQVDc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t DeltaQVDc
     * }
     */
    public static final OfByte DeltaQVDc$layout() {
        return DeltaQVDc$LAYOUT;
    }

    private static final long DeltaQVDc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t DeltaQVDc
     * }
     */
    public static final long DeltaQVDc$offset() {
        return DeltaQVDc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t DeltaQVDc
     * }
     */
    public static byte DeltaQVDc(MemorySegment struct) {
        return struct.get(DeltaQVDc$LAYOUT, DeltaQVDc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t DeltaQVDc
     * }
     */
    public static void DeltaQVDc(MemorySegment struct, byte fieldValue) {
        struct.set(DeltaQVDc$LAYOUT, DeltaQVDc$OFFSET, fieldValue);
    }

    private static final OfByte DeltaQVAc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("DeltaQVAc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t DeltaQVAc
     * }
     */
    public static final OfByte DeltaQVAc$layout() {
        return DeltaQVAc$LAYOUT;
    }

    private static final long DeltaQVAc$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t DeltaQVAc
     * }
     */
    public static final long DeltaQVAc$offset() {
        return DeltaQVAc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t DeltaQVAc
     * }
     */
    public static byte DeltaQVAc(MemorySegment struct) {
        return struct.get(DeltaQVAc$LAYOUT, DeltaQVAc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t DeltaQVAc
     * }
     */
    public static void DeltaQVAc(MemorySegment struct, byte fieldValue) {
        struct.set(DeltaQVAc$LAYOUT, DeltaQVAc$OFFSET, fieldValue);
    }

    private static final OfByte qm_y$LAYOUT = (OfByte)$LAYOUT.select(groupElement("qm_y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t qm_y
     * }
     */
    public static final OfByte qm_y$layout() {
        return qm_y$LAYOUT;
    }

    private static final long qm_y$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t qm_y
     * }
     */
    public static final long qm_y$offset() {
        return qm_y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t qm_y
     * }
     */
    public static byte qm_y(MemorySegment struct) {
        return struct.get(qm_y$LAYOUT, qm_y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t qm_y
     * }
     */
    public static void qm_y(MemorySegment struct, byte fieldValue) {
        struct.set(qm_y$LAYOUT, qm_y$OFFSET, fieldValue);
    }

    private static final OfByte qm_u$LAYOUT = (OfByte)$LAYOUT.select(groupElement("qm_u"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t qm_u
     * }
     */
    public static final OfByte qm_u$layout() {
        return qm_u$LAYOUT;
    }

    private static final long qm_u$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t qm_u
     * }
     */
    public static final long qm_u$offset() {
        return qm_u$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t qm_u
     * }
     */
    public static byte qm_u(MemorySegment struct) {
        return struct.get(qm_u$LAYOUT, qm_u$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t qm_u
     * }
     */
    public static void qm_u(MemorySegment struct, byte fieldValue) {
        struct.set(qm_u$LAYOUT, qm_u$OFFSET, fieldValue);
    }

    private static final OfByte qm_v$LAYOUT = (OfByte)$LAYOUT.select(groupElement("qm_v"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t qm_v
     * }
     */
    public static final OfByte qm_v$layout() {
        return qm_v$LAYOUT;
    }

    private static final long qm_v$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t qm_v
     * }
     */
    public static final long qm_v$offset() {
        return qm_v$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t qm_v
     * }
     */
    public static byte qm_v(MemorySegment struct) {
        return struct.get(qm_v$LAYOUT, qm_v$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t qm_v
     * }
     */
    public static void qm_v(MemorySegment struct, byte fieldValue) {
        struct.set(qm_v$LAYOUT, qm_v$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

