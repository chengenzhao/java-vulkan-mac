// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1Segmentation {
 *     uint8_t FeatureEnabled[8];
 *     int16_t FeatureData[8][8];
 * }
 * }
 */
public class StdVideoAV1Segmentation {

    StdVideoAV1Segmentation() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(8, vulkan_h.C_CHAR).withName("FeatureEnabled"),
        MemoryLayout.sequenceLayout(8, MemoryLayout.sequenceLayout(8, vulkan_h.C_SHORT)).withName("FeatureData")
    ).withName("StdVideoAV1Segmentation");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout FeatureEnabled$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FeatureEnabled"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t FeatureEnabled[8]
     * }
     */
    public static final SequenceLayout FeatureEnabled$layout() {
        return FeatureEnabled$LAYOUT;
    }

    private static final long FeatureEnabled$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t FeatureEnabled[8]
     * }
     */
    public static final long FeatureEnabled$offset() {
        return FeatureEnabled$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t FeatureEnabled[8]
     * }
     */
    public static MemorySegment FeatureEnabled(MemorySegment struct) {
        return struct.asSlice(FeatureEnabled$OFFSET, FeatureEnabled$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t FeatureEnabled[8]
     * }
     */
    public static void FeatureEnabled(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FeatureEnabled$OFFSET, FeatureEnabled$LAYOUT.byteSize());
    }

    private static long[] FeatureEnabled$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t FeatureEnabled[8]
     * }
     */
    public static long[] FeatureEnabled$dimensions() {
        return FeatureEnabled$DIMS;
    }
    private static final VarHandle FeatureEnabled$ELEM_HANDLE = FeatureEnabled$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t FeatureEnabled[8]
     * }
     */
    public static byte FeatureEnabled(MemorySegment struct, long index0) {
        return (byte)FeatureEnabled$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t FeatureEnabled[8]
     * }
     */
    public static void FeatureEnabled(MemorySegment struct, long index0, byte fieldValue) {
        FeatureEnabled$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout FeatureData$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("FeatureData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int16_t FeatureData[8][8]
     * }
     */
    public static final SequenceLayout FeatureData$layout() {
        return FeatureData$LAYOUT;
    }

    private static final long FeatureData$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int16_t FeatureData[8][8]
     * }
     */
    public static final long FeatureData$offset() {
        return FeatureData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int16_t FeatureData[8][8]
     * }
     */
    public static MemorySegment FeatureData(MemorySegment struct) {
        return struct.asSlice(FeatureData$OFFSET, FeatureData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int16_t FeatureData[8][8]
     * }
     */
    public static void FeatureData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, FeatureData$OFFSET, FeatureData$LAYOUT.byteSize());
    }

    private static long[] FeatureData$DIMS = { 8, 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int16_t FeatureData[8][8]
     * }
     */
    public static long[] FeatureData$dimensions() {
        return FeatureData$DIMS;
    }
    private static final VarHandle FeatureData$ELEM_HANDLE = FeatureData$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int16_t FeatureData[8][8]
     * }
     */
    public static short FeatureData(MemorySegment struct, long index0, long index1) {
        return (short)FeatureData$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int16_t FeatureData[8][8]
     * }
     */
    public static void FeatureData(MemorySegment struct, long index0, long index1, short fieldValue) {
        FeatureData$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

