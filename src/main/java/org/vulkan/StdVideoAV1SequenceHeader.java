// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1SequenceHeader {
 *     StdVideoAV1SequenceHeaderFlags flags;
 *     StdVideoAV1Profile seq_profile;
 *     uint8_t frame_width_bits_minus_1;
 *     uint8_t frame_height_bits_minus_1;
 *     uint16_t max_frame_width_minus_1;
 *     uint16_t max_frame_height_minus_1;
 *     uint8_t delta_frame_id_length_minus_2;
 *     uint8_t additional_frame_id_length_minus_1;
 *     uint8_t order_hint_bits_minus_1;
 *     uint8_t seq_force_integer_mv;
 *     uint8_t seq_force_screen_content_tools;
 *     uint8_t reserved1[5];
 *     const StdVideoAV1ColorConfig *pColorConfig;
 *     const StdVideoAV1TimingInfo *pTimingInfo;
 * }
 * }
 */
public class StdVideoAV1SequenceHeader {

    StdVideoAV1SequenceHeader() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoAV1SequenceHeaderFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("seq_profile"),
        vulkan_h.C_CHAR.withName("frame_width_bits_minus_1"),
        vulkan_h.C_CHAR.withName("frame_height_bits_minus_1"),
        vulkan_h.C_SHORT.withName("max_frame_width_minus_1"),
        vulkan_h.C_SHORT.withName("max_frame_height_minus_1"),
        vulkan_h.C_CHAR.withName("delta_frame_id_length_minus_2"),
        vulkan_h.C_CHAR.withName("additional_frame_id_length_minus_1"),
        vulkan_h.C_CHAR.withName("order_hint_bits_minus_1"),
        vulkan_h.C_CHAR.withName("seq_force_integer_mv"),
        vulkan_h.C_CHAR.withName("seq_force_screen_content_tools"),
        MemoryLayout.sequenceLayout(5, vulkan_h.C_CHAR).withName("reserved1"),
        vulkan_h.C_POINTER.withName("pColorConfig"),
        vulkan_h.C_POINTER.withName("pTimingInfo")
    ).withName("StdVideoAV1SequenceHeader");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1SequenceHeaderFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1SequenceHeaderFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1SequenceHeaderFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1SequenceHeaderFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt seq_profile$LAYOUT = (OfInt)$LAYOUT.select(groupElement("seq_profile"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1Profile seq_profile
     * }
     */
    public static final OfInt seq_profile$layout() {
        return seq_profile$LAYOUT;
    }

    private static final long seq_profile$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1Profile seq_profile
     * }
     */
    public static final long seq_profile$offset() {
        return seq_profile$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1Profile seq_profile
     * }
     */
    public static int seq_profile(MemorySegment struct) {
        return struct.get(seq_profile$LAYOUT, seq_profile$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1Profile seq_profile
     * }
     */
    public static void seq_profile(MemorySegment struct, int fieldValue) {
        struct.set(seq_profile$LAYOUT, seq_profile$OFFSET, fieldValue);
    }

    private static final OfByte frame_width_bits_minus_1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("frame_width_bits_minus_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t frame_width_bits_minus_1
     * }
     */
    public static final OfByte frame_width_bits_minus_1$layout() {
        return frame_width_bits_minus_1$LAYOUT;
    }

    private static final long frame_width_bits_minus_1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t frame_width_bits_minus_1
     * }
     */
    public static final long frame_width_bits_minus_1$offset() {
        return frame_width_bits_minus_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t frame_width_bits_minus_1
     * }
     */
    public static byte frame_width_bits_minus_1(MemorySegment struct) {
        return struct.get(frame_width_bits_minus_1$LAYOUT, frame_width_bits_minus_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t frame_width_bits_minus_1
     * }
     */
    public static void frame_width_bits_minus_1(MemorySegment struct, byte fieldValue) {
        struct.set(frame_width_bits_minus_1$LAYOUT, frame_width_bits_minus_1$OFFSET, fieldValue);
    }

    private static final OfByte frame_height_bits_minus_1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("frame_height_bits_minus_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t frame_height_bits_minus_1
     * }
     */
    public static final OfByte frame_height_bits_minus_1$layout() {
        return frame_height_bits_minus_1$LAYOUT;
    }

    private static final long frame_height_bits_minus_1$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t frame_height_bits_minus_1
     * }
     */
    public static final long frame_height_bits_minus_1$offset() {
        return frame_height_bits_minus_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t frame_height_bits_minus_1
     * }
     */
    public static byte frame_height_bits_minus_1(MemorySegment struct) {
        return struct.get(frame_height_bits_minus_1$LAYOUT, frame_height_bits_minus_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t frame_height_bits_minus_1
     * }
     */
    public static void frame_height_bits_minus_1(MemorySegment struct, byte fieldValue) {
        struct.set(frame_height_bits_minus_1$LAYOUT, frame_height_bits_minus_1$OFFSET, fieldValue);
    }

    private static final OfShort max_frame_width_minus_1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("max_frame_width_minus_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t max_frame_width_minus_1
     * }
     */
    public static final OfShort max_frame_width_minus_1$layout() {
        return max_frame_width_minus_1$LAYOUT;
    }

    private static final long max_frame_width_minus_1$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t max_frame_width_minus_1
     * }
     */
    public static final long max_frame_width_minus_1$offset() {
        return max_frame_width_minus_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t max_frame_width_minus_1
     * }
     */
    public static short max_frame_width_minus_1(MemorySegment struct) {
        return struct.get(max_frame_width_minus_1$LAYOUT, max_frame_width_minus_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t max_frame_width_minus_1
     * }
     */
    public static void max_frame_width_minus_1(MemorySegment struct, short fieldValue) {
        struct.set(max_frame_width_minus_1$LAYOUT, max_frame_width_minus_1$OFFSET, fieldValue);
    }

    private static final OfShort max_frame_height_minus_1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("max_frame_height_minus_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t max_frame_height_minus_1
     * }
     */
    public static final OfShort max_frame_height_minus_1$layout() {
        return max_frame_height_minus_1$LAYOUT;
    }

    private static final long max_frame_height_minus_1$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t max_frame_height_minus_1
     * }
     */
    public static final long max_frame_height_minus_1$offset() {
        return max_frame_height_minus_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t max_frame_height_minus_1
     * }
     */
    public static short max_frame_height_minus_1(MemorySegment struct) {
        return struct.get(max_frame_height_minus_1$LAYOUT, max_frame_height_minus_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t max_frame_height_minus_1
     * }
     */
    public static void max_frame_height_minus_1(MemorySegment struct, short fieldValue) {
        struct.set(max_frame_height_minus_1$LAYOUT, max_frame_height_minus_1$OFFSET, fieldValue);
    }

    private static final OfByte delta_frame_id_length_minus_2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("delta_frame_id_length_minus_2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t delta_frame_id_length_minus_2
     * }
     */
    public static final OfByte delta_frame_id_length_minus_2$layout() {
        return delta_frame_id_length_minus_2$LAYOUT;
    }

    private static final long delta_frame_id_length_minus_2$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t delta_frame_id_length_minus_2
     * }
     */
    public static final long delta_frame_id_length_minus_2$offset() {
        return delta_frame_id_length_minus_2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t delta_frame_id_length_minus_2
     * }
     */
    public static byte delta_frame_id_length_minus_2(MemorySegment struct) {
        return struct.get(delta_frame_id_length_minus_2$LAYOUT, delta_frame_id_length_minus_2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t delta_frame_id_length_minus_2
     * }
     */
    public static void delta_frame_id_length_minus_2(MemorySegment struct, byte fieldValue) {
        struct.set(delta_frame_id_length_minus_2$LAYOUT, delta_frame_id_length_minus_2$OFFSET, fieldValue);
    }

    private static final OfByte additional_frame_id_length_minus_1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("additional_frame_id_length_minus_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t additional_frame_id_length_minus_1
     * }
     */
    public static final OfByte additional_frame_id_length_minus_1$layout() {
        return additional_frame_id_length_minus_1$LAYOUT;
    }

    private static final long additional_frame_id_length_minus_1$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t additional_frame_id_length_minus_1
     * }
     */
    public static final long additional_frame_id_length_minus_1$offset() {
        return additional_frame_id_length_minus_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t additional_frame_id_length_minus_1
     * }
     */
    public static byte additional_frame_id_length_minus_1(MemorySegment struct) {
        return struct.get(additional_frame_id_length_minus_1$LAYOUT, additional_frame_id_length_minus_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t additional_frame_id_length_minus_1
     * }
     */
    public static void additional_frame_id_length_minus_1(MemorySegment struct, byte fieldValue) {
        struct.set(additional_frame_id_length_minus_1$LAYOUT, additional_frame_id_length_minus_1$OFFSET, fieldValue);
    }

    private static final OfByte order_hint_bits_minus_1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("order_hint_bits_minus_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t order_hint_bits_minus_1
     * }
     */
    public static final OfByte order_hint_bits_minus_1$layout() {
        return order_hint_bits_minus_1$LAYOUT;
    }

    private static final long order_hint_bits_minus_1$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t order_hint_bits_minus_1
     * }
     */
    public static final long order_hint_bits_minus_1$offset() {
        return order_hint_bits_minus_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t order_hint_bits_minus_1
     * }
     */
    public static byte order_hint_bits_minus_1(MemorySegment struct) {
        return struct.get(order_hint_bits_minus_1$LAYOUT, order_hint_bits_minus_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t order_hint_bits_minus_1
     * }
     */
    public static void order_hint_bits_minus_1(MemorySegment struct, byte fieldValue) {
        struct.set(order_hint_bits_minus_1$LAYOUT, order_hint_bits_minus_1$OFFSET, fieldValue);
    }

    private static final OfByte seq_force_integer_mv$LAYOUT = (OfByte)$LAYOUT.select(groupElement("seq_force_integer_mv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t seq_force_integer_mv
     * }
     */
    public static final OfByte seq_force_integer_mv$layout() {
        return seq_force_integer_mv$LAYOUT;
    }

    private static final long seq_force_integer_mv$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t seq_force_integer_mv
     * }
     */
    public static final long seq_force_integer_mv$offset() {
        return seq_force_integer_mv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t seq_force_integer_mv
     * }
     */
    public static byte seq_force_integer_mv(MemorySegment struct) {
        return struct.get(seq_force_integer_mv$LAYOUT, seq_force_integer_mv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t seq_force_integer_mv
     * }
     */
    public static void seq_force_integer_mv(MemorySegment struct, byte fieldValue) {
        struct.set(seq_force_integer_mv$LAYOUT, seq_force_integer_mv$OFFSET, fieldValue);
    }

    private static final OfByte seq_force_screen_content_tools$LAYOUT = (OfByte)$LAYOUT.select(groupElement("seq_force_screen_content_tools"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t seq_force_screen_content_tools
     * }
     */
    public static final OfByte seq_force_screen_content_tools$layout() {
        return seq_force_screen_content_tools$LAYOUT;
    }

    private static final long seq_force_screen_content_tools$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t seq_force_screen_content_tools
     * }
     */
    public static final long seq_force_screen_content_tools$offset() {
        return seq_force_screen_content_tools$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t seq_force_screen_content_tools
     * }
     */
    public static byte seq_force_screen_content_tools(MemorySegment struct) {
        return struct.get(seq_force_screen_content_tools$LAYOUT, seq_force_screen_content_tools$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t seq_force_screen_content_tools
     * }
     */
    public static void seq_force_screen_content_tools(MemorySegment struct, byte fieldValue) {
        struct.set(seq_force_screen_content_tools$LAYOUT, seq_force_screen_content_tools$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1[5]
     * }
     */
    public static final SequenceLayout reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1[5]
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[5]
     * }
     */
    public static MemorySegment reserved1(MemorySegment struct) {
        return struct.asSlice(reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[5]
     * }
     */
    public static void reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    private static long[] reserved1$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t reserved1[5]
     * }
     */
    public static long[] reserved1$dimensions() {
        return reserved1$DIMS;
    }
    private static final VarHandle reserved1$ELEM_HANDLE = reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[5]
     * }
     */
    public static byte reserved1(MemorySegment struct, long index0) {
        return (byte)reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[5]
     * }
     */
    public static void reserved1(MemorySegment struct, long index0, byte fieldValue) {
        reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout pColorConfig$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pColorConfig"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1ColorConfig *pColorConfig
     * }
     */
    public static final AddressLayout pColorConfig$layout() {
        return pColorConfig$LAYOUT;
    }

    private static final long pColorConfig$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1ColorConfig *pColorConfig
     * }
     */
    public static final long pColorConfig$offset() {
        return pColorConfig$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1ColorConfig *pColorConfig
     * }
     */
    public static MemorySegment pColorConfig(MemorySegment struct) {
        return struct.get(pColorConfig$LAYOUT, pColorConfig$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1ColorConfig *pColorConfig
     * }
     */
    public static void pColorConfig(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pColorConfig$LAYOUT, pColorConfig$OFFSET, fieldValue);
    }

    private static final AddressLayout pTimingInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTimingInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1TimingInfo *pTimingInfo
     * }
     */
    public static final AddressLayout pTimingInfo$layout() {
        return pTimingInfo$LAYOUT;
    }

    private static final long pTimingInfo$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1TimingInfo *pTimingInfo
     * }
     */
    public static final long pTimingInfo$offset() {
        return pTimingInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1TimingInfo *pTimingInfo
     * }
     */
    public static MemorySegment pTimingInfo(MemorySegment struct) {
        return struct.get(pTimingInfo$LAYOUT, pTimingInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1TimingInfo *pTimingInfo
     * }
     */
    public static void pTimingInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTimingInfo$LAYOUT, pTimingInfo$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

