// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1SequenceHeaderFlags {
 *     uint32_t still_picture : 1;
 *     uint32_t reduced_still_picture_header : 1;
 *     uint32_t use_128x128_superblock : 1;
 *     uint32_t enable_filter_intra : 1;
 *     uint32_t enable_intra_edge_filter : 1;
 *     uint32_t enable_interintra_compound : 1;
 *     uint32_t enable_masked_compound : 1;
 *     uint32_t enable_warped_motion : 1;
 *     uint32_t enable_dual_filter : 1;
 *     uint32_t enable_order_hint : 1;
 *     uint32_t enable_jnt_comp : 1;
 *     uint32_t enable_ref_frame_mvs : 1;
 *     uint32_t frame_id_numbers_present_flag : 1;
 *     uint32_t enable_superres : 1;
 *     uint32_t enable_cdef : 1;
 *     uint32_t enable_restoration : 1;
 *     uint32_t film_grain_params_present : 1;
 *     uint32_t timing_info_present_flag : 1;
 *     uint32_t initial_display_delay_present_flag : 1;
 *     uint32_t reserved : 13;
 * }
 * }
 */
public class StdVideoAV1SequenceHeaderFlags {

    StdVideoAV1SequenceHeaderFlags() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.paddingLayout(4)
    ).withName("StdVideoAV1SequenceHeaderFlags");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

