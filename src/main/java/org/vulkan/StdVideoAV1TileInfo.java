// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoAV1TileInfo {
 *     StdVideoAV1TileInfoFlags flags;
 *     uint8_t TileCols;
 *     uint8_t TileRows;
 *     uint16_t context_update_tile_id;
 *     uint8_t tile_size_bytes_minus_1;
 *     uint8_t reserved1[7];
 *     const uint16_t *pMiColStarts;
 *     const uint16_t *pMiRowStarts;
 *     const uint16_t *pWidthInSbsMinus1;
 *     const uint16_t *pHeightInSbsMinus1;
 * }
 * }
 */
public class StdVideoAV1TileInfo {

    StdVideoAV1TileInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoAV1TileInfoFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("TileCols"),
        vulkan_h.C_CHAR.withName("TileRows"),
        vulkan_h.C_SHORT.withName("context_update_tile_id"),
        vulkan_h.C_CHAR.withName("tile_size_bytes_minus_1"),
        MemoryLayout.sequenceLayout(7, vulkan_h.C_CHAR).withName("reserved1"),
        vulkan_h.C_POINTER.withName("pMiColStarts"),
        vulkan_h.C_POINTER.withName("pMiRowStarts"),
        vulkan_h.C_POINTER.withName("pWidthInSbsMinus1"),
        vulkan_h.C_POINTER.withName("pHeightInSbsMinus1")
    ).withName("StdVideoAV1TileInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1TileInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1TileInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1TileInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1TileInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte TileCols$LAYOUT = (OfByte)$LAYOUT.select(groupElement("TileCols"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t TileCols
     * }
     */
    public static final OfByte TileCols$layout() {
        return TileCols$LAYOUT;
    }

    private static final long TileCols$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t TileCols
     * }
     */
    public static final long TileCols$offset() {
        return TileCols$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t TileCols
     * }
     */
    public static byte TileCols(MemorySegment struct) {
        return struct.get(TileCols$LAYOUT, TileCols$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t TileCols
     * }
     */
    public static void TileCols(MemorySegment struct, byte fieldValue) {
        struct.set(TileCols$LAYOUT, TileCols$OFFSET, fieldValue);
    }

    private static final OfByte TileRows$LAYOUT = (OfByte)$LAYOUT.select(groupElement("TileRows"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t TileRows
     * }
     */
    public static final OfByte TileRows$layout() {
        return TileRows$LAYOUT;
    }

    private static final long TileRows$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t TileRows
     * }
     */
    public static final long TileRows$offset() {
        return TileRows$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t TileRows
     * }
     */
    public static byte TileRows(MemorySegment struct) {
        return struct.get(TileRows$LAYOUT, TileRows$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t TileRows
     * }
     */
    public static void TileRows(MemorySegment struct, byte fieldValue) {
        struct.set(TileRows$LAYOUT, TileRows$OFFSET, fieldValue);
    }

    private static final OfShort context_update_tile_id$LAYOUT = (OfShort)$LAYOUT.select(groupElement("context_update_tile_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t context_update_tile_id
     * }
     */
    public static final OfShort context_update_tile_id$layout() {
        return context_update_tile_id$LAYOUT;
    }

    private static final long context_update_tile_id$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t context_update_tile_id
     * }
     */
    public static final long context_update_tile_id$offset() {
        return context_update_tile_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t context_update_tile_id
     * }
     */
    public static short context_update_tile_id(MemorySegment struct) {
        return struct.get(context_update_tile_id$LAYOUT, context_update_tile_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t context_update_tile_id
     * }
     */
    public static void context_update_tile_id(MemorySegment struct, short fieldValue) {
        struct.set(context_update_tile_id$LAYOUT, context_update_tile_id$OFFSET, fieldValue);
    }

    private static final OfByte tile_size_bytes_minus_1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("tile_size_bytes_minus_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t tile_size_bytes_minus_1
     * }
     */
    public static final OfByte tile_size_bytes_minus_1$layout() {
        return tile_size_bytes_minus_1$LAYOUT;
    }

    private static final long tile_size_bytes_minus_1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t tile_size_bytes_minus_1
     * }
     */
    public static final long tile_size_bytes_minus_1$offset() {
        return tile_size_bytes_minus_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t tile_size_bytes_minus_1
     * }
     */
    public static byte tile_size_bytes_minus_1(MemorySegment struct) {
        return struct.get(tile_size_bytes_minus_1$LAYOUT, tile_size_bytes_minus_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t tile_size_bytes_minus_1
     * }
     */
    public static void tile_size_bytes_minus_1(MemorySegment struct, byte fieldValue) {
        struct.set(tile_size_bytes_minus_1$LAYOUT, tile_size_bytes_minus_1$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static final SequenceLayout reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static MemorySegment reserved1(MemorySegment struct) {
        return struct.asSlice(reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static void reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    private static long[] reserved1$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static long[] reserved1$dimensions() {
        return reserved1$DIMS;
    }
    private static final VarHandle reserved1$ELEM_HANDLE = reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static byte reserved1(MemorySegment struct, long index0) {
        return (byte)reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static void reserved1(MemorySegment struct, long index0, byte fieldValue) {
        reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout pMiColStarts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMiColStarts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint16_t *pMiColStarts
     * }
     */
    public static final AddressLayout pMiColStarts$layout() {
        return pMiColStarts$LAYOUT;
    }

    private static final long pMiColStarts$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint16_t *pMiColStarts
     * }
     */
    public static final long pMiColStarts$offset() {
        return pMiColStarts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint16_t *pMiColStarts
     * }
     */
    public static MemorySegment pMiColStarts(MemorySegment struct) {
        return struct.get(pMiColStarts$LAYOUT, pMiColStarts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint16_t *pMiColStarts
     * }
     */
    public static void pMiColStarts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMiColStarts$LAYOUT, pMiColStarts$OFFSET, fieldValue);
    }

    private static final AddressLayout pMiRowStarts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMiRowStarts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint16_t *pMiRowStarts
     * }
     */
    public static final AddressLayout pMiRowStarts$layout() {
        return pMiRowStarts$LAYOUT;
    }

    private static final long pMiRowStarts$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint16_t *pMiRowStarts
     * }
     */
    public static final long pMiRowStarts$offset() {
        return pMiRowStarts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint16_t *pMiRowStarts
     * }
     */
    public static MemorySegment pMiRowStarts(MemorySegment struct) {
        return struct.get(pMiRowStarts$LAYOUT, pMiRowStarts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint16_t *pMiRowStarts
     * }
     */
    public static void pMiRowStarts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMiRowStarts$LAYOUT, pMiRowStarts$OFFSET, fieldValue);
    }

    private static final AddressLayout pWidthInSbsMinus1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pWidthInSbsMinus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint16_t *pWidthInSbsMinus1
     * }
     */
    public static final AddressLayout pWidthInSbsMinus1$layout() {
        return pWidthInSbsMinus1$LAYOUT;
    }

    private static final long pWidthInSbsMinus1$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint16_t *pWidthInSbsMinus1
     * }
     */
    public static final long pWidthInSbsMinus1$offset() {
        return pWidthInSbsMinus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint16_t *pWidthInSbsMinus1
     * }
     */
    public static MemorySegment pWidthInSbsMinus1(MemorySegment struct) {
        return struct.get(pWidthInSbsMinus1$LAYOUT, pWidthInSbsMinus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint16_t *pWidthInSbsMinus1
     * }
     */
    public static void pWidthInSbsMinus1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pWidthInSbsMinus1$LAYOUT, pWidthInSbsMinus1$OFFSET, fieldValue);
    }

    private static final AddressLayout pHeightInSbsMinus1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pHeightInSbsMinus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint16_t *pHeightInSbsMinus1
     * }
     */
    public static final AddressLayout pHeightInSbsMinus1$layout() {
        return pHeightInSbsMinus1$LAYOUT;
    }

    private static final long pHeightInSbsMinus1$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint16_t *pHeightInSbsMinus1
     * }
     */
    public static final long pHeightInSbsMinus1$offset() {
        return pHeightInSbsMinus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint16_t *pHeightInSbsMinus1
     * }
     */
    public static MemorySegment pHeightInSbsMinus1(MemorySegment struct) {
        return struct.get(pHeightInSbsMinus1$LAYOUT, pHeightInSbsMinus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint16_t *pHeightInSbsMinus1
     * }
     */
    public static void pHeightInSbsMinus1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pHeightInSbsMinus1$LAYOUT, pHeightInSbsMinus1$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

