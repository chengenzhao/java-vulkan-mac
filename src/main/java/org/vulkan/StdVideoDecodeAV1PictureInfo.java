// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoDecodeAV1PictureInfo {
 *     StdVideoDecodeAV1PictureInfoFlags flags;
 *     StdVideoAV1FrameType frame_type;
 *     uint32_t current_frame_id;
 *     uint8_t OrderHint;
 *     uint8_t primary_ref_frame;
 *     uint8_t refresh_frame_flags;
 *     uint8_t reserved1;
 *     StdVideoAV1InterpolationFilter interpolation_filter;
 *     StdVideoAV1TxMode TxMode;
 *     uint8_t delta_q_res;
 *     uint8_t delta_lf_res;
 *     uint8_t SkipModeFrame[2];
 *     uint8_t coded_denom;
 *     uint8_t reserved2[3];
 *     uint8_t OrderHints[8];
 *     uint32_t expectedFrameId[8];
 *     const StdVideoAV1TileInfo *pTileInfo;
 *     const StdVideoAV1Quantization *pQuantization;
 *     const StdVideoAV1Segmentation *pSegmentation;
 *     const StdVideoAV1LoopFilter *pLoopFilter;
 *     const StdVideoAV1CDEF *pCDEF;
 *     const StdVideoAV1LoopRestoration *pLoopRestoration;
 *     const StdVideoAV1GlobalMotion *pGlobalMotion;
 *     const StdVideoAV1FilmGrain *pFilmGrain;
 * }
 * }
 */
public class StdVideoDecodeAV1PictureInfo {

    StdVideoDecodeAV1PictureInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoDecodeAV1PictureInfoFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("frame_type"),
        vulkan_h.C_INT.withName("current_frame_id"),
        vulkan_h.C_CHAR.withName("OrderHint"),
        vulkan_h.C_CHAR.withName("primary_ref_frame"),
        vulkan_h.C_CHAR.withName("refresh_frame_flags"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_INT.withName("interpolation_filter"),
        vulkan_h.C_INT.withName("TxMode"),
        vulkan_h.C_CHAR.withName("delta_q_res"),
        vulkan_h.C_CHAR.withName("delta_lf_res"),
        MemoryLayout.sequenceLayout(2, vulkan_h.C_CHAR).withName("SkipModeFrame"),
        vulkan_h.C_CHAR.withName("coded_denom"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_CHAR).withName("reserved2"),
        MemoryLayout.sequenceLayout(8, vulkan_h.C_CHAR).withName("OrderHints"),
        MemoryLayout.sequenceLayout(8, vulkan_h.C_INT).withName("expectedFrameId"),
        vulkan_h.C_POINTER.withName("pTileInfo"),
        vulkan_h.C_POINTER.withName("pQuantization"),
        vulkan_h.C_POINTER.withName("pSegmentation"),
        vulkan_h.C_POINTER.withName("pLoopFilter"),
        vulkan_h.C_POINTER.withName("pCDEF"),
        vulkan_h.C_POINTER.withName("pLoopRestoration"),
        vulkan_h.C_POINTER.withName("pGlobalMotion"),
        vulkan_h.C_POINTER.withName("pFilmGrain")
    ).withName("StdVideoDecodeAV1PictureInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1PictureInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1PictureInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1PictureInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1PictureInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt frame_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameType frame_type
     * }
     */
    public static final OfInt frame_type$layout() {
        return frame_type$LAYOUT;
    }

    private static final long frame_type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameType frame_type
     * }
     */
    public static final long frame_type$offset() {
        return frame_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameType frame_type
     * }
     */
    public static int frame_type(MemorySegment struct) {
        return struct.get(frame_type$LAYOUT, frame_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1FrameType frame_type
     * }
     */
    public static void frame_type(MemorySegment struct, int fieldValue) {
        struct.set(frame_type$LAYOUT, frame_type$OFFSET, fieldValue);
    }

    private static final OfInt current_frame_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("current_frame_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t current_frame_id
     * }
     */
    public static final OfInt current_frame_id$layout() {
        return current_frame_id$LAYOUT;
    }

    private static final long current_frame_id$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t current_frame_id
     * }
     */
    public static final long current_frame_id$offset() {
        return current_frame_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t current_frame_id
     * }
     */
    public static int current_frame_id(MemorySegment struct) {
        return struct.get(current_frame_id$LAYOUT, current_frame_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t current_frame_id
     * }
     */
    public static void current_frame_id(MemorySegment struct, int fieldValue) {
        struct.set(current_frame_id$LAYOUT, current_frame_id$OFFSET, fieldValue);
    }

    private static final OfByte OrderHint$LAYOUT = (OfByte)$LAYOUT.select(groupElement("OrderHint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static final OfByte OrderHint$layout() {
        return OrderHint$LAYOUT;
    }

    private static final long OrderHint$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static final long OrderHint$offset() {
        return OrderHint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static byte OrderHint(MemorySegment struct) {
        return struct.get(OrderHint$LAYOUT, OrderHint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static void OrderHint(MemorySegment struct, byte fieldValue) {
        struct.set(OrderHint$LAYOUT, OrderHint$OFFSET, fieldValue);
    }

    private static final OfByte primary_ref_frame$LAYOUT = (OfByte)$LAYOUT.select(groupElement("primary_ref_frame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t primary_ref_frame
     * }
     */
    public static final OfByte primary_ref_frame$layout() {
        return primary_ref_frame$LAYOUT;
    }

    private static final long primary_ref_frame$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t primary_ref_frame
     * }
     */
    public static final long primary_ref_frame$offset() {
        return primary_ref_frame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t primary_ref_frame
     * }
     */
    public static byte primary_ref_frame(MemorySegment struct) {
        return struct.get(primary_ref_frame$LAYOUT, primary_ref_frame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t primary_ref_frame
     * }
     */
    public static void primary_ref_frame(MemorySegment struct, byte fieldValue) {
        struct.set(primary_ref_frame$LAYOUT, primary_ref_frame$OFFSET, fieldValue);
    }

    private static final OfByte refresh_frame_flags$LAYOUT = (OfByte)$LAYOUT.select(groupElement("refresh_frame_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t refresh_frame_flags
     * }
     */
    public static final OfByte refresh_frame_flags$layout() {
        return refresh_frame_flags$LAYOUT;
    }

    private static final long refresh_frame_flags$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t refresh_frame_flags
     * }
     */
    public static final long refresh_frame_flags$offset() {
        return refresh_frame_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t refresh_frame_flags
     * }
     */
    public static byte refresh_frame_flags(MemorySegment struct) {
        return struct.get(refresh_frame_flags$LAYOUT, refresh_frame_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t refresh_frame_flags
     * }
     */
    public static void refresh_frame_flags(MemorySegment struct, byte fieldValue) {
        struct.set(refresh_frame_flags$LAYOUT, refresh_frame_flags$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfInt interpolation_filter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("interpolation_filter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1InterpolationFilter interpolation_filter
     * }
     */
    public static final OfInt interpolation_filter$layout() {
        return interpolation_filter$LAYOUT;
    }

    private static final long interpolation_filter$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1InterpolationFilter interpolation_filter
     * }
     */
    public static final long interpolation_filter$offset() {
        return interpolation_filter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1InterpolationFilter interpolation_filter
     * }
     */
    public static int interpolation_filter(MemorySegment struct) {
        return struct.get(interpolation_filter$LAYOUT, interpolation_filter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1InterpolationFilter interpolation_filter
     * }
     */
    public static void interpolation_filter(MemorySegment struct, int fieldValue) {
        struct.set(interpolation_filter$LAYOUT, interpolation_filter$OFFSET, fieldValue);
    }

    private static final OfInt TxMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("TxMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoAV1TxMode TxMode
     * }
     */
    public static final OfInt TxMode$layout() {
        return TxMode$LAYOUT;
    }

    private static final long TxMode$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoAV1TxMode TxMode
     * }
     */
    public static final long TxMode$offset() {
        return TxMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoAV1TxMode TxMode
     * }
     */
    public static int TxMode(MemorySegment struct) {
        return struct.get(TxMode$LAYOUT, TxMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoAV1TxMode TxMode
     * }
     */
    public static void TxMode(MemorySegment struct, int fieldValue) {
        struct.set(TxMode$LAYOUT, TxMode$OFFSET, fieldValue);
    }

    private static final OfByte delta_q_res$LAYOUT = (OfByte)$LAYOUT.select(groupElement("delta_q_res"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t delta_q_res
     * }
     */
    public static final OfByte delta_q_res$layout() {
        return delta_q_res$LAYOUT;
    }

    private static final long delta_q_res$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t delta_q_res
     * }
     */
    public static final long delta_q_res$offset() {
        return delta_q_res$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t delta_q_res
     * }
     */
    public static byte delta_q_res(MemorySegment struct) {
        return struct.get(delta_q_res$LAYOUT, delta_q_res$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t delta_q_res
     * }
     */
    public static void delta_q_res(MemorySegment struct, byte fieldValue) {
        struct.set(delta_q_res$LAYOUT, delta_q_res$OFFSET, fieldValue);
    }

    private static final OfByte delta_lf_res$LAYOUT = (OfByte)$LAYOUT.select(groupElement("delta_lf_res"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t delta_lf_res
     * }
     */
    public static final OfByte delta_lf_res$layout() {
        return delta_lf_res$LAYOUT;
    }

    private static final long delta_lf_res$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t delta_lf_res
     * }
     */
    public static final long delta_lf_res$offset() {
        return delta_lf_res$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t delta_lf_res
     * }
     */
    public static byte delta_lf_res(MemorySegment struct) {
        return struct.get(delta_lf_res$LAYOUT, delta_lf_res$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t delta_lf_res
     * }
     */
    public static void delta_lf_res(MemorySegment struct, byte fieldValue) {
        struct.set(delta_lf_res$LAYOUT, delta_lf_res$OFFSET, fieldValue);
    }

    private static final SequenceLayout SkipModeFrame$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SkipModeFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t SkipModeFrame[2]
     * }
     */
    public static final SequenceLayout SkipModeFrame$layout() {
        return SkipModeFrame$LAYOUT;
    }

    private static final long SkipModeFrame$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t SkipModeFrame[2]
     * }
     */
    public static final long SkipModeFrame$offset() {
        return SkipModeFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t SkipModeFrame[2]
     * }
     */
    public static MemorySegment SkipModeFrame(MemorySegment struct) {
        return struct.asSlice(SkipModeFrame$OFFSET, SkipModeFrame$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t SkipModeFrame[2]
     * }
     */
    public static void SkipModeFrame(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SkipModeFrame$OFFSET, SkipModeFrame$LAYOUT.byteSize());
    }

    private static long[] SkipModeFrame$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t SkipModeFrame[2]
     * }
     */
    public static long[] SkipModeFrame$dimensions() {
        return SkipModeFrame$DIMS;
    }
    private static final VarHandle SkipModeFrame$ELEM_HANDLE = SkipModeFrame$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t SkipModeFrame[2]
     * }
     */
    public static byte SkipModeFrame(MemorySegment struct, long index0) {
        return (byte)SkipModeFrame$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t SkipModeFrame[2]
     * }
     */
    public static void SkipModeFrame(MemorySegment struct, long index0, byte fieldValue) {
        SkipModeFrame$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte coded_denom$LAYOUT = (OfByte)$LAYOUT.select(groupElement("coded_denom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t coded_denom
     * }
     */
    public static final OfByte coded_denom$layout() {
        return coded_denom$LAYOUT;
    }

    private static final long coded_denom$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t coded_denom
     * }
     */
    public static final long coded_denom$offset() {
        return coded_denom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t coded_denom
     * }
     */
    public static byte coded_denom(MemorySegment struct) {
        return struct.get(coded_denom$LAYOUT, coded_denom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t coded_denom
     * }
     */
    public static void coded_denom(MemorySegment struct, byte fieldValue) {
        struct.set(coded_denom$LAYOUT, coded_denom$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved2$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved2[3]
     * }
     */
    public static final SequenceLayout reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 29;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved2[3]
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved2[3]
     * }
     */
    public static MemorySegment reserved2(MemorySegment struct) {
        return struct.asSlice(reserved2$OFFSET, reserved2$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved2[3]
     * }
     */
    public static void reserved2(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved2$OFFSET, reserved2$LAYOUT.byteSize());
    }

    private static long[] reserved2$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t reserved2[3]
     * }
     */
    public static long[] reserved2$dimensions() {
        return reserved2$DIMS;
    }
    private static final VarHandle reserved2$ELEM_HANDLE = reserved2$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t reserved2[3]
     * }
     */
    public static byte reserved2(MemorySegment struct, long index0) {
        return (byte)reserved2$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t reserved2[3]
     * }
     */
    public static void reserved2(MemorySegment struct, long index0, byte fieldValue) {
        reserved2$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout OrderHints$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("OrderHints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t OrderHints[8]
     * }
     */
    public static final SequenceLayout OrderHints$layout() {
        return OrderHints$LAYOUT;
    }

    private static final long OrderHints$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t OrderHints[8]
     * }
     */
    public static final long OrderHints$offset() {
        return OrderHints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t OrderHints[8]
     * }
     */
    public static MemorySegment OrderHints(MemorySegment struct) {
        return struct.asSlice(OrderHints$OFFSET, OrderHints$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t OrderHints[8]
     * }
     */
    public static void OrderHints(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, OrderHints$OFFSET, OrderHints$LAYOUT.byteSize());
    }

    private static long[] OrderHints$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t OrderHints[8]
     * }
     */
    public static long[] OrderHints$dimensions() {
        return OrderHints$DIMS;
    }
    private static final VarHandle OrderHints$ELEM_HANDLE = OrderHints$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t OrderHints[8]
     * }
     */
    public static byte OrderHints(MemorySegment struct, long index0) {
        return (byte)OrderHints$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t OrderHints[8]
     * }
     */
    public static void OrderHints(MemorySegment struct, long index0, byte fieldValue) {
        OrderHints$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout expectedFrameId$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("expectedFrameId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t expectedFrameId[8]
     * }
     */
    public static final SequenceLayout expectedFrameId$layout() {
        return expectedFrameId$LAYOUT;
    }

    private static final long expectedFrameId$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t expectedFrameId[8]
     * }
     */
    public static final long expectedFrameId$offset() {
        return expectedFrameId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t expectedFrameId[8]
     * }
     */
    public static MemorySegment expectedFrameId(MemorySegment struct) {
        return struct.asSlice(expectedFrameId$OFFSET, expectedFrameId$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t expectedFrameId[8]
     * }
     */
    public static void expectedFrameId(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, expectedFrameId$OFFSET, expectedFrameId$LAYOUT.byteSize());
    }

    private static long[] expectedFrameId$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t expectedFrameId[8]
     * }
     */
    public static long[] expectedFrameId$dimensions() {
        return expectedFrameId$DIMS;
    }
    private static final VarHandle expectedFrameId$ELEM_HANDLE = expectedFrameId$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t expectedFrameId[8]
     * }
     */
    public static int expectedFrameId(MemorySegment struct, long index0) {
        return (int)expectedFrameId$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t expectedFrameId[8]
     * }
     */
    public static void expectedFrameId(MemorySegment struct, long index0, int fieldValue) {
        expectedFrameId$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout pTileInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTileInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1TileInfo *pTileInfo
     * }
     */
    public static final AddressLayout pTileInfo$layout() {
        return pTileInfo$LAYOUT;
    }

    private static final long pTileInfo$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1TileInfo *pTileInfo
     * }
     */
    public static final long pTileInfo$offset() {
        return pTileInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1TileInfo *pTileInfo
     * }
     */
    public static MemorySegment pTileInfo(MemorySegment struct) {
        return struct.get(pTileInfo$LAYOUT, pTileInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1TileInfo *pTileInfo
     * }
     */
    public static void pTileInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTileInfo$LAYOUT, pTileInfo$OFFSET, fieldValue);
    }

    private static final AddressLayout pQuantization$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pQuantization"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1Quantization *pQuantization
     * }
     */
    public static final AddressLayout pQuantization$layout() {
        return pQuantization$LAYOUT;
    }

    private static final long pQuantization$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1Quantization *pQuantization
     * }
     */
    public static final long pQuantization$offset() {
        return pQuantization$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1Quantization *pQuantization
     * }
     */
    public static MemorySegment pQuantization(MemorySegment struct) {
        return struct.get(pQuantization$LAYOUT, pQuantization$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1Quantization *pQuantization
     * }
     */
    public static void pQuantization(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pQuantization$LAYOUT, pQuantization$OFFSET, fieldValue);
    }

    private static final AddressLayout pSegmentation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSegmentation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1Segmentation *pSegmentation
     * }
     */
    public static final AddressLayout pSegmentation$layout() {
        return pSegmentation$LAYOUT;
    }

    private static final long pSegmentation$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1Segmentation *pSegmentation
     * }
     */
    public static final long pSegmentation$offset() {
        return pSegmentation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1Segmentation *pSegmentation
     * }
     */
    public static MemorySegment pSegmentation(MemorySegment struct) {
        return struct.get(pSegmentation$LAYOUT, pSegmentation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1Segmentation *pSegmentation
     * }
     */
    public static void pSegmentation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSegmentation$LAYOUT, pSegmentation$OFFSET, fieldValue);
    }

    private static final AddressLayout pLoopFilter$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pLoopFilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopFilter *pLoopFilter
     * }
     */
    public static final AddressLayout pLoopFilter$layout() {
        return pLoopFilter$LAYOUT;
    }

    private static final long pLoopFilter$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopFilter *pLoopFilter
     * }
     */
    public static final long pLoopFilter$offset() {
        return pLoopFilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopFilter *pLoopFilter
     * }
     */
    public static MemorySegment pLoopFilter(MemorySegment struct) {
        return struct.get(pLoopFilter$LAYOUT, pLoopFilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopFilter *pLoopFilter
     * }
     */
    public static void pLoopFilter(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pLoopFilter$LAYOUT, pLoopFilter$OFFSET, fieldValue);
    }

    private static final AddressLayout pCDEF$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pCDEF"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1CDEF *pCDEF
     * }
     */
    public static final AddressLayout pCDEF$layout() {
        return pCDEF$LAYOUT;
    }

    private static final long pCDEF$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1CDEF *pCDEF
     * }
     */
    public static final long pCDEF$offset() {
        return pCDEF$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1CDEF *pCDEF
     * }
     */
    public static MemorySegment pCDEF(MemorySegment struct) {
        return struct.get(pCDEF$LAYOUT, pCDEF$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1CDEF *pCDEF
     * }
     */
    public static void pCDEF(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pCDEF$LAYOUT, pCDEF$OFFSET, fieldValue);
    }

    private static final AddressLayout pLoopRestoration$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pLoopRestoration"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopRestoration *pLoopRestoration
     * }
     */
    public static final AddressLayout pLoopRestoration$layout() {
        return pLoopRestoration$LAYOUT;
    }

    private static final long pLoopRestoration$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopRestoration *pLoopRestoration
     * }
     */
    public static final long pLoopRestoration$offset() {
        return pLoopRestoration$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopRestoration *pLoopRestoration
     * }
     */
    public static MemorySegment pLoopRestoration(MemorySegment struct) {
        return struct.get(pLoopRestoration$LAYOUT, pLoopRestoration$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1LoopRestoration *pLoopRestoration
     * }
     */
    public static void pLoopRestoration(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pLoopRestoration$LAYOUT, pLoopRestoration$OFFSET, fieldValue);
    }

    private static final AddressLayout pGlobalMotion$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pGlobalMotion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1GlobalMotion *pGlobalMotion
     * }
     */
    public static final AddressLayout pGlobalMotion$layout() {
        return pGlobalMotion$LAYOUT;
    }

    private static final long pGlobalMotion$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1GlobalMotion *pGlobalMotion
     * }
     */
    public static final long pGlobalMotion$offset() {
        return pGlobalMotion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1GlobalMotion *pGlobalMotion
     * }
     */
    public static MemorySegment pGlobalMotion(MemorySegment struct) {
        return struct.get(pGlobalMotion$LAYOUT, pGlobalMotion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1GlobalMotion *pGlobalMotion
     * }
     */
    public static void pGlobalMotion(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pGlobalMotion$LAYOUT, pGlobalMotion$OFFSET, fieldValue);
    }

    private static final AddressLayout pFilmGrain$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pFilmGrain"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoAV1FilmGrain *pFilmGrain
     * }
     */
    public static final AddressLayout pFilmGrain$layout() {
        return pFilmGrain$LAYOUT;
    }

    private static final long pFilmGrain$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoAV1FilmGrain *pFilmGrain
     * }
     */
    public static final long pFilmGrain$offset() {
        return pFilmGrain$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoAV1FilmGrain *pFilmGrain
     * }
     */
    public static MemorySegment pFilmGrain(MemorySegment struct) {
        return struct.get(pFilmGrain$LAYOUT, pFilmGrain$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoAV1FilmGrain *pFilmGrain
     * }
     */
    public static void pFilmGrain(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pFilmGrain$LAYOUT, pFilmGrain$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

