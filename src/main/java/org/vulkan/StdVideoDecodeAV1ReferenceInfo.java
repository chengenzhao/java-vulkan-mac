// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoDecodeAV1ReferenceInfo {
 *     StdVideoDecodeAV1ReferenceInfoFlags flags;
 *     uint8_t frame_type;
 *     uint8_t RefFrameSignBias;
 *     uint8_t OrderHint;
 *     uint8_t SavedOrderHints[8];
 * }
 * }
 */
public class StdVideoDecodeAV1ReferenceInfo {

    StdVideoDecodeAV1ReferenceInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoDecodeAV1ReferenceInfoFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("frame_type"),
        vulkan_h.C_CHAR.withName("RefFrameSignBias"),
        vulkan_h.C_CHAR.withName("OrderHint"),
        MemoryLayout.sequenceLayout(8, vulkan_h.C_CHAR).withName("SavedOrderHints"),
        MemoryLayout.paddingLayout(1)
    ).withName("StdVideoDecodeAV1ReferenceInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1ReferenceInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1ReferenceInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1ReferenceInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoDecodeAV1ReferenceInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte frame_type$LAYOUT = (OfByte)$LAYOUT.select(groupElement("frame_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t frame_type
     * }
     */
    public static final OfByte frame_type$layout() {
        return frame_type$LAYOUT;
    }

    private static final long frame_type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t frame_type
     * }
     */
    public static final long frame_type$offset() {
        return frame_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t frame_type
     * }
     */
    public static byte frame_type(MemorySegment struct) {
        return struct.get(frame_type$LAYOUT, frame_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t frame_type
     * }
     */
    public static void frame_type(MemorySegment struct, byte fieldValue) {
        struct.set(frame_type$LAYOUT, frame_type$OFFSET, fieldValue);
    }

    private static final OfByte RefFrameSignBias$LAYOUT = (OfByte)$LAYOUT.select(groupElement("RefFrameSignBias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefFrameSignBias
     * }
     */
    public static final OfByte RefFrameSignBias$layout() {
        return RefFrameSignBias$LAYOUT;
    }

    private static final long RefFrameSignBias$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefFrameSignBias
     * }
     */
    public static final long RefFrameSignBias$offset() {
        return RefFrameSignBias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefFrameSignBias
     * }
     */
    public static byte RefFrameSignBias(MemorySegment struct) {
        return struct.get(RefFrameSignBias$LAYOUT, RefFrameSignBias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefFrameSignBias
     * }
     */
    public static void RefFrameSignBias(MemorySegment struct, byte fieldValue) {
        struct.set(RefFrameSignBias$LAYOUT, RefFrameSignBias$OFFSET, fieldValue);
    }

    private static final OfByte OrderHint$LAYOUT = (OfByte)$LAYOUT.select(groupElement("OrderHint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static final OfByte OrderHint$layout() {
        return OrderHint$LAYOUT;
    }

    private static final long OrderHint$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static final long OrderHint$offset() {
        return OrderHint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static byte OrderHint(MemorySegment struct) {
        return struct.get(OrderHint$LAYOUT, OrderHint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t OrderHint
     * }
     */
    public static void OrderHint(MemorySegment struct, byte fieldValue) {
        struct.set(OrderHint$LAYOUT, OrderHint$OFFSET, fieldValue);
    }

    private static final SequenceLayout SavedOrderHints$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("SavedOrderHints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t SavedOrderHints[8]
     * }
     */
    public static final SequenceLayout SavedOrderHints$layout() {
        return SavedOrderHints$LAYOUT;
    }

    private static final long SavedOrderHints$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t SavedOrderHints[8]
     * }
     */
    public static final long SavedOrderHints$offset() {
        return SavedOrderHints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t SavedOrderHints[8]
     * }
     */
    public static MemorySegment SavedOrderHints(MemorySegment struct) {
        return struct.asSlice(SavedOrderHints$OFFSET, SavedOrderHints$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t SavedOrderHints[8]
     * }
     */
    public static void SavedOrderHints(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, SavedOrderHints$OFFSET, SavedOrderHints$LAYOUT.byteSize());
    }

    private static long[] SavedOrderHints$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t SavedOrderHints[8]
     * }
     */
    public static long[] SavedOrderHints$dimensions() {
        return SavedOrderHints$DIMS;
    }
    private static final VarHandle SavedOrderHints$ELEM_HANDLE = SavedOrderHints$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t SavedOrderHints[8]
     * }
     */
    public static byte SavedOrderHints(MemorySegment struct, long index0) {
        return (byte)SavedOrderHints$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t SavedOrderHints[8]
     * }
     */
    public static void SavedOrderHints(MemorySegment struct, long index0, byte fieldValue) {
        SavedOrderHints$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

