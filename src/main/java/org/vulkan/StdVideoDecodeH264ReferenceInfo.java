// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoDecodeH264ReferenceInfo {
 *     StdVideoDecodeH264ReferenceInfoFlags flags;
 *     uint16_t FrameNum;
 *     uint16_t reserved;
 *     int32_t PicOrderCnt[2];
 * }
 * }
 */
public class StdVideoDecodeH264ReferenceInfo {

    StdVideoDecodeH264ReferenceInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoDecodeH264ReferenceInfoFlags.layout().withName("flags"),
        vulkan_h.C_SHORT.withName("FrameNum"),
        vulkan_h.C_SHORT.withName("reserved"),
        MemoryLayout.sequenceLayout(2, vulkan_h.C_INT).withName("PicOrderCnt")
    ).withName("StdVideoDecodeH264ReferenceInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoDecodeH264ReferenceInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoDecodeH264ReferenceInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoDecodeH264ReferenceInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoDecodeH264ReferenceInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfShort FrameNum$LAYOUT = (OfShort)$LAYOUT.select(groupElement("FrameNum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t FrameNum
     * }
     */
    public static final OfShort FrameNum$layout() {
        return FrameNum$LAYOUT;
    }

    private static final long FrameNum$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t FrameNum
     * }
     */
    public static final long FrameNum$offset() {
        return FrameNum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t FrameNum
     * }
     */
    public static short FrameNum(MemorySegment struct) {
        return struct.get(FrameNum$LAYOUT, FrameNum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t FrameNum
     * }
     */
    public static void FrameNum(MemorySegment struct, short fieldValue) {
        struct.set(FrameNum$LAYOUT, FrameNum$OFFSET, fieldValue);
    }

    private static final OfShort reserved$LAYOUT = (OfShort)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static final OfShort reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static short reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static void reserved(MemorySegment struct, short fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    private static final SequenceLayout PicOrderCnt$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("PicOrderCnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt[2]
     * }
     */
    public static final SequenceLayout PicOrderCnt$layout() {
        return PicOrderCnt$LAYOUT;
    }

    private static final long PicOrderCnt$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt[2]
     * }
     */
    public static final long PicOrderCnt$offset() {
        return PicOrderCnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt[2]
     * }
     */
    public static MemorySegment PicOrderCnt(MemorySegment struct) {
        return struct.asSlice(PicOrderCnt$OFFSET, PicOrderCnt$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt[2]
     * }
     */
    public static void PicOrderCnt(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, PicOrderCnt$OFFSET, PicOrderCnt$LAYOUT.byteSize());
    }

    private static long[] PicOrderCnt$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt[2]
     * }
     */
    public static long[] PicOrderCnt$dimensions() {
        return PicOrderCnt$DIMS;
    }
    private static final VarHandle PicOrderCnt$ELEM_HANDLE = PicOrderCnt$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt[2]
     * }
     */
    public static int PicOrderCnt(MemorySegment struct, long index0) {
        return (int)PicOrderCnt$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt[2]
     * }
     */
    public static void PicOrderCnt(MemorySegment struct, long index0, int fieldValue) {
        PicOrderCnt$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

