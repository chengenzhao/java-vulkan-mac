// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoDecodeH265PictureInfo {
 *     StdVideoDecodeH265PictureInfoFlags flags;
 *     uint8_t sps_video_parameter_set_id;
 *     uint8_t pps_seq_parameter_set_id;
 *     uint8_t pps_pic_parameter_set_id;
 *     uint8_t NumDeltaPocsOfRefRpsIdx;
 *     int32_t PicOrderCntVal;
 *     uint16_t NumBitsForSTRefPicSetInSlice;
 *     uint16_t reserved;
 *     uint8_t RefPicSetStCurrBefore[8];
 *     uint8_t RefPicSetStCurrAfter[8];
 *     uint8_t RefPicSetLtCurr[8];
 * }
 * }
 */
public class StdVideoDecodeH265PictureInfo {

    StdVideoDecodeH265PictureInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoDecodeH265PictureInfoFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("sps_video_parameter_set_id"),
        vulkan_h.C_CHAR.withName("pps_seq_parameter_set_id"),
        vulkan_h.C_CHAR.withName("pps_pic_parameter_set_id"),
        vulkan_h.C_CHAR.withName("NumDeltaPocsOfRefRpsIdx"),
        vulkan_h.C_INT.withName("PicOrderCntVal"),
        vulkan_h.C_SHORT.withName("NumBitsForSTRefPicSetInSlice"),
        vulkan_h.C_SHORT.withName("reserved"),
        MemoryLayout.sequenceLayout(8, vulkan_h.C_CHAR).withName("RefPicSetStCurrBefore"),
        MemoryLayout.sequenceLayout(8, vulkan_h.C_CHAR).withName("RefPicSetStCurrAfter"),
        MemoryLayout.sequenceLayout(8, vulkan_h.C_CHAR).withName("RefPicSetLtCurr")
    ).withName("StdVideoDecodeH265PictureInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoDecodeH265PictureInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoDecodeH265PictureInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoDecodeH265PictureInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoDecodeH265PictureInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte sps_video_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sps_video_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static final OfByte sps_video_parameter_set_id$layout() {
        return sps_video_parameter_set_id$LAYOUT;
    }

    private static final long sps_video_parameter_set_id$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static final long sps_video_parameter_set_id$offset() {
        return sps_video_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static byte sps_video_parameter_set_id(MemorySegment struct) {
        return struct.get(sps_video_parameter_set_id$LAYOUT, sps_video_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static void sps_video_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(sps_video_parameter_set_id$LAYOUT, sps_video_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte pps_seq_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_seq_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static final OfByte pps_seq_parameter_set_id$layout() {
        return pps_seq_parameter_set_id$LAYOUT;
    }

    private static final long pps_seq_parameter_set_id$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static final long pps_seq_parameter_set_id$offset() {
        return pps_seq_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static byte pps_seq_parameter_set_id(MemorySegment struct) {
        return struct.get(pps_seq_parameter_set_id$LAYOUT, pps_seq_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static void pps_seq_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(pps_seq_parameter_set_id$LAYOUT, pps_seq_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte pps_pic_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_pic_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static final OfByte pps_pic_parameter_set_id$layout() {
        return pps_pic_parameter_set_id$LAYOUT;
    }

    private static final long pps_pic_parameter_set_id$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static final long pps_pic_parameter_set_id$offset() {
        return pps_pic_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static byte pps_pic_parameter_set_id(MemorySegment struct) {
        return struct.get(pps_pic_parameter_set_id$LAYOUT, pps_pic_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static void pps_pic_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(pps_pic_parameter_set_id$LAYOUT, pps_pic_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte NumDeltaPocsOfRefRpsIdx$LAYOUT = (OfByte)$LAYOUT.select(groupElement("NumDeltaPocsOfRefRpsIdx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t NumDeltaPocsOfRefRpsIdx
     * }
     */
    public static final OfByte NumDeltaPocsOfRefRpsIdx$layout() {
        return NumDeltaPocsOfRefRpsIdx$LAYOUT;
    }

    private static final long NumDeltaPocsOfRefRpsIdx$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t NumDeltaPocsOfRefRpsIdx
     * }
     */
    public static final long NumDeltaPocsOfRefRpsIdx$offset() {
        return NumDeltaPocsOfRefRpsIdx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t NumDeltaPocsOfRefRpsIdx
     * }
     */
    public static byte NumDeltaPocsOfRefRpsIdx(MemorySegment struct) {
        return struct.get(NumDeltaPocsOfRefRpsIdx$LAYOUT, NumDeltaPocsOfRefRpsIdx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t NumDeltaPocsOfRefRpsIdx
     * }
     */
    public static void NumDeltaPocsOfRefRpsIdx(MemorySegment struct, byte fieldValue) {
        struct.set(NumDeltaPocsOfRefRpsIdx$LAYOUT, NumDeltaPocsOfRefRpsIdx$OFFSET, fieldValue);
    }

    private static final OfInt PicOrderCntVal$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PicOrderCntVal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t PicOrderCntVal
     * }
     */
    public static final OfInt PicOrderCntVal$layout() {
        return PicOrderCntVal$LAYOUT;
    }

    private static final long PicOrderCntVal$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t PicOrderCntVal
     * }
     */
    public static final long PicOrderCntVal$offset() {
        return PicOrderCntVal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCntVal
     * }
     */
    public static int PicOrderCntVal(MemorySegment struct) {
        return struct.get(PicOrderCntVal$LAYOUT, PicOrderCntVal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCntVal
     * }
     */
    public static void PicOrderCntVal(MemorySegment struct, int fieldValue) {
        struct.set(PicOrderCntVal$LAYOUT, PicOrderCntVal$OFFSET, fieldValue);
    }

    private static final OfShort NumBitsForSTRefPicSetInSlice$LAYOUT = (OfShort)$LAYOUT.select(groupElement("NumBitsForSTRefPicSetInSlice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t NumBitsForSTRefPicSetInSlice
     * }
     */
    public static final OfShort NumBitsForSTRefPicSetInSlice$layout() {
        return NumBitsForSTRefPicSetInSlice$LAYOUT;
    }

    private static final long NumBitsForSTRefPicSetInSlice$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t NumBitsForSTRefPicSetInSlice
     * }
     */
    public static final long NumBitsForSTRefPicSetInSlice$offset() {
        return NumBitsForSTRefPicSetInSlice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t NumBitsForSTRefPicSetInSlice
     * }
     */
    public static short NumBitsForSTRefPicSetInSlice(MemorySegment struct) {
        return struct.get(NumBitsForSTRefPicSetInSlice$LAYOUT, NumBitsForSTRefPicSetInSlice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t NumBitsForSTRefPicSetInSlice
     * }
     */
    public static void NumBitsForSTRefPicSetInSlice(MemorySegment struct, short fieldValue) {
        struct.set(NumBitsForSTRefPicSetInSlice$LAYOUT, NumBitsForSTRefPicSetInSlice$OFFSET, fieldValue);
    }

    private static final OfShort reserved$LAYOUT = (OfShort)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static final OfShort reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static short reserved(MemorySegment struct) {
        return struct.get(reserved$LAYOUT, reserved$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t reserved
     * }
     */
    public static void reserved(MemorySegment struct, short fieldValue) {
        struct.set(reserved$LAYOUT, reserved$OFFSET, fieldValue);
    }

    private static final SequenceLayout RefPicSetStCurrBefore$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RefPicSetStCurrBefore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrBefore[8]
     * }
     */
    public static final SequenceLayout RefPicSetStCurrBefore$layout() {
        return RefPicSetStCurrBefore$LAYOUT;
    }

    private static final long RefPicSetStCurrBefore$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrBefore[8]
     * }
     */
    public static final long RefPicSetStCurrBefore$offset() {
        return RefPicSetStCurrBefore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrBefore[8]
     * }
     */
    public static MemorySegment RefPicSetStCurrBefore(MemorySegment struct) {
        return struct.asSlice(RefPicSetStCurrBefore$OFFSET, RefPicSetStCurrBefore$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrBefore[8]
     * }
     */
    public static void RefPicSetStCurrBefore(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RefPicSetStCurrBefore$OFFSET, RefPicSetStCurrBefore$LAYOUT.byteSize());
    }

    private static long[] RefPicSetStCurrBefore$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrBefore[8]
     * }
     */
    public static long[] RefPicSetStCurrBefore$dimensions() {
        return RefPicSetStCurrBefore$DIMS;
    }
    private static final VarHandle RefPicSetStCurrBefore$ELEM_HANDLE = RefPicSetStCurrBefore$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrBefore[8]
     * }
     */
    public static byte RefPicSetStCurrBefore(MemorySegment struct, long index0) {
        return (byte)RefPicSetStCurrBefore$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrBefore[8]
     * }
     */
    public static void RefPicSetStCurrBefore(MemorySegment struct, long index0, byte fieldValue) {
        RefPicSetStCurrBefore$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout RefPicSetStCurrAfter$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RefPicSetStCurrAfter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrAfter[8]
     * }
     */
    public static final SequenceLayout RefPicSetStCurrAfter$layout() {
        return RefPicSetStCurrAfter$LAYOUT;
    }

    private static final long RefPicSetStCurrAfter$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrAfter[8]
     * }
     */
    public static final long RefPicSetStCurrAfter$offset() {
        return RefPicSetStCurrAfter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrAfter[8]
     * }
     */
    public static MemorySegment RefPicSetStCurrAfter(MemorySegment struct) {
        return struct.asSlice(RefPicSetStCurrAfter$OFFSET, RefPicSetStCurrAfter$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrAfter[8]
     * }
     */
    public static void RefPicSetStCurrAfter(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RefPicSetStCurrAfter$OFFSET, RefPicSetStCurrAfter$LAYOUT.byteSize());
    }

    private static long[] RefPicSetStCurrAfter$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrAfter[8]
     * }
     */
    public static long[] RefPicSetStCurrAfter$dimensions() {
        return RefPicSetStCurrAfter$DIMS;
    }
    private static final VarHandle RefPicSetStCurrAfter$ELEM_HANDLE = RefPicSetStCurrAfter$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrAfter[8]
     * }
     */
    public static byte RefPicSetStCurrAfter(MemorySegment struct, long index0) {
        return (byte)RefPicSetStCurrAfter$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetStCurrAfter[8]
     * }
     */
    public static void RefPicSetStCurrAfter(MemorySegment struct, long index0, byte fieldValue) {
        RefPicSetStCurrAfter$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout RefPicSetLtCurr$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RefPicSetLtCurr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetLtCurr[8]
     * }
     */
    public static final SequenceLayout RefPicSetLtCurr$layout() {
        return RefPicSetLtCurr$LAYOUT;
    }

    private static final long RefPicSetLtCurr$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetLtCurr[8]
     * }
     */
    public static final long RefPicSetLtCurr$offset() {
        return RefPicSetLtCurr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetLtCurr[8]
     * }
     */
    public static MemorySegment RefPicSetLtCurr(MemorySegment struct) {
        return struct.asSlice(RefPicSetLtCurr$OFFSET, RefPicSetLtCurr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetLtCurr[8]
     * }
     */
    public static void RefPicSetLtCurr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RefPicSetLtCurr$OFFSET, RefPicSetLtCurr$LAYOUT.byteSize());
    }

    private static long[] RefPicSetLtCurr$DIMS = { 8 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t RefPicSetLtCurr[8]
     * }
     */
    public static long[] RefPicSetLtCurr$dimensions() {
        return RefPicSetLtCurr$DIMS;
    }
    private static final VarHandle RefPicSetLtCurr$ELEM_HANDLE = RefPicSetLtCurr$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetLtCurr[8]
     * }
     */
    public static byte RefPicSetLtCurr(MemorySegment struct, long index0) {
        return (byte)RefPicSetLtCurr$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicSetLtCurr[8]
     * }
     */
    public static void RefPicSetLtCurr(MemorySegment struct, long index0, byte fieldValue) {
        RefPicSetLtCurr$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

