// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH264RefPicMarkingEntry {
 *     StdVideoH264MemMgmtControlOp memory_management_control_operation;
 *     uint16_t difference_of_pic_nums_minus1;
 *     uint16_t long_term_pic_num;
 *     uint16_t long_term_frame_idx;
 *     uint16_t max_long_term_frame_idx_plus1;
 * }
 * }
 */
public class StdVideoEncodeH264RefPicMarkingEntry {

    StdVideoEncodeH264RefPicMarkingEntry() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("memory_management_control_operation"),
        vulkan_h.C_SHORT.withName("difference_of_pic_nums_minus1"),
        vulkan_h.C_SHORT.withName("long_term_pic_num"),
        vulkan_h.C_SHORT.withName("long_term_frame_idx"),
        vulkan_h.C_SHORT.withName("max_long_term_frame_idx_plus1")
    ).withName("StdVideoEncodeH264RefPicMarkingEntry");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt memory_management_control_operation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memory_management_control_operation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264MemMgmtControlOp memory_management_control_operation
     * }
     */
    public static final OfInt memory_management_control_operation$layout() {
        return memory_management_control_operation$LAYOUT;
    }

    private static final long memory_management_control_operation$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264MemMgmtControlOp memory_management_control_operation
     * }
     */
    public static final long memory_management_control_operation$offset() {
        return memory_management_control_operation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264MemMgmtControlOp memory_management_control_operation
     * }
     */
    public static int memory_management_control_operation(MemorySegment struct) {
        return struct.get(memory_management_control_operation$LAYOUT, memory_management_control_operation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264MemMgmtControlOp memory_management_control_operation
     * }
     */
    public static void memory_management_control_operation(MemorySegment struct, int fieldValue) {
        struct.set(memory_management_control_operation$LAYOUT, memory_management_control_operation$OFFSET, fieldValue);
    }

    private static final OfShort difference_of_pic_nums_minus1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("difference_of_pic_nums_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t difference_of_pic_nums_minus1
     * }
     */
    public static final OfShort difference_of_pic_nums_minus1$layout() {
        return difference_of_pic_nums_minus1$LAYOUT;
    }

    private static final long difference_of_pic_nums_minus1$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t difference_of_pic_nums_minus1
     * }
     */
    public static final long difference_of_pic_nums_minus1$offset() {
        return difference_of_pic_nums_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t difference_of_pic_nums_minus1
     * }
     */
    public static short difference_of_pic_nums_minus1(MemorySegment struct) {
        return struct.get(difference_of_pic_nums_minus1$LAYOUT, difference_of_pic_nums_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t difference_of_pic_nums_minus1
     * }
     */
    public static void difference_of_pic_nums_minus1(MemorySegment struct, short fieldValue) {
        struct.set(difference_of_pic_nums_minus1$LAYOUT, difference_of_pic_nums_minus1$OFFSET, fieldValue);
    }

    private static final OfShort long_term_pic_num$LAYOUT = (OfShort)$LAYOUT.select(groupElement("long_term_pic_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static final OfShort long_term_pic_num$layout() {
        return long_term_pic_num$LAYOUT;
    }

    private static final long long_term_pic_num$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static final long long_term_pic_num$offset() {
        return long_term_pic_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static short long_term_pic_num(MemorySegment struct) {
        return struct.get(long_term_pic_num$LAYOUT, long_term_pic_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static void long_term_pic_num(MemorySegment struct, short fieldValue) {
        struct.set(long_term_pic_num$LAYOUT, long_term_pic_num$OFFSET, fieldValue);
    }

    private static final OfShort long_term_frame_idx$LAYOUT = (OfShort)$LAYOUT.select(groupElement("long_term_frame_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static final OfShort long_term_frame_idx$layout() {
        return long_term_frame_idx$LAYOUT;
    }

    private static final long long_term_frame_idx$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static final long long_term_frame_idx$offset() {
        return long_term_frame_idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static short long_term_frame_idx(MemorySegment struct) {
        return struct.get(long_term_frame_idx$LAYOUT, long_term_frame_idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static void long_term_frame_idx(MemorySegment struct, short fieldValue) {
        struct.set(long_term_frame_idx$LAYOUT, long_term_frame_idx$OFFSET, fieldValue);
    }

    private static final OfShort max_long_term_frame_idx_plus1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("max_long_term_frame_idx_plus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t max_long_term_frame_idx_plus1
     * }
     */
    public static final OfShort max_long_term_frame_idx_plus1$layout() {
        return max_long_term_frame_idx_plus1$LAYOUT;
    }

    private static final long max_long_term_frame_idx_plus1$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t max_long_term_frame_idx_plus1
     * }
     */
    public static final long max_long_term_frame_idx_plus1$offset() {
        return max_long_term_frame_idx_plus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t max_long_term_frame_idx_plus1
     * }
     */
    public static short max_long_term_frame_idx_plus1(MemorySegment struct) {
        return struct.get(max_long_term_frame_idx_plus1$LAYOUT, max_long_term_frame_idx_plus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t max_long_term_frame_idx_plus1
     * }
     */
    public static void max_long_term_frame_idx_plus1(MemorySegment struct, short fieldValue) {
        struct.set(max_long_term_frame_idx_plus1$LAYOUT, max_long_term_frame_idx_plus1$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

