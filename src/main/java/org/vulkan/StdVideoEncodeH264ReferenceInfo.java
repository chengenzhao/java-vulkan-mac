// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH264ReferenceInfo {
 *     StdVideoEncodeH264ReferenceInfoFlags flags;
 *     StdVideoH264PictureType primary_pic_type;
 *     uint32_t FrameNum;
 *     int32_t PicOrderCnt;
 *     uint16_t long_term_pic_num;
 *     uint16_t long_term_frame_idx;
 *     uint8_t temporal_id;
 * }
 * }
 */
public class StdVideoEncodeH264ReferenceInfo {

    StdVideoEncodeH264ReferenceInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoEncodeH264ReferenceInfoFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("primary_pic_type"),
        vulkan_h.C_INT.withName("FrameNum"),
        vulkan_h.C_INT.withName("PicOrderCnt"),
        vulkan_h.C_SHORT.withName("long_term_pic_num"),
        vulkan_h.C_SHORT.withName("long_term_frame_idx"),
        vulkan_h.C_CHAR.withName("temporal_id"),
        MemoryLayout.paddingLayout(3)
    ).withName("StdVideoEncodeH264ReferenceInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt primary_pic_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("primary_pic_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264PictureType primary_pic_type
     * }
     */
    public static final OfInt primary_pic_type$layout() {
        return primary_pic_type$LAYOUT;
    }

    private static final long primary_pic_type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264PictureType primary_pic_type
     * }
     */
    public static final long primary_pic_type$offset() {
        return primary_pic_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264PictureType primary_pic_type
     * }
     */
    public static int primary_pic_type(MemorySegment struct) {
        return struct.get(primary_pic_type$LAYOUT, primary_pic_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264PictureType primary_pic_type
     * }
     */
    public static void primary_pic_type(MemorySegment struct, int fieldValue) {
        struct.set(primary_pic_type$LAYOUT, primary_pic_type$OFFSET, fieldValue);
    }

    private static final OfInt FrameNum$LAYOUT = (OfInt)$LAYOUT.select(groupElement("FrameNum"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t FrameNum
     * }
     */
    public static final OfInt FrameNum$layout() {
        return FrameNum$LAYOUT;
    }

    private static final long FrameNum$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t FrameNum
     * }
     */
    public static final long FrameNum$offset() {
        return FrameNum$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t FrameNum
     * }
     */
    public static int FrameNum(MemorySegment struct) {
        return struct.get(FrameNum$LAYOUT, FrameNum$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t FrameNum
     * }
     */
    public static void FrameNum(MemorySegment struct, int fieldValue) {
        struct.set(FrameNum$LAYOUT, FrameNum$OFFSET, fieldValue);
    }

    private static final OfInt PicOrderCnt$LAYOUT = (OfInt)$LAYOUT.select(groupElement("PicOrderCnt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt
     * }
     */
    public static final OfInt PicOrderCnt$layout() {
        return PicOrderCnt$LAYOUT;
    }

    private static final long PicOrderCnt$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt
     * }
     */
    public static final long PicOrderCnt$offset() {
        return PicOrderCnt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt
     * }
     */
    public static int PicOrderCnt(MemorySegment struct) {
        return struct.get(PicOrderCnt$LAYOUT, PicOrderCnt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t PicOrderCnt
     * }
     */
    public static void PicOrderCnt(MemorySegment struct, int fieldValue) {
        struct.set(PicOrderCnt$LAYOUT, PicOrderCnt$OFFSET, fieldValue);
    }

    private static final OfShort long_term_pic_num$LAYOUT = (OfShort)$LAYOUT.select(groupElement("long_term_pic_num"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static final OfShort long_term_pic_num$layout() {
        return long_term_pic_num$LAYOUT;
    }

    private static final long long_term_pic_num$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static final long long_term_pic_num$offset() {
        return long_term_pic_num$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static short long_term_pic_num(MemorySegment struct) {
        return struct.get(long_term_pic_num$LAYOUT, long_term_pic_num$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t long_term_pic_num
     * }
     */
    public static void long_term_pic_num(MemorySegment struct, short fieldValue) {
        struct.set(long_term_pic_num$LAYOUT, long_term_pic_num$OFFSET, fieldValue);
    }

    private static final OfShort long_term_frame_idx$LAYOUT = (OfShort)$LAYOUT.select(groupElement("long_term_frame_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static final OfShort long_term_frame_idx$layout() {
        return long_term_frame_idx$LAYOUT;
    }

    private static final long long_term_frame_idx$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static final long long_term_frame_idx$offset() {
        return long_term_frame_idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static short long_term_frame_idx(MemorySegment struct) {
        return struct.get(long_term_frame_idx$LAYOUT, long_term_frame_idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t long_term_frame_idx
     * }
     */
    public static void long_term_frame_idx(MemorySegment struct, short fieldValue) {
        struct.set(long_term_frame_idx$LAYOUT, long_term_frame_idx$OFFSET, fieldValue);
    }

    private static final OfByte temporal_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("temporal_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t temporal_id
     * }
     */
    public static final OfByte temporal_id$layout() {
        return temporal_id$LAYOUT;
    }

    private static final long temporal_id$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t temporal_id
     * }
     */
    public static final long temporal_id$offset() {
        return temporal_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t temporal_id
     * }
     */
    public static byte temporal_id(MemorySegment struct) {
        return struct.get(temporal_id$LAYOUT, temporal_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t temporal_id
     * }
     */
    public static void temporal_id(MemorySegment struct, byte fieldValue) {
        struct.set(temporal_id$LAYOUT, temporal_id$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

