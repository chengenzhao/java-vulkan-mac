// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH264ReferenceListsInfo {
 *     StdVideoEncodeH264ReferenceListsInfoFlags flags;
 *     uint8_t num_ref_idx_l0_active_minus1;
 *     uint8_t num_ref_idx_l1_active_minus1;
 *     uint8_t RefPicList0[32];
 *     uint8_t RefPicList1[32];
 *     uint8_t refList0ModOpCount;
 *     uint8_t refList1ModOpCount;
 *     uint8_t refPicMarkingOpCount;
 *     uint8_t reserved1[7];
 *     const StdVideoEncodeH264RefListModEntry *pRefList0ModOperations;
 *     const StdVideoEncodeH264RefListModEntry *pRefList1ModOperations;
 *     const StdVideoEncodeH264RefPicMarkingEntry *pRefPicMarkingOperations;
 * }
 * }
 */
public class StdVideoEncodeH264ReferenceListsInfo {

    StdVideoEncodeH264ReferenceListsInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoEncodeH264ReferenceListsInfoFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("num_ref_idx_l0_active_minus1"),
        vulkan_h.C_CHAR.withName("num_ref_idx_l1_active_minus1"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_CHAR).withName("RefPicList0"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_CHAR).withName("RefPicList1"),
        vulkan_h.C_CHAR.withName("refList0ModOpCount"),
        vulkan_h.C_CHAR.withName("refList1ModOpCount"),
        vulkan_h.C_CHAR.withName("refPicMarkingOpCount"),
        MemoryLayout.sequenceLayout(7, vulkan_h.C_CHAR).withName("reserved1"),
        vulkan_h.C_POINTER.withName("pRefList0ModOperations"),
        vulkan_h.C_POINTER.withName("pRefList1ModOperations"),
        vulkan_h.C_POINTER.withName("pRefPicMarkingOperations")
    ).withName("StdVideoEncodeH264ReferenceListsInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceListsInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceListsInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceListsInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264ReferenceListsInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte num_ref_idx_l0_active_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_ref_idx_l0_active_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static final OfByte num_ref_idx_l0_active_minus1$layout() {
        return num_ref_idx_l0_active_minus1$LAYOUT;
    }

    private static final long num_ref_idx_l0_active_minus1$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static final long num_ref_idx_l0_active_minus1$offset() {
        return num_ref_idx_l0_active_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static byte num_ref_idx_l0_active_minus1(MemorySegment struct) {
        return struct.get(num_ref_idx_l0_active_minus1$LAYOUT, num_ref_idx_l0_active_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static void num_ref_idx_l0_active_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_ref_idx_l0_active_minus1$LAYOUT, num_ref_idx_l0_active_minus1$OFFSET, fieldValue);
    }

    private static final OfByte num_ref_idx_l1_active_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_ref_idx_l1_active_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static final OfByte num_ref_idx_l1_active_minus1$layout() {
        return num_ref_idx_l1_active_minus1$LAYOUT;
    }

    private static final long num_ref_idx_l1_active_minus1$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static final long num_ref_idx_l1_active_minus1$offset() {
        return num_ref_idx_l1_active_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static byte num_ref_idx_l1_active_minus1(MemorySegment struct) {
        return struct.get(num_ref_idx_l1_active_minus1$LAYOUT, num_ref_idx_l1_active_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static void num_ref_idx_l1_active_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_ref_idx_l1_active_minus1$LAYOUT, num_ref_idx_l1_active_minus1$OFFSET, fieldValue);
    }

    private static final SequenceLayout RefPicList0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RefPicList0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[32]
     * }
     */
    public static final SequenceLayout RefPicList0$layout() {
        return RefPicList0$LAYOUT;
    }

    private static final long RefPicList0$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[32]
     * }
     */
    public static final long RefPicList0$offset() {
        return RefPicList0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[32]
     * }
     */
    public static MemorySegment RefPicList0(MemorySegment struct) {
        return struct.asSlice(RefPicList0$OFFSET, RefPicList0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[32]
     * }
     */
    public static void RefPicList0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RefPicList0$OFFSET, RefPicList0$LAYOUT.byteSize());
    }

    private static long[] RefPicList0$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[32]
     * }
     */
    public static long[] RefPicList0$dimensions() {
        return RefPicList0$DIMS;
    }
    private static final VarHandle RefPicList0$ELEM_HANDLE = RefPicList0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[32]
     * }
     */
    public static byte RefPicList0(MemorySegment struct, long index0) {
        return (byte)RefPicList0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[32]
     * }
     */
    public static void RefPicList0(MemorySegment struct, long index0, byte fieldValue) {
        RefPicList0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout RefPicList1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RefPicList1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[32]
     * }
     */
    public static final SequenceLayout RefPicList1$layout() {
        return RefPicList1$LAYOUT;
    }

    private static final long RefPicList1$OFFSET = 38;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[32]
     * }
     */
    public static final long RefPicList1$offset() {
        return RefPicList1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[32]
     * }
     */
    public static MemorySegment RefPicList1(MemorySegment struct) {
        return struct.asSlice(RefPicList1$OFFSET, RefPicList1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[32]
     * }
     */
    public static void RefPicList1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RefPicList1$OFFSET, RefPicList1$LAYOUT.byteSize());
    }

    private static long[] RefPicList1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[32]
     * }
     */
    public static long[] RefPicList1$dimensions() {
        return RefPicList1$DIMS;
    }
    private static final VarHandle RefPicList1$ELEM_HANDLE = RefPicList1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[32]
     * }
     */
    public static byte RefPicList1(MemorySegment struct, long index0) {
        return (byte)RefPicList1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[32]
     * }
     */
    public static void RefPicList1(MemorySegment struct, long index0, byte fieldValue) {
        RefPicList1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte refList0ModOpCount$LAYOUT = (OfByte)$LAYOUT.select(groupElement("refList0ModOpCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t refList0ModOpCount
     * }
     */
    public static final OfByte refList0ModOpCount$layout() {
        return refList0ModOpCount$LAYOUT;
    }

    private static final long refList0ModOpCount$OFFSET = 70;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t refList0ModOpCount
     * }
     */
    public static final long refList0ModOpCount$offset() {
        return refList0ModOpCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t refList0ModOpCount
     * }
     */
    public static byte refList0ModOpCount(MemorySegment struct) {
        return struct.get(refList0ModOpCount$LAYOUT, refList0ModOpCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t refList0ModOpCount
     * }
     */
    public static void refList0ModOpCount(MemorySegment struct, byte fieldValue) {
        struct.set(refList0ModOpCount$LAYOUT, refList0ModOpCount$OFFSET, fieldValue);
    }

    private static final OfByte refList1ModOpCount$LAYOUT = (OfByte)$LAYOUT.select(groupElement("refList1ModOpCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t refList1ModOpCount
     * }
     */
    public static final OfByte refList1ModOpCount$layout() {
        return refList1ModOpCount$LAYOUT;
    }

    private static final long refList1ModOpCount$OFFSET = 71;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t refList1ModOpCount
     * }
     */
    public static final long refList1ModOpCount$offset() {
        return refList1ModOpCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t refList1ModOpCount
     * }
     */
    public static byte refList1ModOpCount(MemorySegment struct) {
        return struct.get(refList1ModOpCount$LAYOUT, refList1ModOpCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t refList1ModOpCount
     * }
     */
    public static void refList1ModOpCount(MemorySegment struct, byte fieldValue) {
        struct.set(refList1ModOpCount$LAYOUT, refList1ModOpCount$OFFSET, fieldValue);
    }

    private static final OfByte refPicMarkingOpCount$LAYOUT = (OfByte)$LAYOUT.select(groupElement("refPicMarkingOpCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t refPicMarkingOpCount
     * }
     */
    public static final OfByte refPicMarkingOpCount$layout() {
        return refPicMarkingOpCount$LAYOUT;
    }

    private static final long refPicMarkingOpCount$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t refPicMarkingOpCount
     * }
     */
    public static final long refPicMarkingOpCount$offset() {
        return refPicMarkingOpCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t refPicMarkingOpCount
     * }
     */
    public static byte refPicMarkingOpCount(MemorySegment struct) {
        return struct.get(refPicMarkingOpCount$LAYOUT, refPicMarkingOpCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t refPicMarkingOpCount
     * }
     */
    public static void refPicMarkingOpCount(MemorySegment struct, byte fieldValue) {
        struct.set(refPicMarkingOpCount$LAYOUT, refPicMarkingOpCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout reserved1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static final SequenceLayout reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 73;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static MemorySegment reserved1(MemorySegment struct) {
        return struct.asSlice(reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static void reserved1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved1$OFFSET, reserved1$LAYOUT.byteSize());
    }

    private static long[] reserved1$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static long[] reserved1$dimensions() {
        return reserved1$DIMS;
    }
    private static final VarHandle reserved1$ELEM_HANDLE = reserved1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static byte reserved1(MemorySegment struct, long index0) {
        return (byte)reserved1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1[7]
     * }
     */
    public static void reserved1(MemorySegment struct, long index0, byte fieldValue) {
        reserved1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout pRefList0ModOperations$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pRefList0ModOperations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList0ModOperations
     * }
     */
    public static final AddressLayout pRefList0ModOperations$layout() {
        return pRefList0ModOperations$LAYOUT;
    }

    private static final long pRefList0ModOperations$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList0ModOperations
     * }
     */
    public static final long pRefList0ModOperations$offset() {
        return pRefList0ModOperations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList0ModOperations
     * }
     */
    public static MemorySegment pRefList0ModOperations(MemorySegment struct) {
        return struct.get(pRefList0ModOperations$LAYOUT, pRefList0ModOperations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList0ModOperations
     * }
     */
    public static void pRefList0ModOperations(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pRefList0ModOperations$LAYOUT, pRefList0ModOperations$OFFSET, fieldValue);
    }

    private static final AddressLayout pRefList1ModOperations$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pRefList1ModOperations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList1ModOperations
     * }
     */
    public static final AddressLayout pRefList1ModOperations$layout() {
        return pRefList1ModOperations$LAYOUT;
    }

    private static final long pRefList1ModOperations$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList1ModOperations
     * }
     */
    public static final long pRefList1ModOperations$offset() {
        return pRefList1ModOperations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList1ModOperations
     * }
     */
    public static MemorySegment pRefList1ModOperations(MemorySegment struct) {
        return struct.get(pRefList1ModOperations$LAYOUT, pRefList1ModOperations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefListModEntry *pRefList1ModOperations
     * }
     */
    public static void pRefList1ModOperations(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pRefList1ModOperations$LAYOUT, pRefList1ModOperations$OFFSET, fieldValue);
    }

    private static final AddressLayout pRefPicMarkingOperations$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pRefPicMarkingOperations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefPicMarkingEntry *pRefPicMarkingOperations
     * }
     */
    public static final AddressLayout pRefPicMarkingOperations$layout() {
        return pRefPicMarkingOperations$LAYOUT;
    }

    private static final long pRefPicMarkingOperations$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefPicMarkingEntry *pRefPicMarkingOperations
     * }
     */
    public static final long pRefPicMarkingOperations$offset() {
        return pRefPicMarkingOperations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefPicMarkingEntry *pRefPicMarkingOperations
     * }
     */
    public static MemorySegment pRefPicMarkingOperations(MemorySegment struct) {
        return struct.get(pRefPicMarkingOperations$LAYOUT, pRefPicMarkingOperations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264RefPicMarkingEntry *pRefPicMarkingOperations
     * }
     */
    public static void pRefPicMarkingOperations(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pRefPicMarkingOperations$LAYOUT, pRefPicMarkingOperations$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

