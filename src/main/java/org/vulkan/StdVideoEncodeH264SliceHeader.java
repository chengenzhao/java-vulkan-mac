// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH264SliceHeader {
 *     StdVideoEncodeH264SliceHeaderFlags flags;
 *     uint32_t first_mb_in_slice;
 *     StdVideoH264SliceType slice_type;
 *     int8_t slice_alpha_c0_offset_div2;
 *     int8_t slice_beta_offset_div2;
 *     int8_t slice_qp_delta;
 *     uint8_t reserved1;
 *     StdVideoH264CabacInitIdc cabac_init_idc;
 *     StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
 *     const StdVideoEncodeH264WeightTable *pWeightTable;
 * }
 * }
 */
public class StdVideoEncodeH264SliceHeader {

    StdVideoEncodeH264SliceHeader() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoEncodeH264SliceHeaderFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("first_mb_in_slice"),
        vulkan_h.C_INT.withName("slice_type"),
        vulkan_h.C_CHAR.withName("slice_alpha_c0_offset_div2"),
        vulkan_h.C_CHAR.withName("slice_beta_offset_div2"),
        vulkan_h.C_CHAR.withName("slice_qp_delta"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_INT.withName("cabac_init_idc"),
        vulkan_h.C_INT.withName("disable_deblocking_filter_idc"),
        vulkan_h.C_POINTER.withName("pWeightTable")
    ).withName("StdVideoEncodeH264SliceHeader");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264SliceHeaderFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264SliceHeaderFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264SliceHeaderFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH264SliceHeaderFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt first_mb_in_slice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("first_mb_in_slice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t first_mb_in_slice
     * }
     */
    public static final OfInt first_mb_in_slice$layout() {
        return first_mb_in_slice$LAYOUT;
    }

    private static final long first_mb_in_slice$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t first_mb_in_slice
     * }
     */
    public static final long first_mb_in_slice$offset() {
        return first_mb_in_slice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t first_mb_in_slice
     * }
     */
    public static int first_mb_in_slice(MemorySegment struct) {
        return struct.get(first_mb_in_slice$LAYOUT, first_mb_in_slice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t first_mb_in_slice
     * }
     */
    public static void first_mb_in_slice(MemorySegment struct, int fieldValue) {
        struct.set(first_mb_in_slice$LAYOUT, first_mb_in_slice$OFFSET, fieldValue);
    }

    private static final OfInt slice_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("slice_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264SliceType slice_type
     * }
     */
    public static final OfInt slice_type$layout() {
        return slice_type$LAYOUT;
    }

    private static final long slice_type$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264SliceType slice_type
     * }
     */
    public static final long slice_type$offset() {
        return slice_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264SliceType slice_type
     * }
     */
    public static int slice_type(MemorySegment struct) {
        return struct.get(slice_type$LAYOUT, slice_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264SliceType slice_type
     * }
     */
    public static void slice_type(MemorySegment struct, int fieldValue) {
        struct.set(slice_type$LAYOUT, slice_type$OFFSET, fieldValue);
    }

    private static final OfByte slice_alpha_c0_offset_div2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_alpha_c0_offset_div2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_alpha_c0_offset_div2
     * }
     */
    public static final OfByte slice_alpha_c0_offset_div2$layout() {
        return slice_alpha_c0_offset_div2$LAYOUT;
    }

    private static final long slice_alpha_c0_offset_div2$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_alpha_c0_offset_div2
     * }
     */
    public static final long slice_alpha_c0_offset_div2$offset() {
        return slice_alpha_c0_offset_div2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_alpha_c0_offset_div2
     * }
     */
    public static byte slice_alpha_c0_offset_div2(MemorySegment struct) {
        return struct.get(slice_alpha_c0_offset_div2$LAYOUT, slice_alpha_c0_offset_div2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_alpha_c0_offset_div2
     * }
     */
    public static void slice_alpha_c0_offset_div2(MemorySegment struct, byte fieldValue) {
        struct.set(slice_alpha_c0_offset_div2$LAYOUT, slice_alpha_c0_offset_div2$OFFSET, fieldValue);
    }

    private static final OfByte slice_beta_offset_div2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_beta_offset_div2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static final OfByte slice_beta_offset_div2$layout() {
        return slice_beta_offset_div2$LAYOUT;
    }

    private static final long slice_beta_offset_div2$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static final long slice_beta_offset_div2$offset() {
        return slice_beta_offset_div2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static byte slice_beta_offset_div2(MemorySegment struct) {
        return struct.get(slice_beta_offset_div2$LAYOUT, slice_beta_offset_div2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static void slice_beta_offset_div2(MemorySegment struct, byte fieldValue) {
        struct.set(slice_beta_offset_div2$LAYOUT, slice_beta_offset_div2$OFFSET, fieldValue);
    }

    private static final OfByte slice_qp_delta$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_qp_delta"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static final OfByte slice_qp_delta$layout() {
        return slice_qp_delta$LAYOUT;
    }

    private static final long slice_qp_delta$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static final long slice_qp_delta$offset() {
        return slice_qp_delta$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static byte slice_qp_delta(MemorySegment struct) {
        return struct.get(slice_qp_delta$LAYOUT, slice_qp_delta$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static void slice_qp_delta(MemorySegment struct, byte fieldValue) {
        struct.set(slice_qp_delta$LAYOUT, slice_qp_delta$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfInt cabac_init_idc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cabac_init_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264CabacInitIdc cabac_init_idc
     * }
     */
    public static final OfInt cabac_init_idc$layout() {
        return cabac_init_idc$LAYOUT;
    }

    private static final long cabac_init_idc$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264CabacInitIdc cabac_init_idc
     * }
     */
    public static final long cabac_init_idc$offset() {
        return cabac_init_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264CabacInitIdc cabac_init_idc
     * }
     */
    public static int cabac_init_idc(MemorySegment struct) {
        return struct.get(cabac_init_idc$LAYOUT, cabac_init_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264CabacInitIdc cabac_init_idc
     * }
     */
    public static void cabac_init_idc(MemorySegment struct, int fieldValue) {
        struct.set(cabac_init_idc$LAYOUT, cabac_init_idc$OFFSET, fieldValue);
    }

    private static final OfInt disable_deblocking_filter_idc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("disable_deblocking_filter_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc
     * }
     */
    public static final OfInt disable_deblocking_filter_idc$layout() {
        return disable_deblocking_filter_idc$LAYOUT;
    }

    private static final long disable_deblocking_filter_idc$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc
     * }
     */
    public static final long disable_deblocking_filter_idc$offset() {
        return disable_deblocking_filter_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc
     * }
     */
    public static int disable_deblocking_filter_idc(MemorySegment struct) {
        return struct.get(disable_deblocking_filter_idc$LAYOUT, disable_deblocking_filter_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc
     * }
     */
    public static void disable_deblocking_filter_idc(MemorySegment struct, int fieldValue) {
        struct.set(disable_deblocking_filter_idc$LAYOUT, disable_deblocking_filter_idc$OFFSET, fieldValue);
    }

    private static final AddressLayout pWeightTable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pWeightTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264WeightTable *pWeightTable
     * }
     */
    public static final AddressLayout pWeightTable$layout() {
        return pWeightTable$LAYOUT;
    }

    private static final long pWeightTable$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264WeightTable *pWeightTable
     * }
     */
    public static final long pWeightTable$offset() {
        return pWeightTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264WeightTable *pWeightTable
     * }
     */
    public static MemorySegment pWeightTable(MemorySegment struct) {
        return struct.get(pWeightTable$LAYOUT, pWeightTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH264WeightTable *pWeightTable
     * }
     */
    public static void pWeightTable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pWeightTable$LAYOUT, pWeightTable$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

