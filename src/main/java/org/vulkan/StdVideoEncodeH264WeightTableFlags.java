// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH264WeightTableFlags {
 *     uint32_t luma_weight_l0_flag;
 *     uint32_t chroma_weight_l0_flag;
 *     uint32_t luma_weight_l1_flag;
 *     uint32_t chroma_weight_l1_flag;
 * }
 * }
 */
public class StdVideoEncodeH264WeightTableFlags {

    StdVideoEncodeH264WeightTableFlags() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("luma_weight_l0_flag"),
        vulkan_h.C_INT.withName("chroma_weight_l0_flag"),
        vulkan_h.C_INT.withName("luma_weight_l1_flag"),
        vulkan_h.C_INT.withName("chroma_weight_l1_flag")
    ).withName("StdVideoEncodeH264WeightTableFlags");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt luma_weight_l0_flag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("luma_weight_l0_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l0_flag
     * }
     */
    public static final OfInt luma_weight_l0_flag$layout() {
        return luma_weight_l0_flag$LAYOUT;
    }

    private static final long luma_weight_l0_flag$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l0_flag
     * }
     */
    public static final long luma_weight_l0_flag$offset() {
        return luma_weight_l0_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l0_flag
     * }
     */
    public static int luma_weight_l0_flag(MemorySegment struct) {
        return struct.get(luma_weight_l0_flag$LAYOUT, luma_weight_l0_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l0_flag
     * }
     */
    public static void luma_weight_l0_flag(MemorySegment struct, int fieldValue) {
        struct.set(luma_weight_l0_flag$LAYOUT, luma_weight_l0_flag$OFFSET, fieldValue);
    }

    private static final OfInt chroma_weight_l0_flag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chroma_weight_l0_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l0_flag
     * }
     */
    public static final OfInt chroma_weight_l0_flag$layout() {
        return chroma_weight_l0_flag$LAYOUT;
    }

    private static final long chroma_weight_l0_flag$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l0_flag
     * }
     */
    public static final long chroma_weight_l0_flag$offset() {
        return chroma_weight_l0_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l0_flag
     * }
     */
    public static int chroma_weight_l0_flag(MemorySegment struct) {
        return struct.get(chroma_weight_l0_flag$LAYOUT, chroma_weight_l0_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l0_flag
     * }
     */
    public static void chroma_weight_l0_flag(MemorySegment struct, int fieldValue) {
        struct.set(chroma_weight_l0_flag$LAYOUT, chroma_weight_l0_flag$OFFSET, fieldValue);
    }

    private static final OfInt luma_weight_l1_flag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("luma_weight_l1_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l1_flag
     * }
     */
    public static final OfInt luma_weight_l1_flag$layout() {
        return luma_weight_l1_flag$LAYOUT;
    }

    private static final long luma_weight_l1_flag$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l1_flag
     * }
     */
    public static final long luma_weight_l1_flag$offset() {
        return luma_weight_l1_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l1_flag
     * }
     */
    public static int luma_weight_l1_flag(MemorySegment struct) {
        return struct.get(luma_weight_l1_flag$LAYOUT, luma_weight_l1_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t luma_weight_l1_flag
     * }
     */
    public static void luma_weight_l1_flag(MemorySegment struct, int fieldValue) {
        struct.set(luma_weight_l1_flag$LAYOUT, luma_weight_l1_flag$OFFSET, fieldValue);
    }

    private static final OfInt chroma_weight_l1_flag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chroma_weight_l1_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l1_flag
     * }
     */
    public static final OfInt chroma_weight_l1_flag$layout() {
        return chroma_weight_l1_flag$LAYOUT;
    }

    private static final long chroma_weight_l1_flag$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l1_flag
     * }
     */
    public static final long chroma_weight_l1_flag$offset() {
        return chroma_weight_l1_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l1_flag
     * }
     */
    public static int chroma_weight_l1_flag(MemorySegment struct) {
        return struct.get(chroma_weight_l1_flag$LAYOUT, chroma_weight_l1_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t chroma_weight_l1_flag
     * }
     */
    public static void chroma_weight_l1_flag(MemorySegment struct, int fieldValue) {
        struct.set(chroma_weight_l1_flag$LAYOUT, chroma_weight_l1_flag$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

