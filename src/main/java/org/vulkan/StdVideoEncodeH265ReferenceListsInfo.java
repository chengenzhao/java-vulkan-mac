// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH265ReferenceListsInfo {
 *     StdVideoEncodeH265ReferenceListsInfoFlags flags;
 *     uint8_t num_ref_idx_l0_active_minus1;
 *     uint8_t num_ref_idx_l1_active_minus1;
 *     uint8_t RefPicList0[15];
 *     uint8_t RefPicList1[15];
 *     uint8_t list_entry_l0[15];
 *     uint8_t list_entry_l1[15];
 * }
 * }
 */
public class StdVideoEncodeH265ReferenceListsInfo {

    StdVideoEncodeH265ReferenceListsInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoEncodeH265ReferenceListsInfoFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("num_ref_idx_l0_active_minus1"),
        vulkan_h.C_CHAR.withName("num_ref_idx_l1_active_minus1"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("RefPicList0"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("RefPicList1"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("list_entry_l0"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("list_entry_l1"),
        MemoryLayout.paddingLayout(2)
    ).withName("StdVideoEncodeH265ReferenceListsInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265ReferenceListsInfoFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265ReferenceListsInfoFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265ReferenceListsInfoFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265ReferenceListsInfoFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte num_ref_idx_l0_active_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_ref_idx_l0_active_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static final OfByte num_ref_idx_l0_active_minus1$layout() {
        return num_ref_idx_l0_active_minus1$LAYOUT;
    }

    private static final long num_ref_idx_l0_active_minus1$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static final long num_ref_idx_l0_active_minus1$offset() {
        return num_ref_idx_l0_active_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static byte num_ref_idx_l0_active_minus1(MemorySegment struct) {
        return struct.get(num_ref_idx_l0_active_minus1$LAYOUT, num_ref_idx_l0_active_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_active_minus1
     * }
     */
    public static void num_ref_idx_l0_active_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_ref_idx_l0_active_minus1$LAYOUT, num_ref_idx_l0_active_minus1$OFFSET, fieldValue);
    }

    private static final OfByte num_ref_idx_l1_active_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_ref_idx_l1_active_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static final OfByte num_ref_idx_l1_active_minus1$layout() {
        return num_ref_idx_l1_active_minus1$LAYOUT;
    }

    private static final long num_ref_idx_l1_active_minus1$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static final long num_ref_idx_l1_active_minus1$offset() {
        return num_ref_idx_l1_active_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static byte num_ref_idx_l1_active_minus1(MemorySegment struct) {
        return struct.get(num_ref_idx_l1_active_minus1$LAYOUT, num_ref_idx_l1_active_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_active_minus1
     * }
     */
    public static void num_ref_idx_l1_active_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_ref_idx_l1_active_minus1$LAYOUT, num_ref_idx_l1_active_minus1$OFFSET, fieldValue);
    }

    private static final SequenceLayout RefPicList0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RefPicList0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[15]
     * }
     */
    public static final SequenceLayout RefPicList0$layout() {
        return RefPicList0$LAYOUT;
    }

    private static final long RefPicList0$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[15]
     * }
     */
    public static final long RefPicList0$offset() {
        return RefPicList0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[15]
     * }
     */
    public static MemorySegment RefPicList0(MemorySegment struct) {
        return struct.asSlice(RefPicList0$OFFSET, RefPicList0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[15]
     * }
     */
    public static void RefPicList0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RefPicList0$OFFSET, RefPicList0$LAYOUT.byteSize());
    }

    private static long[] RefPicList0$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[15]
     * }
     */
    public static long[] RefPicList0$dimensions() {
        return RefPicList0$DIMS;
    }
    private static final VarHandle RefPicList0$ELEM_HANDLE = RefPicList0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[15]
     * }
     */
    public static byte RefPicList0(MemorySegment struct, long index0) {
        return (byte)RefPicList0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList0[15]
     * }
     */
    public static void RefPicList0(MemorySegment struct, long index0, byte fieldValue) {
        RefPicList0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout RefPicList1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("RefPicList1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[15]
     * }
     */
    public static final SequenceLayout RefPicList1$layout() {
        return RefPicList1$LAYOUT;
    }

    private static final long RefPicList1$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[15]
     * }
     */
    public static final long RefPicList1$offset() {
        return RefPicList1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[15]
     * }
     */
    public static MemorySegment RefPicList1(MemorySegment struct) {
        return struct.asSlice(RefPicList1$OFFSET, RefPicList1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[15]
     * }
     */
    public static void RefPicList1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, RefPicList1$OFFSET, RefPicList1$LAYOUT.byteSize());
    }

    private static long[] RefPicList1$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[15]
     * }
     */
    public static long[] RefPicList1$dimensions() {
        return RefPicList1$DIMS;
    }
    private static final VarHandle RefPicList1$ELEM_HANDLE = RefPicList1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[15]
     * }
     */
    public static byte RefPicList1(MemorySegment struct, long index0) {
        return (byte)RefPicList1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t RefPicList1[15]
     * }
     */
    public static void RefPicList1(MemorySegment struct, long index0, byte fieldValue) {
        RefPicList1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout list_entry_l0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("list_entry_l0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l0[15]
     * }
     */
    public static final SequenceLayout list_entry_l0$layout() {
        return list_entry_l0$LAYOUT;
    }

    private static final long list_entry_l0$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l0[15]
     * }
     */
    public static final long list_entry_l0$offset() {
        return list_entry_l0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l0[15]
     * }
     */
    public static MemorySegment list_entry_l0(MemorySegment struct) {
        return struct.asSlice(list_entry_l0$OFFSET, list_entry_l0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l0[15]
     * }
     */
    public static void list_entry_l0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, list_entry_l0$OFFSET, list_entry_l0$LAYOUT.byteSize());
    }

    private static long[] list_entry_l0$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t list_entry_l0[15]
     * }
     */
    public static long[] list_entry_l0$dimensions() {
        return list_entry_l0$DIMS;
    }
    private static final VarHandle list_entry_l0$ELEM_HANDLE = list_entry_l0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l0[15]
     * }
     */
    public static byte list_entry_l0(MemorySegment struct, long index0) {
        return (byte)list_entry_l0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l0[15]
     * }
     */
    public static void list_entry_l0(MemorySegment struct, long index0, byte fieldValue) {
        list_entry_l0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout list_entry_l1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("list_entry_l1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l1[15]
     * }
     */
    public static final SequenceLayout list_entry_l1$layout() {
        return list_entry_l1$LAYOUT;
    }

    private static final long list_entry_l1$OFFSET = 51;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l1[15]
     * }
     */
    public static final long list_entry_l1$offset() {
        return list_entry_l1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l1[15]
     * }
     */
    public static MemorySegment list_entry_l1(MemorySegment struct) {
        return struct.asSlice(list_entry_l1$OFFSET, list_entry_l1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l1[15]
     * }
     */
    public static void list_entry_l1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, list_entry_l1$OFFSET, list_entry_l1$LAYOUT.byteSize());
    }

    private static long[] list_entry_l1$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t list_entry_l1[15]
     * }
     */
    public static long[] list_entry_l1$dimensions() {
        return list_entry_l1$DIMS;
    }
    private static final VarHandle list_entry_l1$ELEM_HANDLE = list_entry_l1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l1[15]
     * }
     */
    public static byte list_entry_l1(MemorySegment struct, long index0) {
        return (byte)list_entry_l1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t list_entry_l1[15]
     * }
     */
    public static void list_entry_l1(MemorySegment struct, long index0, byte fieldValue) {
        list_entry_l1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

