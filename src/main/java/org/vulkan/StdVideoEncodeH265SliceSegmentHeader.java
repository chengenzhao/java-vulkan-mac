// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH265SliceSegmentHeader {
 *     StdVideoEncodeH265SliceSegmentHeaderFlags flags;
 *     StdVideoH265SliceType slice_type;
 *     uint32_t slice_segment_address;
 *     uint8_t collocated_ref_idx;
 *     uint8_t MaxNumMergeCand;
 *     int8_t slice_cb_qp_offset;
 *     int8_t slice_cr_qp_offset;
 *     int8_t slice_beta_offset_div2;
 *     int8_t slice_tc_offset_div2;
 *     int8_t slice_act_y_qp_offset;
 *     int8_t slice_act_cb_qp_offset;
 *     int8_t slice_act_cr_qp_offset;
 *     int8_t slice_qp_delta;
 *     uint16_t reserved1;
 *     const StdVideoEncodeH265WeightTable *pWeightTable;
 * }
 * }
 */
public class StdVideoEncodeH265SliceSegmentHeader {

    StdVideoEncodeH265SliceSegmentHeader() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoEncodeH265SliceSegmentHeaderFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("slice_type"),
        vulkan_h.C_INT.withName("slice_segment_address"),
        vulkan_h.C_CHAR.withName("collocated_ref_idx"),
        vulkan_h.C_CHAR.withName("MaxNumMergeCand"),
        vulkan_h.C_CHAR.withName("slice_cb_qp_offset"),
        vulkan_h.C_CHAR.withName("slice_cr_qp_offset"),
        vulkan_h.C_CHAR.withName("slice_beta_offset_div2"),
        vulkan_h.C_CHAR.withName("slice_tc_offset_div2"),
        vulkan_h.C_CHAR.withName("slice_act_y_qp_offset"),
        vulkan_h.C_CHAR.withName("slice_act_cb_qp_offset"),
        vulkan_h.C_CHAR.withName("slice_act_cr_qp_offset"),
        vulkan_h.C_CHAR.withName("slice_qp_delta"),
        vulkan_h.C_SHORT.withName("reserved1"),
        vulkan_h.C_POINTER.withName("pWeightTable")
    ).withName("StdVideoEncodeH265SliceSegmentHeader");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265SliceSegmentHeaderFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265SliceSegmentHeaderFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265SliceSegmentHeaderFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265SliceSegmentHeaderFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt slice_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("slice_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265SliceType slice_type
     * }
     */
    public static final OfInt slice_type$layout() {
        return slice_type$LAYOUT;
    }

    private static final long slice_type$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265SliceType slice_type
     * }
     */
    public static final long slice_type$offset() {
        return slice_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265SliceType slice_type
     * }
     */
    public static int slice_type(MemorySegment struct) {
        return struct.get(slice_type$LAYOUT, slice_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265SliceType slice_type
     * }
     */
    public static void slice_type(MemorySegment struct, int fieldValue) {
        struct.set(slice_type$LAYOUT, slice_type$OFFSET, fieldValue);
    }

    private static final OfInt slice_segment_address$LAYOUT = (OfInt)$LAYOUT.select(groupElement("slice_segment_address"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t slice_segment_address
     * }
     */
    public static final OfInt slice_segment_address$layout() {
        return slice_segment_address$LAYOUT;
    }

    private static final long slice_segment_address$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t slice_segment_address
     * }
     */
    public static final long slice_segment_address$offset() {
        return slice_segment_address$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t slice_segment_address
     * }
     */
    public static int slice_segment_address(MemorySegment struct) {
        return struct.get(slice_segment_address$LAYOUT, slice_segment_address$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t slice_segment_address
     * }
     */
    public static void slice_segment_address(MemorySegment struct, int fieldValue) {
        struct.set(slice_segment_address$LAYOUT, slice_segment_address$OFFSET, fieldValue);
    }

    private static final OfByte collocated_ref_idx$LAYOUT = (OfByte)$LAYOUT.select(groupElement("collocated_ref_idx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t collocated_ref_idx
     * }
     */
    public static final OfByte collocated_ref_idx$layout() {
        return collocated_ref_idx$LAYOUT;
    }

    private static final long collocated_ref_idx$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t collocated_ref_idx
     * }
     */
    public static final long collocated_ref_idx$offset() {
        return collocated_ref_idx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t collocated_ref_idx
     * }
     */
    public static byte collocated_ref_idx(MemorySegment struct) {
        return struct.get(collocated_ref_idx$LAYOUT, collocated_ref_idx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t collocated_ref_idx
     * }
     */
    public static void collocated_ref_idx(MemorySegment struct, byte fieldValue) {
        struct.set(collocated_ref_idx$LAYOUT, collocated_ref_idx$OFFSET, fieldValue);
    }

    private static final OfByte MaxNumMergeCand$LAYOUT = (OfByte)$LAYOUT.select(groupElement("MaxNumMergeCand"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t MaxNumMergeCand
     * }
     */
    public static final OfByte MaxNumMergeCand$layout() {
        return MaxNumMergeCand$LAYOUT;
    }

    private static final long MaxNumMergeCand$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t MaxNumMergeCand
     * }
     */
    public static final long MaxNumMergeCand$offset() {
        return MaxNumMergeCand$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t MaxNumMergeCand
     * }
     */
    public static byte MaxNumMergeCand(MemorySegment struct) {
        return struct.get(MaxNumMergeCand$LAYOUT, MaxNumMergeCand$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t MaxNumMergeCand
     * }
     */
    public static void MaxNumMergeCand(MemorySegment struct, byte fieldValue) {
        struct.set(MaxNumMergeCand$LAYOUT, MaxNumMergeCand$OFFSET, fieldValue);
    }

    private static final OfByte slice_cb_qp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_cb_qp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_cb_qp_offset
     * }
     */
    public static final OfByte slice_cb_qp_offset$layout() {
        return slice_cb_qp_offset$LAYOUT;
    }

    private static final long slice_cb_qp_offset$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_cb_qp_offset
     * }
     */
    public static final long slice_cb_qp_offset$offset() {
        return slice_cb_qp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_cb_qp_offset
     * }
     */
    public static byte slice_cb_qp_offset(MemorySegment struct) {
        return struct.get(slice_cb_qp_offset$LAYOUT, slice_cb_qp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_cb_qp_offset
     * }
     */
    public static void slice_cb_qp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(slice_cb_qp_offset$LAYOUT, slice_cb_qp_offset$OFFSET, fieldValue);
    }

    private static final OfByte slice_cr_qp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_cr_qp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_cr_qp_offset
     * }
     */
    public static final OfByte slice_cr_qp_offset$layout() {
        return slice_cr_qp_offset$LAYOUT;
    }

    private static final long slice_cr_qp_offset$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_cr_qp_offset
     * }
     */
    public static final long slice_cr_qp_offset$offset() {
        return slice_cr_qp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_cr_qp_offset
     * }
     */
    public static byte slice_cr_qp_offset(MemorySegment struct) {
        return struct.get(slice_cr_qp_offset$LAYOUT, slice_cr_qp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_cr_qp_offset
     * }
     */
    public static void slice_cr_qp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(slice_cr_qp_offset$LAYOUT, slice_cr_qp_offset$OFFSET, fieldValue);
    }

    private static final OfByte slice_beta_offset_div2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_beta_offset_div2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static final OfByte slice_beta_offset_div2$layout() {
        return slice_beta_offset_div2$LAYOUT;
    }

    private static final long slice_beta_offset_div2$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static final long slice_beta_offset_div2$offset() {
        return slice_beta_offset_div2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static byte slice_beta_offset_div2(MemorySegment struct) {
        return struct.get(slice_beta_offset_div2$LAYOUT, slice_beta_offset_div2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_beta_offset_div2
     * }
     */
    public static void slice_beta_offset_div2(MemorySegment struct, byte fieldValue) {
        struct.set(slice_beta_offset_div2$LAYOUT, slice_beta_offset_div2$OFFSET, fieldValue);
    }

    private static final OfByte slice_tc_offset_div2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_tc_offset_div2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_tc_offset_div2
     * }
     */
    public static final OfByte slice_tc_offset_div2$layout() {
        return slice_tc_offset_div2$LAYOUT;
    }

    private static final long slice_tc_offset_div2$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_tc_offset_div2
     * }
     */
    public static final long slice_tc_offset_div2$offset() {
        return slice_tc_offset_div2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_tc_offset_div2
     * }
     */
    public static byte slice_tc_offset_div2(MemorySegment struct) {
        return struct.get(slice_tc_offset_div2$LAYOUT, slice_tc_offset_div2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_tc_offset_div2
     * }
     */
    public static void slice_tc_offset_div2(MemorySegment struct, byte fieldValue) {
        struct.set(slice_tc_offset_div2$LAYOUT, slice_tc_offset_div2$OFFSET, fieldValue);
    }

    private static final OfByte slice_act_y_qp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_act_y_qp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_act_y_qp_offset
     * }
     */
    public static final OfByte slice_act_y_qp_offset$layout() {
        return slice_act_y_qp_offset$LAYOUT;
    }

    private static final long slice_act_y_qp_offset$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_act_y_qp_offset
     * }
     */
    public static final long slice_act_y_qp_offset$offset() {
        return slice_act_y_qp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_act_y_qp_offset
     * }
     */
    public static byte slice_act_y_qp_offset(MemorySegment struct) {
        return struct.get(slice_act_y_qp_offset$LAYOUT, slice_act_y_qp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_act_y_qp_offset
     * }
     */
    public static void slice_act_y_qp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(slice_act_y_qp_offset$LAYOUT, slice_act_y_qp_offset$OFFSET, fieldValue);
    }

    private static final OfByte slice_act_cb_qp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_act_cb_qp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_act_cb_qp_offset
     * }
     */
    public static final OfByte slice_act_cb_qp_offset$layout() {
        return slice_act_cb_qp_offset$LAYOUT;
    }

    private static final long slice_act_cb_qp_offset$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_act_cb_qp_offset
     * }
     */
    public static final long slice_act_cb_qp_offset$offset() {
        return slice_act_cb_qp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_act_cb_qp_offset
     * }
     */
    public static byte slice_act_cb_qp_offset(MemorySegment struct) {
        return struct.get(slice_act_cb_qp_offset$LAYOUT, slice_act_cb_qp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_act_cb_qp_offset
     * }
     */
    public static void slice_act_cb_qp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(slice_act_cb_qp_offset$LAYOUT, slice_act_cb_qp_offset$OFFSET, fieldValue);
    }

    private static final OfByte slice_act_cr_qp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_act_cr_qp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_act_cr_qp_offset
     * }
     */
    public static final OfByte slice_act_cr_qp_offset$layout() {
        return slice_act_cr_qp_offset$LAYOUT;
    }

    private static final long slice_act_cr_qp_offset$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_act_cr_qp_offset
     * }
     */
    public static final long slice_act_cr_qp_offset$offset() {
        return slice_act_cr_qp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_act_cr_qp_offset
     * }
     */
    public static byte slice_act_cr_qp_offset(MemorySegment struct) {
        return struct.get(slice_act_cr_qp_offset$LAYOUT, slice_act_cr_qp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_act_cr_qp_offset
     * }
     */
    public static void slice_act_cr_qp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(slice_act_cr_qp_offset$LAYOUT, slice_act_cr_qp_offset$OFFSET, fieldValue);
    }

    private static final OfByte slice_qp_delta$LAYOUT = (OfByte)$LAYOUT.select(groupElement("slice_qp_delta"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static final OfByte slice_qp_delta$layout() {
        return slice_qp_delta$LAYOUT;
    }

    private static final long slice_qp_delta$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static final long slice_qp_delta$offset() {
        return slice_qp_delta$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static byte slice_qp_delta(MemorySegment struct) {
        return struct.get(slice_qp_delta$LAYOUT, slice_qp_delta$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t slice_qp_delta
     * }
     */
    public static void slice_qp_delta(MemorySegment struct, byte fieldValue) {
        struct.set(slice_qp_delta$LAYOUT, slice_qp_delta$OFFSET, fieldValue);
    }

    private static final OfShort reserved1$LAYOUT = (OfShort)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t reserved1
     * }
     */
    public static final OfShort reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t reserved1
     * }
     */
    public static short reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, short fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final AddressLayout pWeightTable$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pWeightTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH265WeightTable *pWeightTable
     * }
     */
    public static final AddressLayout pWeightTable$layout() {
        return pWeightTable$LAYOUT;
    }

    private static final long pWeightTable$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH265WeightTable *pWeightTable
     * }
     */
    public static final long pWeightTable$offset() {
        return pWeightTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH265WeightTable *pWeightTable
     * }
     */
    public static MemorySegment pWeightTable(MemorySegment struct) {
        return struct.get(pWeightTable$LAYOUT, pWeightTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoEncodeH265WeightTable *pWeightTable
     * }
     */
    public static void pWeightTable(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pWeightTable$LAYOUT, pWeightTable$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

