// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoEncodeH265WeightTable {
 *     StdVideoEncodeH265WeightTableFlags flags;
 *     uint8_t luma_log2_weight_denom;
 *     int8_t delta_chroma_log2_weight_denom;
 *     int8_t delta_luma_weight_l0[15];
 *     int8_t luma_offset_l0[15];
 *     int8_t delta_chroma_weight_l0[15][2];
 *     int8_t delta_chroma_offset_l0[15][2];
 *     int8_t delta_luma_weight_l1[15];
 *     int8_t luma_offset_l1[15];
 *     int8_t delta_chroma_weight_l1[15][2];
 *     int8_t delta_chroma_offset_l1[15][2];
 * }
 * }
 */
public class StdVideoEncodeH265WeightTable {

    StdVideoEncodeH265WeightTable() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoEncodeH265WeightTableFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("luma_log2_weight_denom"),
        vulkan_h.C_CHAR.withName("delta_chroma_log2_weight_denom"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("delta_luma_weight_l0"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("luma_offset_l0"),
        MemoryLayout.sequenceLayout(15, MemoryLayout.sequenceLayout(2, vulkan_h.C_CHAR)).withName("delta_chroma_weight_l0"),
        MemoryLayout.sequenceLayout(15, MemoryLayout.sequenceLayout(2, vulkan_h.C_CHAR)).withName("delta_chroma_offset_l0"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("delta_luma_weight_l1"),
        MemoryLayout.sequenceLayout(15, vulkan_h.C_CHAR).withName("luma_offset_l1"),
        MemoryLayout.sequenceLayout(15, MemoryLayout.sequenceLayout(2, vulkan_h.C_CHAR)).withName("delta_chroma_weight_l1"),
        MemoryLayout.sequenceLayout(15, MemoryLayout.sequenceLayout(2, vulkan_h.C_CHAR)).withName("delta_chroma_offset_l1")
    ).withName("StdVideoEncodeH265WeightTable");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265WeightTableFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265WeightTableFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265WeightTableFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoEncodeH265WeightTableFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte luma_log2_weight_denom$LAYOUT = (OfByte)$LAYOUT.select(groupElement("luma_log2_weight_denom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t luma_log2_weight_denom
     * }
     */
    public static final OfByte luma_log2_weight_denom$layout() {
        return luma_log2_weight_denom$LAYOUT;
    }

    private static final long luma_log2_weight_denom$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t luma_log2_weight_denom
     * }
     */
    public static final long luma_log2_weight_denom$offset() {
        return luma_log2_weight_denom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t luma_log2_weight_denom
     * }
     */
    public static byte luma_log2_weight_denom(MemorySegment struct) {
        return struct.get(luma_log2_weight_denom$LAYOUT, luma_log2_weight_denom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t luma_log2_weight_denom
     * }
     */
    public static void luma_log2_weight_denom(MemorySegment struct, byte fieldValue) {
        struct.set(luma_log2_weight_denom$LAYOUT, luma_log2_weight_denom$OFFSET, fieldValue);
    }

    private static final OfByte delta_chroma_log2_weight_denom$LAYOUT = (OfByte)$LAYOUT.select(groupElement("delta_chroma_log2_weight_denom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_log2_weight_denom
     * }
     */
    public static final OfByte delta_chroma_log2_weight_denom$layout() {
        return delta_chroma_log2_weight_denom$LAYOUT;
    }

    private static final long delta_chroma_log2_weight_denom$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_log2_weight_denom
     * }
     */
    public static final long delta_chroma_log2_weight_denom$offset() {
        return delta_chroma_log2_weight_denom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_log2_weight_denom
     * }
     */
    public static byte delta_chroma_log2_weight_denom(MemorySegment struct) {
        return struct.get(delta_chroma_log2_weight_denom$LAYOUT, delta_chroma_log2_weight_denom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_log2_weight_denom
     * }
     */
    public static void delta_chroma_log2_weight_denom(MemorySegment struct, byte fieldValue) {
        struct.set(delta_chroma_log2_weight_denom$LAYOUT, delta_chroma_log2_weight_denom$OFFSET, fieldValue);
    }

    private static final SequenceLayout delta_luma_weight_l0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("delta_luma_weight_l0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l0[15]
     * }
     */
    public static final SequenceLayout delta_luma_weight_l0$layout() {
        return delta_luma_weight_l0$LAYOUT;
    }

    private static final long delta_luma_weight_l0$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l0[15]
     * }
     */
    public static final long delta_luma_weight_l0$offset() {
        return delta_luma_weight_l0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l0[15]
     * }
     */
    public static MemorySegment delta_luma_weight_l0(MemorySegment struct) {
        return struct.asSlice(delta_luma_weight_l0$OFFSET, delta_luma_weight_l0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l0[15]
     * }
     */
    public static void delta_luma_weight_l0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, delta_luma_weight_l0$OFFSET, delta_luma_weight_l0$LAYOUT.byteSize());
    }

    private static long[] delta_luma_weight_l0$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l0[15]
     * }
     */
    public static long[] delta_luma_weight_l0$dimensions() {
        return delta_luma_weight_l0$DIMS;
    }
    private static final VarHandle delta_luma_weight_l0$ELEM_HANDLE = delta_luma_weight_l0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l0[15]
     * }
     */
    public static byte delta_luma_weight_l0(MemorySegment struct, long index0) {
        return (byte)delta_luma_weight_l0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l0[15]
     * }
     */
    public static void delta_luma_weight_l0(MemorySegment struct, long index0, byte fieldValue) {
        delta_luma_weight_l0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout luma_offset_l0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("luma_offset_l0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l0[15]
     * }
     */
    public static final SequenceLayout luma_offset_l0$layout() {
        return luma_offset_l0$LAYOUT;
    }

    private static final long luma_offset_l0$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l0[15]
     * }
     */
    public static final long luma_offset_l0$offset() {
        return luma_offset_l0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l0[15]
     * }
     */
    public static MemorySegment luma_offset_l0(MemorySegment struct) {
        return struct.asSlice(luma_offset_l0$OFFSET, luma_offset_l0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l0[15]
     * }
     */
    public static void luma_offset_l0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, luma_offset_l0$OFFSET, luma_offset_l0$LAYOUT.byteSize());
    }

    private static long[] luma_offset_l0$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t luma_offset_l0[15]
     * }
     */
    public static long[] luma_offset_l0$dimensions() {
        return luma_offset_l0$DIMS;
    }
    private static final VarHandle luma_offset_l0$ELEM_HANDLE = luma_offset_l0$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l0[15]
     * }
     */
    public static byte luma_offset_l0(MemorySegment struct, long index0) {
        return (byte)luma_offset_l0$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l0[15]
     * }
     */
    public static void luma_offset_l0(MemorySegment struct, long index0, byte fieldValue) {
        luma_offset_l0$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout delta_chroma_weight_l0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("delta_chroma_weight_l0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l0[15][2]
     * }
     */
    public static final SequenceLayout delta_chroma_weight_l0$layout() {
        return delta_chroma_weight_l0$LAYOUT;
    }

    private static final long delta_chroma_weight_l0$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l0[15][2]
     * }
     */
    public static final long delta_chroma_weight_l0$offset() {
        return delta_chroma_weight_l0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l0[15][2]
     * }
     */
    public static MemorySegment delta_chroma_weight_l0(MemorySegment struct) {
        return struct.asSlice(delta_chroma_weight_l0$OFFSET, delta_chroma_weight_l0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l0[15][2]
     * }
     */
    public static void delta_chroma_weight_l0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, delta_chroma_weight_l0$OFFSET, delta_chroma_weight_l0$LAYOUT.byteSize());
    }

    private static long[] delta_chroma_weight_l0$DIMS = { 15, 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l0[15][2]
     * }
     */
    public static long[] delta_chroma_weight_l0$dimensions() {
        return delta_chroma_weight_l0$DIMS;
    }
    private static final VarHandle delta_chroma_weight_l0$ELEM_HANDLE = delta_chroma_weight_l0$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l0[15][2]
     * }
     */
    public static byte delta_chroma_weight_l0(MemorySegment struct, long index0, long index1) {
        return (byte)delta_chroma_weight_l0$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l0[15][2]
     * }
     */
    public static void delta_chroma_weight_l0(MemorySegment struct, long index0, long index1, byte fieldValue) {
        delta_chroma_weight_l0$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final SequenceLayout delta_chroma_offset_l0$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("delta_chroma_offset_l0"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l0[15][2]
     * }
     */
    public static final SequenceLayout delta_chroma_offset_l0$layout() {
        return delta_chroma_offset_l0$LAYOUT;
    }

    private static final long delta_chroma_offset_l0$OFFSET = 70;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l0[15][2]
     * }
     */
    public static final long delta_chroma_offset_l0$offset() {
        return delta_chroma_offset_l0$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l0[15][2]
     * }
     */
    public static MemorySegment delta_chroma_offset_l0(MemorySegment struct) {
        return struct.asSlice(delta_chroma_offset_l0$OFFSET, delta_chroma_offset_l0$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l0[15][2]
     * }
     */
    public static void delta_chroma_offset_l0(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, delta_chroma_offset_l0$OFFSET, delta_chroma_offset_l0$LAYOUT.byteSize());
    }

    private static long[] delta_chroma_offset_l0$DIMS = { 15, 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l0[15][2]
     * }
     */
    public static long[] delta_chroma_offset_l0$dimensions() {
        return delta_chroma_offset_l0$DIMS;
    }
    private static final VarHandle delta_chroma_offset_l0$ELEM_HANDLE = delta_chroma_offset_l0$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l0[15][2]
     * }
     */
    public static byte delta_chroma_offset_l0(MemorySegment struct, long index0, long index1) {
        return (byte)delta_chroma_offset_l0$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l0[15][2]
     * }
     */
    public static void delta_chroma_offset_l0(MemorySegment struct, long index0, long index1, byte fieldValue) {
        delta_chroma_offset_l0$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final SequenceLayout delta_luma_weight_l1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("delta_luma_weight_l1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l1[15]
     * }
     */
    public static final SequenceLayout delta_luma_weight_l1$layout() {
        return delta_luma_weight_l1$LAYOUT;
    }

    private static final long delta_luma_weight_l1$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l1[15]
     * }
     */
    public static final long delta_luma_weight_l1$offset() {
        return delta_luma_weight_l1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l1[15]
     * }
     */
    public static MemorySegment delta_luma_weight_l1(MemorySegment struct) {
        return struct.asSlice(delta_luma_weight_l1$OFFSET, delta_luma_weight_l1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l1[15]
     * }
     */
    public static void delta_luma_weight_l1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, delta_luma_weight_l1$OFFSET, delta_luma_weight_l1$LAYOUT.byteSize());
    }

    private static long[] delta_luma_weight_l1$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l1[15]
     * }
     */
    public static long[] delta_luma_weight_l1$dimensions() {
        return delta_luma_weight_l1$DIMS;
    }
    private static final VarHandle delta_luma_weight_l1$ELEM_HANDLE = delta_luma_weight_l1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l1[15]
     * }
     */
    public static byte delta_luma_weight_l1(MemorySegment struct, long index0) {
        return (byte)delta_luma_weight_l1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t delta_luma_weight_l1[15]
     * }
     */
    public static void delta_luma_weight_l1(MemorySegment struct, long index0, byte fieldValue) {
        delta_luma_weight_l1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout luma_offset_l1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("luma_offset_l1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l1[15]
     * }
     */
    public static final SequenceLayout luma_offset_l1$layout() {
        return luma_offset_l1$LAYOUT;
    }

    private static final long luma_offset_l1$OFFSET = 115;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l1[15]
     * }
     */
    public static final long luma_offset_l1$offset() {
        return luma_offset_l1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l1[15]
     * }
     */
    public static MemorySegment luma_offset_l1(MemorySegment struct) {
        return struct.asSlice(luma_offset_l1$OFFSET, luma_offset_l1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l1[15]
     * }
     */
    public static void luma_offset_l1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, luma_offset_l1$OFFSET, luma_offset_l1$LAYOUT.byteSize());
    }

    private static long[] luma_offset_l1$DIMS = { 15 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t luma_offset_l1[15]
     * }
     */
    public static long[] luma_offset_l1$dimensions() {
        return luma_offset_l1$DIMS;
    }
    private static final VarHandle luma_offset_l1$ELEM_HANDLE = luma_offset_l1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l1[15]
     * }
     */
    public static byte luma_offset_l1(MemorySegment struct, long index0) {
        return (byte)luma_offset_l1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t luma_offset_l1[15]
     * }
     */
    public static void luma_offset_l1(MemorySegment struct, long index0, byte fieldValue) {
        luma_offset_l1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout delta_chroma_weight_l1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("delta_chroma_weight_l1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l1[15][2]
     * }
     */
    public static final SequenceLayout delta_chroma_weight_l1$layout() {
        return delta_chroma_weight_l1$LAYOUT;
    }

    private static final long delta_chroma_weight_l1$OFFSET = 130;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l1[15][2]
     * }
     */
    public static final long delta_chroma_weight_l1$offset() {
        return delta_chroma_weight_l1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l1[15][2]
     * }
     */
    public static MemorySegment delta_chroma_weight_l1(MemorySegment struct) {
        return struct.asSlice(delta_chroma_weight_l1$OFFSET, delta_chroma_weight_l1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l1[15][2]
     * }
     */
    public static void delta_chroma_weight_l1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, delta_chroma_weight_l1$OFFSET, delta_chroma_weight_l1$LAYOUT.byteSize());
    }

    private static long[] delta_chroma_weight_l1$DIMS = { 15, 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l1[15][2]
     * }
     */
    public static long[] delta_chroma_weight_l1$dimensions() {
        return delta_chroma_weight_l1$DIMS;
    }
    private static final VarHandle delta_chroma_weight_l1$ELEM_HANDLE = delta_chroma_weight_l1$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l1[15][2]
     * }
     */
    public static byte delta_chroma_weight_l1(MemorySegment struct, long index0, long index1) {
        return (byte)delta_chroma_weight_l1$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_weight_l1[15][2]
     * }
     */
    public static void delta_chroma_weight_l1(MemorySegment struct, long index0, long index1, byte fieldValue) {
        delta_chroma_weight_l1$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final SequenceLayout delta_chroma_offset_l1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("delta_chroma_offset_l1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l1[15][2]
     * }
     */
    public static final SequenceLayout delta_chroma_offset_l1$layout() {
        return delta_chroma_offset_l1$LAYOUT;
    }

    private static final long delta_chroma_offset_l1$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l1[15][2]
     * }
     */
    public static final long delta_chroma_offset_l1$offset() {
        return delta_chroma_offset_l1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l1[15][2]
     * }
     */
    public static MemorySegment delta_chroma_offset_l1(MemorySegment struct) {
        return struct.asSlice(delta_chroma_offset_l1$OFFSET, delta_chroma_offset_l1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l1[15][2]
     * }
     */
    public static void delta_chroma_offset_l1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, delta_chroma_offset_l1$OFFSET, delta_chroma_offset_l1$LAYOUT.byteSize());
    }

    private static long[] delta_chroma_offset_l1$DIMS = { 15, 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l1[15][2]
     * }
     */
    public static long[] delta_chroma_offset_l1$dimensions() {
        return delta_chroma_offset_l1$DIMS;
    }
    private static final VarHandle delta_chroma_offset_l1$ELEM_HANDLE = delta_chroma_offset_l1$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l1[15][2]
     * }
     */
    public static byte delta_chroma_offset_l1(MemorySegment struct, long index0, long index1) {
        return (byte)delta_chroma_offset_l1$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t delta_chroma_offset_l1[15][2]
     * }
     */
    public static void delta_chroma_offset_l1(MemorySegment struct, long index0, long index1, byte fieldValue) {
        delta_chroma_offset_l1$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

