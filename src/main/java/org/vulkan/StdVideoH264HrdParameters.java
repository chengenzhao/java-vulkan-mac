// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH264HrdParameters {
 *     uint8_t cpb_cnt_minus1;
 *     uint8_t bit_rate_scale;
 *     uint8_t cpb_size_scale;
 *     uint8_t reserved1;
 *     uint32_t bit_rate_value_minus1[32];
 *     uint32_t cpb_size_value_minus1[32];
 *     uint8_t cbr_flag[32];
 *     uint32_t initial_cpb_removal_delay_length_minus1;
 *     uint32_t cpb_removal_delay_length_minus1;
 *     uint32_t dpb_output_delay_length_minus1;
 *     uint32_t time_offset_length;
 * }
 * }
 */
public class StdVideoH264HrdParameters {

    StdVideoH264HrdParameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_CHAR.withName("cpb_cnt_minus1"),
        vulkan_h.C_CHAR.withName("bit_rate_scale"),
        vulkan_h.C_CHAR.withName("cpb_size_scale"),
        vulkan_h.C_CHAR.withName("reserved1"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_INT).withName("bit_rate_value_minus1"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_INT).withName("cpb_size_value_minus1"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_CHAR).withName("cbr_flag"),
        vulkan_h.C_INT.withName("initial_cpb_removal_delay_length_minus1"),
        vulkan_h.C_INT.withName("cpb_removal_delay_length_minus1"),
        vulkan_h.C_INT.withName("dpb_output_delay_length_minus1"),
        vulkan_h.C_INT.withName("time_offset_length")
    ).withName("StdVideoH264HrdParameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte cpb_cnt_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cpb_cnt_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1
     * }
     */
    public static final OfByte cpb_cnt_minus1$layout() {
        return cpb_cnt_minus1$LAYOUT;
    }

    private static final long cpb_cnt_minus1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1
     * }
     */
    public static final long cpb_cnt_minus1$offset() {
        return cpb_cnt_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1
     * }
     */
    public static byte cpb_cnt_minus1(MemorySegment struct) {
        return struct.get(cpb_cnt_minus1$LAYOUT, cpb_cnt_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1
     * }
     */
    public static void cpb_cnt_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(cpb_cnt_minus1$LAYOUT, cpb_cnt_minus1$OFFSET, fieldValue);
    }

    private static final OfByte bit_rate_scale$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bit_rate_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static final OfByte bit_rate_scale$layout() {
        return bit_rate_scale$LAYOUT;
    }

    private static final long bit_rate_scale$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static final long bit_rate_scale$offset() {
        return bit_rate_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static byte bit_rate_scale(MemorySegment struct) {
        return struct.get(bit_rate_scale$LAYOUT, bit_rate_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static void bit_rate_scale(MemorySegment struct, byte fieldValue) {
        struct.set(bit_rate_scale$LAYOUT, bit_rate_scale$OFFSET, fieldValue);
    }

    private static final OfByte cpb_size_scale$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cpb_size_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static final OfByte cpb_size_scale$layout() {
        return cpb_size_scale$LAYOUT;
    }

    private static final long cpb_size_scale$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static final long cpb_size_scale$offset() {
        return cpb_size_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static byte cpb_size_scale(MemorySegment struct) {
        return struct.get(cpb_size_scale$LAYOUT, cpb_size_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static void cpb_size_scale(MemorySegment struct, byte fieldValue) {
        struct.set(cpb_size_scale$LAYOUT, cpb_size_scale$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final SequenceLayout bit_rate_value_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("bit_rate_value_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static final SequenceLayout bit_rate_value_minus1$layout() {
        return bit_rate_value_minus1$LAYOUT;
    }

    private static final long bit_rate_value_minus1$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static final long bit_rate_value_minus1$offset() {
        return bit_rate_value_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static MemorySegment bit_rate_value_minus1(MemorySegment struct) {
        return struct.asSlice(bit_rate_value_minus1$OFFSET, bit_rate_value_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static void bit_rate_value_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bit_rate_value_minus1$OFFSET, bit_rate_value_minus1$LAYOUT.byteSize());
    }

    private static long[] bit_rate_value_minus1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static long[] bit_rate_value_minus1$dimensions() {
        return bit_rate_value_minus1$DIMS;
    }
    private static final VarHandle bit_rate_value_minus1$ELEM_HANDLE = bit_rate_value_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static int bit_rate_value_minus1(MemorySegment struct, long index0) {
        return (int)bit_rate_value_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static void bit_rate_value_minus1(MemorySegment struct, long index0, int fieldValue) {
        bit_rate_value_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout cpb_size_value_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cpb_size_value_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static final SequenceLayout cpb_size_value_minus1$layout() {
        return cpb_size_value_minus1$LAYOUT;
    }

    private static final long cpb_size_value_minus1$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static final long cpb_size_value_minus1$offset() {
        return cpb_size_value_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static MemorySegment cpb_size_value_minus1(MemorySegment struct) {
        return struct.asSlice(cpb_size_value_minus1$OFFSET, cpb_size_value_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static void cpb_size_value_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cpb_size_value_minus1$OFFSET, cpb_size_value_minus1$LAYOUT.byteSize());
    }

    private static long[] cpb_size_value_minus1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static long[] cpb_size_value_minus1$dimensions() {
        return cpb_size_value_minus1$DIMS;
    }
    private static final VarHandle cpb_size_value_minus1$ELEM_HANDLE = cpb_size_value_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static int cpb_size_value_minus1(MemorySegment struct, long index0) {
        return (int)cpb_size_value_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static void cpb_size_value_minus1(MemorySegment struct, long index0, int fieldValue) {
        cpb_size_value_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout cbr_flag$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cbr_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cbr_flag[32]
     * }
     */
    public static final SequenceLayout cbr_flag$layout() {
        return cbr_flag$LAYOUT;
    }

    private static final long cbr_flag$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cbr_flag[32]
     * }
     */
    public static final long cbr_flag$offset() {
        return cbr_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cbr_flag[32]
     * }
     */
    public static MemorySegment cbr_flag(MemorySegment struct) {
        return struct.asSlice(cbr_flag$OFFSET, cbr_flag$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cbr_flag[32]
     * }
     */
    public static void cbr_flag(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cbr_flag$OFFSET, cbr_flag$LAYOUT.byteSize());
    }

    private static long[] cbr_flag$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t cbr_flag[32]
     * }
     */
    public static long[] cbr_flag$dimensions() {
        return cbr_flag$DIMS;
    }
    private static final VarHandle cbr_flag$ELEM_HANDLE = cbr_flag$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t cbr_flag[32]
     * }
     */
    public static byte cbr_flag(MemorySegment struct, long index0) {
        return (byte)cbr_flag$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t cbr_flag[32]
     * }
     */
    public static void cbr_flag(MemorySegment struct, long index0, byte fieldValue) {
        cbr_flag$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt initial_cpb_removal_delay_length_minus1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("initial_cpb_removal_delay_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static final OfInt initial_cpb_removal_delay_length_minus1$layout() {
        return initial_cpb_removal_delay_length_minus1$LAYOUT;
    }

    private static final long initial_cpb_removal_delay_length_minus1$OFFSET = 292;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static final long initial_cpb_removal_delay_length_minus1$offset() {
        return initial_cpb_removal_delay_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static int initial_cpb_removal_delay_length_minus1(MemorySegment struct) {
        return struct.get(initial_cpb_removal_delay_length_minus1$LAYOUT, initial_cpb_removal_delay_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static void initial_cpb_removal_delay_length_minus1(MemorySegment struct, int fieldValue) {
        struct.set(initial_cpb_removal_delay_length_minus1$LAYOUT, initial_cpb_removal_delay_length_minus1$OFFSET, fieldValue);
    }

    private static final OfInt cpb_removal_delay_length_minus1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cpb_removal_delay_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cpb_removal_delay_length_minus1
     * }
     */
    public static final OfInt cpb_removal_delay_length_minus1$layout() {
        return cpb_removal_delay_length_minus1$LAYOUT;
    }

    private static final long cpb_removal_delay_length_minus1$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cpb_removal_delay_length_minus1
     * }
     */
    public static final long cpb_removal_delay_length_minus1$offset() {
        return cpb_removal_delay_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cpb_removal_delay_length_minus1
     * }
     */
    public static int cpb_removal_delay_length_minus1(MemorySegment struct) {
        return struct.get(cpb_removal_delay_length_minus1$LAYOUT, cpb_removal_delay_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cpb_removal_delay_length_minus1
     * }
     */
    public static void cpb_removal_delay_length_minus1(MemorySegment struct, int fieldValue) {
        struct.set(cpb_removal_delay_length_minus1$LAYOUT, cpb_removal_delay_length_minus1$OFFSET, fieldValue);
    }

    private static final OfInt dpb_output_delay_length_minus1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dpb_output_delay_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t dpb_output_delay_length_minus1
     * }
     */
    public static final OfInt dpb_output_delay_length_minus1$layout() {
        return dpb_output_delay_length_minus1$LAYOUT;
    }

    private static final long dpb_output_delay_length_minus1$OFFSET = 300;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t dpb_output_delay_length_minus1
     * }
     */
    public static final long dpb_output_delay_length_minus1$offset() {
        return dpb_output_delay_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t dpb_output_delay_length_minus1
     * }
     */
    public static int dpb_output_delay_length_minus1(MemorySegment struct) {
        return struct.get(dpb_output_delay_length_minus1$LAYOUT, dpb_output_delay_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t dpb_output_delay_length_minus1
     * }
     */
    public static void dpb_output_delay_length_minus1(MemorySegment struct, int fieldValue) {
        struct.set(dpb_output_delay_length_minus1$LAYOUT, dpb_output_delay_length_minus1$OFFSET, fieldValue);
    }

    private static final OfInt time_offset_length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("time_offset_length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t time_offset_length
     * }
     */
    public static final OfInt time_offset_length$layout() {
        return time_offset_length$LAYOUT;
    }

    private static final long time_offset_length$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t time_offset_length
     * }
     */
    public static final long time_offset_length$offset() {
        return time_offset_length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t time_offset_length
     * }
     */
    public static int time_offset_length(MemorySegment struct) {
        return struct.get(time_offset_length$LAYOUT, time_offset_length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t time_offset_length
     * }
     */
    public static void time_offset_length(MemorySegment struct, int fieldValue) {
        struct.set(time_offset_length$LAYOUT, time_offset_length$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

