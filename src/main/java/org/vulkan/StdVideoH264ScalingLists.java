// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH264ScalingLists {
 *     uint16_t scaling_list_present_mask;
 *     uint16_t use_default_scaling_matrix_mask;
 *     uint8_t ScalingList4x4[6][16];
 *     uint8_t ScalingList8x8[6][64];
 * }
 * }
 */
public class StdVideoH264ScalingLists {

    StdVideoH264ScalingLists() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_SHORT.withName("scaling_list_present_mask"),
        vulkan_h.C_SHORT.withName("use_default_scaling_matrix_mask"),
        MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(16, vulkan_h.C_CHAR)).withName("ScalingList4x4"),
        MemoryLayout.sequenceLayout(6, MemoryLayout.sequenceLayout(64, vulkan_h.C_CHAR)).withName("ScalingList8x8")
    ).withName("StdVideoH264ScalingLists");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfShort scaling_list_present_mask$LAYOUT = (OfShort)$LAYOUT.select(groupElement("scaling_list_present_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t scaling_list_present_mask
     * }
     */
    public static final OfShort scaling_list_present_mask$layout() {
        return scaling_list_present_mask$LAYOUT;
    }

    private static final long scaling_list_present_mask$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t scaling_list_present_mask
     * }
     */
    public static final long scaling_list_present_mask$offset() {
        return scaling_list_present_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t scaling_list_present_mask
     * }
     */
    public static short scaling_list_present_mask(MemorySegment struct) {
        return struct.get(scaling_list_present_mask$LAYOUT, scaling_list_present_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t scaling_list_present_mask
     * }
     */
    public static void scaling_list_present_mask(MemorySegment struct, short fieldValue) {
        struct.set(scaling_list_present_mask$LAYOUT, scaling_list_present_mask$OFFSET, fieldValue);
    }

    private static final OfShort use_default_scaling_matrix_mask$LAYOUT = (OfShort)$LAYOUT.select(groupElement("use_default_scaling_matrix_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t use_default_scaling_matrix_mask
     * }
     */
    public static final OfShort use_default_scaling_matrix_mask$layout() {
        return use_default_scaling_matrix_mask$LAYOUT;
    }

    private static final long use_default_scaling_matrix_mask$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t use_default_scaling_matrix_mask
     * }
     */
    public static final long use_default_scaling_matrix_mask$offset() {
        return use_default_scaling_matrix_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t use_default_scaling_matrix_mask
     * }
     */
    public static short use_default_scaling_matrix_mask(MemorySegment struct) {
        return struct.get(use_default_scaling_matrix_mask$LAYOUT, use_default_scaling_matrix_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t use_default_scaling_matrix_mask
     * }
     */
    public static void use_default_scaling_matrix_mask(MemorySegment struct, short fieldValue) {
        struct.set(use_default_scaling_matrix_mask$LAYOUT, use_default_scaling_matrix_mask$OFFSET, fieldValue);
    }

    private static final SequenceLayout ScalingList4x4$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ScalingList4x4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t ScalingList4x4[6][16]
     * }
     */
    public static final SequenceLayout ScalingList4x4$layout() {
        return ScalingList4x4$LAYOUT;
    }

    private static final long ScalingList4x4$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t ScalingList4x4[6][16]
     * }
     */
    public static final long ScalingList4x4$offset() {
        return ScalingList4x4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList4x4[6][16]
     * }
     */
    public static MemorySegment ScalingList4x4(MemorySegment struct) {
        return struct.asSlice(ScalingList4x4$OFFSET, ScalingList4x4$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList4x4[6][16]
     * }
     */
    public static void ScalingList4x4(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScalingList4x4$OFFSET, ScalingList4x4$LAYOUT.byteSize());
    }

    private static long[] ScalingList4x4$DIMS = { 6, 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t ScalingList4x4[6][16]
     * }
     */
    public static long[] ScalingList4x4$dimensions() {
        return ScalingList4x4$DIMS;
    }
    private static final VarHandle ScalingList4x4$ELEM_HANDLE = ScalingList4x4$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList4x4[6][16]
     * }
     */
    public static byte ScalingList4x4(MemorySegment struct, long index0, long index1) {
        return (byte)ScalingList4x4$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList4x4[6][16]
     * }
     */
    public static void ScalingList4x4(MemorySegment struct, long index0, long index1, byte fieldValue) {
        ScalingList4x4$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    private static final SequenceLayout ScalingList8x8$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ScalingList8x8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t ScalingList8x8[6][64]
     * }
     */
    public static final SequenceLayout ScalingList8x8$layout() {
        return ScalingList8x8$LAYOUT;
    }

    private static final long ScalingList8x8$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t ScalingList8x8[6][64]
     * }
     */
    public static final long ScalingList8x8$offset() {
        return ScalingList8x8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList8x8[6][64]
     * }
     */
    public static MemorySegment ScalingList8x8(MemorySegment struct) {
        return struct.asSlice(ScalingList8x8$OFFSET, ScalingList8x8$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList8x8[6][64]
     * }
     */
    public static void ScalingList8x8(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ScalingList8x8$OFFSET, ScalingList8x8$LAYOUT.byteSize());
    }

    private static long[] ScalingList8x8$DIMS = { 6, 64 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t ScalingList8x8[6][64]
     * }
     */
    public static long[] ScalingList8x8$dimensions() {
        return ScalingList8x8$DIMS;
    }
    private static final VarHandle ScalingList8x8$ELEM_HANDLE = ScalingList8x8$LAYOUT.varHandle(sequenceElement(), sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList8x8[6][64]
     * }
     */
    public static byte ScalingList8x8(MemorySegment struct, long index0, long index1) {
        return (byte)ScalingList8x8$ELEM_HANDLE.get(struct, 0L, index0, index1);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t ScalingList8x8[6][64]
     * }
     */
    public static void ScalingList8x8(MemorySegment struct, long index0, long index1, byte fieldValue) {
        ScalingList8x8$ELEM_HANDLE.set(struct, 0L, index0, index1, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

