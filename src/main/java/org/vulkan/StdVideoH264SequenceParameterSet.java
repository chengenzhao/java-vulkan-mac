// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH264SequenceParameterSet {
 *     StdVideoH264SpsFlags flags;
 *     StdVideoH264ProfileIdc profile_idc;
 *     StdVideoH264LevelIdc level_idc;
 *     StdVideoH264ChromaFormatIdc chroma_format_idc;
 *     uint8_t seq_parameter_set_id;
 *     uint8_t bit_depth_luma_minus8;
 *     uint8_t bit_depth_chroma_minus8;
 *     uint8_t log2_max_frame_num_minus4;
 *     StdVideoH264PocType pic_order_cnt_type;
 *     int32_t offset_for_non_ref_pic;
 *     int32_t offset_for_top_to_bottom_field;
 *     uint8_t log2_max_pic_order_cnt_lsb_minus4;
 *     uint8_t num_ref_frames_in_pic_order_cnt_cycle;
 *     uint8_t max_num_ref_frames;
 *     uint8_t reserved1;
 *     uint32_t pic_width_in_mbs_minus1;
 *     uint32_t pic_height_in_map_units_minus1;
 *     uint32_t frame_crop_left_offset;
 *     uint32_t frame_crop_right_offset;
 *     uint32_t frame_crop_top_offset;
 *     uint32_t frame_crop_bottom_offset;
 *     uint32_t reserved2;
 *     const int32_t *pOffsetForRefFrame;
 *     const StdVideoH264ScalingLists *pScalingLists;
 *     const StdVideoH264SequenceParameterSetVui *pSequenceParameterSetVui;
 * }
 * }
 */
public class StdVideoH264SequenceParameterSet {

    StdVideoH264SequenceParameterSet() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoH264SpsFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("profile_idc"),
        vulkan_h.C_INT.withName("level_idc"),
        vulkan_h.C_INT.withName("chroma_format_idc"),
        vulkan_h.C_CHAR.withName("seq_parameter_set_id"),
        vulkan_h.C_CHAR.withName("bit_depth_luma_minus8"),
        vulkan_h.C_CHAR.withName("bit_depth_chroma_minus8"),
        vulkan_h.C_CHAR.withName("log2_max_frame_num_minus4"),
        vulkan_h.C_INT.withName("pic_order_cnt_type"),
        vulkan_h.C_INT.withName("offset_for_non_ref_pic"),
        vulkan_h.C_INT.withName("offset_for_top_to_bottom_field"),
        vulkan_h.C_CHAR.withName("log2_max_pic_order_cnt_lsb_minus4"),
        vulkan_h.C_CHAR.withName("num_ref_frames_in_pic_order_cnt_cycle"),
        vulkan_h.C_CHAR.withName("max_num_ref_frames"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_INT.withName("pic_width_in_mbs_minus1"),
        vulkan_h.C_INT.withName("pic_height_in_map_units_minus1"),
        vulkan_h.C_INT.withName("frame_crop_left_offset"),
        vulkan_h.C_INT.withName("frame_crop_right_offset"),
        vulkan_h.C_INT.withName("frame_crop_top_offset"),
        vulkan_h.C_INT.withName("frame_crop_bottom_offset"),
        vulkan_h.C_INT.withName("reserved2"),
        vulkan_h.C_POINTER.withName("pOffsetForRefFrame"),
        vulkan_h.C_POINTER.withName("pScalingLists"),
        vulkan_h.C_POINTER.withName("pSequenceParameterSetVui")
    ).withName("StdVideoH264SequenceParameterSet");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264SpsFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264SpsFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264SpsFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264SpsFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt profile_idc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("profile_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264ProfileIdc profile_idc
     * }
     */
    public static final OfInt profile_idc$layout() {
        return profile_idc$LAYOUT;
    }

    private static final long profile_idc$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264ProfileIdc profile_idc
     * }
     */
    public static final long profile_idc$offset() {
        return profile_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264ProfileIdc profile_idc
     * }
     */
    public static int profile_idc(MemorySegment struct) {
        return struct.get(profile_idc$LAYOUT, profile_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264ProfileIdc profile_idc
     * }
     */
    public static void profile_idc(MemorySegment struct, int fieldValue) {
        struct.set(profile_idc$LAYOUT, profile_idc$OFFSET, fieldValue);
    }

    private static final OfInt level_idc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("level_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264LevelIdc level_idc
     * }
     */
    public static final OfInt level_idc$layout() {
        return level_idc$LAYOUT;
    }

    private static final long level_idc$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264LevelIdc level_idc
     * }
     */
    public static final long level_idc$offset() {
        return level_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264LevelIdc level_idc
     * }
     */
    public static int level_idc(MemorySegment struct) {
        return struct.get(level_idc$LAYOUT, level_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264LevelIdc level_idc
     * }
     */
    public static void level_idc(MemorySegment struct, int fieldValue) {
        struct.set(level_idc$LAYOUT, level_idc$OFFSET, fieldValue);
    }

    private static final OfInt chroma_format_idc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chroma_format_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264ChromaFormatIdc chroma_format_idc
     * }
     */
    public static final OfInt chroma_format_idc$layout() {
        return chroma_format_idc$LAYOUT;
    }

    private static final long chroma_format_idc$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264ChromaFormatIdc chroma_format_idc
     * }
     */
    public static final long chroma_format_idc$offset() {
        return chroma_format_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264ChromaFormatIdc chroma_format_idc
     * }
     */
    public static int chroma_format_idc(MemorySegment struct) {
        return struct.get(chroma_format_idc$LAYOUT, chroma_format_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264ChromaFormatIdc chroma_format_idc
     * }
     */
    public static void chroma_format_idc(MemorySegment struct, int fieldValue) {
        struct.set(chroma_format_idc$LAYOUT, chroma_format_idc$OFFSET, fieldValue);
    }

    private static final OfByte seq_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("seq_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t seq_parameter_set_id
     * }
     */
    public static final OfByte seq_parameter_set_id$layout() {
        return seq_parameter_set_id$LAYOUT;
    }

    private static final long seq_parameter_set_id$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t seq_parameter_set_id
     * }
     */
    public static final long seq_parameter_set_id$offset() {
        return seq_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t seq_parameter_set_id
     * }
     */
    public static byte seq_parameter_set_id(MemorySegment struct) {
        return struct.get(seq_parameter_set_id$LAYOUT, seq_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t seq_parameter_set_id
     * }
     */
    public static void seq_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(seq_parameter_set_id$LAYOUT, seq_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte bit_depth_luma_minus8$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bit_depth_luma_minus8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static final OfByte bit_depth_luma_minus8$layout() {
        return bit_depth_luma_minus8$LAYOUT;
    }

    private static final long bit_depth_luma_minus8$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static final long bit_depth_luma_minus8$offset() {
        return bit_depth_luma_minus8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static byte bit_depth_luma_minus8(MemorySegment struct) {
        return struct.get(bit_depth_luma_minus8$LAYOUT, bit_depth_luma_minus8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static void bit_depth_luma_minus8(MemorySegment struct, byte fieldValue) {
        struct.set(bit_depth_luma_minus8$LAYOUT, bit_depth_luma_minus8$OFFSET, fieldValue);
    }

    private static final OfByte bit_depth_chroma_minus8$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bit_depth_chroma_minus8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static final OfByte bit_depth_chroma_minus8$layout() {
        return bit_depth_chroma_minus8$LAYOUT;
    }

    private static final long bit_depth_chroma_minus8$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static final long bit_depth_chroma_minus8$offset() {
        return bit_depth_chroma_minus8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static byte bit_depth_chroma_minus8(MemorySegment struct) {
        return struct.get(bit_depth_chroma_minus8$LAYOUT, bit_depth_chroma_minus8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static void bit_depth_chroma_minus8(MemorySegment struct, byte fieldValue) {
        struct.set(bit_depth_chroma_minus8$LAYOUT, bit_depth_chroma_minus8$OFFSET, fieldValue);
    }

    private static final OfByte log2_max_frame_num_minus4$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_max_frame_num_minus4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_max_frame_num_minus4
     * }
     */
    public static final OfByte log2_max_frame_num_minus4$layout() {
        return log2_max_frame_num_minus4$LAYOUT;
    }

    private static final long log2_max_frame_num_minus4$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_max_frame_num_minus4
     * }
     */
    public static final long log2_max_frame_num_minus4$offset() {
        return log2_max_frame_num_minus4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_frame_num_minus4
     * }
     */
    public static byte log2_max_frame_num_minus4(MemorySegment struct) {
        return struct.get(log2_max_frame_num_minus4$LAYOUT, log2_max_frame_num_minus4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_frame_num_minus4
     * }
     */
    public static void log2_max_frame_num_minus4(MemorySegment struct, byte fieldValue) {
        struct.set(log2_max_frame_num_minus4$LAYOUT, log2_max_frame_num_minus4$OFFSET, fieldValue);
    }

    private static final OfInt pic_order_cnt_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pic_order_cnt_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH264PocType pic_order_cnt_type
     * }
     */
    public static final OfInt pic_order_cnt_type$layout() {
        return pic_order_cnt_type$LAYOUT;
    }

    private static final long pic_order_cnt_type$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH264PocType pic_order_cnt_type
     * }
     */
    public static final long pic_order_cnt_type$offset() {
        return pic_order_cnt_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH264PocType pic_order_cnt_type
     * }
     */
    public static int pic_order_cnt_type(MemorySegment struct) {
        return struct.get(pic_order_cnt_type$LAYOUT, pic_order_cnt_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH264PocType pic_order_cnt_type
     * }
     */
    public static void pic_order_cnt_type(MemorySegment struct, int fieldValue) {
        struct.set(pic_order_cnt_type$LAYOUT, pic_order_cnt_type$OFFSET, fieldValue);
    }

    private static final OfInt offset_for_non_ref_pic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset_for_non_ref_pic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t offset_for_non_ref_pic
     * }
     */
    public static final OfInt offset_for_non_ref_pic$layout() {
        return offset_for_non_ref_pic$LAYOUT;
    }

    private static final long offset_for_non_ref_pic$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t offset_for_non_ref_pic
     * }
     */
    public static final long offset_for_non_ref_pic$offset() {
        return offset_for_non_ref_pic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t offset_for_non_ref_pic
     * }
     */
    public static int offset_for_non_ref_pic(MemorySegment struct) {
        return struct.get(offset_for_non_ref_pic$LAYOUT, offset_for_non_ref_pic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t offset_for_non_ref_pic
     * }
     */
    public static void offset_for_non_ref_pic(MemorySegment struct, int fieldValue) {
        struct.set(offset_for_non_ref_pic$LAYOUT, offset_for_non_ref_pic$OFFSET, fieldValue);
    }

    private static final OfInt offset_for_top_to_bottom_field$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset_for_top_to_bottom_field"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t offset_for_top_to_bottom_field
     * }
     */
    public static final OfInt offset_for_top_to_bottom_field$layout() {
        return offset_for_top_to_bottom_field$LAYOUT;
    }

    private static final long offset_for_top_to_bottom_field$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t offset_for_top_to_bottom_field
     * }
     */
    public static final long offset_for_top_to_bottom_field$offset() {
        return offset_for_top_to_bottom_field$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t offset_for_top_to_bottom_field
     * }
     */
    public static int offset_for_top_to_bottom_field(MemorySegment struct) {
        return struct.get(offset_for_top_to_bottom_field$LAYOUT, offset_for_top_to_bottom_field$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t offset_for_top_to_bottom_field
     * }
     */
    public static void offset_for_top_to_bottom_field(MemorySegment struct, int fieldValue) {
        struct.set(offset_for_top_to_bottom_field$LAYOUT, offset_for_top_to_bottom_field$OFFSET, fieldValue);
    }

    private static final OfByte log2_max_pic_order_cnt_lsb_minus4$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_max_pic_order_cnt_lsb_minus4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static final OfByte log2_max_pic_order_cnt_lsb_minus4$layout() {
        return log2_max_pic_order_cnt_lsb_minus4$LAYOUT;
    }

    private static final long log2_max_pic_order_cnt_lsb_minus4$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static final long log2_max_pic_order_cnt_lsb_minus4$offset() {
        return log2_max_pic_order_cnt_lsb_minus4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static byte log2_max_pic_order_cnt_lsb_minus4(MemorySegment struct) {
        return struct.get(log2_max_pic_order_cnt_lsb_minus4$LAYOUT, log2_max_pic_order_cnt_lsb_minus4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static void log2_max_pic_order_cnt_lsb_minus4(MemorySegment struct, byte fieldValue) {
        struct.set(log2_max_pic_order_cnt_lsb_minus4$LAYOUT, log2_max_pic_order_cnt_lsb_minus4$OFFSET, fieldValue);
    }

    private static final OfByte num_ref_frames_in_pic_order_cnt_cycle$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_ref_frames_in_pic_order_cnt_cycle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_ref_frames_in_pic_order_cnt_cycle
     * }
     */
    public static final OfByte num_ref_frames_in_pic_order_cnt_cycle$layout() {
        return num_ref_frames_in_pic_order_cnt_cycle$LAYOUT;
    }

    private static final long num_ref_frames_in_pic_order_cnt_cycle$OFFSET = 33;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_ref_frames_in_pic_order_cnt_cycle
     * }
     */
    public static final long num_ref_frames_in_pic_order_cnt_cycle$offset() {
        return num_ref_frames_in_pic_order_cnt_cycle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_frames_in_pic_order_cnt_cycle
     * }
     */
    public static byte num_ref_frames_in_pic_order_cnt_cycle(MemorySegment struct) {
        return struct.get(num_ref_frames_in_pic_order_cnt_cycle$LAYOUT, num_ref_frames_in_pic_order_cnt_cycle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_frames_in_pic_order_cnt_cycle
     * }
     */
    public static void num_ref_frames_in_pic_order_cnt_cycle(MemorySegment struct, byte fieldValue) {
        struct.set(num_ref_frames_in_pic_order_cnt_cycle$LAYOUT, num_ref_frames_in_pic_order_cnt_cycle$OFFSET, fieldValue);
    }

    private static final OfByte max_num_ref_frames$LAYOUT = (OfByte)$LAYOUT.select(groupElement("max_num_ref_frames"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t max_num_ref_frames
     * }
     */
    public static final OfByte max_num_ref_frames$layout() {
        return max_num_ref_frames$LAYOUT;
    }

    private static final long max_num_ref_frames$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t max_num_ref_frames
     * }
     */
    public static final long max_num_ref_frames$offset() {
        return max_num_ref_frames$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t max_num_ref_frames
     * }
     */
    public static byte max_num_ref_frames(MemorySegment struct) {
        return struct.get(max_num_ref_frames$LAYOUT, max_num_ref_frames$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t max_num_ref_frames
     * }
     */
    public static void max_num_ref_frames(MemorySegment struct, byte fieldValue) {
        struct.set(max_num_ref_frames$LAYOUT, max_num_ref_frames$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 35;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfInt pic_width_in_mbs_minus1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pic_width_in_mbs_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_mbs_minus1
     * }
     */
    public static final OfInt pic_width_in_mbs_minus1$layout() {
        return pic_width_in_mbs_minus1$LAYOUT;
    }

    private static final long pic_width_in_mbs_minus1$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_mbs_minus1
     * }
     */
    public static final long pic_width_in_mbs_minus1$offset() {
        return pic_width_in_mbs_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_mbs_minus1
     * }
     */
    public static int pic_width_in_mbs_minus1(MemorySegment struct) {
        return struct.get(pic_width_in_mbs_minus1$LAYOUT, pic_width_in_mbs_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_mbs_minus1
     * }
     */
    public static void pic_width_in_mbs_minus1(MemorySegment struct, int fieldValue) {
        struct.set(pic_width_in_mbs_minus1$LAYOUT, pic_width_in_mbs_minus1$OFFSET, fieldValue);
    }

    private static final OfInt pic_height_in_map_units_minus1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pic_height_in_map_units_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_map_units_minus1
     * }
     */
    public static final OfInt pic_height_in_map_units_minus1$layout() {
        return pic_height_in_map_units_minus1$LAYOUT;
    }

    private static final long pic_height_in_map_units_minus1$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_map_units_minus1
     * }
     */
    public static final long pic_height_in_map_units_minus1$offset() {
        return pic_height_in_map_units_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_map_units_minus1
     * }
     */
    public static int pic_height_in_map_units_minus1(MemorySegment struct) {
        return struct.get(pic_height_in_map_units_minus1$LAYOUT, pic_height_in_map_units_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_map_units_minus1
     * }
     */
    public static void pic_height_in_map_units_minus1(MemorySegment struct, int fieldValue) {
        struct.set(pic_height_in_map_units_minus1$LAYOUT, pic_height_in_map_units_minus1$OFFSET, fieldValue);
    }

    private static final OfInt frame_crop_left_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_crop_left_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_left_offset
     * }
     */
    public static final OfInt frame_crop_left_offset$layout() {
        return frame_crop_left_offset$LAYOUT;
    }

    private static final long frame_crop_left_offset$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_left_offset
     * }
     */
    public static final long frame_crop_left_offset$offset() {
        return frame_crop_left_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_left_offset
     * }
     */
    public static int frame_crop_left_offset(MemorySegment struct) {
        return struct.get(frame_crop_left_offset$LAYOUT, frame_crop_left_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_left_offset
     * }
     */
    public static void frame_crop_left_offset(MemorySegment struct, int fieldValue) {
        struct.set(frame_crop_left_offset$LAYOUT, frame_crop_left_offset$OFFSET, fieldValue);
    }

    private static final OfInt frame_crop_right_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_crop_right_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_right_offset
     * }
     */
    public static final OfInt frame_crop_right_offset$layout() {
        return frame_crop_right_offset$LAYOUT;
    }

    private static final long frame_crop_right_offset$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_right_offset
     * }
     */
    public static final long frame_crop_right_offset$offset() {
        return frame_crop_right_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_right_offset
     * }
     */
    public static int frame_crop_right_offset(MemorySegment struct) {
        return struct.get(frame_crop_right_offset$LAYOUT, frame_crop_right_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_right_offset
     * }
     */
    public static void frame_crop_right_offset(MemorySegment struct, int fieldValue) {
        struct.set(frame_crop_right_offset$LAYOUT, frame_crop_right_offset$OFFSET, fieldValue);
    }

    private static final OfInt frame_crop_top_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_crop_top_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_top_offset
     * }
     */
    public static final OfInt frame_crop_top_offset$layout() {
        return frame_crop_top_offset$LAYOUT;
    }

    private static final long frame_crop_top_offset$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_top_offset
     * }
     */
    public static final long frame_crop_top_offset$offset() {
        return frame_crop_top_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_top_offset
     * }
     */
    public static int frame_crop_top_offset(MemorySegment struct) {
        return struct.get(frame_crop_top_offset$LAYOUT, frame_crop_top_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_top_offset
     * }
     */
    public static void frame_crop_top_offset(MemorySegment struct, int fieldValue) {
        struct.set(frame_crop_top_offset$LAYOUT, frame_crop_top_offset$OFFSET, fieldValue);
    }

    private static final OfInt frame_crop_bottom_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frame_crop_bottom_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_bottom_offset
     * }
     */
    public static final OfInt frame_crop_bottom_offset$layout() {
        return frame_crop_bottom_offset$LAYOUT;
    }

    private static final long frame_crop_bottom_offset$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_bottom_offset
     * }
     */
    public static final long frame_crop_bottom_offset$offset() {
        return frame_crop_bottom_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_bottom_offset
     * }
     */
    public static int frame_crop_bottom_offset(MemorySegment struct) {
        return struct.get(frame_crop_bottom_offset$LAYOUT, frame_crop_bottom_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frame_crop_bottom_offset
     * }
     */
    public static void frame_crop_bottom_offset(MemorySegment struct, int fieldValue) {
        struct.set(frame_crop_bottom_offset$LAYOUT, frame_crop_bottom_offset$OFFSET, fieldValue);
    }

    private static final OfInt reserved2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t reserved2
     * }
     */
    public static final OfInt reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t reserved2
     * }
     */
    public static int reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, int fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    private static final AddressLayout pOffsetForRefFrame$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pOffsetForRefFrame"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const int32_t *pOffsetForRefFrame
     * }
     */
    public static final AddressLayout pOffsetForRefFrame$layout() {
        return pOffsetForRefFrame$LAYOUT;
    }

    private static final long pOffsetForRefFrame$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const int32_t *pOffsetForRefFrame
     * }
     */
    public static final long pOffsetForRefFrame$offset() {
        return pOffsetForRefFrame$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const int32_t *pOffsetForRefFrame
     * }
     */
    public static MemorySegment pOffsetForRefFrame(MemorySegment struct) {
        return struct.get(pOffsetForRefFrame$LAYOUT, pOffsetForRefFrame$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const int32_t *pOffsetForRefFrame
     * }
     */
    public static void pOffsetForRefFrame(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pOffsetForRefFrame$LAYOUT, pOffsetForRefFrame$OFFSET, fieldValue);
    }

    private static final AddressLayout pScalingLists$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pScalingLists"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH264ScalingLists *pScalingLists
     * }
     */
    public static final AddressLayout pScalingLists$layout() {
        return pScalingLists$LAYOUT;
    }

    private static final long pScalingLists$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH264ScalingLists *pScalingLists
     * }
     */
    public static final long pScalingLists$offset() {
        return pScalingLists$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH264ScalingLists *pScalingLists
     * }
     */
    public static MemorySegment pScalingLists(MemorySegment struct) {
        return struct.get(pScalingLists$LAYOUT, pScalingLists$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH264ScalingLists *pScalingLists
     * }
     */
    public static void pScalingLists(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pScalingLists$LAYOUT, pScalingLists$OFFSET, fieldValue);
    }

    private static final AddressLayout pSequenceParameterSetVui$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSequenceParameterSetVui"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH264SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static final AddressLayout pSequenceParameterSetVui$layout() {
        return pSequenceParameterSetVui$LAYOUT;
    }

    private static final long pSequenceParameterSetVui$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH264SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static final long pSequenceParameterSetVui$offset() {
        return pSequenceParameterSetVui$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH264SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static MemorySegment pSequenceParameterSetVui(MemorySegment struct) {
        return struct.get(pSequenceParameterSetVui$LAYOUT, pSequenceParameterSetVui$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH264SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static void pSequenceParameterSetVui(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSequenceParameterSetVui$LAYOUT, pSequenceParameterSetVui$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

