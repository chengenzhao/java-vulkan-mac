// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265DecPicBufMgr {
 *     uint32_t max_latency_increase_plus1[7];
 *     uint8_t max_dec_pic_buffering_minus1[7];
 *     uint8_t max_num_reorder_pics[7];
 * }
 * }
 */
public class StdVideoH265DecPicBufMgr {

    StdVideoH265DecPicBufMgr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(7, vulkan_h.C_INT).withName("max_latency_increase_plus1"),
        MemoryLayout.sequenceLayout(7, vulkan_h.C_CHAR).withName("max_dec_pic_buffering_minus1"),
        MemoryLayout.sequenceLayout(7, vulkan_h.C_CHAR).withName("max_num_reorder_pics"),
        MemoryLayout.paddingLayout(2)
    ).withName("StdVideoH265DecPicBufMgr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout max_latency_increase_plus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("max_latency_increase_plus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t max_latency_increase_plus1[7]
     * }
     */
    public static final SequenceLayout max_latency_increase_plus1$layout() {
        return max_latency_increase_plus1$LAYOUT;
    }

    private static final long max_latency_increase_plus1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t max_latency_increase_plus1[7]
     * }
     */
    public static final long max_latency_increase_plus1$offset() {
        return max_latency_increase_plus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t max_latency_increase_plus1[7]
     * }
     */
    public static MemorySegment max_latency_increase_plus1(MemorySegment struct) {
        return struct.asSlice(max_latency_increase_plus1$OFFSET, max_latency_increase_plus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t max_latency_increase_plus1[7]
     * }
     */
    public static void max_latency_increase_plus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, max_latency_increase_plus1$OFFSET, max_latency_increase_plus1$LAYOUT.byteSize());
    }

    private static long[] max_latency_increase_plus1$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t max_latency_increase_plus1[7]
     * }
     */
    public static long[] max_latency_increase_plus1$dimensions() {
        return max_latency_increase_plus1$DIMS;
    }
    private static final VarHandle max_latency_increase_plus1$ELEM_HANDLE = max_latency_increase_plus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t max_latency_increase_plus1[7]
     * }
     */
    public static int max_latency_increase_plus1(MemorySegment struct, long index0) {
        return (int)max_latency_increase_plus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t max_latency_increase_plus1[7]
     * }
     */
    public static void max_latency_increase_plus1(MemorySegment struct, long index0, int fieldValue) {
        max_latency_increase_plus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout max_dec_pic_buffering_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("max_dec_pic_buffering_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t max_dec_pic_buffering_minus1[7]
     * }
     */
    public static final SequenceLayout max_dec_pic_buffering_minus1$layout() {
        return max_dec_pic_buffering_minus1$LAYOUT;
    }

    private static final long max_dec_pic_buffering_minus1$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t max_dec_pic_buffering_minus1[7]
     * }
     */
    public static final long max_dec_pic_buffering_minus1$offset() {
        return max_dec_pic_buffering_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t max_dec_pic_buffering_minus1[7]
     * }
     */
    public static MemorySegment max_dec_pic_buffering_minus1(MemorySegment struct) {
        return struct.asSlice(max_dec_pic_buffering_minus1$OFFSET, max_dec_pic_buffering_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t max_dec_pic_buffering_minus1[7]
     * }
     */
    public static void max_dec_pic_buffering_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, max_dec_pic_buffering_minus1$OFFSET, max_dec_pic_buffering_minus1$LAYOUT.byteSize());
    }

    private static long[] max_dec_pic_buffering_minus1$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t max_dec_pic_buffering_minus1[7]
     * }
     */
    public static long[] max_dec_pic_buffering_minus1$dimensions() {
        return max_dec_pic_buffering_minus1$DIMS;
    }
    private static final VarHandle max_dec_pic_buffering_minus1$ELEM_HANDLE = max_dec_pic_buffering_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t max_dec_pic_buffering_minus1[7]
     * }
     */
    public static byte max_dec_pic_buffering_minus1(MemorySegment struct, long index0) {
        return (byte)max_dec_pic_buffering_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t max_dec_pic_buffering_minus1[7]
     * }
     */
    public static void max_dec_pic_buffering_minus1(MemorySegment struct, long index0, byte fieldValue) {
        max_dec_pic_buffering_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout max_num_reorder_pics$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("max_num_reorder_pics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t max_num_reorder_pics[7]
     * }
     */
    public static final SequenceLayout max_num_reorder_pics$layout() {
        return max_num_reorder_pics$LAYOUT;
    }

    private static final long max_num_reorder_pics$OFFSET = 35;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t max_num_reorder_pics[7]
     * }
     */
    public static final long max_num_reorder_pics$offset() {
        return max_num_reorder_pics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t max_num_reorder_pics[7]
     * }
     */
    public static MemorySegment max_num_reorder_pics(MemorySegment struct) {
        return struct.asSlice(max_num_reorder_pics$OFFSET, max_num_reorder_pics$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t max_num_reorder_pics[7]
     * }
     */
    public static void max_num_reorder_pics(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, max_num_reorder_pics$OFFSET, max_num_reorder_pics$LAYOUT.byteSize());
    }

    private static long[] max_num_reorder_pics$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t max_num_reorder_pics[7]
     * }
     */
    public static long[] max_num_reorder_pics$dimensions() {
        return max_num_reorder_pics$DIMS;
    }
    private static final VarHandle max_num_reorder_pics$ELEM_HANDLE = max_num_reorder_pics$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t max_num_reorder_pics[7]
     * }
     */
    public static byte max_num_reorder_pics(MemorySegment struct, long index0) {
        return (byte)max_num_reorder_pics$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t max_num_reorder_pics[7]
     * }
     */
    public static void max_num_reorder_pics(MemorySegment struct, long index0, byte fieldValue) {
        max_num_reorder_pics$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

