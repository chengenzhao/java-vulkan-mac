// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265HrdParameters {
 *     StdVideoH265HrdFlags flags;
 *     uint8_t tick_divisor_minus2;
 *     uint8_t du_cpb_removal_delay_increment_length_minus1;
 *     uint8_t dpb_output_delay_du_length_minus1;
 *     uint8_t bit_rate_scale;
 *     uint8_t cpb_size_scale;
 *     uint8_t cpb_size_du_scale;
 *     uint8_t initial_cpb_removal_delay_length_minus1;
 *     uint8_t au_cpb_removal_delay_length_minus1;
 *     uint8_t dpb_output_delay_length_minus1;
 *     uint8_t cpb_cnt_minus1[7];
 *     uint16_t elemental_duration_in_tc_minus1[7];
 *     uint16_t reserved[3];
 *     const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersNal;
 *     const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersVcl;
 * }
 * }
 */
public class StdVideoH265HrdParameters {

    StdVideoH265HrdParameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoH265HrdFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("tick_divisor_minus2"),
        vulkan_h.C_CHAR.withName("du_cpb_removal_delay_increment_length_minus1"),
        vulkan_h.C_CHAR.withName("dpb_output_delay_du_length_minus1"),
        vulkan_h.C_CHAR.withName("bit_rate_scale"),
        vulkan_h.C_CHAR.withName("cpb_size_scale"),
        vulkan_h.C_CHAR.withName("cpb_size_du_scale"),
        vulkan_h.C_CHAR.withName("initial_cpb_removal_delay_length_minus1"),
        vulkan_h.C_CHAR.withName("au_cpb_removal_delay_length_minus1"),
        vulkan_h.C_CHAR.withName("dpb_output_delay_length_minus1"),
        MemoryLayout.sequenceLayout(7, vulkan_h.C_CHAR).withName("cpb_cnt_minus1"),
        MemoryLayout.sequenceLayout(7, vulkan_h.C_SHORT).withName("elemental_duration_in_tc_minus1"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_SHORT).withName("reserved"),
        vulkan_h.C_POINTER.withName("pSubLayerHrdParametersNal"),
        vulkan_h.C_POINTER.withName("pSubLayerHrdParametersVcl")
    ).withName("StdVideoH265HrdParameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265HrdFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265HrdFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265HrdFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265HrdFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte tick_divisor_minus2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("tick_divisor_minus2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t tick_divisor_minus2
     * }
     */
    public static final OfByte tick_divisor_minus2$layout() {
        return tick_divisor_minus2$LAYOUT;
    }

    private static final long tick_divisor_minus2$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t tick_divisor_minus2
     * }
     */
    public static final long tick_divisor_minus2$offset() {
        return tick_divisor_minus2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t tick_divisor_minus2
     * }
     */
    public static byte tick_divisor_minus2(MemorySegment struct) {
        return struct.get(tick_divisor_minus2$LAYOUT, tick_divisor_minus2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t tick_divisor_minus2
     * }
     */
    public static void tick_divisor_minus2(MemorySegment struct, byte fieldValue) {
        struct.set(tick_divisor_minus2$LAYOUT, tick_divisor_minus2$OFFSET, fieldValue);
    }

    private static final OfByte du_cpb_removal_delay_increment_length_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("du_cpb_removal_delay_increment_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t du_cpb_removal_delay_increment_length_minus1
     * }
     */
    public static final OfByte du_cpb_removal_delay_increment_length_minus1$layout() {
        return du_cpb_removal_delay_increment_length_minus1$LAYOUT;
    }

    private static final long du_cpb_removal_delay_increment_length_minus1$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t du_cpb_removal_delay_increment_length_minus1
     * }
     */
    public static final long du_cpb_removal_delay_increment_length_minus1$offset() {
        return du_cpb_removal_delay_increment_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t du_cpb_removal_delay_increment_length_minus1
     * }
     */
    public static byte du_cpb_removal_delay_increment_length_minus1(MemorySegment struct) {
        return struct.get(du_cpb_removal_delay_increment_length_minus1$LAYOUT, du_cpb_removal_delay_increment_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t du_cpb_removal_delay_increment_length_minus1
     * }
     */
    public static void du_cpb_removal_delay_increment_length_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(du_cpb_removal_delay_increment_length_minus1$LAYOUT, du_cpb_removal_delay_increment_length_minus1$OFFSET, fieldValue);
    }

    private static final OfByte dpb_output_delay_du_length_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("dpb_output_delay_du_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_du_length_minus1
     * }
     */
    public static final OfByte dpb_output_delay_du_length_minus1$layout() {
        return dpb_output_delay_du_length_minus1$LAYOUT;
    }

    private static final long dpb_output_delay_du_length_minus1$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_du_length_minus1
     * }
     */
    public static final long dpb_output_delay_du_length_minus1$offset() {
        return dpb_output_delay_du_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_du_length_minus1
     * }
     */
    public static byte dpb_output_delay_du_length_minus1(MemorySegment struct) {
        return struct.get(dpb_output_delay_du_length_minus1$LAYOUT, dpb_output_delay_du_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_du_length_minus1
     * }
     */
    public static void dpb_output_delay_du_length_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(dpb_output_delay_du_length_minus1$LAYOUT, dpb_output_delay_du_length_minus1$OFFSET, fieldValue);
    }

    private static final OfByte bit_rate_scale$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bit_rate_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static final OfByte bit_rate_scale$layout() {
        return bit_rate_scale$LAYOUT;
    }

    private static final long bit_rate_scale$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static final long bit_rate_scale$offset() {
        return bit_rate_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static byte bit_rate_scale(MemorySegment struct) {
        return struct.get(bit_rate_scale$LAYOUT, bit_rate_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bit_rate_scale
     * }
     */
    public static void bit_rate_scale(MemorySegment struct, byte fieldValue) {
        struct.set(bit_rate_scale$LAYOUT, bit_rate_scale$OFFSET, fieldValue);
    }

    private static final OfByte cpb_size_scale$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cpb_size_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static final OfByte cpb_size_scale$layout() {
        return cpb_size_scale$LAYOUT;
    }

    private static final long cpb_size_scale$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static final long cpb_size_scale$offset() {
        return cpb_size_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static byte cpb_size_scale(MemorySegment struct) {
        return struct.get(cpb_size_scale$LAYOUT, cpb_size_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_scale
     * }
     */
    public static void cpb_size_scale(MemorySegment struct, byte fieldValue) {
        struct.set(cpb_size_scale$LAYOUT, cpb_size_scale$OFFSET, fieldValue);
    }

    private static final OfByte cpb_size_du_scale$LAYOUT = (OfByte)$LAYOUT.select(groupElement("cpb_size_du_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_du_scale
     * }
     */
    public static final OfByte cpb_size_du_scale$layout() {
        return cpb_size_du_scale$LAYOUT;
    }

    private static final long cpb_size_du_scale$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_du_scale
     * }
     */
    public static final long cpb_size_du_scale$offset() {
        return cpb_size_du_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_du_scale
     * }
     */
    public static byte cpb_size_du_scale(MemorySegment struct) {
        return struct.get(cpb_size_du_scale$LAYOUT, cpb_size_du_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cpb_size_du_scale
     * }
     */
    public static void cpb_size_du_scale(MemorySegment struct, byte fieldValue) {
        struct.set(cpb_size_du_scale$LAYOUT, cpb_size_du_scale$OFFSET, fieldValue);
    }

    private static final OfByte initial_cpb_removal_delay_length_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("initial_cpb_removal_delay_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static final OfByte initial_cpb_removal_delay_length_minus1$layout() {
        return initial_cpb_removal_delay_length_minus1$LAYOUT;
    }

    private static final long initial_cpb_removal_delay_length_minus1$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static final long initial_cpb_removal_delay_length_minus1$offset() {
        return initial_cpb_removal_delay_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static byte initial_cpb_removal_delay_length_minus1(MemorySegment struct) {
        return struct.get(initial_cpb_removal_delay_length_minus1$LAYOUT, initial_cpb_removal_delay_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t initial_cpb_removal_delay_length_minus1
     * }
     */
    public static void initial_cpb_removal_delay_length_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(initial_cpb_removal_delay_length_minus1$LAYOUT, initial_cpb_removal_delay_length_minus1$OFFSET, fieldValue);
    }

    private static final OfByte au_cpb_removal_delay_length_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("au_cpb_removal_delay_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t au_cpb_removal_delay_length_minus1
     * }
     */
    public static final OfByte au_cpb_removal_delay_length_minus1$layout() {
        return au_cpb_removal_delay_length_minus1$LAYOUT;
    }

    private static final long au_cpb_removal_delay_length_minus1$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t au_cpb_removal_delay_length_minus1
     * }
     */
    public static final long au_cpb_removal_delay_length_minus1$offset() {
        return au_cpb_removal_delay_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t au_cpb_removal_delay_length_minus1
     * }
     */
    public static byte au_cpb_removal_delay_length_minus1(MemorySegment struct) {
        return struct.get(au_cpb_removal_delay_length_minus1$LAYOUT, au_cpb_removal_delay_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t au_cpb_removal_delay_length_minus1
     * }
     */
    public static void au_cpb_removal_delay_length_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(au_cpb_removal_delay_length_minus1$LAYOUT, au_cpb_removal_delay_length_minus1$OFFSET, fieldValue);
    }

    private static final OfByte dpb_output_delay_length_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("dpb_output_delay_length_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_length_minus1
     * }
     */
    public static final OfByte dpb_output_delay_length_minus1$layout() {
        return dpb_output_delay_length_minus1$LAYOUT;
    }

    private static final long dpb_output_delay_length_minus1$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_length_minus1
     * }
     */
    public static final long dpb_output_delay_length_minus1$offset() {
        return dpb_output_delay_length_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_length_minus1
     * }
     */
    public static byte dpb_output_delay_length_minus1(MemorySegment struct) {
        return struct.get(dpb_output_delay_length_minus1$LAYOUT, dpb_output_delay_length_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t dpb_output_delay_length_minus1
     * }
     */
    public static void dpb_output_delay_length_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(dpb_output_delay_length_minus1$LAYOUT, dpb_output_delay_length_minus1$OFFSET, fieldValue);
    }

    private static final SequenceLayout cpb_cnt_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cpb_cnt_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1[7]
     * }
     */
    public static final SequenceLayout cpb_cnt_minus1$layout() {
        return cpb_cnt_minus1$LAYOUT;
    }

    private static final long cpb_cnt_minus1$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1[7]
     * }
     */
    public static final long cpb_cnt_minus1$offset() {
        return cpb_cnt_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1[7]
     * }
     */
    public static MemorySegment cpb_cnt_minus1(MemorySegment struct) {
        return struct.asSlice(cpb_cnt_minus1$OFFSET, cpb_cnt_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1[7]
     * }
     */
    public static void cpb_cnt_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cpb_cnt_minus1$OFFSET, cpb_cnt_minus1$LAYOUT.byteSize());
    }

    private static long[] cpb_cnt_minus1$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1[7]
     * }
     */
    public static long[] cpb_cnt_minus1$dimensions() {
        return cpb_cnt_minus1$DIMS;
    }
    private static final VarHandle cpb_cnt_minus1$ELEM_HANDLE = cpb_cnt_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1[7]
     * }
     */
    public static byte cpb_cnt_minus1(MemorySegment struct, long index0) {
        return (byte)cpb_cnt_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t cpb_cnt_minus1[7]
     * }
     */
    public static void cpb_cnt_minus1(MemorySegment struct, long index0, byte fieldValue) {
        cpb_cnt_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout elemental_duration_in_tc_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("elemental_duration_in_tc_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t elemental_duration_in_tc_minus1[7]
     * }
     */
    public static final SequenceLayout elemental_duration_in_tc_minus1$layout() {
        return elemental_duration_in_tc_minus1$LAYOUT;
    }

    private static final long elemental_duration_in_tc_minus1$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t elemental_duration_in_tc_minus1[7]
     * }
     */
    public static final long elemental_duration_in_tc_minus1$offset() {
        return elemental_duration_in_tc_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t elemental_duration_in_tc_minus1[7]
     * }
     */
    public static MemorySegment elemental_duration_in_tc_minus1(MemorySegment struct) {
        return struct.asSlice(elemental_duration_in_tc_minus1$OFFSET, elemental_duration_in_tc_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t elemental_duration_in_tc_minus1[7]
     * }
     */
    public static void elemental_duration_in_tc_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, elemental_duration_in_tc_minus1$OFFSET, elemental_duration_in_tc_minus1$LAYOUT.byteSize());
    }

    private static long[] elemental_duration_in_tc_minus1$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint16_t elemental_duration_in_tc_minus1[7]
     * }
     */
    public static long[] elemental_duration_in_tc_minus1$dimensions() {
        return elemental_duration_in_tc_minus1$DIMS;
    }
    private static final VarHandle elemental_duration_in_tc_minus1$ELEM_HANDLE = elemental_duration_in_tc_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint16_t elemental_duration_in_tc_minus1[7]
     * }
     */
    public static short elemental_duration_in_tc_minus1(MemorySegment struct, long index0) {
        return (short)elemental_duration_in_tc_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint16_t elemental_duration_in_tc_minus1[7]
     * }
     */
    public static void elemental_duration_in_tc_minus1(MemorySegment struct, long index0, short fieldValue) {
        elemental_duration_in_tc_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t reserved[3]
     * }
     */
    public static final SequenceLayout reserved$layout() {
        return reserved$LAYOUT;
    }

    private static final long reserved$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t reserved[3]
     * }
     */
    public static final long reserved$offset() {
        return reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t reserved[3]
     * }
     */
    public static MemorySegment reserved(MemorySegment struct) {
        return struct.asSlice(reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t reserved[3]
     * }
     */
    public static void reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, reserved$OFFSET, reserved$LAYOUT.byteSize());
    }

    private static long[] reserved$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint16_t reserved[3]
     * }
     */
    public static long[] reserved$dimensions() {
        return reserved$DIMS;
    }
    private static final VarHandle reserved$ELEM_HANDLE = reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint16_t reserved[3]
     * }
     */
    public static short reserved(MemorySegment struct, long index0) {
        return (short)reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint16_t reserved[3]
     * }
     */
    public static void reserved(MemorySegment struct, long index0, short fieldValue) {
        reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final AddressLayout pSubLayerHrdParametersNal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSubLayerHrdParametersNal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersNal
     * }
     */
    public static final AddressLayout pSubLayerHrdParametersNal$layout() {
        return pSubLayerHrdParametersNal$LAYOUT;
    }

    private static final long pSubLayerHrdParametersNal$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersNal
     * }
     */
    public static final long pSubLayerHrdParametersNal$offset() {
        return pSubLayerHrdParametersNal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersNal
     * }
     */
    public static MemorySegment pSubLayerHrdParametersNal(MemorySegment struct) {
        return struct.get(pSubLayerHrdParametersNal$LAYOUT, pSubLayerHrdParametersNal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersNal
     * }
     */
    public static void pSubLayerHrdParametersNal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSubLayerHrdParametersNal$LAYOUT, pSubLayerHrdParametersNal$OFFSET, fieldValue);
    }

    private static final AddressLayout pSubLayerHrdParametersVcl$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSubLayerHrdParametersVcl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersVcl
     * }
     */
    public static final AddressLayout pSubLayerHrdParametersVcl$layout() {
        return pSubLayerHrdParametersVcl$LAYOUT;
    }

    private static final long pSubLayerHrdParametersVcl$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersVcl
     * }
     */
    public static final long pSubLayerHrdParametersVcl$offset() {
        return pSubLayerHrdParametersVcl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersVcl
     * }
     */
    public static MemorySegment pSubLayerHrdParametersVcl(MemorySegment struct) {
        return struct.get(pSubLayerHrdParametersVcl$LAYOUT, pSubLayerHrdParametersVcl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265SubLayerHrdParameters *pSubLayerHrdParametersVcl
     * }
     */
    public static void pSubLayerHrdParametersVcl(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSubLayerHrdParametersVcl$LAYOUT, pSubLayerHrdParametersVcl$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

