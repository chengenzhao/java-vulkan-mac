// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265PictureParameterSet {
 *     StdVideoH265PpsFlags flags;
 *     uint8_t pps_pic_parameter_set_id;
 *     uint8_t pps_seq_parameter_set_id;
 *     uint8_t sps_video_parameter_set_id;
 *     uint8_t num_extra_slice_header_bits;
 *     uint8_t num_ref_idx_l0_default_active_minus1;
 *     uint8_t num_ref_idx_l1_default_active_minus1;
 *     int8_t init_qp_minus26;
 *     uint8_t diff_cu_qp_delta_depth;
 *     int8_t pps_cb_qp_offset;
 *     int8_t pps_cr_qp_offset;
 *     int8_t pps_beta_offset_div2;
 *     int8_t pps_tc_offset_div2;
 *     uint8_t log2_parallel_merge_level_minus2;
 *     uint8_t log2_max_transform_skip_block_size_minus2;
 *     uint8_t diff_cu_chroma_qp_offset_depth;
 *     uint8_t chroma_qp_offset_list_len_minus1;
 *     int8_t cb_qp_offset_list[6];
 *     int8_t cr_qp_offset_list[6];
 *     uint8_t log2_sao_offset_scale_luma;
 *     uint8_t log2_sao_offset_scale_chroma;
 *     int8_t pps_act_y_qp_offset_plus5;
 *     int8_t pps_act_cb_qp_offset_plus5;
 *     int8_t pps_act_cr_qp_offset_plus3;
 *     uint8_t pps_num_palette_predictor_initializers;
 *     uint8_t luma_bit_depth_entry_minus8;
 *     uint8_t chroma_bit_depth_entry_minus8;
 *     uint8_t num_tile_columns_minus1;
 *     uint8_t num_tile_rows_minus1;
 *     uint8_t reserved1;
 *     uint8_t reserved2;
 *     uint16_t column_width_minus1[19];
 *     uint16_t row_height_minus1[21];
 *     uint32_t reserved3;
 *     const StdVideoH265ScalingLists *pScalingLists;
 *     const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries;
 * }
 * }
 */
public class StdVideoH265PictureParameterSet {

    StdVideoH265PictureParameterSet() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoH265PpsFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("pps_pic_parameter_set_id"),
        vulkan_h.C_CHAR.withName("pps_seq_parameter_set_id"),
        vulkan_h.C_CHAR.withName("sps_video_parameter_set_id"),
        vulkan_h.C_CHAR.withName("num_extra_slice_header_bits"),
        vulkan_h.C_CHAR.withName("num_ref_idx_l0_default_active_minus1"),
        vulkan_h.C_CHAR.withName("num_ref_idx_l1_default_active_minus1"),
        vulkan_h.C_CHAR.withName("init_qp_minus26"),
        vulkan_h.C_CHAR.withName("diff_cu_qp_delta_depth"),
        vulkan_h.C_CHAR.withName("pps_cb_qp_offset"),
        vulkan_h.C_CHAR.withName("pps_cr_qp_offset"),
        vulkan_h.C_CHAR.withName("pps_beta_offset_div2"),
        vulkan_h.C_CHAR.withName("pps_tc_offset_div2"),
        vulkan_h.C_CHAR.withName("log2_parallel_merge_level_minus2"),
        vulkan_h.C_CHAR.withName("log2_max_transform_skip_block_size_minus2"),
        vulkan_h.C_CHAR.withName("diff_cu_chroma_qp_offset_depth"),
        vulkan_h.C_CHAR.withName("chroma_qp_offset_list_len_minus1"),
        MemoryLayout.sequenceLayout(6, vulkan_h.C_CHAR).withName("cb_qp_offset_list"),
        MemoryLayout.sequenceLayout(6, vulkan_h.C_CHAR).withName("cr_qp_offset_list"),
        vulkan_h.C_CHAR.withName("log2_sao_offset_scale_luma"),
        vulkan_h.C_CHAR.withName("log2_sao_offset_scale_chroma"),
        vulkan_h.C_CHAR.withName("pps_act_y_qp_offset_plus5"),
        vulkan_h.C_CHAR.withName("pps_act_cb_qp_offset_plus5"),
        vulkan_h.C_CHAR.withName("pps_act_cr_qp_offset_plus3"),
        vulkan_h.C_CHAR.withName("pps_num_palette_predictor_initializers"),
        vulkan_h.C_CHAR.withName("luma_bit_depth_entry_minus8"),
        vulkan_h.C_CHAR.withName("chroma_bit_depth_entry_minus8"),
        vulkan_h.C_CHAR.withName("num_tile_columns_minus1"),
        vulkan_h.C_CHAR.withName("num_tile_rows_minus1"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_CHAR.withName("reserved2"),
        MemoryLayout.sequenceLayout(19, vulkan_h.C_SHORT).withName("column_width_minus1"),
        MemoryLayout.sequenceLayout(21, vulkan_h.C_SHORT).withName("row_height_minus1"),
        vulkan_h.C_INT.withName("reserved3"),
        vulkan_h.C_POINTER.withName("pScalingLists"),
        vulkan_h.C_POINTER.withName("pPredictorPaletteEntries")
    ).withName("StdVideoH265PictureParameterSet");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265PpsFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265PpsFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265PpsFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265PpsFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte pps_pic_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_pic_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static final OfByte pps_pic_parameter_set_id$layout() {
        return pps_pic_parameter_set_id$LAYOUT;
    }

    private static final long pps_pic_parameter_set_id$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static final long pps_pic_parameter_set_id$offset() {
        return pps_pic_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static byte pps_pic_parameter_set_id(MemorySegment struct) {
        return struct.get(pps_pic_parameter_set_id$LAYOUT, pps_pic_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pps_pic_parameter_set_id
     * }
     */
    public static void pps_pic_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(pps_pic_parameter_set_id$LAYOUT, pps_pic_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte pps_seq_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_seq_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static final OfByte pps_seq_parameter_set_id$layout() {
        return pps_seq_parameter_set_id$LAYOUT;
    }

    private static final long pps_seq_parameter_set_id$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static final long pps_seq_parameter_set_id$offset() {
        return pps_seq_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static byte pps_seq_parameter_set_id(MemorySegment struct) {
        return struct.get(pps_seq_parameter_set_id$LAYOUT, pps_seq_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pps_seq_parameter_set_id
     * }
     */
    public static void pps_seq_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(pps_seq_parameter_set_id$LAYOUT, pps_seq_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte sps_video_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sps_video_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static final OfByte sps_video_parameter_set_id$layout() {
        return sps_video_parameter_set_id$LAYOUT;
    }

    private static final long sps_video_parameter_set_id$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static final long sps_video_parameter_set_id$offset() {
        return sps_video_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static byte sps_video_parameter_set_id(MemorySegment struct) {
        return struct.get(sps_video_parameter_set_id$LAYOUT, sps_video_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static void sps_video_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(sps_video_parameter_set_id$LAYOUT, sps_video_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte num_extra_slice_header_bits$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_extra_slice_header_bits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_extra_slice_header_bits
     * }
     */
    public static final OfByte num_extra_slice_header_bits$layout() {
        return num_extra_slice_header_bits$LAYOUT;
    }

    private static final long num_extra_slice_header_bits$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_extra_slice_header_bits
     * }
     */
    public static final long num_extra_slice_header_bits$offset() {
        return num_extra_slice_header_bits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_extra_slice_header_bits
     * }
     */
    public static byte num_extra_slice_header_bits(MemorySegment struct) {
        return struct.get(num_extra_slice_header_bits$LAYOUT, num_extra_slice_header_bits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_extra_slice_header_bits
     * }
     */
    public static void num_extra_slice_header_bits(MemorySegment struct, byte fieldValue) {
        struct.set(num_extra_slice_header_bits$LAYOUT, num_extra_slice_header_bits$OFFSET, fieldValue);
    }

    private static final OfByte num_ref_idx_l0_default_active_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_ref_idx_l0_default_active_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_default_active_minus1
     * }
     */
    public static final OfByte num_ref_idx_l0_default_active_minus1$layout() {
        return num_ref_idx_l0_default_active_minus1$LAYOUT;
    }

    private static final long num_ref_idx_l0_default_active_minus1$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_default_active_minus1
     * }
     */
    public static final long num_ref_idx_l0_default_active_minus1$offset() {
        return num_ref_idx_l0_default_active_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_default_active_minus1
     * }
     */
    public static byte num_ref_idx_l0_default_active_minus1(MemorySegment struct) {
        return struct.get(num_ref_idx_l0_default_active_minus1$LAYOUT, num_ref_idx_l0_default_active_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l0_default_active_minus1
     * }
     */
    public static void num_ref_idx_l0_default_active_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_ref_idx_l0_default_active_minus1$LAYOUT, num_ref_idx_l0_default_active_minus1$OFFSET, fieldValue);
    }

    private static final OfByte num_ref_idx_l1_default_active_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_ref_idx_l1_default_active_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_default_active_minus1
     * }
     */
    public static final OfByte num_ref_idx_l1_default_active_minus1$layout() {
        return num_ref_idx_l1_default_active_minus1$LAYOUT;
    }

    private static final long num_ref_idx_l1_default_active_minus1$OFFSET = 9;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_default_active_minus1
     * }
     */
    public static final long num_ref_idx_l1_default_active_minus1$offset() {
        return num_ref_idx_l1_default_active_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_default_active_minus1
     * }
     */
    public static byte num_ref_idx_l1_default_active_minus1(MemorySegment struct) {
        return struct.get(num_ref_idx_l1_default_active_minus1$LAYOUT, num_ref_idx_l1_default_active_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_ref_idx_l1_default_active_minus1
     * }
     */
    public static void num_ref_idx_l1_default_active_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_ref_idx_l1_default_active_minus1$LAYOUT, num_ref_idx_l1_default_active_minus1$OFFSET, fieldValue);
    }

    private static final OfByte init_qp_minus26$LAYOUT = (OfByte)$LAYOUT.select(groupElement("init_qp_minus26"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t init_qp_minus26
     * }
     */
    public static final OfByte init_qp_minus26$layout() {
        return init_qp_minus26$LAYOUT;
    }

    private static final long init_qp_minus26$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t init_qp_minus26
     * }
     */
    public static final long init_qp_minus26$offset() {
        return init_qp_minus26$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t init_qp_minus26
     * }
     */
    public static byte init_qp_minus26(MemorySegment struct) {
        return struct.get(init_qp_minus26$LAYOUT, init_qp_minus26$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t init_qp_minus26
     * }
     */
    public static void init_qp_minus26(MemorySegment struct, byte fieldValue) {
        struct.set(init_qp_minus26$LAYOUT, init_qp_minus26$OFFSET, fieldValue);
    }

    private static final OfByte diff_cu_qp_delta_depth$LAYOUT = (OfByte)$LAYOUT.select(groupElement("diff_cu_qp_delta_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_qp_delta_depth
     * }
     */
    public static final OfByte diff_cu_qp_delta_depth$layout() {
        return diff_cu_qp_delta_depth$LAYOUT;
    }

    private static final long diff_cu_qp_delta_depth$OFFSET = 11;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_qp_delta_depth
     * }
     */
    public static final long diff_cu_qp_delta_depth$offset() {
        return diff_cu_qp_delta_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_qp_delta_depth
     * }
     */
    public static byte diff_cu_qp_delta_depth(MemorySegment struct) {
        return struct.get(diff_cu_qp_delta_depth$LAYOUT, diff_cu_qp_delta_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_qp_delta_depth
     * }
     */
    public static void diff_cu_qp_delta_depth(MemorySegment struct, byte fieldValue) {
        struct.set(diff_cu_qp_delta_depth$LAYOUT, diff_cu_qp_delta_depth$OFFSET, fieldValue);
    }

    private static final OfByte pps_cb_qp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_cb_qp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t pps_cb_qp_offset
     * }
     */
    public static final OfByte pps_cb_qp_offset$layout() {
        return pps_cb_qp_offset$LAYOUT;
    }

    private static final long pps_cb_qp_offset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t pps_cb_qp_offset
     * }
     */
    public static final long pps_cb_qp_offset$offset() {
        return pps_cb_qp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t pps_cb_qp_offset
     * }
     */
    public static byte pps_cb_qp_offset(MemorySegment struct) {
        return struct.get(pps_cb_qp_offset$LAYOUT, pps_cb_qp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t pps_cb_qp_offset
     * }
     */
    public static void pps_cb_qp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(pps_cb_qp_offset$LAYOUT, pps_cb_qp_offset$OFFSET, fieldValue);
    }

    private static final OfByte pps_cr_qp_offset$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_cr_qp_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t pps_cr_qp_offset
     * }
     */
    public static final OfByte pps_cr_qp_offset$layout() {
        return pps_cr_qp_offset$LAYOUT;
    }

    private static final long pps_cr_qp_offset$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t pps_cr_qp_offset
     * }
     */
    public static final long pps_cr_qp_offset$offset() {
        return pps_cr_qp_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t pps_cr_qp_offset
     * }
     */
    public static byte pps_cr_qp_offset(MemorySegment struct) {
        return struct.get(pps_cr_qp_offset$LAYOUT, pps_cr_qp_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t pps_cr_qp_offset
     * }
     */
    public static void pps_cr_qp_offset(MemorySegment struct, byte fieldValue) {
        struct.set(pps_cr_qp_offset$LAYOUT, pps_cr_qp_offset$OFFSET, fieldValue);
    }

    private static final OfByte pps_beta_offset_div2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_beta_offset_div2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t pps_beta_offset_div2
     * }
     */
    public static final OfByte pps_beta_offset_div2$layout() {
        return pps_beta_offset_div2$LAYOUT;
    }

    private static final long pps_beta_offset_div2$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t pps_beta_offset_div2
     * }
     */
    public static final long pps_beta_offset_div2$offset() {
        return pps_beta_offset_div2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t pps_beta_offset_div2
     * }
     */
    public static byte pps_beta_offset_div2(MemorySegment struct) {
        return struct.get(pps_beta_offset_div2$LAYOUT, pps_beta_offset_div2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t pps_beta_offset_div2
     * }
     */
    public static void pps_beta_offset_div2(MemorySegment struct, byte fieldValue) {
        struct.set(pps_beta_offset_div2$LAYOUT, pps_beta_offset_div2$OFFSET, fieldValue);
    }

    private static final OfByte pps_tc_offset_div2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_tc_offset_div2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t pps_tc_offset_div2
     * }
     */
    public static final OfByte pps_tc_offset_div2$layout() {
        return pps_tc_offset_div2$LAYOUT;
    }

    private static final long pps_tc_offset_div2$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t pps_tc_offset_div2
     * }
     */
    public static final long pps_tc_offset_div2$offset() {
        return pps_tc_offset_div2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t pps_tc_offset_div2
     * }
     */
    public static byte pps_tc_offset_div2(MemorySegment struct) {
        return struct.get(pps_tc_offset_div2$LAYOUT, pps_tc_offset_div2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t pps_tc_offset_div2
     * }
     */
    public static void pps_tc_offset_div2(MemorySegment struct, byte fieldValue) {
        struct.set(pps_tc_offset_div2$LAYOUT, pps_tc_offset_div2$OFFSET, fieldValue);
    }

    private static final OfByte log2_parallel_merge_level_minus2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_parallel_merge_level_minus2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_parallel_merge_level_minus2
     * }
     */
    public static final OfByte log2_parallel_merge_level_minus2$layout() {
        return log2_parallel_merge_level_minus2$LAYOUT;
    }

    private static final long log2_parallel_merge_level_minus2$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_parallel_merge_level_minus2
     * }
     */
    public static final long log2_parallel_merge_level_minus2$offset() {
        return log2_parallel_merge_level_minus2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_parallel_merge_level_minus2
     * }
     */
    public static byte log2_parallel_merge_level_minus2(MemorySegment struct) {
        return struct.get(log2_parallel_merge_level_minus2$LAYOUT, log2_parallel_merge_level_minus2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_parallel_merge_level_minus2
     * }
     */
    public static void log2_parallel_merge_level_minus2(MemorySegment struct, byte fieldValue) {
        struct.set(log2_parallel_merge_level_minus2$LAYOUT, log2_parallel_merge_level_minus2$OFFSET, fieldValue);
    }

    private static final OfByte log2_max_transform_skip_block_size_minus2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_max_transform_skip_block_size_minus2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_max_transform_skip_block_size_minus2
     * }
     */
    public static final OfByte log2_max_transform_skip_block_size_minus2$layout() {
        return log2_max_transform_skip_block_size_minus2$LAYOUT;
    }

    private static final long log2_max_transform_skip_block_size_minus2$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_max_transform_skip_block_size_minus2
     * }
     */
    public static final long log2_max_transform_skip_block_size_minus2$offset() {
        return log2_max_transform_skip_block_size_minus2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_transform_skip_block_size_minus2
     * }
     */
    public static byte log2_max_transform_skip_block_size_minus2(MemorySegment struct) {
        return struct.get(log2_max_transform_skip_block_size_minus2$LAYOUT, log2_max_transform_skip_block_size_minus2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_transform_skip_block_size_minus2
     * }
     */
    public static void log2_max_transform_skip_block_size_minus2(MemorySegment struct, byte fieldValue) {
        struct.set(log2_max_transform_skip_block_size_minus2$LAYOUT, log2_max_transform_skip_block_size_minus2$OFFSET, fieldValue);
    }

    private static final OfByte diff_cu_chroma_qp_offset_depth$LAYOUT = (OfByte)$LAYOUT.select(groupElement("diff_cu_chroma_qp_offset_depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_chroma_qp_offset_depth
     * }
     */
    public static final OfByte diff_cu_chroma_qp_offset_depth$layout() {
        return diff_cu_chroma_qp_offset_depth$LAYOUT;
    }

    private static final long diff_cu_chroma_qp_offset_depth$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_chroma_qp_offset_depth
     * }
     */
    public static final long diff_cu_chroma_qp_offset_depth$offset() {
        return diff_cu_chroma_qp_offset_depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_chroma_qp_offset_depth
     * }
     */
    public static byte diff_cu_chroma_qp_offset_depth(MemorySegment struct) {
        return struct.get(diff_cu_chroma_qp_offset_depth$LAYOUT, diff_cu_chroma_qp_offset_depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t diff_cu_chroma_qp_offset_depth
     * }
     */
    public static void diff_cu_chroma_qp_offset_depth(MemorySegment struct, byte fieldValue) {
        struct.set(diff_cu_chroma_qp_offset_depth$LAYOUT, diff_cu_chroma_qp_offset_depth$OFFSET, fieldValue);
    }

    private static final OfByte chroma_qp_offset_list_len_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("chroma_qp_offset_list_len_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t chroma_qp_offset_list_len_minus1
     * }
     */
    public static final OfByte chroma_qp_offset_list_len_minus1$layout() {
        return chroma_qp_offset_list_len_minus1$LAYOUT;
    }

    private static final long chroma_qp_offset_list_len_minus1$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t chroma_qp_offset_list_len_minus1
     * }
     */
    public static final long chroma_qp_offset_list_len_minus1$offset() {
        return chroma_qp_offset_list_len_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t chroma_qp_offset_list_len_minus1
     * }
     */
    public static byte chroma_qp_offset_list_len_minus1(MemorySegment struct) {
        return struct.get(chroma_qp_offset_list_len_minus1$LAYOUT, chroma_qp_offset_list_len_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t chroma_qp_offset_list_len_minus1
     * }
     */
    public static void chroma_qp_offset_list_len_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(chroma_qp_offset_list_len_minus1$LAYOUT, chroma_qp_offset_list_len_minus1$OFFSET, fieldValue);
    }

    private static final SequenceLayout cb_qp_offset_list$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cb_qp_offset_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t cb_qp_offset_list[6]
     * }
     */
    public static final SequenceLayout cb_qp_offset_list$layout() {
        return cb_qp_offset_list$LAYOUT;
    }

    private static final long cb_qp_offset_list$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t cb_qp_offset_list[6]
     * }
     */
    public static final long cb_qp_offset_list$offset() {
        return cb_qp_offset_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t cb_qp_offset_list[6]
     * }
     */
    public static MemorySegment cb_qp_offset_list(MemorySegment struct) {
        return struct.asSlice(cb_qp_offset_list$OFFSET, cb_qp_offset_list$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t cb_qp_offset_list[6]
     * }
     */
    public static void cb_qp_offset_list(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cb_qp_offset_list$OFFSET, cb_qp_offset_list$LAYOUT.byteSize());
    }

    private static long[] cb_qp_offset_list$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t cb_qp_offset_list[6]
     * }
     */
    public static long[] cb_qp_offset_list$dimensions() {
        return cb_qp_offset_list$DIMS;
    }
    private static final VarHandle cb_qp_offset_list$ELEM_HANDLE = cb_qp_offset_list$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t cb_qp_offset_list[6]
     * }
     */
    public static byte cb_qp_offset_list(MemorySegment struct, long index0) {
        return (byte)cb_qp_offset_list$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t cb_qp_offset_list[6]
     * }
     */
    public static void cb_qp_offset_list(MemorySegment struct, long index0, byte fieldValue) {
        cb_qp_offset_list$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout cr_qp_offset_list$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cr_qp_offset_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t cr_qp_offset_list[6]
     * }
     */
    public static final SequenceLayout cr_qp_offset_list$layout() {
        return cr_qp_offset_list$LAYOUT;
    }

    private static final long cr_qp_offset_list$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t cr_qp_offset_list[6]
     * }
     */
    public static final long cr_qp_offset_list$offset() {
        return cr_qp_offset_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t cr_qp_offset_list[6]
     * }
     */
    public static MemorySegment cr_qp_offset_list(MemorySegment struct) {
        return struct.asSlice(cr_qp_offset_list$OFFSET, cr_qp_offset_list$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t cr_qp_offset_list[6]
     * }
     */
    public static void cr_qp_offset_list(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cr_qp_offset_list$OFFSET, cr_qp_offset_list$LAYOUT.byteSize());
    }

    private static long[] cr_qp_offset_list$DIMS = { 6 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int8_t cr_qp_offset_list[6]
     * }
     */
    public static long[] cr_qp_offset_list$dimensions() {
        return cr_qp_offset_list$DIMS;
    }
    private static final VarHandle cr_qp_offset_list$ELEM_HANDLE = cr_qp_offset_list$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int8_t cr_qp_offset_list[6]
     * }
     */
    public static byte cr_qp_offset_list(MemorySegment struct, long index0) {
        return (byte)cr_qp_offset_list$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int8_t cr_qp_offset_list[6]
     * }
     */
    public static void cr_qp_offset_list(MemorySegment struct, long index0, byte fieldValue) {
        cr_qp_offset_list$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfByte log2_sao_offset_scale_luma$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_sao_offset_scale_luma"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_luma
     * }
     */
    public static final OfByte log2_sao_offset_scale_luma$layout() {
        return log2_sao_offset_scale_luma$LAYOUT;
    }

    private static final long log2_sao_offset_scale_luma$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_luma
     * }
     */
    public static final long log2_sao_offset_scale_luma$offset() {
        return log2_sao_offset_scale_luma$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_luma
     * }
     */
    public static byte log2_sao_offset_scale_luma(MemorySegment struct) {
        return struct.get(log2_sao_offset_scale_luma$LAYOUT, log2_sao_offset_scale_luma$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_luma
     * }
     */
    public static void log2_sao_offset_scale_luma(MemorySegment struct, byte fieldValue) {
        struct.set(log2_sao_offset_scale_luma$LAYOUT, log2_sao_offset_scale_luma$OFFSET, fieldValue);
    }

    private static final OfByte log2_sao_offset_scale_chroma$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_sao_offset_scale_chroma"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_chroma
     * }
     */
    public static final OfByte log2_sao_offset_scale_chroma$layout() {
        return log2_sao_offset_scale_chroma$LAYOUT;
    }

    private static final long log2_sao_offset_scale_chroma$OFFSET = 33;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_chroma
     * }
     */
    public static final long log2_sao_offset_scale_chroma$offset() {
        return log2_sao_offset_scale_chroma$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_chroma
     * }
     */
    public static byte log2_sao_offset_scale_chroma(MemorySegment struct) {
        return struct.get(log2_sao_offset_scale_chroma$LAYOUT, log2_sao_offset_scale_chroma$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_sao_offset_scale_chroma
     * }
     */
    public static void log2_sao_offset_scale_chroma(MemorySegment struct, byte fieldValue) {
        struct.set(log2_sao_offset_scale_chroma$LAYOUT, log2_sao_offset_scale_chroma$OFFSET, fieldValue);
    }

    private static final OfByte pps_act_y_qp_offset_plus5$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_act_y_qp_offset_plus5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t pps_act_y_qp_offset_plus5
     * }
     */
    public static final OfByte pps_act_y_qp_offset_plus5$layout() {
        return pps_act_y_qp_offset_plus5$LAYOUT;
    }

    private static final long pps_act_y_qp_offset_plus5$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t pps_act_y_qp_offset_plus5
     * }
     */
    public static final long pps_act_y_qp_offset_plus5$offset() {
        return pps_act_y_qp_offset_plus5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t pps_act_y_qp_offset_plus5
     * }
     */
    public static byte pps_act_y_qp_offset_plus5(MemorySegment struct) {
        return struct.get(pps_act_y_qp_offset_plus5$LAYOUT, pps_act_y_qp_offset_plus5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t pps_act_y_qp_offset_plus5
     * }
     */
    public static void pps_act_y_qp_offset_plus5(MemorySegment struct, byte fieldValue) {
        struct.set(pps_act_y_qp_offset_plus5$LAYOUT, pps_act_y_qp_offset_plus5$OFFSET, fieldValue);
    }

    private static final OfByte pps_act_cb_qp_offset_plus5$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_act_cb_qp_offset_plus5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t pps_act_cb_qp_offset_plus5
     * }
     */
    public static final OfByte pps_act_cb_qp_offset_plus5$layout() {
        return pps_act_cb_qp_offset_plus5$LAYOUT;
    }

    private static final long pps_act_cb_qp_offset_plus5$OFFSET = 35;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t pps_act_cb_qp_offset_plus5
     * }
     */
    public static final long pps_act_cb_qp_offset_plus5$offset() {
        return pps_act_cb_qp_offset_plus5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t pps_act_cb_qp_offset_plus5
     * }
     */
    public static byte pps_act_cb_qp_offset_plus5(MemorySegment struct) {
        return struct.get(pps_act_cb_qp_offset_plus5$LAYOUT, pps_act_cb_qp_offset_plus5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t pps_act_cb_qp_offset_plus5
     * }
     */
    public static void pps_act_cb_qp_offset_plus5(MemorySegment struct, byte fieldValue) {
        struct.set(pps_act_cb_qp_offset_plus5$LAYOUT, pps_act_cb_qp_offset_plus5$OFFSET, fieldValue);
    }

    private static final OfByte pps_act_cr_qp_offset_plus3$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_act_cr_qp_offset_plus3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int8_t pps_act_cr_qp_offset_plus3
     * }
     */
    public static final OfByte pps_act_cr_qp_offset_plus3$layout() {
        return pps_act_cr_qp_offset_plus3$LAYOUT;
    }

    private static final long pps_act_cr_qp_offset_plus3$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int8_t pps_act_cr_qp_offset_plus3
     * }
     */
    public static final long pps_act_cr_qp_offset_plus3$offset() {
        return pps_act_cr_qp_offset_plus3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int8_t pps_act_cr_qp_offset_plus3
     * }
     */
    public static byte pps_act_cr_qp_offset_plus3(MemorySegment struct) {
        return struct.get(pps_act_cr_qp_offset_plus3$LAYOUT, pps_act_cr_qp_offset_plus3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int8_t pps_act_cr_qp_offset_plus3
     * }
     */
    public static void pps_act_cr_qp_offset_plus3(MemorySegment struct, byte fieldValue) {
        struct.set(pps_act_cr_qp_offset_plus3$LAYOUT, pps_act_cr_qp_offset_plus3$OFFSET, fieldValue);
    }

    private static final OfByte pps_num_palette_predictor_initializers$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pps_num_palette_predictor_initializers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pps_num_palette_predictor_initializers
     * }
     */
    public static final OfByte pps_num_palette_predictor_initializers$layout() {
        return pps_num_palette_predictor_initializers$LAYOUT;
    }

    private static final long pps_num_palette_predictor_initializers$OFFSET = 37;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pps_num_palette_predictor_initializers
     * }
     */
    public static final long pps_num_palette_predictor_initializers$offset() {
        return pps_num_palette_predictor_initializers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pps_num_palette_predictor_initializers
     * }
     */
    public static byte pps_num_palette_predictor_initializers(MemorySegment struct) {
        return struct.get(pps_num_palette_predictor_initializers$LAYOUT, pps_num_palette_predictor_initializers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pps_num_palette_predictor_initializers
     * }
     */
    public static void pps_num_palette_predictor_initializers(MemorySegment struct, byte fieldValue) {
        struct.set(pps_num_palette_predictor_initializers$LAYOUT, pps_num_palette_predictor_initializers$OFFSET, fieldValue);
    }

    private static final OfByte luma_bit_depth_entry_minus8$LAYOUT = (OfByte)$LAYOUT.select(groupElement("luma_bit_depth_entry_minus8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t luma_bit_depth_entry_minus8
     * }
     */
    public static final OfByte luma_bit_depth_entry_minus8$layout() {
        return luma_bit_depth_entry_minus8$LAYOUT;
    }

    private static final long luma_bit_depth_entry_minus8$OFFSET = 38;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t luma_bit_depth_entry_minus8
     * }
     */
    public static final long luma_bit_depth_entry_minus8$offset() {
        return luma_bit_depth_entry_minus8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t luma_bit_depth_entry_minus8
     * }
     */
    public static byte luma_bit_depth_entry_minus8(MemorySegment struct) {
        return struct.get(luma_bit_depth_entry_minus8$LAYOUT, luma_bit_depth_entry_minus8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t luma_bit_depth_entry_minus8
     * }
     */
    public static void luma_bit_depth_entry_minus8(MemorySegment struct, byte fieldValue) {
        struct.set(luma_bit_depth_entry_minus8$LAYOUT, luma_bit_depth_entry_minus8$OFFSET, fieldValue);
    }

    private static final OfByte chroma_bit_depth_entry_minus8$LAYOUT = (OfByte)$LAYOUT.select(groupElement("chroma_bit_depth_entry_minus8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t chroma_bit_depth_entry_minus8
     * }
     */
    public static final OfByte chroma_bit_depth_entry_minus8$layout() {
        return chroma_bit_depth_entry_minus8$LAYOUT;
    }

    private static final long chroma_bit_depth_entry_minus8$OFFSET = 39;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t chroma_bit_depth_entry_minus8
     * }
     */
    public static final long chroma_bit_depth_entry_minus8$offset() {
        return chroma_bit_depth_entry_minus8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t chroma_bit_depth_entry_minus8
     * }
     */
    public static byte chroma_bit_depth_entry_minus8(MemorySegment struct) {
        return struct.get(chroma_bit_depth_entry_minus8$LAYOUT, chroma_bit_depth_entry_minus8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t chroma_bit_depth_entry_minus8
     * }
     */
    public static void chroma_bit_depth_entry_minus8(MemorySegment struct, byte fieldValue) {
        struct.set(chroma_bit_depth_entry_minus8$LAYOUT, chroma_bit_depth_entry_minus8$OFFSET, fieldValue);
    }

    private static final OfByte num_tile_columns_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_tile_columns_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_tile_columns_minus1
     * }
     */
    public static final OfByte num_tile_columns_minus1$layout() {
        return num_tile_columns_minus1$LAYOUT;
    }

    private static final long num_tile_columns_minus1$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_tile_columns_minus1
     * }
     */
    public static final long num_tile_columns_minus1$offset() {
        return num_tile_columns_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_tile_columns_minus1
     * }
     */
    public static byte num_tile_columns_minus1(MemorySegment struct) {
        return struct.get(num_tile_columns_minus1$LAYOUT, num_tile_columns_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_tile_columns_minus1
     * }
     */
    public static void num_tile_columns_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_tile_columns_minus1$LAYOUT, num_tile_columns_minus1$OFFSET, fieldValue);
    }

    private static final OfByte num_tile_rows_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_tile_rows_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_tile_rows_minus1
     * }
     */
    public static final OfByte num_tile_rows_minus1$layout() {
        return num_tile_rows_minus1$LAYOUT;
    }

    private static final long num_tile_rows_minus1$OFFSET = 41;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_tile_rows_minus1
     * }
     */
    public static final long num_tile_rows_minus1$offset() {
        return num_tile_rows_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_tile_rows_minus1
     * }
     */
    public static byte num_tile_rows_minus1(MemorySegment struct) {
        return struct.get(num_tile_rows_minus1$LAYOUT, num_tile_rows_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_tile_rows_minus1
     * }
     */
    public static void num_tile_rows_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(num_tile_rows_minus1$LAYOUT, num_tile_rows_minus1$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfByte reserved2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final OfByte reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 43;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static byte reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, byte fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    private static final SequenceLayout column_width_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("column_width_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t column_width_minus1[19]
     * }
     */
    public static final SequenceLayout column_width_minus1$layout() {
        return column_width_minus1$LAYOUT;
    }

    private static final long column_width_minus1$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t column_width_minus1[19]
     * }
     */
    public static final long column_width_minus1$offset() {
        return column_width_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t column_width_minus1[19]
     * }
     */
    public static MemorySegment column_width_minus1(MemorySegment struct) {
        return struct.asSlice(column_width_minus1$OFFSET, column_width_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t column_width_minus1[19]
     * }
     */
    public static void column_width_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, column_width_minus1$OFFSET, column_width_minus1$LAYOUT.byteSize());
    }

    private static long[] column_width_minus1$DIMS = { 19 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint16_t column_width_minus1[19]
     * }
     */
    public static long[] column_width_minus1$dimensions() {
        return column_width_minus1$DIMS;
    }
    private static final VarHandle column_width_minus1$ELEM_HANDLE = column_width_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint16_t column_width_minus1[19]
     * }
     */
    public static short column_width_minus1(MemorySegment struct, long index0) {
        return (short)column_width_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint16_t column_width_minus1[19]
     * }
     */
    public static void column_width_minus1(MemorySegment struct, long index0, short fieldValue) {
        column_width_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout row_height_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("row_height_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t row_height_minus1[21]
     * }
     */
    public static final SequenceLayout row_height_minus1$layout() {
        return row_height_minus1$LAYOUT;
    }

    private static final long row_height_minus1$OFFSET = 82;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t row_height_minus1[21]
     * }
     */
    public static final long row_height_minus1$offset() {
        return row_height_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t row_height_minus1[21]
     * }
     */
    public static MemorySegment row_height_minus1(MemorySegment struct) {
        return struct.asSlice(row_height_minus1$OFFSET, row_height_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t row_height_minus1[21]
     * }
     */
    public static void row_height_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, row_height_minus1$OFFSET, row_height_minus1$LAYOUT.byteSize());
    }

    private static long[] row_height_minus1$DIMS = { 21 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint16_t row_height_minus1[21]
     * }
     */
    public static long[] row_height_minus1$dimensions() {
        return row_height_minus1$DIMS;
    }
    private static final VarHandle row_height_minus1$ELEM_HANDLE = row_height_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint16_t row_height_minus1[21]
     * }
     */
    public static short row_height_minus1(MemorySegment struct, long index0) {
        return (short)row_height_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint16_t row_height_minus1[21]
     * }
     */
    public static void row_height_minus1(MemorySegment struct, long index0, short fieldValue) {
        row_height_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt reserved3$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static final OfInt reserved3$layout() {
        return reserved3$LAYOUT;
    }

    private static final long reserved3$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static final long reserved3$offset() {
        return reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static int reserved3(MemorySegment struct) {
        return struct.get(reserved3$LAYOUT, reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static void reserved3(MemorySegment struct, int fieldValue) {
        struct.set(reserved3$LAYOUT, reserved3$OFFSET, fieldValue);
    }

    private static final AddressLayout pScalingLists$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pScalingLists"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static final AddressLayout pScalingLists$layout() {
        return pScalingLists$LAYOUT;
    }

    private static final long pScalingLists$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static final long pScalingLists$offset() {
        return pScalingLists$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static MemorySegment pScalingLists(MemorySegment struct) {
        return struct.get(pScalingLists$LAYOUT, pScalingLists$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static void pScalingLists(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pScalingLists$LAYOUT, pScalingLists$OFFSET, fieldValue);
    }

    private static final AddressLayout pPredictorPaletteEntries$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pPredictorPaletteEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static final AddressLayout pPredictorPaletteEntries$layout() {
        return pPredictorPaletteEntries$LAYOUT;
    }

    private static final long pPredictorPaletteEntries$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static final long pPredictorPaletteEntries$offset() {
        return pPredictorPaletteEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static MemorySegment pPredictorPaletteEntries(MemorySegment struct) {
        return struct.get(pPredictorPaletteEntries$LAYOUT, pPredictorPaletteEntries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static void pPredictorPaletteEntries(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pPredictorPaletteEntries$LAYOUT, pPredictorPaletteEntries$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

