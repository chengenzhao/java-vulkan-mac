// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265PpsFlags {
 *     uint32_t dependent_slice_segments_enabled_flag : 1;
 *     uint32_t output_flag_present_flag : 1;
 *     uint32_t sign_data_hiding_enabled_flag : 1;
 *     uint32_t cabac_init_present_flag : 1;
 *     uint32_t constrained_intra_pred_flag : 1;
 *     uint32_t transform_skip_enabled_flag : 1;
 *     uint32_t cu_qp_delta_enabled_flag : 1;
 *     uint32_t pps_slice_chroma_qp_offsets_present_flag : 1;
 *     uint32_t weighted_pred_flag : 1;
 *     uint32_t weighted_bipred_flag : 1;
 *     uint32_t transquant_bypass_enabled_flag : 1;
 *     uint32_t tiles_enabled_flag : 1;
 *     uint32_t entropy_coding_sync_enabled_flag : 1;
 *     uint32_t uniform_spacing_flag : 1;
 *     uint32_t loop_filter_across_tiles_enabled_flag : 1;
 *     uint32_t pps_loop_filter_across_slices_enabled_flag : 1;
 *     uint32_t deblocking_filter_control_present_flag : 1;
 *     uint32_t deblocking_filter_override_enabled_flag : 1;
 *     uint32_t pps_deblocking_filter_disabled_flag : 1;
 *     uint32_t pps_scaling_list_data_present_flag : 1;
 *     uint32_t lists_modification_present_flag : 1;
 *     uint32_t slice_segment_header_extension_present_flag : 1;
 *     uint32_t pps_extension_present_flag : 1;
 *     uint32_t cross_component_prediction_enabled_flag : 1;
 *     uint32_t chroma_qp_offset_list_enabled_flag : 1;
 *     uint32_t pps_curr_pic_ref_enabled_flag : 1;
 *     uint32_t residual_adaptive_colour_transform_enabled_flag : 1;
 *     uint32_t pps_slice_act_qp_offsets_present_flag : 1;
 *     uint32_t pps_palette_predictor_initializers_present_flag : 1;
 *     uint32_t monochrome_palette_flag : 1;
 *     uint32_t pps_range_extension_flag : 1;
 * }
 * }
 */
public class StdVideoH265PpsFlags {

    StdVideoH265PpsFlags() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.paddingLayout(4)
    ).withName("StdVideoH265PpsFlags");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

