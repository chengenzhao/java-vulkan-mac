// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265SequenceParameterSet {
 *     StdVideoH265SpsFlags flags;
 *     StdVideoH265ChromaFormatIdc chroma_format_idc;
 *     uint32_t pic_width_in_luma_samples;
 *     uint32_t pic_height_in_luma_samples;
 *     uint8_t sps_video_parameter_set_id;
 *     uint8_t sps_max_sub_layers_minus1;
 *     uint8_t sps_seq_parameter_set_id;
 *     uint8_t bit_depth_luma_minus8;
 *     uint8_t bit_depth_chroma_minus8;
 *     uint8_t log2_max_pic_order_cnt_lsb_minus4;
 *     uint8_t log2_min_luma_coding_block_size_minus3;
 *     uint8_t log2_diff_max_min_luma_coding_block_size;
 *     uint8_t log2_min_luma_transform_block_size_minus2;
 *     uint8_t log2_diff_max_min_luma_transform_block_size;
 *     uint8_t max_transform_hierarchy_depth_inter;
 *     uint8_t max_transform_hierarchy_depth_intra;
 *     uint8_t num_short_term_ref_pic_sets;
 *     uint8_t num_long_term_ref_pics_sps;
 *     uint8_t pcm_sample_bit_depth_luma_minus1;
 *     uint8_t pcm_sample_bit_depth_chroma_minus1;
 *     uint8_t log2_min_pcm_luma_coding_block_size_minus3;
 *     uint8_t log2_diff_max_min_pcm_luma_coding_block_size;
 *     uint8_t reserved1;
 *     uint8_t reserved2;
 *     uint8_t palette_max_size;
 *     uint8_t delta_palette_max_predictor_size;
 *     uint8_t motion_vector_resolution_control_idc;
 *     uint8_t sps_num_palette_predictor_initializers_minus1;
 *     uint32_t conf_win_left_offset;
 *     uint32_t conf_win_right_offset;
 *     uint32_t conf_win_top_offset;
 *     uint32_t conf_win_bottom_offset;
 *     const StdVideoH265ProfileTierLevel *pProfileTierLevel;
 *     const StdVideoH265DecPicBufMgr *pDecPicBufMgr;
 *     const StdVideoH265ScalingLists *pScalingLists;
 *     const StdVideoH265ShortTermRefPicSet *pShortTermRefPicSet;
 *     const StdVideoH265LongTermRefPicsSps *pLongTermRefPicsSps;
 *     const StdVideoH265SequenceParameterSetVui *pSequenceParameterSetVui;
 *     const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries;
 * }
 * }
 */
public class StdVideoH265SequenceParameterSet {

    StdVideoH265SequenceParameterSet() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoH265SpsFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("chroma_format_idc"),
        vulkan_h.C_INT.withName("pic_width_in_luma_samples"),
        vulkan_h.C_INT.withName("pic_height_in_luma_samples"),
        vulkan_h.C_CHAR.withName("sps_video_parameter_set_id"),
        vulkan_h.C_CHAR.withName("sps_max_sub_layers_minus1"),
        vulkan_h.C_CHAR.withName("sps_seq_parameter_set_id"),
        vulkan_h.C_CHAR.withName("bit_depth_luma_minus8"),
        vulkan_h.C_CHAR.withName("bit_depth_chroma_minus8"),
        vulkan_h.C_CHAR.withName("log2_max_pic_order_cnt_lsb_minus4"),
        vulkan_h.C_CHAR.withName("log2_min_luma_coding_block_size_minus3"),
        vulkan_h.C_CHAR.withName("log2_diff_max_min_luma_coding_block_size"),
        vulkan_h.C_CHAR.withName("log2_min_luma_transform_block_size_minus2"),
        vulkan_h.C_CHAR.withName("log2_diff_max_min_luma_transform_block_size"),
        vulkan_h.C_CHAR.withName("max_transform_hierarchy_depth_inter"),
        vulkan_h.C_CHAR.withName("max_transform_hierarchy_depth_intra"),
        vulkan_h.C_CHAR.withName("num_short_term_ref_pic_sets"),
        vulkan_h.C_CHAR.withName("num_long_term_ref_pics_sps"),
        vulkan_h.C_CHAR.withName("pcm_sample_bit_depth_luma_minus1"),
        vulkan_h.C_CHAR.withName("pcm_sample_bit_depth_chroma_minus1"),
        vulkan_h.C_CHAR.withName("log2_min_pcm_luma_coding_block_size_minus3"),
        vulkan_h.C_CHAR.withName("log2_diff_max_min_pcm_luma_coding_block_size"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_CHAR.withName("reserved2"),
        vulkan_h.C_CHAR.withName("palette_max_size"),
        vulkan_h.C_CHAR.withName("delta_palette_max_predictor_size"),
        vulkan_h.C_CHAR.withName("motion_vector_resolution_control_idc"),
        vulkan_h.C_CHAR.withName("sps_num_palette_predictor_initializers_minus1"),
        vulkan_h.C_INT.withName("conf_win_left_offset"),
        vulkan_h.C_INT.withName("conf_win_right_offset"),
        vulkan_h.C_INT.withName("conf_win_top_offset"),
        vulkan_h.C_INT.withName("conf_win_bottom_offset"),
        vulkan_h.C_POINTER.withName("pProfileTierLevel"),
        vulkan_h.C_POINTER.withName("pDecPicBufMgr"),
        vulkan_h.C_POINTER.withName("pScalingLists"),
        vulkan_h.C_POINTER.withName("pShortTermRefPicSet"),
        vulkan_h.C_POINTER.withName("pLongTermRefPicsSps"),
        vulkan_h.C_POINTER.withName("pSequenceParameterSetVui"),
        vulkan_h.C_POINTER.withName("pPredictorPaletteEntries")
    ).withName("StdVideoH265SequenceParameterSet");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265SpsFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265SpsFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265SpsFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265SpsFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt chroma_format_idc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chroma_format_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265ChromaFormatIdc chroma_format_idc
     * }
     */
    public static final OfInt chroma_format_idc$layout() {
        return chroma_format_idc$LAYOUT;
    }

    private static final long chroma_format_idc$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265ChromaFormatIdc chroma_format_idc
     * }
     */
    public static final long chroma_format_idc$offset() {
        return chroma_format_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265ChromaFormatIdc chroma_format_idc
     * }
     */
    public static int chroma_format_idc(MemorySegment struct) {
        return struct.get(chroma_format_idc$LAYOUT, chroma_format_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265ChromaFormatIdc chroma_format_idc
     * }
     */
    public static void chroma_format_idc(MemorySegment struct, int fieldValue) {
        struct.set(chroma_format_idc$LAYOUT, chroma_format_idc$OFFSET, fieldValue);
    }

    private static final OfInt pic_width_in_luma_samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pic_width_in_luma_samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_luma_samples
     * }
     */
    public static final OfInt pic_width_in_luma_samples$layout() {
        return pic_width_in_luma_samples$LAYOUT;
    }

    private static final long pic_width_in_luma_samples$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_luma_samples
     * }
     */
    public static final long pic_width_in_luma_samples$offset() {
        return pic_width_in_luma_samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_luma_samples
     * }
     */
    public static int pic_width_in_luma_samples(MemorySegment struct) {
        return struct.get(pic_width_in_luma_samples$LAYOUT, pic_width_in_luma_samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pic_width_in_luma_samples
     * }
     */
    public static void pic_width_in_luma_samples(MemorySegment struct, int fieldValue) {
        struct.set(pic_width_in_luma_samples$LAYOUT, pic_width_in_luma_samples$OFFSET, fieldValue);
    }

    private static final OfInt pic_height_in_luma_samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pic_height_in_luma_samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_luma_samples
     * }
     */
    public static final OfInt pic_height_in_luma_samples$layout() {
        return pic_height_in_luma_samples$LAYOUT;
    }

    private static final long pic_height_in_luma_samples$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_luma_samples
     * }
     */
    public static final long pic_height_in_luma_samples$offset() {
        return pic_height_in_luma_samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_luma_samples
     * }
     */
    public static int pic_height_in_luma_samples(MemorySegment struct) {
        return struct.get(pic_height_in_luma_samples$LAYOUT, pic_height_in_luma_samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pic_height_in_luma_samples
     * }
     */
    public static void pic_height_in_luma_samples(MemorySegment struct, int fieldValue) {
        struct.set(pic_height_in_luma_samples$LAYOUT, pic_height_in_luma_samples$OFFSET, fieldValue);
    }

    private static final OfByte sps_video_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sps_video_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static final OfByte sps_video_parameter_set_id$layout() {
        return sps_video_parameter_set_id$LAYOUT;
    }

    private static final long sps_video_parameter_set_id$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static final long sps_video_parameter_set_id$offset() {
        return sps_video_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static byte sps_video_parameter_set_id(MemorySegment struct) {
        return struct.get(sps_video_parameter_set_id$LAYOUT, sps_video_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sps_video_parameter_set_id
     * }
     */
    public static void sps_video_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(sps_video_parameter_set_id$LAYOUT, sps_video_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte sps_max_sub_layers_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sps_max_sub_layers_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sps_max_sub_layers_minus1
     * }
     */
    public static final OfByte sps_max_sub_layers_minus1$layout() {
        return sps_max_sub_layers_minus1$LAYOUT;
    }

    private static final long sps_max_sub_layers_minus1$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sps_max_sub_layers_minus1
     * }
     */
    public static final long sps_max_sub_layers_minus1$offset() {
        return sps_max_sub_layers_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sps_max_sub_layers_minus1
     * }
     */
    public static byte sps_max_sub_layers_minus1(MemorySegment struct) {
        return struct.get(sps_max_sub_layers_minus1$LAYOUT, sps_max_sub_layers_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sps_max_sub_layers_minus1
     * }
     */
    public static void sps_max_sub_layers_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(sps_max_sub_layers_minus1$LAYOUT, sps_max_sub_layers_minus1$OFFSET, fieldValue);
    }

    private static final OfByte sps_seq_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sps_seq_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sps_seq_parameter_set_id
     * }
     */
    public static final OfByte sps_seq_parameter_set_id$layout() {
        return sps_seq_parameter_set_id$LAYOUT;
    }

    private static final long sps_seq_parameter_set_id$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sps_seq_parameter_set_id
     * }
     */
    public static final long sps_seq_parameter_set_id$offset() {
        return sps_seq_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sps_seq_parameter_set_id
     * }
     */
    public static byte sps_seq_parameter_set_id(MemorySegment struct) {
        return struct.get(sps_seq_parameter_set_id$LAYOUT, sps_seq_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sps_seq_parameter_set_id
     * }
     */
    public static void sps_seq_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(sps_seq_parameter_set_id$LAYOUT, sps_seq_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte bit_depth_luma_minus8$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bit_depth_luma_minus8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static final OfByte bit_depth_luma_minus8$layout() {
        return bit_depth_luma_minus8$LAYOUT;
    }

    private static final long bit_depth_luma_minus8$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static final long bit_depth_luma_minus8$offset() {
        return bit_depth_luma_minus8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static byte bit_depth_luma_minus8(MemorySegment struct) {
        return struct.get(bit_depth_luma_minus8$LAYOUT, bit_depth_luma_minus8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_luma_minus8
     * }
     */
    public static void bit_depth_luma_minus8(MemorySegment struct, byte fieldValue) {
        struct.set(bit_depth_luma_minus8$LAYOUT, bit_depth_luma_minus8$OFFSET, fieldValue);
    }

    private static final OfByte bit_depth_chroma_minus8$LAYOUT = (OfByte)$LAYOUT.select(groupElement("bit_depth_chroma_minus8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static final OfByte bit_depth_chroma_minus8$layout() {
        return bit_depth_chroma_minus8$LAYOUT;
    }

    private static final long bit_depth_chroma_minus8$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static final long bit_depth_chroma_minus8$offset() {
        return bit_depth_chroma_minus8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static byte bit_depth_chroma_minus8(MemorySegment struct) {
        return struct.get(bit_depth_chroma_minus8$LAYOUT, bit_depth_chroma_minus8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t bit_depth_chroma_minus8
     * }
     */
    public static void bit_depth_chroma_minus8(MemorySegment struct, byte fieldValue) {
        struct.set(bit_depth_chroma_minus8$LAYOUT, bit_depth_chroma_minus8$OFFSET, fieldValue);
    }

    private static final OfByte log2_max_pic_order_cnt_lsb_minus4$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_max_pic_order_cnt_lsb_minus4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static final OfByte log2_max_pic_order_cnt_lsb_minus4$layout() {
        return log2_max_pic_order_cnt_lsb_minus4$LAYOUT;
    }

    private static final long log2_max_pic_order_cnt_lsb_minus4$OFFSET = 21;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static final long log2_max_pic_order_cnt_lsb_minus4$offset() {
        return log2_max_pic_order_cnt_lsb_minus4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static byte log2_max_pic_order_cnt_lsb_minus4(MemorySegment struct) {
        return struct.get(log2_max_pic_order_cnt_lsb_minus4$LAYOUT, log2_max_pic_order_cnt_lsb_minus4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_pic_order_cnt_lsb_minus4
     * }
     */
    public static void log2_max_pic_order_cnt_lsb_minus4(MemorySegment struct, byte fieldValue) {
        struct.set(log2_max_pic_order_cnt_lsb_minus4$LAYOUT, log2_max_pic_order_cnt_lsb_minus4$OFFSET, fieldValue);
    }

    private static final OfByte log2_min_luma_coding_block_size_minus3$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_min_luma_coding_block_size_minus3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_coding_block_size_minus3
     * }
     */
    public static final OfByte log2_min_luma_coding_block_size_minus3$layout() {
        return log2_min_luma_coding_block_size_minus3$LAYOUT;
    }

    private static final long log2_min_luma_coding_block_size_minus3$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_coding_block_size_minus3
     * }
     */
    public static final long log2_min_luma_coding_block_size_minus3$offset() {
        return log2_min_luma_coding_block_size_minus3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_coding_block_size_minus3
     * }
     */
    public static byte log2_min_luma_coding_block_size_minus3(MemorySegment struct) {
        return struct.get(log2_min_luma_coding_block_size_minus3$LAYOUT, log2_min_luma_coding_block_size_minus3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_coding_block_size_minus3
     * }
     */
    public static void log2_min_luma_coding_block_size_minus3(MemorySegment struct, byte fieldValue) {
        struct.set(log2_min_luma_coding_block_size_minus3$LAYOUT, log2_min_luma_coding_block_size_minus3$OFFSET, fieldValue);
    }

    private static final OfByte log2_diff_max_min_luma_coding_block_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_diff_max_min_luma_coding_block_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_coding_block_size
     * }
     */
    public static final OfByte log2_diff_max_min_luma_coding_block_size$layout() {
        return log2_diff_max_min_luma_coding_block_size$LAYOUT;
    }

    private static final long log2_diff_max_min_luma_coding_block_size$OFFSET = 23;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_coding_block_size
     * }
     */
    public static final long log2_diff_max_min_luma_coding_block_size$offset() {
        return log2_diff_max_min_luma_coding_block_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_coding_block_size
     * }
     */
    public static byte log2_diff_max_min_luma_coding_block_size(MemorySegment struct) {
        return struct.get(log2_diff_max_min_luma_coding_block_size$LAYOUT, log2_diff_max_min_luma_coding_block_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_coding_block_size
     * }
     */
    public static void log2_diff_max_min_luma_coding_block_size(MemorySegment struct, byte fieldValue) {
        struct.set(log2_diff_max_min_luma_coding_block_size$LAYOUT, log2_diff_max_min_luma_coding_block_size$OFFSET, fieldValue);
    }

    private static final OfByte log2_min_luma_transform_block_size_minus2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_min_luma_transform_block_size_minus2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_transform_block_size_minus2
     * }
     */
    public static final OfByte log2_min_luma_transform_block_size_minus2$layout() {
        return log2_min_luma_transform_block_size_minus2$LAYOUT;
    }

    private static final long log2_min_luma_transform_block_size_minus2$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_transform_block_size_minus2
     * }
     */
    public static final long log2_min_luma_transform_block_size_minus2$offset() {
        return log2_min_luma_transform_block_size_minus2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_transform_block_size_minus2
     * }
     */
    public static byte log2_min_luma_transform_block_size_minus2(MemorySegment struct) {
        return struct.get(log2_min_luma_transform_block_size_minus2$LAYOUT, log2_min_luma_transform_block_size_minus2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_min_luma_transform_block_size_minus2
     * }
     */
    public static void log2_min_luma_transform_block_size_minus2(MemorySegment struct, byte fieldValue) {
        struct.set(log2_min_luma_transform_block_size_minus2$LAYOUT, log2_min_luma_transform_block_size_minus2$OFFSET, fieldValue);
    }

    private static final OfByte log2_diff_max_min_luma_transform_block_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_diff_max_min_luma_transform_block_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_transform_block_size
     * }
     */
    public static final OfByte log2_diff_max_min_luma_transform_block_size$layout() {
        return log2_diff_max_min_luma_transform_block_size$LAYOUT;
    }

    private static final long log2_diff_max_min_luma_transform_block_size$OFFSET = 25;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_transform_block_size
     * }
     */
    public static final long log2_diff_max_min_luma_transform_block_size$offset() {
        return log2_diff_max_min_luma_transform_block_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_transform_block_size
     * }
     */
    public static byte log2_diff_max_min_luma_transform_block_size(MemorySegment struct) {
        return struct.get(log2_diff_max_min_luma_transform_block_size$LAYOUT, log2_diff_max_min_luma_transform_block_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_luma_transform_block_size
     * }
     */
    public static void log2_diff_max_min_luma_transform_block_size(MemorySegment struct, byte fieldValue) {
        struct.set(log2_diff_max_min_luma_transform_block_size$LAYOUT, log2_diff_max_min_luma_transform_block_size$OFFSET, fieldValue);
    }

    private static final OfByte max_transform_hierarchy_depth_inter$LAYOUT = (OfByte)$LAYOUT.select(groupElement("max_transform_hierarchy_depth_inter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_inter
     * }
     */
    public static final OfByte max_transform_hierarchy_depth_inter$layout() {
        return max_transform_hierarchy_depth_inter$LAYOUT;
    }

    private static final long max_transform_hierarchy_depth_inter$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_inter
     * }
     */
    public static final long max_transform_hierarchy_depth_inter$offset() {
        return max_transform_hierarchy_depth_inter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_inter
     * }
     */
    public static byte max_transform_hierarchy_depth_inter(MemorySegment struct) {
        return struct.get(max_transform_hierarchy_depth_inter$LAYOUT, max_transform_hierarchy_depth_inter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_inter
     * }
     */
    public static void max_transform_hierarchy_depth_inter(MemorySegment struct, byte fieldValue) {
        struct.set(max_transform_hierarchy_depth_inter$LAYOUT, max_transform_hierarchy_depth_inter$OFFSET, fieldValue);
    }

    private static final OfByte max_transform_hierarchy_depth_intra$LAYOUT = (OfByte)$LAYOUT.select(groupElement("max_transform_hierarchy_depth_intra"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_intra
     * }
     */
    public static final OfByte max_transform_hierarchy_depth_intra$layout() {
        return max_transform_hierarchy_depth_intra$LAYOUT;
    }

    private static final long max_transform_hierarchy_depth_intra$OFFSET = 27;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_intra
     * }
     */
    public static final long max_transform_hierarchy_depth_intra$offset() {
        return max_transform_hierarchy_depth_intra$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_intra
     * }
     */
    public static byte max_transform_hierarchy_depth_intra(MemorySegment struct) {
        return struct.get(max_transform_hierarchy_depth_intra$LAYOUT, max_transform_hierarchy_depth_intra$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t max_transform_hierarchy_depth_intra
     * }
     */
    public static void max_transform_hierarchy_depth_intra(MemorySegment struct, byte fieldValue) {
        struct.set(max_transform_hierarchy_depth_intra$LAYOUT, max_transform_hierarchy_depth_intra$OFFSET, fieldValue);
    }

    private static final OfByte num_short_term_ref_pic_sets$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_short_term_ref_pic_sets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_short_term_ref_pic_sets
     * }
     */
    public static final OfByte num_short_term_ref_pic_sets$layout() {
        return num_short_term_ref_pic_sets$LAYOUT;
    }

    private static final long num_short_term_ref_pic_sets$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_short_term_ref_pic_sets
     * }
     */
    public static final long num_short_term_ref_pic_sets$offset() {
        return num_short_term_ref_pic_sets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_short_term_ref_pic_sets
     * }
     */
    public static byte num_short_term_ref_pic_sets(MemorySegment struct) {
        return struct.get(num_short_term_ref_pic_sets$LAYOUT, num_short_term_ref_pic_sets$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_short_term_ref_pic_sets
     * }
     */
    public static void num_short_term_ref_pic_sets(MemorySegment struct, byte fieldValue) {
        struct.set(num_short_term_ref_pic_sets$LAYOUT, num_short_term_ref_pic_sets$OFFSET, fieldValue);
    }

    private static final OfByte num_long_term_ref_pics_sps$LAYOUT = (OfByte)$LAYOUT.select(groupElement("num_long_term_ref_pics_sps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t num_long_term_ref_pics_sps
     * }
     */
    public static final OfByte num_long_term_ref_pics_sps$layout() {
        return num_long_term_ref_pics_sps$LAYOUT;
    }

    private static final long num_long_term_ref_pics_sps$OFFSET = 29;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t num_long_term_ref_pics_sps
     * }
     */
    public static final long num_long_term_ref_pics_sps$offset() {
        return num_long_term_ref_pics_sps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t num_long_term_ref_pics_sps
     * }
     */
    public static byte num_long_term_ref_pics_sps(MemorySegment struct) {
        return struct.get(num_long_term_ref_pics_sps$LAYOUT, num_long_term_ref_pics_sps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t num_long_term_ref_pics_sps
     * }
     */
    public static void num_long_term_ref_pics_sps(MemorySegment struct, byte fieldValue) {
        struct.set(num_long_term_ref_pics_sps$LAYOUT, num_long_term_ref_pics_sps$OFFSET, fieldValue);
    }

    private static final OfByte pcm_sample_bit_depth_luma_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pcm_sample_bit_depth_luma_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_luma_minus1
     * }
     */
    public static final OfByte pcm_sample_bit_depth_luma_minus1$layout() {
        return pcm_sample_bit_depth_luma_minus1$LAYOUT;
    }

    private static final long pcm_sample_bit_depth_luma_minus1$OFFSET = 30;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_luma_minus1
     * }
     */
    public static final long pcm_sample_bit_depth_luma_minus1$offset() {
        return pcm_sample_bit_depth_luma_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_luma_minus1
     * }
     */
    public static byte pcm_sample_bit_depth_luma_minus1(MemorySegment struct) {
        return struct.get(pcm_sample_bit_depth_luma_minus1$LAYOUT, pcm_sample_bit_depth_luma_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_luma_minus1
     * }
     */
    public static void pcm_sample_bit_depth_luma_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(pcm_sample_bit_depth_luma_minus1$LAYOUT, pcm_sample_bit_depth_luma_minus1$OFFSET, fieldValue);
    }

    private static final OfByte pcm_sample_bit_depth_chroma_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("pcm_sample_bit_depth_chroma_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_chroma_minus1
     * }
     */
    public static final OfByte pcm_sample_bit_depth_chroma_minus1$layout() {
        return pcm_sample_bit_depth_chroma_minus1$LAYOUT;
    }

    private static final long pcm_sample_bit_depth_chroma_minus1$OFFSET = 31;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_chroma_minus1
     * }
     */
    public static final long pcm_sample_bit_depth_chroma_minus1$offset() {
        return pcm_sample_bit_depth_chroma_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_chroma_minus1
     * }
     */
    public static byte pcm_sample_bit_depth_chroma_minus1(MemorySegment struct) {
        return struct.get(pcm_sample_bit_depth_chroma_minus1$LAYOUT, pcm_sample_bit_depth_chroma_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pcm_sample_bit_depth_chroma_minus1
     * }
     */
    public static void pcm_sample_bit_depth_chroma_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(pcm_sample_bit_depth_chroma_minus1$LAYOUT, pcm_sample_bit_depth_chroma_minus1$OFFSET, fieldValue);
    }

    private static final OfByte log2_min_pcm_luma_coding_block_size_minus3$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_min_pcm_luma_coding_block_size_minus3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_min_pcm_luma_coding_block_size_minus3
     * }
     */
    public static final OfByte log2_min_pcm_luma_coding_block_size_minus3$layout() {
        return log2_min_pcm_luma_coding_block_size_minus3$LAYOUT;
    }

    private static final long log2_min_pcm_luma_coding_block_size_minus3$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_min_pcm_luma_coding_block_size_minus3
     * }
     */
    public static final long log2_min_pcm_luma_coding_block_size_minus3$offset() {
        return log2_min_pcm_luma_coding_block_size_minus3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_min_pcm_luma_coding_block_size_minus3
     * }
     */
    public static byte log2_min_pcm_luma_coding_block_size_minus3(MemorySegment struct) {
        return struct.get(log2_min_pcm_luma_coding_block_size_minus3$LAYOUT, log2_min_pcm_luma_coding_block_size_minus3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_min_pcm_luma_coding_block_size_minus3
     * }
     */
    public static void log2_min_pcm_luma_coding_block_size_minus3(MemorySegment struct, byte fieldValue) {
        struct.set(log2_min_pcm_luma_coding_block_size_minus3$LAYOUT, log2_min_pcm_luma_coding_block_size_minus3$OFFSET, fieldValue);
    }

    private static final OfByte log2_diff_max_min_pcm_luma_coding_block_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_diff_max_min_pcm_luma_coding_block_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_pcm_luma_coding_block_size
     * }
     */
    public static final OfByte log2_diff_max_min_pcm_luma_coding_block_size$layout() {
        return log2_diff_max_min_pcm_luma_coding_block_size$LAYOUT;
    }

    private static final long log2_diff_max_min_pcm_luma_coding_block_size$OFFSET = 33;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_pcm_luma_coding_block_size
     * }
     */
    public static final long log2_diff_max_min_pcm_luma_coding_block_size$offset() {
        return log2_diff_max_min_pcm_luma_coding_block_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_pcm_luma_coding_block_size
     * }
     */
    public static byte log2_diff_max_min_pcm_luma_coding_block_size(MemorySegment struct) {
        return struct.get(log2_diff_max_min_pcm_luma_coding_block_size$LAYOUT, log2_diff_max_min_pcm_luma_coding_block_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_diff_max_min_pcm_luma_coding_block_size
     * }
     */
    public static void log2_diff_max_min_pcm_luma_coding_block_size(MemorySegment struct, byte fieldValue) {
        struct.set(log2_diff_max_min_pcm_luma_coding_block_size$LAYOUT, log2_diff_max_min_pcm_luma_coding_block_size$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 34;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfByte reserved2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final OfByte reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 35;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static byte reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, byte fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    private static final OfByte palette_max_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("palette_max_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t palette_max_size
     * }
     */
    public static final OfByte palette_max_size$layout() {
        return palette_max_size$LAYOUT;
    }

    private static final long palette_max_size$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t palette_max_size
     * }
     */
    public static final long palette_max_size$offset() {
        return palette_max_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t palette_max_size
     * }
     */
    public static byte palette_max_size(MemorySegment struct) {
        return struct.get(palette_max_size$LAYOUT, palette_max_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t palette_max_size
     * }
     */
    public static void palette_max_size(MemorySegment struct, byte fieldValue) {
        struct.set(palette_max_size$LAYOUT, palette_max_size$OFFSET, fieldValue);
    }

    private static final OfByte delta_palette_max_predictor_size$LAYOUT = (OfByte)$LAYOUT.select(groupElement("delta_palette_max_predictor_size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t delta_palette_max_predictor_size
     * }
     */
    public static final OfByte delta_palette_max_predictor_size$layout() {
        return delta_palette_max_predictor_size$LAYOUT;
    }

    private static final long delta_palette_max_predictor_size$OFFSET = 37;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t delta_palette_max_predictor_size
     * }
     */
    public static final long delta_palette_max_predictor_size$offset() {
        return delta_palette_max_predictor_size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t delta_palette_max_predictor_size
     * }
     */
    public static byte delta_palette_max_predictor_size(MemorySegment struct) {
        return struct.get(delta_palette_max_predictor_size$LAYOUT, delta_palette_max_predictor_size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t delta_palette_max_predictor_size
     * }
     */
    public static void delta_palette_max_predictor_size(MemorySegment struct, byte fieldValue) {
        struct.set(delta_palette_max_predictor_size$LAYOUT, delta_palette_max_predictor_size$OFFSET, fieldValue);
    }

    private static final OfByte motion_vector_resolution_control_idc$LAYOUT = (OfByte)$LAYOUT.select(groupElement("motion_vector_resolution_control_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t motion_vector_resolution_control_idc
     * }
     */
    public static final OfByte motion_vector_resolution_control_idc$layout() {
        return motion_vector_resolution_control_idc$LAYOUT;
    }

    private static final long motion_vector_resolution_control_idc$OFFSET = 38;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t motion_vector_resolution_control_idc
     * }
     */
    public static final long motion_vector_resolution_control_idc$offset() {
        return motion_vector_resolution_control_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t motion_vector_resolution_control_idc
     * }
     */
    public static byte motion_vector_resolution_control_idc(MemorySegment struct) {
        return struct.get(motion_vector_resolution_control_idc$LAYOUT, motion_vector_resolution_control_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t motion_vector_resolution_control_idc
     * }
     */
    public static void motion_vector_resolution_control_idc(MemorySegment struct, byte fieldValue) {
        struct.set(motion_vector_resolution_control_idc$LAYOUT, motion_vector_resolution_control_idc$OFFSET, fieldValue);
    }

    private static final OfByte sps_num_palette_predictor_initializers_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sps_num_palette_predictor_initializers_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t sps_num_palette_predictor_initializers_minus1
     * }
     */
    public static final OfByte sps_num_palette_predictor_initializers_minus1$layout() {
        return sps_num_palette_predictor_initializers_minus1$LAYOUT;
    }

    private static final long sps_num_palette_predictor_initializers_minus1$OFFSET = 39;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t sps_num_palette_predictor_initializers_minus1
     * }
     */
    public static final long sps_num_palette_predictor_initializers_minus1$offset() {
        return sps_num_palette_predictor_initializers_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t sps_num_palette_predictor_initializers_minus1
     * }
     */
    public static byte sps_num_palette_predictor_initializers_minus1(MemorySegment struct) {
        return struct.get(sps_num_palette_predictor_initializers_minus1$LAYOUT, sps_num_palette_predictor_initializers_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t sps_num_palette_predictor_initializers_minus1
     * }
     */
    public static void sps_num_palette_predictor_initializers_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(sps_num_palette_predictor_initializers_minus1$LAYOUT, sps_num_palette_predictor_initializers_minus1$OFFSET, fieldValue);
    }

    private static final OfInt conf_win_left_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("conf_win_left_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t conf_win_left_offset
     * }
     */
    public static final OfInt conf_win_left_offset$layout() {
        return conf_win_left_offset$LAYOUT;
    }

    private static final long conf_win_left_offset$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t conf_win_left_offset
     * }
     */
    public static final long conf_win_left_offset$offset() {
        return conf_win_left_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_left_offset
     * }
     */
    public static int conf_win_left_offset(MemorySegment struct) {
        return struct.get(conf_win_left_offset$LAYOUT, conf_win_left_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_left_offset
     * }
     */
    public static void conf_win_left_offset(MemorySegment struct, int fieldValue) {
        struct.set(conf_win_left_offset$LAYOUT, conf_win_left_offset$OFFSET, fieldValue);
    }

    private static final OfInt conf_win_right_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("conf_win_right_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t conf_win_right_offset
     * }
     */
    public static final OfInt conf_win_right_offset$layout() {
        return conf_win_right_offset$LAYOUT;
    }

    private static final long conf_win_right_offset$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t conf_win_right_offset
     * }
     */
    public static final long conf_win_right_offset$offset() {
        return conf_win_right_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_right_offset
     * }
     */
    public static int conf_win_right_offset(MemorySegment struct) {
        return struct.get(conf_win_right_offset$LAYOUT, conf_win_right_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_right_offset
     * }
     */
    public static void conf_win_right_offset(MemorySegment struct, int fieldValue) {
        struct.set(conf_win_right_offset$LAYOUT, conf_win_right_offset$OFFSET, fieldValue);
    }

    private static final OfInt conf_win_top_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("conf_win_top_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t conf_win_top_offset
     * }
     */
    public static final OfInt conf_win_top_offset$layout() {
        return conf_win_top_offset$LAYOUT;
    }

    private static final long conf_win_top_offset$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t conf_win_top_offset
     * }
     */
    public static final long conf_win_top_offset$offset() {
        return conf_win_top_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_top_offset
     * }
     */
    public static int conf_win_top_offset(MemorySegment struct) {
        return struct.get(conf_win_top_offset$LAYOUT, conf_win_top_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_top_offset
     * }
     */
    public static void conf_win_top_offset(MemorySegment struct, int fieldValue) {
        struct.set(conf_win_top_offset$LAYOUT, conf_win_top_offset$OFFSET, fieldValue);
    }

    private static final OfInt conf_win_bottom_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("conf_win_bottom_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t conf_win_bottom_offset
     * }
     */
    public static final OfInt conf_win_bottom_offset$layout() {
        return conf_win_bottom_offset$LAYOUT;
    }

    private static final long conf_win_bottom_offset$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t conf_win_bottom_offset
     * }
     */
    public static final long conf_win_bottom_offset$offset() {
        return conf_win_bottom_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_bottom_offset
     * }
     */
    public static int conf_win_bottom_offset(MemorySegment struct) {
        return struct.get(conf_win_bottom_offset$LAYOUT, conf_win_bottom_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t conf_win_bottom_offset
     * }
     */
    public static void conf_win_bottom_offset(MemorySegment struct, int fieldValue) {
        struct.set(conf_win_bottom_offset$LAYOUT, conf_win_bottom_offset$OFFSET, fieldValue);
    }

    private static final AddressLayout pProfileTierLevel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pProfileTierLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static final AddressLayout pProfileTierLevel$layout() {
        return pProfileTierLevel$LAYOUT;
    }

    private static final long pProfileTierLevel$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static final long pProfileTierLevel$offset() {
        return pProfileTierLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static MemorySegment pProfileTierLevel(MemorySegment struct) {
        return struct.get(pProfileTierLevel$LAYOUT, pProfileTierLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static void pProfileTierLevel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pProfileTierLevel$LAYOUT, pProfileTierLevel$OFFSET, fieldValue);
    }

    private static final AddressLayout pDecPicBufMgr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDecPicBufMgr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static final AddressLayout pDecPicBufMgr$layout() {
        return pDecPicBufMgr$LAYOUT;
    }

    private static final long pDecPicBufMgr$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static final long pDecPicBufMgr$offset() {
        return pDecPicBufMgr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static MemorySegment pDecPicBufMgr(MemorySegment struct) {
        return struct.get(pDecPicBufMgr$LAYOUT, pDecPicBufMgr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static void pDecPicBufMgr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDecPicBufMgr$LAYOUT, pDecPicBufMgr$OFFSET, fieldValue);
    }

    private static final AddressLayout pScalingLists$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pScalingLists"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static final AddressLayout pScalingLists$layout() {
        return pScalingLists$LAYOUT;
    }

    private static final long pScalingLists$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static final long pScalingLists$offset() {
        return pScalingLists$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static MemorySegment pScalingLists(MemorySegment struct) {
        return struct.get(pScalingLists$LAYOUT, pScalingLists$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265ScalingLists *pScalingLists
     * }
     */
    public static void pScalingLists(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pScalingLists$LAYOUT, pScalingLists$OFFSET, fieldValue);
    }

    private static final AddressLayout pShortTermRefPicSet$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pShortTermRefPicSet"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265ShortTermRefPicSet *pShortTermRefPicSet
     * }
     */
    public static final AddressLayout pShortTermRefPicSet$layout() {
        return pShortTermRefPicSet$LAYOUT;
    }

    private static final long pShortTermRefPicSet$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265ShortTermRefPicSet *pShortTermRefPicSet
     * }
     */
    public static final long pShortTermRefPicSet$offset() {
        return pShortTermRefPicSet$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265ShortTermRefPicSet *pShortTermRefPicSet
     * }
     */
    public static MemorySegment pShortTermRefPicSet(MemorySegment struct) {
        return struct.get(pShortTermRefPicSet$LAYOUT, pShortTermRefPicSet$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265ShortTermRefPicSet *pShortTermRefPicSet
     * }
     */
    public static void pShortTermRefPicSet(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pShortTermRefPicSet$LAYOUT, pShortTermRefPicSet$OFFSET, fieldValue);
    }

    private static final AddressLayout pLongTermRefPicsSps$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pLongTermRefPicsSps"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265LongTermRefPicsSps *pLongTermRefPicsSps
     * }
     */
    public static final AddressLayout pLongTermRefPicsSps$layout() {
        return pLongTermRefPicsSps$LAYOUT;
    }

    private static final long pLongTermRefPicsSps$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265LongTermRefPicsSps *pLongTermRefPicsSps
     * }
     */
    public static final long pLongTermRefPicsSps$offset() {
        return pLongTermRefPicsSps$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265LongTermRefPicsSps *pLongTermRefPicsSps
     * }
     */
    public static MemorySegment pLongTermRefPicsSps(MemorySegment struct) {
        return struct.get(pLongTermRefPicsSps$LAYOUT, pLongTermRefPicsSps$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265LongTermRefPicsSps *pLongTermRefPicsSps
     * }
     */
    public static void pLongTermRefPicsSps(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pLongTermRefPicsSps$LAYOUT, pLongTermRefPicsSps$OFFSET, fieldValue);
    }

    private static final AddressLayout pSequenceParameterSetVui$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSequenceParameterSetVui"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static final AddressLayout pSequenceParameterSetVui$layout() {
        return pSequenceParameterSetVui$LAYOUT;
    }

    private static final long pSequenceParameterSetVui$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static final long pSequenceParameterSetVui$offset() {
        return pSequenceParameterSetVui$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static MemorySegment pSequenceParameterSetVui(MemorySegment struct) {
        return struct.get(pSequenceParameterSetVui$LAYOUT, pSequenceParameterSetVui$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265SequenceParameterSetVui *pSequenceParameterSetVui
     * }
     */
    public static void pSequenceParameterSetVui(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSequenceParameterSetVui$LAYOUT, pSequenceParameterSetVui$OFFSET, fieldValue);
    }

    private static final AddressLayout pPredictorPaletteEntries$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pPredictorPaletteEntries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static final AddressLayout pPredictorPaletteEntries$layout() {
        return pPredictorPaletteEntries$LAYOUT;
    }

    private static final long pPredictorPaletteEntries$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static final long pPredictorPaletteEntries$offset() {
        return pPredictorPaletteEntries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static MemorySegment pPredictorPaletteEntries(MemorySegment struct) {
        return struct.get(pPredictorPaletteEntries$LAYOUT, pPredictorPaletteEntries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265PredictorPaletteEntries *pPredictorPaletteEntries
     * }
     */
    public static void pPredictorPaletteEntries(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pPredictorPaletteEntries$LAYOUT, pPredictorPaletteEntries$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

