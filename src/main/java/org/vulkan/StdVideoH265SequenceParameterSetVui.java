// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265SequenceParameterSetVui {
 *     StdVideoH265SpsVuiFlags flags;
 *     StdVideoH265AspectRatioIdc aspect_ratio_idc;
 *     uint16_t sar_width;
 *     uint16_t sar_height;
 *     uint8_t video_format;
 *     uint8_t colour_primaries;
 *     uint8_t transfer_characteristics;
 *     uint8_t matrix_coeffs;
 *     uint8_t chroma_sample_loc_type_top_field;
 *     uint8_t chroma_sample_loc_type_bottom_field;
 *     uint8_t reserved1;
 *     uint8_t reserved2;
 *     uint16_t def_disp_win_left_offset;
 *     uint16_t def_disp_win_right_offset;
 *     uint16_t def_disp_win_top_offset;
 *     uint16_t def_disp_win_bottom_offset;
 *     uint32_t vui_num_units_in_tick;
 *     uint32_t vui_time_scale;
 *     uint32_t vui_num_ticks_poc_diff_one_minus1;
 *     uint16_t min_spatial_segmentation_idc;
 *     uint16_t reserved3;
 *     uint8_t max_bytes_per_pic_denom;
 *     uint8_t max_bits_per_min_cu_denom;
 *     uint8_t log2_max_mv_length_horizontal;
 *     uint8_t log2_max_mv_length_vertical;
 *     const StdVideoH265HrdParameters *pHrdParameters;
 * }
 * }
 */
public class StdVideoH265SequenceParameterSetVui {

    StdVideoH265SequenceParameterSetVui() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoH265SpsVuiFlags.layout().withName("flags"),
        vulkan_h.C_INT.withName("aspect_ratio_idc"),
        vulkan_h.C_SHORT.withName("sar_width"),
        vulkan_h.C_SHORT.withName("sar_height"),
        vulkan_h.C_CHAR.withName("video_format"),
        vulkan_h.C_CHAR.withName("colour_primaries"),
        vulkan_h.C_CHAR.withName("transfer_characteristics"),
        vulkan_h.C_CHAR.withName("matrix_coeffs"),
        vulkan_h.C_CHAR.withName("chroma_sample_loc_type_top_field"),
        vulkan_h.C_CHAR.withName("chroma_sample_loc_type_bottom_field"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_CHAR.withName("reserved2"),
        vulkan_h.C_SHORT.withName("def_disp_win_left_offset"),
        vulkan_h.C_SHORT.withName("def_disp_win_right_offset"),
        vulkan_h.C_SHORT.withName("def_disp_win_top_offset"),
        vulkan_h.C_SHORT.withName("def_disp_win_bottom_offset"),
        vulkan_h.C_INT.withName("vui_num_units_in_tick"),
        vulkan_h.C_INT.withName("vui_time_scale"),
        vulkan_h.C_INT.withName("vui_num_ticks_poc_diff_one_minus1"),
        vulkan_h.C_SHORT.withName("min_spatial_segmentation_idc"),
        vulkan_h.C_SHORT.withName("reserved3"),
        vulkan_h.C_CHAR.withName("max_bytes_per_pic_denom"),
        vulkan_h.C_CHAR.withName("max_bits_per_min_cu_denom"),
        vulkan_h.C_CHAR.withName("log2_max_mv_length_horizontal"),
        vulkan_h.C_CHAR.withName("log2_max_mv_length_vertical"),
        vulkan_h.C_POINTER.withName("pHrdParameters")
    ).withName("StdVideoH265SequenceParameterSetVui");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265SpsVuiFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265SpsVuiFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265SpsVuiFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265SpsVuiFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfInt aspect_ratio_idc$LAYOUT = (OfInt)$LAYOUT.select(groupElement("aspect_ratio_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265AspectRatioIdc aspect_ratio_idc
     * }
     */
    public static final OfInt aspect_ratio_idc$layout() {
        return aspect_ratio_idc$LAYOUT;
    }

    private static final long aspect_ratio_idc$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265AspectRatioIdc aspect_ratio_idc
     * }
     */
    public static final long aspect_ratio_idc$offset() {
        return aspect_ratio_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265AspectRatioIdc aspect_ratio_idc
     * }
     */
    public static int aspect_ratio_idc(MemorySegment struct) {
        return struct.get(aspect_ratio_idc$LAYOUT, aspect_ratio_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265AspectRatioIdc aspect_ratio_idc
     * }
     */
    public static void aspect_ratio_idc(MemorySegment struct, int fieldValue) {
        struct.set(aspect_ratio_idc$LAYOUT, aspect_ratio_idc$OFFSET, fieldValue);
    }

    private static final OfShort sar_width$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sar_width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t sar_width
     * }
     */
    public static final OfShort sar_width$layout() {
        return sar_width$LAYOUT;
    }

    private static final long sar_width$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t sar_width
     * }
     */
    public static final long sar_width$offset() {
        return sar_width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t sar_width
     * }
     */
    public static short sar_width(MemorySegment struct) {
        return struct.get(sar_width$LAYOUT, sar_width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t sar_width
     * }
     */
    public static void sar_width(MemorySegment struct, short fieldValue) {
        struct.set(sar_width$LAYOUT, sar_width$OFFSET, fieldValue);
    }

    private static final OfShort sar_height$LAYOUT = (OfShort)$LAYOUT.select(groupElement("sar_height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t sar_height
     * }
     */
    public static final OfShort sar_height$layout() {
        return sar_height$LAYOUT;
    }

    private static final long sar_height$OFFSET = 10;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t sar_height
     * }
     */
    public static final long sar_height$offset() {
        return sar_height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t sar_height
     * }
     */
    public static short sar_height(MemorySegment struct) {
        return struct.get(sar_height$LAYOUT, sar_height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t sar_height
     * }
     */
    public static void sar_height(MemorySegment struct, short fieldValue) {
        struct.set(sar_height$LAYOUT, sar_height$OFFSET, fieldValue);
    }

    private static final OfByte video_format$LAYOUT = (OfByte)$LAYOUT.select(groupElement("video_format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t video_format
     * }
     */
    public static final OfByte video_format$layout() {
        return video_format$LAYOUT;
    }

    private static final long video_format$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t video_format
     * }
     */
    public static final long video_format$offset() {
        return video_format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t video_format
     * }
     */
    public static byte video_format(MemorySegment struct) {
        return struct.get(video_format$LAYOUT, video_format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t video_format
     * }
     */
    public static void video_format(MemorySegment struct, byte fieldValue) {
        struct.set(video_format$LAYOUT, video_format$OFFSET, fieldValue);
    }

    private static final OfByte colour_primaries$LAYOUT = (OfByte)$LAYOUT.select(groupElement("colour_primaries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t colour_primaries
     * }
     */
    public static final OfByte colour_primaries$layout() {
        return colour_primaries$LAYOUT;
    }

    private static final long colour_primaries$OFFSET = 13;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t colour_primaries
     * }
     */
    public static final long colour_primaries$offset() {
        return colour_primaries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t colour_primaries
     * }
     */
    public static byte colour_primaries(MemorySegment struct) {
        return struct.get(colour_primaries$LAYOUT, colour_primaries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t colour_primaries
     * }
     */
    public static void colour_primaries(MemorySegment struct, byte fieldValue) {
        struct.set(colour_primaries$LAYOUT, colour_primaries$OFFSET, fieldValue);
    }

    private static final OfByte transfer_characteristics$LAYOUT = (OfByte)$LAYOUT.select(groupElement("transfer_characteristics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t transfer_characteristics
     * }
     */
    public static final OfByte transfer_characteristics$layout() {
        return transfer_characteristics$LAYOUT;
    }

    private static final long transfer_characteristics$OFFSET = 14;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t transfer_characteristics
     * }
     */
    public static final long transfer_characteristics$offset() {
        return transfer_characteristics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t transfer_characteristics
     * }
     */
    public static byte transfer_characteristics(MemorySegment struct) {
        return struct.get(transfer_characteristics$LAYOUT, transfer_characteristics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t transfer_characteristics
     * }
     */
    public static void transfer_characteristics(MemorySegment struct, byte fieldValue) {
        struct.set(transfer_characteristics$LAYOUT, transfer_characteristics$OFFSET, fieldValue);
    }

    private static final OfByte matrix_coeffs$LAYOUT = (OfByte)$LAYOUT.select(groupElement("matrix_coeffs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t matrix_coeffs
     * }
     */
    public static final OfByte matrix_coeffs$layout() {
        return matrix_coeffs$LAYOUT;
    }

    private static final long matrix_coeffs$OFFSET = 15;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t matrix_coeffs
     * }
     */
    public static final long matrix_coeffs$offset() {
        return matrix_coeffs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t matrix_coeffs
     * }
     */
    public static byte matrix_coeffs(MemorySegment struct) {
        return struct.get(matrix_coeffs$LAYOUT, matrix_coeffs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t matrix_coeffs
     * }
     */
    public static void matrix_coeffs(MemorySegment struct, byte fieldValue) {
        struct.set(matrix_coeffs$LAYOUT, matrix_coeffs$OFFSET, fieldValue);
    }

    private static final OfByte chroma_sample_loc_type_top_field$LAYOUT = (OfByte)$LAYOUT.select(groupElement("chroma_sample_loc_type_top_field"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_top_field
     * }
     */
    public static final OfByte chroma_sample_loc_type_top_field$layout() {
        return chroma_sample_loc_type_top_field$LAYOUT;
    }

    private static final long chroma_sample_loc_type_top_field$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_top_field
     * }
     */
    public static final long chroma_sample_loc_type_top_field$offset() {
        return chroma_sample_loc_type_top_field$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_top_field
     * }
     */
    public static byte chroma_sample_loc_type_top_field(MemorySegment struct) {
        return struct.get(chroma_sample_loc_type_top_field$LAYOUT, chroma_sample_loc_type_top_field$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_top_field
     * }
     */
    public static void chroma_sample_loc_type_top_field(MemorySegment struct, byte fieldValue) {
        struct.set(chroma_sample_loc_type_top_field$LAYOUT, chroma_sample_loc_type_top_field$OFFSET, fieldValue);
    }

    private static final OfByte chroma_sample_loc_type_bottom_field$LAYOUT = (OfByte)$LAYOUT.select(groupElement("chroma_sample_loc_type_bottom_field"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_bottom_field
     * }
     */
    public static final OfByte chroma_sample_loc_type_bottom_field$layout() {
        return chroma_sample_loc_type_bottom_field$LAYOUT;
    }

    private static final long chroma_sample_loc_type_bottom_field$OFFSET = 17;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_bottom_field
     * }
     */
    public static final long chroma_sample_loc_type_bottom_field$offset() {
        return chroma_sample_loc_type_bottom_field$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_bottom_field
     * }
     */
    public static byte chroma_sample_loc_type_bottom_field(MemorySegment struct) {
        return struct.get(chroma_sample_loc_type_bottom_field$LAYOUT, chroma_sample_loc_type_bottom_field$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t chroma_sample_loc_type_bottom_field
     * }
     */
    public static void chroma_sample_loc_type_bottom_field(MemorySegment struct, byte fieldValue) {
        struct.set(chroma_sample_loc_type_bottom_field$LAYOUT, chroma_sample_loc_type_bottom_field$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 18;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfByte reserved2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final OfByte reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 19;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static byte reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, byte fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    private static final OfShort def_disp_win_left_offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("def_disp_win_left_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_left_offset
     * }
     */
    public static final OfShort def_disp_win_left_offset$layout() {
        return def_disp_win_left_offset$LAYOUT;
    }

    private static final long def_disp_win_left_offset$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_left_offset
     * }
     */
    public static final long def_disp_win_left_offset$offset() {
        return def_disp_win_left_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_left_offset
     * }
     */
    public static short def_disp_win_left_offset(MemorySegment struct) {
        return struct.get(def_disp_win_left_offset$LAYOUT, def_disp_win_left_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_left_offset
     * }
     */
    public static void def_disp_win_left_offset(MemorySegment struct, short fieldValue) {
        struct.set(def_disp_win_left_offset$LAYOUT, def_disp_win_left_offset$OFFSET, fieldValue);
    }

    private static final OfShort def_disp_win_right_offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("def_disp_win_right_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_right_offset
     * }
     */
    public static final OfShort def_disp_win_right_offset$layout() {
        return def_disp_win_right_offset$LAYOUT;
    }

    private static final long def_disp_win_right_offset$OFFSET = 22;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_right_offset
     * }
     */
    public static final long def_disp_win_right_offset$offset() {
        return def_disp_win_right_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_right_offset
     * }
     */
    public static short def_disp_win_right_offset(MemorySegment struct) {
        return struct.get(def_disp_win_right_offset$LAYOUT, def_disp_win_right_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_right_offset
     * }
     */
    public static void def_disp_win_right_offset(MemorySegment struct, short fieldValue) {
        struct.set(def_disp_win_right_offset$LAYOUT, def_disp_win_right_offset$OFFSET, fieldValue);
    }

    private static final OfShort def_disp_win_top_offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("def_disp_win_top_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_top_offset
     * }
     */
    public static final OfShort def_disp_win_top_offset$layout() {
        return def_disp_win_top_offset$LAYOUT;
    }

    private static final long def_disp_win_top_offset$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_top_offset
     * }
     */
    public static final long def_disp_win_top_offset$offset() {
        return def_disp_win_top_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_top_offset
     * }
     */
    public static short def_disp_win_top_offset(MemorySegment struct) {
        return struct.get(def_disp_win_top_offset$LAYOUT, def_disp_win_top_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_top_offset
     * }
     */
    public static void def_disp_win_top_offset(MemorySegment struct, short fieldValue) {
        struct.set(def_disp_win_top_offset$LAYOUT, def_disp_win_top_offset$OFFSET, fieldValue);
    }

    private static final OfShort def_disp_win_bottom_offset$LAYOUT = (OfShort)$LAYOUT.select(groupElement("def_disp_win_bottom_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_bottom_offset
     * }
     */
    public static final OfShort def_disp_win_bottom_offset$layout() {
        return def_disp_win_bottom_offset$LAYOUT;
    }

    private static final long def_disp_win_bottom_offset$OFFSET = 26;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_bottom_offset
     * }
     */
    public static final long def_disp_win_bottom_offset$offset() {
        return def_disp_win_bottom_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_bottom_offset
     * }
     */
    public static short def_disp_win_bottom_offset(MemorySegment struct) {
        return struct.get(def_disp_win_bottom_offset$LAYOUT, def_disp_win_bottom_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t def_disp_win_bottom_offset
     * }
     */
    public static void def_disp_win_bottom_offset(MemorySegment struct, short fieldValue) {
        struct.set(def_disp_win_bottom_offset$LAYOUT, def_disp_win_bottom_offset$OFFSET, fieldValue);
    }

    private static final OfInt vui_num_units_in_tick$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vui_num_units_in_tick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vui_num_units_in_tick
     * }
     */
    public static final OfInt vui_num_units_in_tick$layout() {
        return vui_num_units_in_tick$LAYOUT;
    }

    private static final long vui_num_units_in_tick$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vui_num_units_in_tick
     * }
     */
    public static final long vui_num_units_in_tick$offset() {
        return vui_num_units_in_tick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vui_num_units_in_tick
     * }
     */
    public static int vui_num_units_in_tick(MemorySegment struct) {
        return struct.get(vui_num_units_in_tick$LAYOUT, vui_num_units_in_tick$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vui_num_units_in_tick
     * }
     */
    public static void vui_num_units_in_tick(MemorySegment struct, int fieldValue) {
        struct.set(vui_num_units_in_tick$LAYOUT, vui_num_units_in_tick$OFFSET, fieldValue);
    }

    private static final OfInt vui_time_scale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vui_time_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vui_time_scale
     * }
     */
    public static final OfInt vui_time_scale$layout() {
        return vui_time_scale$LAYOUT;
    }

    private static final long vui_time_scale$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vui_time_scale
     * }
     */
    public static final long vui_time_scale$offset() {
        return vui_time_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vui_time_scale
     * }
     */
    public static int vui_time_scale(MemorySegment struct) {
        return struct.get(vui_time_scale$LAYOUT, vui_time_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vui_time_scale
     * }
     */
    public static void vui_time_scale(MemorySegment struct, int fieldValue) {
        struct.set(vui_time_scale$LAYOUT, vui_time_scale$OFFSET, fieldValue);
    }

    private static final OfInt vui_num_ticks_poc_diff_one_minus1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vui_num_ticks_poc_diff_one_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vui_num_ticks_poc_diff_one_minus1
     * }
     */
    public static final OfInt vui_num_ticks_poc_diff_one_minus1$layout() {
        return vui_num_ticks_poc_diff_one_minus1$LAYOUT;
    }

    private static final long vui_num_ticks_poc_diff_one_minus1$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vui_num_ticks_poc_diff_one_minus1
     * }
     */
    public static final long vui_num_ticks_poc_diff_one_minus1$offset() {
        return vui_num_ticks_poc_diff_one_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vui_num_ticks_poc_diff_one_minus1
     * }
     */
    public static int vui_num_ticks_poc_diff_one_minus1(MemorySegment struct) {
        return struct.get(vui_num_ticks_poc_diff_one_minus1$LAYOUT, vui_num_ticks_poc_diff_one_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vui_num_ticks_poc_diff_one_minus1
     * }
     */
    public static void vui_num_ticks_poc_diff_one_minus1(MemorySegment struct, int fieldValue) {
        struct.set(vui_num_ticks_poc_diff_one_minus1$LAYOUT, vui_num_ticks_poc_diff_one_minus1$OFFSET, fieldValue);
    }

    private static final OfShort min_spatial_segmentation_idc$LAYOUT = (OfShort)$LAYOUT.select(groupElement("min_spatial_segmentation_idc"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t min_spatial_segmentation_idc
     * }
     */
    public static final OfShort min_spatial_segmentation_idc$layout() {
        return min_spatial_segmentation_idc$LAYOUT;
    }

    private static final long min_spatial_segmentation_idc$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t min_spatial_segmentation_idc
     * }
     */
    public static final long min_spatial_segmentation_idc$offset() {
        return min_spatial_segmentation_idc$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t min_spatial_segmentation_idc
     * }
     */
    public static short min_spatial_segmentation_idc(MemorySegment struct) {
        return struct.get(min_spatial_segmentation_idc$LAYOUT, min_spatial_segmentation_idc$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t min_spatial_segmentation_idc
     * }
     */
    public static void min_spatial_segmentation_idc(MemorySegment struct, short fieldValue) {
        struct.set(min_spatial_segmentation_idc$LAYOUT, min_spatial_segmentation_idc$OFFSET, fieldValue);
    }

    private static final OfShort reserved3$LAYOUT = (OfShort)$LAYOUT.select(groupElement("reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t reserved3
     * }
     */
    public static final OfShort reserved3$layout() {
        return reserved3$LAYOUT;
    }

    private static final long reserved3$OFFSET = 42;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t reserved3
     * }
     */
    public static final long reserved3$offset() {
        return reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t reserved3
     * }
     */
    public static short reserved3(MemorySegment struct) {
        return struct.get(reserved3$LAYOUT, reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t reserved3
     * }
     */
    public static void reserved3(MemorySegment struct, short fieldValue) {
        struct.set(reserved3$LAYOUT, reserved3$OFFSET, fieldValue);
    }

    private static final OfByte max_bytes_per_pic_denom$LAYOUT = (OfByte)$LAYOUT.select(groupElement("max_bytes_per_pic_denom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t max_bytes_per_pic_denom
     * }
     */
    public static final OfByte max_bytes_per_pic_denom$layout() {
        return max_bytes_per_pic_denom$LAYOUT;
    }

    private static final long max_bytes_per_pic_denom$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t max_bytes_per_pic_denom
     * }
     */
    public static final long max_bytes_per_pic_denom$offset() {
        return max_bytes_per_pic_denom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t max_bytes_per_pic_denom
     * }
     */
    public static byte max_bytes_per_pic_denom(MemorySegment struct) {
        return struct.get(max_bytes_per_pic_denom$LAYOUT, max_bytes_per_pic_denom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t max_bytes_per_pic_denom
     * }
     */
    public static void max_bytes_per_pic_denom(MemorySegment struct, byte fieldValue) {
        struct.set(max_bytes_per_pic_denom$LAYOUT, max_bytes_per_pic_denom$OFFSET, fieldValue);
    }

    private static final OfByte max_bits_per_min_cu_denom$LAYOUT = (OfByte)$LAYOUT.select(groupElement("max_bits_per_min_cu_denom"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t max_bits_per_min_cu_denom
     * }
     */
    public static final OfByte max_bits_per_min_cu_denom$layout() {
        return max_bits_per_min_cu_denom$LAYOUT;
    }

    private static final long max_bits_per_min_cu_denom$OFFSET = 45;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t max_bits_per_min_cu_denom
     * }
     */
    public static final long max_bits_per_min_cu_denom$offset() {
        return max_bits_per_min_cu_denom$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t max_bits_per_min_cu_denom
     * }
     */
    public static byte max_bits_per_min_cu_denom(MemorySegment struct) {
        return struct.get(max_bits_per_min_cu_denom$LAYOUT, max_bits_per_min_cu_denom$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t max_bits_per_min_cu_denom
     * }
     */
    public static void max_bits_per_min_cu_denom(MemorySegment struct, byte fieldValue) {
        struct.set(max_bits_per_min_cu_denom$LAYOUT, max_bits_per_min_cu_denom$OFFSET, fieldValue);
    }

    private static final OfByte log2_max_mv_length_horizontal$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_max_mv_length_horizontal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_horizontal
     * }
     */
    public static final OfByte log2_max_mv_length_horizontal$layout() {
        return log2_max_mv_length_horizontal$LAYOUT;
    }

    private static final long log2_max_mv_length_horizontal$OFFSET = 46;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_horizontal
     * }
     */
    public static final long log2_max_mv_length_horizontal$offset() {
        return log2_max_mv_length_horizontal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_horizontal
     * }
     */
    public static byte log2_max_mv_length_horizontal(MemorySegment struct) {
        return struct.get(log2_max_mv_length_horizontal$LAYOUT, log2_max_mv_length_horizontal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_horizontal
     * }
     */
    public static void log2_max_mv_length_horizontal(MemorySegment struct, byte fieldValue) {
        struct.set(log2_max_mv_length_horizontal$LAYOUT, log2_max_mv_length_horizontal$OFFSET, fieldValue);
    }

    private static final OfByte log2_max_mv_length_vertical$LAYOUT = (OfByte)$LAYOUT.select(groupElement("log2_max_mv_length_vertical"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_vertical
     * }
     */
    public static final OfByte log2_max_mv_length_vertical$layout() {
        return log2_max_mv_length_vertical$LAYOUT;
    }

    private static final long log2_max_mv_length_vertical$OFFSET = 47;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_vertical
     * }
     */
    public static final long log2_max_mv_length_vertical$offset() {
        return log2_max_mv_length_vertical$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_vertical
     * }
     */
    public static byte log2_max_mv_length_vertical(MemorySegment struct) {
        return struct.get(log2_max_mv_length_vertical$LAYOUT, log2_max_mv_length_vertical$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t log2_max_mv_length_vertical
     * }
     */
    public static void log2_max_mv_length_vertical(MemorySegment struct, byte fieldValue) {
        struct.set(log2_max_mv_length_vertical$LAYOUT, log2_max_mv_length_vertical$OFFSET, fieldValue);
    }

    private static final AddressLayout pHrdParameters$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pHrdParameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static final AddressLayout pHrdParameters$layout() {
        return pHrdParameters$LAYOUT;
    }

    private static final long pHrdParameters$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static final long pHrdParameters$offset() {
        return pHrdParameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static MemorySegment pHrdParameters(MemorySegment struct) {
        return struct.get(pHrdParameters$LAYOUT, pHrdParameters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static void pHrdParameters(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pHrdParameters$LAYOUT, pHrdParameters$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

