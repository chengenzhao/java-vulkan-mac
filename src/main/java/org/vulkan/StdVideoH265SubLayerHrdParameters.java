// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265SubLayerHrdParameters {
 *     uint32_t bit_rate_value_minus1[32];
 *     uint32_t cpb_size_value_minus1[32];
 *     uint32_t cpb_size_du_value_minus1[32];
 *     uint32_t bit_rate_du_value_minus1[32];
 *     uint32_t cbr_flag;
 * }
 * }
 */
public class StdVideoH265SubLayerHrdParameters {

    StdVideoH265SubLayerHrdParameters() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(32, vulkan_h.C_INT).withName("bit_rate_value_minus1"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_INT).withName("cpb_size_value_minus1"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_INT).withName("cpb_size_du_value_minus1"),
        MemoryLayout.sequenceLayout(32, vulkan_h.C_INT).withName("bit_rate_du_value_minus1"),
        vulkan_h.C_INT.withName("cbr_flag")
    ).withName("StdVideoH265SubLayerHrdParameters");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout bit_rate_value_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("bit_rate_value_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static final SequenceLayout bit_rate_value_minus1$layout() {
        return bit_rate_value_minus1$LAYOUT;
    }

    private static final long bit_rate_value_minus1$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static final long bit_rate_value_minus1$offset() {
        return bit_rate_value_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static MemorySegment bit_rate_value_minus1(MemorySegment struct) {
        return struct.asSlice(bit_rate_value_minus1$OFFSET, bit_rate_value_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static void bit_rate_value_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bit_rate_value_minus1$OFFSET, bit_rate_value_minus1$LAYOUT.byteSize());
    }

    private static long[] bit_rate_value_minus1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static long[] bit_rate_value_minus1$dimensions() {
        return bit_rate_value_minus1$DIMS;
    }
    private static final VarHandle bit_rate_value_minus1$ELEM_HANDLE = bit_rate_value_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static int bit_rate_value_minus1(MemorySegment struct, long index0) {
        return (int)bit_rate_value_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_value_minus1[32]
     * }
     */
    public static void bit_rate_value_minus1(MemorySegment struct, long index0, int fieldValue) {
        bit_rate_value_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout cpb_size_value_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cpb_size_value_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static final SequenceLayout cpb_size_value_minus1$layout() {
        return cpb_size_value_minus1$LAYOUT;
    }

    private static final long cpb_size_value_minus1$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static final long cpb_size_value_minus1$offset() {
        return cpb_size_value_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static MemorySegment cpb_size_value_minus1(MemorySegment struct) {
        return struct.asSlice(cpb_size_value_minus1$OFFSET, cpb_size_value_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static void cpb_size_value_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cpb_size_value_minus1$OFFSET, cpb_size_value_minus1$LAYOUT.byteSize());
    }

    private static long[] cpb_size_value_minus1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static long[] cpb_size_value_minus1$dimensions() {
        return cpb_size_value_minus1$DIMS;
    }
    private static final VarHandle cpb_size_value_minus1$ELEM_HANDLE = cpb_size_value_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static int cpb_size_value_minus1(MemorySegment struct, long index0) {
        return (int)cpb_size_value_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_value_minus1[32]
     * }
     */
    public static void cpb_size_value_minus1(MemorySegment struct, long index0, int fieldValue) {
        cpb_size_value_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout cpb_size_du_value_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("cpb_size_du_value_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_du_value_minus1[32]
     * }
     */
    public static final SequenceLayout cpb_size_du_value_minus1$layout() {
        return cpb_size_du_value_minus1$LAYOUT;
    }

    private static final long cpb_size_du_value_minus1$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_du_value_minus1[32]
     * }
     */
    public static final long cpb_size_du_value_minus1$offset() {
        return cpb_size_du_value_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_du_value_minus1[32]
     * }
     */
    public static MemorySegment cpb_size_du_value_minus1(MemorySegment struct) {
        return struct.asSlice(cpb_size_du_value_minus1$OFFSET, cpb_size_du_value_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_du_value_minus1[32]
     * }
     */
    public static void cpb_size_du_value_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, cpb_size_du_value_minus1$OFFSET, cpb_size_du_value_minus1$LAYOUT.byteSize());
    }

    private static long[] cpb_size_du_value_minus1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t cpb_size_du_value_minus1[32]
     * }
     */
    public static long[] cpb_size_du_value_minus1$dimensions() {
        return cpb_size_du_value_minus1$DIMS;
    }
    private static final VarHandle cpb_size_du_value_minus1$ELEM_HANDLE = cpb_size_du_value_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_du_value_minus1[32]
     * }
     */
    public static int cpb_size_du_value_minus1(MemorySegment struct, long index0) {
        return (int)cpb_size_du_value_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t cpb_size_du_value_minus1[32]
     * }
     */
    public static void cpb_size_du_value_minus1(MemorySegment struct, long index0, int fieldValue) {
        cpb_size_du_value_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout bit_rate_du_value_minus1$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("bit_rate_du_value_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_du_value_minus1[32]
     * }
     */
    public static final SequenceLayout bit_rate_du_value_minus1$layout() {
        return bit_rate_du_value_minus1$LAYOUT;
    }

    private static final long bit_rate_du_value_minus1$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_du_value_minus1[32]
     * }
     */
    public static final long bit_rate_du_value_minus1$offset() {
        return bit_rate_du_value_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_du_value_minus1[32]
     * }
     */
    public static MemorySegment bit_rate_du_value_minus1(MemorySegment struct) {
        return struct.asSlice(bit_rate_du_value_minus1$OFFSET, bit_rate_du_value_minus1$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_du_value_minus1[32]
     * }
     */
    public static void bit_rate_du_value_minus1(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, bit_rate_du_value_minus1$OFFSET, bit_rate_du_value_minus1$LAYOUT.byteSize());
    }

    private static long[] bit_rate_du_value_minus1$DIMS = { 32 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t bit_rate_du_value_minus1[32]
     * }
     */
    public static long[] bit_rate_du_value_minus1$dimensions() {
        return bit_rate_du_value_minus1$DIMS;
    }
    private static final VarHandle bit_rate_du_value_minus1$ELEM_HANDLE = bit_rate_du_value_minus1$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_du_value_minus1[32]
     * }
     */
    public static int bit_rate_du_value_minus1(MemorySegment struct, long index0) {
        return (int)bit_rate_du_value_minus1$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t bit_rate_du_value_minus1[32]
     * }
     */
    public static void bit_rate_du_value_minus1(MemorySegment struct, long index0, int fieldValue) {
        bit_rate_du_value_minus1$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt cbr_flag$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cbr_flag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cbr_flag
     * }
     */
    public static final OfInt cbr_flag$layout() {
        return cbr_flag$LAYOUT;
    }

    private static final long cbr_flag$OFFSET = 512;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cbr_flag
     * }
     */
    public static final long cbr_flag$offset() {
        return cbr_flag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cbr_flag
     * }
     */
    public static int cbr_flag(MemorySegment struct) {
        return struct.get(cbr_flag$LAYOUT, cbr_flag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cbr_flag
     * }
     */
    public static void cbr_flag(MemorySegment struct, int fieldValue) {
        struct.set(cbr_flag$LAYOUT, cbr_flag$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

