// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct StdVideoH265VideoParameterSet {
 *     StdVideoH265VpsFlags flags;
 *     uint8_t vps_video_parameter_set_id;
 *     uint8_t vps_max_sub_layers_minus1;
 *     uint8_t reserved1;
 *     uint8_t reserved2;
 *     uint32_t vps_num_units_in_tick;
 *     uint32_t vps_time_scale;
 *     uint32_t vps_num_ticks_poc_diff_one_minus1;
 *     uint32_t reserved3;
 *     const StdVideoH265DecPicBufMgr *pDecPicBufMgr;
 *     const StdVideoH265HrdParameters *pHrdParameters;
 *     const StdVideoH265ProfileTierLevel *pProfileTierLevel;
 * }
 * }
 */
public class StdVideoH265VideoParameterSet {

    StdVideoH265VideoParameterSet() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        StdVideoH265VpsFlags.layout().withName("flags"),
        vulkan_h.C_CHAR.withName("vps_video_parameter_set_id"),
        vulkan_h.C_CHAR.withName("vps_max_sub_layers_minus1"),
        vulkan_h.C_CHAR.withName("reserved1"),
        vulkan_h.C_CHAR.withName("reserved2"),
        vulkan_h.C_INT.withName("vps_num_units_in_tick"),
        vulkan_h.C_INT.withName("vps_time_scale"),
        vulkan_h.C_INT.withName("vps_num_ticks_poc_diff_one_minus1"),
        vulkan_h.C_INT.withName("reserved3"),
        vulkan_h.C_POINTER.withName("pDecPicBufMgr"),
        vulkan_h.C_POINTER.withName("pHrdParameters"),
        vulkan_h.C_POINTER.withName("pProfileTierLevel")
    ).withName("StdVideoH265VideoParameterSet");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout flags$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * StdVideoH265VpsFlags flags
     * }
     */
    public static final GroupLayout flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * StdVideoH265VpsFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * StdVideoH265VpsFlags flags
     * }
     */
    public static MemorySegment flags(MemorySegment struct) {
        return struct.asSlice(flags$OFFSET, flags$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * StdVideoH265VpsFlags flags
     * }
     */
    public static void flags(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, flags$OFFSET, flags$LAYOUT.byteSize());
    }

    private static final OfByte vps_video_parameter_set_id$LAYOUT = (OfByte)$LAYOUT.select(groupElement("vps_video_parameter_set_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t vps_video_parameter_set_id
     * }
     */
    public static final OfByte vps_video_parameter_set_id$layout() {
        return vps_video_parameter_set_id$LAYOUT;
    }

    private static final long vps_video_parameter_set_id$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t vps_video_parameter_set_id
     * }
     */
    public static final long vps_video_parameter_set_id$offset() {
        return vps_video_parameter_set_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t vps_video_parameter_set_id
     * }
     */
    public static byte vps_video_parameter_set_id(MemorySegment struct) {
        return struct.get(vps_video_parameter_set_id$LAYOUT, vps_video_parameter_set_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t vps_video_parameter_set_id
     * }
     */
    public static void vps_video_parameter_set_id(MemorySegment struct, byte fieldValue) {
        struct.set(vps_video_parameter_set_id$LAYOUT, vps_video_parameter_set_id$OFFSET, fieldValue);
    }

    private static final OfByte vps_max_sub_layers_minus1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("vps_max_sub_layers_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t vps_max_sub_layers_minus1
     * }
     */
    public static final OfByte vps_max_sub_layers_minus1$layout() {
        return vps_max_sub_layers_minus1$LAYOUT;
    }

    private static final long vps_max_sub_layers_minus1$OFFSET = 5;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t vps_max_sub_layers_minus1
     * }
     */
    public static final long vps_max_sub_layers_minus1$offset() {
        return vps_max_sub_layers_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t vps_max_sub_layers_minus1
     * }
     */
    public static byte vps_max_sub_layers_minus1(MemorySegment struct) {
        return struct.get(vps_max_sub_layers_minus1$LAYOUT, vps_max_sub_layers_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t vps_max_sub_layers_minus1
     * }
     */
    public static void vps_max_sub_layers_minus1(MemorySegment struct, byte fieldValue) {
        struct.set(vps_max_sub_layers_minus1$LAYOUT, vps_max_sub_layers_minus1$OFFSET, fieldValue);
    }

    private static final OfByte reserved1$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final OfByte reserved1$layout() {
        return reserved1$LAYOUT;
    }

    private static final long reserved1$OFFSET = 6;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static final long reserved1$offset() {
        return reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static byte reserved1(MemorySegment struct) {
        return struct.get(reserved1$LAYOUT, reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved1
     * }
     */
    public static void reserved1(MemorySegment struct, byte fieldValue) {
        struct.set(reserved1$LAYOUT, reserved1$OFFSET, fieldValue);
    }

    private static final OfByte reserved2$LAYOUT = (OfByte)$LAYOUT.select(groupElement("reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final OfByte reserved2$layout() {
        return reserved2$LAYOUT;
    }

    private static final long reserved2$OFFSET = 7;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static final long reserved2$offset() {
        return reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static byte reserved2(MemorySegment struct) {
        return struct.get(reserved2$LAYOUT, reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t reserved2
     * }
     */
    public static void reserved2(MemorySegment struct, byte fieldValue) {
        struct.set(reserved2$LAYOUT, reserved2$OFFSET, fieldValue);
    }

    private static final OfInt vps_num_units_in_tick$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vps_num_units_in_tick"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vps_num_units_in_tick
     * }
     */
    public static final OfInt vps_num_units_in_tick$layout() {
        return vps_num_units_in_tick$LAYOUT;
    }

    private static final long vps_num_units_in_tick$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vps_num_units_in_tick
     * }
     */
    public static final long vps_num_units_in_tick$offset() {
        return vps_num_units_in_tick$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vps_num_units_in_tick
     * }
     */
    public static int vps_num_units_in_tick(MemorySegment struct) {
        return struct.get(vps_num_units_in_tick$LAYOUT, vps_num_units_in_tick$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vps_num_units_in_tick
     * }
     */
    public static void vps_num_units_in_tick(MemorySegment struct, int fieldValue) {
        struct.set(vps_num_units_in_tick$LAYOUT, vps_num_units_in_tick$OFFSET, fieldValue);
    }

    private static final OfInt vps_time_scale$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vps_time_scale"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vps_time_scale
     * }
     */
    public static final OfInt vps_time_scale$layout() {
        return vps_time_scale$LAYOUT;
    }

    private static final long vps_time_scale$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vps_time_scale
     * }
     */
    public static final long vps_time_scale$offset() {
        return vps_time_scale$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vps_time_scale
     * }
     */
    public static int vps_time_scale(MemorySegment struct) {
        return struct.get(vps_time_scale$LAYOUT, vps_time_scale$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vps_time_scale
     * }
     */
    public static void vps_time_scale(MemorySegment struct, int fieldValue) {
        struct.set(vps_time_scale$LAYOUT, vps_time_scale$OFFSET, fieldValue);
    }

    private static final OfInt vps_num_ticks_poc_diff_one_minus1$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vps_num_ticks_poc_diff_one_minus1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vps_num_ticks_poc_diff_one_minus1
     * }
     */
    public static final OfInt vps_num_ticks_poc_diff_one_minus1$layout() {
        return vps_num_ticks_poc_diff_one_minus1$LAYOUT;
    }

    private static final long vps_num_ticks_poc_diff_one_minus1$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vps_num_ticks_poc_diff_one_minus1
     * }
     */
    public static final long vps_num_ticks_poc_diff_one_minus1$offset() {
        return vps_num_ticks_poc_diff_one_minus1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vps_num_ticks_poc_diff_one_minus1
     * }
     */
    public static int vps_num_ticks_poc_diff_one_minus1(MemorySegment struct) {
        return struct.get(vps_num_ticks_poc_diff_one_minus1$LAYOUT, vps_num_ticks_poc_diff_one_minus1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vps_num_ticks_poc_diff_one_minus1
     * }
     */
    public static void vps_num_ticks_poc_diff_one_minus1(MemorySegment struct, int fieldValue) {
        struct.set(vps_num_ticks_poc_diff_one_minus1$LAYOUT, vps_num_ticks_poc_diff_one_minus1$OFFSET, fieldValue);
    }

    private static final OfInt reserved3$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static final OfInt reserved3$layout() {
        return reserved3$LAYOUT;
    }

    private static final long reserved3$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static final long reserved3$offset() {
        return reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static int reserved3(MemorySegment struct) {
        return struct.get(reserved3$LAYOUT, reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t reserved3
     * }
     */
    public static void reserved3(MemorySegment struct, int fieldValue) {
        struct.set(reserved3$LAYOUT, reserved3$OFFSET, fieldValue);
    }

    private static final AddressLayout pDecPicBufMgr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDecPicBufMgr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static final AddressLayout pDecPicBufMgr$layout() {
        return pDecPicBufMgr$LAYOUT;
    }

    private static final long pDecPicBufMgr$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static final long pDecPicBufMgr$offset() {
        return pDecPicBufMgr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static MemorySegment pDecPicBufMgr(MemorySegment struct) {
        return struct.get(pDecPicBufMgr$LAYOUT, pDecPicBufMgr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265DecPicBufMgr *pDecPicBufMgr
     * }
     */
    public static void pDecPicBufMgr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDecPicBufMgr$LAYOUT, pDecPicBufMgr$OFFSET, fieldValue);
    }

    private static final AddressLayout pHrdParameters$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pHrdParameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static final AddressLayout pHrdParameters$layout() {
        return pHrdParameters$LAYOUT;
    }

    private static final long pHrdParameters$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static final long pHrdParameters$offset() {
        return pHrdParameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static MemorySegment pHrdParameters(MemorySegment struct) {
        return struct.get(pHrdParameters$LAYOUT, pHrdParameters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265HrdParameters *pHrdParameters
     * }
     */
    public static void pHrdParameters(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pHrdParameters$LAYOUT, pHrdParameters$OFFSET, fieldValue);
    }

    private static final AddressLayout pProfileTierLevel$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pProfileTierLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static final AddressLayout pProfileTierLevel$layout() {
        return pProfileTierLevel$LAYOUT;
    }

    private static final long pProfileTierLevel$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static final long pProfileTierLevel$offset() {
        return pProfileTierLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static MemorySegment pProfileTierLevel(MemorySegment struct) {
        return struct.get(pProfileTierLevel$LAYOUT, pProfileTierLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoH265ProfileTierLevel *pProfileTierLevel
     * }
     */
    public static void pProfileTierLevel(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pProfileTierLevel$LAYOUT, pProfileTierLevel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

