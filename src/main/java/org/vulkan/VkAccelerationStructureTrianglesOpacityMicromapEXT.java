// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkAccelerationStructureTrianglesOpacityMicromapEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkIndexType indexType;
 *     VkDeviceOrHostAddressConstKHR indexBuffer;
 *     VkDeviceSize indexStride;
 *     uint32_t baseTriangle;
 *     uint32_t usageCountsCount;
 *     const VkMicromapUsageEXT *pUsageCounts;
 *     const VkMicromapUsageEXT *const *ppUsageCounts;
 *     VkMicromapEXT micromap;
 * }
 * }
 */
public class VkAccelerationStructureTrianglesOpacityMicromapEXT {

    VkAccelerationStructureTrianglesOpacityMicromapEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("indexType"),
        MemoryLayout.paddingLayout(4),
        VkDeviceOrHostAddressConstKHR.layout().withName("indexBuffer"),
        vulkan_h.C_LONG_LONG.withName("indexStride"),
        vulkan_h.C_INT.withName("baseTriangle"),
        vulkan_h.C_INT.withName("usageCountsCount"),
        vulkan_h.C_POINTER.withName("pUsageCounts"),
        vulkan_h.C_POINTER.withName("ppUsageCounts"),
        vulkan_h.C_POINTER.withName("micromap")
    ).withName("VkAccelerationStructureTrianglesOpacityMicromapEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt indexType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("indexType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static final OfInt indexType$layout() {
        return indexType$LAYOUT;
    }

    private static final long indexType$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static final long indexType$offset() {
        return indexType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static int indexType(MemorySegment struct) {
        return struct.get(indexType$LAYOUT, indexType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static void indexType(MemorySegment struct, int fieldValue) {
        struct.set(indexType$LAYOUT, indexType$OFFSET, fieldValue);
    }

    private static final GroupLayout indexBuffer$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("indexBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR indexBuffer
     * }
     */
    public static final GroupLayout indexBuffer$layout() {
        return indexBuffer$LAYOUT;
    }

    private static final long indexBuffer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR indexBuffer
     * }
     */
    public static final long indexBuffer$offset() {
        return indexBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR indexBuffer
     * }
     */
    public static MemorySegment indexBuffer(MemorySegment struct) {
        return struct.asSlice(indexBuffer$OFFSET, indexBuffer$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR indexBuffer
     * }
     */
    public static void indexBuffer(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, indexBuffer$OFFSET, indexBuffer$LAYOUT.byteSize());
    }

    private static final OfLong indexStride$LAYOUT = (OfLong)$LAYOUT.select(groupElement("indexStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize indexStride
     * }
     */
    public static final OfLong indexStride$layout() {
        return indexStride$LAYOUT;
    }

    private static final long indexStride$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize indexStride
     * }
     */
    public static final long indexStride$offset() {
        return indexStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize indexStride
     * }
     */
    public static long indexStride(MemorySegment struct) {
        return struct.get(indexStride$LAYOUT, indexStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize indexStride
     * }
     */
    public static void indexStride(MemorySegment struct, long fieldValue) {
        struct.set(indexStride$LAYOUT, indexStride$OFFSET, fieldValue);
    }

    private static final OfInt baseTriangle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("baseTriangle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t baseTriangle
     * }
     */
    public static final OfInt baseTriangle$layout() {
        return baseTriangle$LAYOUT;
    }

    private static final long baseTriangle$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t baseTriangle
     * }
     */
    public static final long baseTriangle$offset() {
        return baseTriangle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t baseTriangle
     * }
     */
    public static int baseTriangle(MemorySegment struct) {
        return struct.get(baseTriangle$LAYOUT, baseTriangle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t baseTriangle
     * }
     */
    public static void baseTriangle(MemorySegment struct, int fieldValue) {
        struct.set(baseTriangle$LAYOUT, baseTriangle$OFFSET, fieldValue);
    }

    private static final OfInt usageCountsCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("usageCountsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static final OfInt usageCountsCount$layout() {
        return usageCountsCount$LAYOUT;
    }

    private static final long usageCountsCount$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static final long usageCountsCount$offset() {
        return usageCountsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static int usageCountsCount(MemorySegment struct) {
        return struct.get(usageCountsCount$LAYOUT, usageCountsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static void usageCountsCount(MemorySegment struct, int fieldValue) {
        struct.set(usageCountsCount$LAYOUT, usageCountsCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pUsageCounts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUsageCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static final AddressLayout pUsageCounts$layout() {
        return pUsageCounts$LAYOUT;
    }

    private static final long pUsageCounts$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static final long pUsageCounts$offset() {
        return pUsageCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static MemorySegment pUsageCounts(MemorySegment struct) {
        return struct.get(pUsageCounts$LAYOUT, pUsageCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static void pUsageCounts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUsageCounts$LAYOUT, pUsageCounts$OFFSET, fieldValue);
    }

    private static final AddressLayout ppUsageCounts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ppUsageCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static final AddressLayout ppUsageCounts$layout() {
        return ppUsageCounts$LAYOUT;
    }

    private static final long ppUsageCounts$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static final long ppUsageCounts$offset() {
        return ppUsageCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static MemorySegment ppUsageCounts(MemorySegment struct) {
        return struct.get(ppUsageCounts$LAYOUT, ppUsageCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static void ppUsageCounts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ppUsageCounts$LAYOUT, ppUsageCounts$OFFSET, fieldValue);
    }

    private static final AddressLayout micromap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("micromap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkMicromapEXT micromap
     * }
     */
    public static final AddressLayout micromap$layout() {
        return micromap$LAYOUT;
    }

    private static final long micromap$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkMicromapEXT micromap
     * }
     */
    public static final long micromap$offset() {
        return micromap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkMicromapEXT micromap
     * }
     */
    public static MemorySegment micromap(MemorySegment struct) {
        return struct.get(micromap$LAYOUT, micromap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkMicromapEXT micromap
     * }
     */
    public static void micromap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(micromap$LAYOUT, micromap$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

