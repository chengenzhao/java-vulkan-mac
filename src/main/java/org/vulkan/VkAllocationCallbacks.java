// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkAllocationCallbacks {
 *     void *pUserData;
 *     PFN_vkAllocationFunction pfnAllocation;
 *     PFN_vkReallocationFunction pfnReallocation;
 *     PFN_vkFreeFunction pfnFree;
 *     PFN_vkInternalAllocationNotification pfnInternalAllocation;
 *     PFN_vkInternalFreeNotification pfnInternalFree;
 * }
 * }
 */
public class VkAllocationCallbacks {

    VkAllocationCallbacks() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_POINTER.withName("pUserData"),
        vulkan_h.C_POINTER.withName("pfnAllocation"),
        vulkan_h.C_POINTER.withName("pfnReallocation"),
        vulkan_h.C_POINTER.withName("pfnFree"),
        vulkan_h.C_POINTER.withName("pfnInternalAllocation"),
        vulkan_h.C_POINTER.withName("pfnInternalFree")
    ).withName("VkAllocationCallbacks");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pUserData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUserData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pUserData
     * }
     */
    public static final AddressLayout pUserData$layout() {
        return pUserData$LAYOUT;
    }

    private static final long pUserData$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pUserData
     * }
     */
    public static final long pUserData$offset() {
        return pUserData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pUserData
     * }
     */
    public static MemorySegment pUserData(MemorySegment struct) {
        return struct.get(pUserData$LAYOUT, pUserData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pUserData
     * }
     */
    public static void pUserData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUserData$LAYOUT, pUserData$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnAllocation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnAllocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_vkAllocationFunction pfnAllocation
     * }
     */
    public static final AddressLayout pfnAllocation$layout() {
        return pfnAllocation$LAYOUT;
    }

    private static final long pfnAllocation$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_vkAllocationFunction pfnAllocation
     * }
     */
    public static final long pfnAllocation$offset() {
        return pfnAllocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_vkAllocationFunction pfnAllocation
     * }
     */
    public static MemorySegment pfnAllocation(MemorySegment struct) {
        return struct.get(pfnAllocation$LAYOUT, pfnAllocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_vkAllocationFunction pfnAllocation
     * }
     */
    public static void pfnAllocation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnAllocation$LAYOUT, pfnAllocation$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnReallocation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnReallocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_vkReallocationFunction pfnReallocation
     * }
     */
    public static final AddressLayout pfnReallocation$layout() {
        return pfnReallocation$LAYOUT;
    }

    private static final long pfnReallocation$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_vkReallocationFunction pfnReallocation
     * }
     */
    public static final long pfnReallocation$offset() {
        return pfnReallocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_vkReallocationFunction pfnReallocation
     * }
     */
    public static MemorySegment pfnReallocation(MemorySegment struct) {
        return struct.get(pfnReallocation$LAYOUT, pfnReallocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_vkReallocationFunction pfnReallocation
     * }
     */
    public static void pfnReallocation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnReallocation$LAYOUT, pfnReallocation$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_vkFreeFunction pfnFree
     * }
     */
    public static final AddressLayout pfnFree$layout() {
        return pfnFree$LAYOUT;
    }

    private static final long pfnFree$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_vkFreeFunction pfnFree
     * }
     */
    public static final long pfnFree$offset() {
        return pfnFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_vkFreeFunction pfnFree
     * }
     */
    public static MemorySegment pfnFree(MemorySegment struct) {
        return struct.get(pfnFree$LAYOUT, pfnFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_vkFreeFunction pfnFree
     * }
     */
    public static void pfnFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnFree$LAYOUT, pfnFree$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnInternalAllocation$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnInternalAllocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_vkInternalAllocationNotification pfnInternalAllocation
     * }
     */
    public static final AddressLayout pfnInternalAllocation$layout() {
        return pfnInternalAllocation$LAYOUT;
    }

    private static final long pfnInternalAllocation$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_vkInternalAllocationNotification pfnInternalAllocation
     * }
     */
    public static final long pfnInternalAllocation$offset() {
        return pfnInternalAllocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_vkInternalAllocationNotification pfnInternalAllocation
     * }
     */
    public static MemorySegment pfnInternalAllocation(MemorySegment struct) {
        return struct.get(pfnInternalAllocation$LAYOUT, pfnInternalAllocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_vkInternalAllocationNotification pfnInternalAllocation
     * }
     */
    public static void pfnInternalAllocation(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnInternalAllocation$LAYOUT, pfnInternalAllocation$OFFSET, fieldValue);
    }

    private static final AddressLayout pfnInternalFree$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pfnInternalFree"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PFN_vkInternalFreeNotification pfnInternalFree
     * }
     */
    public static final AddressLayout pfnInternalFree$layout() {
        return pfnInternalFree$LAYOUT;
    }

    private static final long pfnInternalFree$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PFN_vkInternalFreeNotification pfnInternalFree
     * }
     */
    public static final long pfnInternalFree$offset() {
        return pfnInternalFree$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PFN_vkInternalFreeNotification pfnInternalFree
     * }
     */
    public static MemorySegment pfnInternalFree(MemorySegment struct) {
        return struct.get(pfnInternalFree$LAYOUT, pfnInternalFree$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PFN_vkInternalFreeNotification pfnInternalFree
     * }
     */
    public static void pfnInternalFree(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pfnInternalFree$LAYOUT, pfnInternalFree$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

