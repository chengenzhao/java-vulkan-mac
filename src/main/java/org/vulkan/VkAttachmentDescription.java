// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkAttachmentDescription {
 *     VkAttachmentDescriptionFlags flags;
 *     VkFormat format;
 *     VkSampleCountFlagBits samples;
 *     VkAttachmentLoadOp loadOp;
 *     VkAttachmentStoreOp storeOp;
 *     VkAttachmentLoadOp stencilLoadOp;
 *     VkAttachmentStoreOp stencilStoreOp;
 *     VkImageLayout initialLayout;
 *     VkImageLayout finalLayout;
 * }
 * }
 */
public class VkAttachmentDescription {

    VkAttachmentDescription() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("format"),
        vulkan_h.C_INT.withName("samples"),
        vulkan_h.C_INT.withName("loadOp"),
        vulkan_h.C_INT.withName("storeOp"),
        vulkan_h.C_INT.withName("stencilLoadOp"),
        vulkan_h.C_INT.withName("stencilStoreOp"),
        vulkan_h.C_INT.withName("initialLayout"),
        vulkan_h.C_INT.withName("finalLayout")
    ).withName("VkAttachmentDescription");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkAttachmentDescriptionFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkAttachmentDescriptionFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkAttachmentDescriptionFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkAttachmentDescriptionFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final OfInt samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static final OfInt samples$layout() {
        return samples$LAYOUT;
    }

    private static final long samples$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static final long samples$offset() {
        return samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static int samples(MemorySegment struct) {
        return struct.get(samples$LAYOUT, samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static void samples(MemorySegment struct, int fieldValue) {
        struct.set(samples$LAYOUT, samples$OFFSET, fieldValue);
    }

    private static final OfInt loadOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("loadOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp loadOp
     * }
     */
    public static final OfInt loadOp$layout() {
        return loadOp$LAYOUT;
    }

    private static final long loadOp$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp loadOp
     * }
     */
    public static final long loadOp$offset() {
        return loadOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp loadOp
     * }
     */
    public static int loadOp(MemorySegment struct) {
        return struct.get(loadOp$LAYOUT, loadOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp loadOp
     * }
     */
    public static void loadOp(MemorySegment struct, int fieldValue) {
        struct.set(loadOp$LAYOUT, loadOp$OFFSET, fieldValue);
    }

    private static final OfInt storeOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storeOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp storeOp
     * }
     */
    public static final OfInt storeOp$layout() {
        return storeOp$LAYOUT;
    }

    private static final long storeOp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp storeOp
     * }
     */
    public static final long storeOp$offset() {
        return storeOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp storeOp
     * }
     */
    public static int storeOp(MemorySegment struct) {
        return struct.get(storeOp$LAYOUT, storeOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp storeOp
     * }
     */
    public static void storeOp(MemorySegment struct, int fieldValue) {
        struct.set(storeOp$LAYOUT, storeOp$OFFSET, fieldValue);
    }

    private static final OfInt stencilLoadOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilLoadOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp stencilLoadOp
     * }
     */
    public static final OfInt stencilLoadOp$layout() {
        return stencilLoadOp$LAYOUT;
    }

    private static final long stencilLoadOp$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp stencilLoadOp
     * }
     */
    public static final long stencilLoadOp$offset() {
        return stencilLoadOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp stencilLoadOp
     * }
     */
    public static int stencilLoadOp(MemorySegment struct) {
        return struct.get(stencilLoadOp$LAYOUT, stencilLoadOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkAttachmentLoadOp stencilLoadOp
     * }
     */
    public static void stencilLoadOp(MemorySegment struct, int fieldValue) {
        struct.set(stencilLoadOp$LAYOUT, stencilLoadOp$OFFSET, fieldValue);
    }

    private static final OfInt stencilStoreOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilStoreOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp stencilStoreOp
     * }
     */
    public static final OfInt stencilStoreOp$layout() {
        return stencilStoreOp$LAYOUT;
    }

    private static final long stencilStoreOp$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp stencilStoreOp
     * }
     */
    public static final long stencilStoreOp$offset() {
        return stencilStoreOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp stencilStoreOp
     * }
     */
    public static int stencilStoreOp(MemorySegment struct) {
        return struct.get(stencilStoreOp$LAYOUT, stencilStoreOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkAttachmentStoreOp stencilStoreOp
     * }
     */
    public static void stencilStoreOp(MemorySegment struct, int fieldValue) {
        struct.set(stencilStoreOp$LAYOUT, stencilStoreOp$OFFSET, fieldValue);
    }

    private static final OfInt initialLayout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("initialLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static final OfInt initialLayout$layout() {
        return initialLayout$LAYOUT;
    }

    private static final long initialLayout$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static final long initialLayout$offset() {
        return initialLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static int initialLayout(MemorySegment struct) {
        return struct.get(initialLayout$LAYOUT, initialLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static void initialLayout(MemorySegment struct, int fieldValue) {
        struct.set(initialLayout$LAYOUT, initialLayout$OFFSET, fieldValue);
    }

    private static final OfInt finalLayout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("finalLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageLayout finalLayout
     * }
     */
    public static final OfInt finalLayout$layout() {
        return finalLayout$LAYOUT;
    }

    private static final long finalLayout$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageLayout finalLayout
     * }
     */
    public static final long finalLayout$offset() {
        return finalLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageLayout finalLayout
     * }
     */
    public static int finalLayout(MemorySegment struct) {
        return struct.get(finalLayout$LAYOUT, finalLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageLayout finalLayout
     * }
     */
    public static void finalLayout(MemorySegment struct, int fieldValue) {
        struct.set(finalLayout$LAYOUT, finalLayout$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

