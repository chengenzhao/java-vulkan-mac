// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkBindSparseInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     uint32_t waitSemaphoreCount;
 *     const VkSemaphore *pWaitSemaphores;
 *     uint32_t bufferBindCount;
 *     const VkSparseBufferMemoryBindInfo *pBufferBinds;
 *     uint32_t imageOpaqueBindCount;
 *     const VkSparseImageOpaqueMemoryBindInfo *pImageOpaqueBinds;
 *     uint32_t imageBindCount;
 *     const VkSparseImageMemoryBindInfo *pImageBinds;
 *     uint32_t signalSemaphoreCount;
 *     const VkSemaphore *pSignalSemaphores;
 * }
 * }
 */
public class VkBindSparseInfo {

    VkBindSparseInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("waitSemaphoreCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pWaitSemaphores"),
        vulkan_h.C_INT.withName("bufferBindCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pBufferBinds"),
        vulkan_h.C_INT.withName("imageOpaqueBindCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pImageOpaqueBinds"),
        vulkan_h.C_INT.withName("imageBindCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pImageBinds"),
        vulkan_h.C_INT.withName("signalSemaphoreCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pSignalSemaphores")
    ).withName("VkBindSparseInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt waitSemaphoreCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("waitSemaphoreCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static final OfInt waitSemaphoreCount$layout() {
        return waitSemaphoreCount$LAYOUT;
    }

    private static final long waitSemaphoreCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static final long waitSemaphoreCount$offset() {
        return waitSemaphoreCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static int waitSemaphoreCount(MemorySegment struct) {
        return struct.get(waitSemaphoreCount$LAYOUT, waitSemaphoreCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static void waitSemaphoreCount(MemorySegment struct, int fieldValue) {
        struct.set(waitSemaphoreCount$LAYOUT, waitSemaphoreCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pWaitSemaphores$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pWaitSemaphores"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static final AddressLayout pWaitSemaphores$layout() {
        return pWaitSemaphores$LAYOUT;
    }

    private static final long pWaitSemaphores$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static final long pWaitSemaphores$offset() {
        return pWaitSemaphores$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static MemorySegment pWaitSemaphores(MemorySegment struct) {
        return struct.get(pWaitSemaphores$LAYOUT, pWaitSemaphores$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static void pWaitSemaphores(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pWaitSemaphores$LAYOUT, pWaitSemaphores$OFFSET, fieldValue);
    }

    private static final OfInt bufferBindCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferBindCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bufferBindCount
     * }
     */
    public static final OfInt bufferBindCount$layout() {
        return bufferBindCount$LAYOUT;
    }

    private static final long bufferBindCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bufferBindCount
     * }
     */
    public static final long bufferBindCount$offset() {
        return bufferBindCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bufferBindCount
     * }
     */
    public static int bufferBindCount(MemorySegment struct) {
        return struct.get(bufferBindCount$LAYOUT, bufferBindCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bufferBindCount
     * }
     */
    public static void bufferBindCount(MemorySegment struct, int fieldValue) {
        struct.set(bufferBindCount$LAYOUT, bufferBindCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pBufferBinds$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pBufferBinds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSparseBufferMemoryBindInfo *pBufferBinds
     * }
     */
    public static final AddressLayout pBufferBinds$layout() {
        return pBufferBinds$LAYOUT;
    }

    private static final long pBufferBinds$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSparseBufferMemoryBindInfo *pBufferBinds
     * }
     */
    public static final long pBufferBinds$offset() {
        return pBufferBinds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSparseBufferMemoryBindInfo *pBufferBinds
     * }
     */
    public static MemorySegment pBufferBinds(MemorySegment struct) {
        return struct.get(pBufferBinds$LAYOUT, pBufferBinds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSparseBufferMemoryBindInfo *pBufferBinds
     * }
     */
    public static void pBufferBinds(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pBufferBinds$LAYOUT, pBufferBinds$OFFSET, fieldValue);
    }

    private static final OfInt imageOpaqueBindCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageOpaqueBindCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imageOpaqueBindCount
     * }
     */
    public static final OfInt imageOpaqueBindCount$layout() {
        return imageOpaqueBindCount$LAYOUT;
    }

    private static final long imageOpaqueBindCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imageOpaqueBindCount
     * }
     */
    public static final long imageOpaqueBindCount$offset() {
        return imageOpaqueBindCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imageOpaqueBindCount
     * }
     */
    public static int imageOpaqueBindCount(MemorySegment struct) {
        return struct.get(imageOpaqueBindCount$LAYOUT, imageOpaqueBindCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imageOpaqueBindCount
     * }
     */
    public static void imageOpaqueBindCount(MemorySegment struct, int fieldValue) {
        struct.set(imageOpaqueBindCount$LAYOUT, imageOpaqueBindCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pImageOpaqueBinds$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pImageOpaqueBinds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSparseImageOpaqueMemoryBindInfo *pImageOpaqueBinds
     * }
     */
    public static final AddressLayout pImageOpaqueBinds$layout() {
        return pImageOpaqueBinds$LAYOUT;
    }

    private static final long pImageOpaqueBinds$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSparseImageOpaqueMemoryBindInfo *pImageOpaqueBinds
     * }
     */
    public static final long pImageOpaqueBinds$offset() {
        return pImageOpaqueBinds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSparseImageOpaqueMemoryBindInfo *pImageOpaqueBinds
     * }
     */
    public static MemorySegment pImageOpaqueBinds(MemorySegment struct) {
        return struct.get(pImageOpaqueBinds$LAYOUT, pImageOpaqueBinds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSparseImageOpaqueMemoryBindInfo *pImageOpaqueBinds
     * }
     */
    public static void pImageOpaqueBinds(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pImageOpaqueBinds$LAYOUT, pImageOpaqueBinds$OFFSET, fieldValue);
    }

    private static final OfInt imageBindCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageBindCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imageBindCount
     * }
     */
    public static final OfInt imageBindCount$layout() {
        return imageBindCount$LAYOUT;
    }

    private static final long imageBindCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imageBindCount
     * }
     */
    public static final long imageBindCount$offset() {
        return imageBindCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imageBindCount
     * }
     */
    public static int imageBindCount(MemorySegment struct) {
        return struct.get(imageBindCount$LAYOUT, imageBindCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imageBindCount
     * }
     */
    public static void imageBindCount(MemorySegment struct, int fieldValue) {
        struct.set(imageBindCount$LAYOUT, imageBindCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pImageBinds$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pImageBinds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSparseImageMemoryBindInfo *pImageBinds
     * }
     */
    public static final AddressLayout pImageBinds$layout() {
        return pImageBinds$LAYOUT;
    }

    private static final long pImageBinds$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSparseImageMemoryBindInfo *pImageBinds
     * }
     */
    public static final long pImageBinds$offset() {
        return pImageBinds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSparseImageMemoryBindInfo *pImageBinds
     * }
     */
    public static MemorySegment pImageBinds(MemorySegment struct) {
        return struct.get(pImageBinds$LAYOUT, pImageBinds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSparseImageMemoryBindInfo *pImageBinds
     * }
     */
    public static void pImageBinds(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pImageBinds$LAYOUT, pImageBinds$OFFSET, fieldValue);
    }

    private static final OfInt signalSemaphoreCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("signalSemaphoreCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static final OfInt signalSemaphoreCount$layout() {
        return signalSemaphoreCount$LAYOUT;
    }

    private static final long signalSemaphoreCount$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static final long signalSemaphoreCount$offset() {
        return signalSemaphoreCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static int signalSemaphoreCount(MemorySegment struct) {
        return struct.get(signalSemaphoreCount$LAYOUT, signalSemaphoreCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static void signalSemaphoreCount(MemorySegment struct, int fieldValue) {
        struct.set(signalSemaphoreCount$LAYOUT, signalSemaphoreCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pSignalSemaphores$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSignalSemaphores"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static final AddressLayout pSignalSemaphores$layout() {
        return pSignalSemaphores$LAYOUT;
    }

    private static final long pSignalSemaphores$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static final long pSignalSemaphores$offset() {
        return pSignalSemaphores$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static MemorySegment pSignalSemaphores(MemorySegment struct) {
        return struct.get(pSignalSemaphores$LAYOUT, pSignalSemaphores$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static void pSignalSemaphores(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSignalSemaphores$LAYOUT, pSignalSemaphores$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

