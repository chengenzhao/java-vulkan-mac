// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union VkClearColorValue {
 *     float float32[4];
 *     int32_t int32[4];
 *     uint32_t uint32[4];
 * }
 * }
 */
public class VkClearColorValue {

    VkClearColorValue() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.sequenceLayout(4, vulkan_h.C_FLOAT).withName("float32"),
        MemoryLayout.sequenceLayout(4, vulkan_h.C_INT).withName("int32"),
        MemoryLayout.sequenceLayout(4, vulkan_h.C_INT).withName("uint32")
    ).withName("VkClearColorValue");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout float32$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("float32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float float32[4]
     * }
     */
    public static final SequenceLayout float32$layout() {
        return float32$LAYOUT;
    }

    private static final long float32$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float float32[4]
     * }
     */
    public static final long float32$offset() {
        return float32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float float32[4]
     * }
     */
    public static MemorySegment float32(MemorySegment union) {
        return union.asSlice(float32$OFFSET, float32$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float float32[4]
     * }
     */
    public static void float32(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, float32$OFFSET, float32$LAYOUT.byteSize());
    }

    private static long[] float32$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float float32[4]
     * }
     */
    public static long[] float32$dimensions() {
        return float32$DIMS;
    }
    private static final VarHandle float32$ELEM_HANDLE = float32$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float float32[4]
     * }
     */
    public static float float32(MemorySegment union, long index0) {
        return (float)float32$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float float32[4]
     * }
     */
    public static void float32(MemorySegment union, long index0, float fieldValue) {
        float32$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final SequenceLayout int32$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("int32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t int32[4]
     * }
     */
    public static final SequenceLayout int32$layout() {
        return int32$LAYOUT;
    }

    private static final long int32$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t int32[4]
     * }
     */
    public static final long int32$offset() {
        return int32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t int32[4]
     * }
     */
    public static MemorySegment int32(MemorySegment union) {
        return union.asSlice(int32$OFFSET, int32$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t int32[4]
     * }
     */
    public static void int32(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, int32$OFFSET, int32$LAYOUT.byteSize());
    }

    private static long[] int32$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int32_t int32[4]
     * }
     */
    public static long[] int32$dimensions() {
        return int32$DIMS;
    }
    private static final VarHandle int32$ELEM_HANDLE = int32$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int32_t int32[4]
     * }
     */
    public static int int32(MemorySegment union, long index0) {
        return (int)int32$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int32_t int32[4]
     * }
     */
    public static void int32(MemorySegment union, long index0, int fieldValue) {
        int32$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final SequenceLayout uint32$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("uint32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t uint32[4]
     * }
     */
    public static final SequenceLayout uint32$layout() {
        return uint32$LAYOUT;
    }

    private static final long uint32$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t uint32[4]
     * }
     */
    public static final long uint32$offset() {
        return uint32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t uint32[4]
     * }
     */
    public static MemorySegment uint32(MemorySegment union) {
        return union.asSlice(uint32$OFFSET, uint32$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t uint32[4]
     * }
     */
    public static void uint32(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, uint32$OFFSET, uint32$LAYOUT.byteSize());
    }

    private static long[] uint32$DIMS = { 4 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t uint32[4]
     * }
     */
    public static long[] uint32$dimensions() {
        return uint32$DIMS;
    }
    private static final VarHandle uint32$ELEM_HANDLE = uint32$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t uint32[4]
     * }
     */
    public static int uint32(MemorySegment union, long index0) {
        return (int)uint32$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t uint32[4]
     * }
     */
    public static void uint32(MemorySegment union, long index0, int fieldValue) {
        uint32$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

