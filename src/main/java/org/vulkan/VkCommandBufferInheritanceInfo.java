// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkCommandBufferInheritanceInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkRenderPass renderPass;
 *     uint32_t subpass;
 *     VkFramebuffer framebuffer;
 *     VkBool32 occlusionQueryEnable;
 *     VkQueryControlFlags queryFlags;
 *     VkQueryPipelineStatisticFlags pipelineStatistics;
 * }
 * }
 */
public class VkCommandBufferInheritanceInfo {

    VkCommandBufferInheritanceInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_POINTER.withName("renderPass"),
        vulkan_h.C_INT.withName("subpass"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("framebuffer"),
        vulkan_h.C_INT.withName("occlusionQueryEnable"),
        vulkan_h.C_INT.withName("queryFlags"),
        vulkan_h.C_INT.withName("pipelineStatistics"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkCommandBufferInheritanceInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final AddressLayout renderPass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("renderPass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static final AddressLayout renderPass$layout() {
        return renderPass$LAYOUT;
    }

    private static final long renderPass$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static final long renderPass$offset() {
        return renderPass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static MemorySegment renderPass(MemorySegment struct) {
        return struct.get(renderPass$LAYOUT, renderPass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static void renderPass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(renderPass$LAYOUT, renderPass$OFFSET, fieldValue);
    }

    private static final OfInt subpass$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subpass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static final OfInt subpass$layout() {
        return subpass$LAYOUT;
    }

    private static final long subpass$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static final long subpass$offset() {
        return subpass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static int subpass(MemorySegment struct) {
        return struct.get(subpass$LAYOUT, subpass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static void subpass(MemorySegment struct, int fieldValue) {
        struct.set(subpass$LAYOUT, subpass$OFFSET, fieldValue);
    }

    private static final AddressLayout framebuffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("framebuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static final AddressLayout framebuffer$layout() {
        return framebuffer$LAYOUT;
    }

    private static final long framebuffer$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static final long framebuffer$offset() {
        return framebuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static MemorySegment framebuffer(MemorySegment struct) {
        return struct.get(framebuffer$LAYOUT, framebuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static void framebuffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(framebuffer$LAYOUT, framebuffer$OFFSET, fieldValue);
    }

    private static final OfInt occlusionQueryEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("occlusionQueryEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryEnable
     * }
     */
    public static final OfInt occlusionQueryEnable$layout() {
        return occlusionQueryEnable$LAYOUT;
    }

    private static final long occlusionQueryEnable$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryEnable
     * }
     */
    public static final long occlusionQueryEnable$offset() {
        return occlusionQueryEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryEnable
     * }
     */
    public static int occlusionQueryEnable(MemorySegment struct) {
        return struct.get(occlusionQueryEnable$LAYOUT, occlusionQueryEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryEnable
     * }
     */
    public static void occlusionQueryEnable(MemorySegment struct, int fieldValue) {
        struct.set(occlusionQueryEnable$LAYOUT, occlusionQueryEnable$OFFSET, fieldValue);
    }

    private static final OfInt queryFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("queryFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkQueryControlFlags queryFlags
     * }
     */
    public static final OfInt queryFlags$layout() {
        return queryFlags$LAYOUT;
    }

    private static final long queryFlags$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkQueryControlFlags queryFlags
     * }
     */
    public static final long queryFlags$offset() {
        return queryFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkQueryControlFlags queryFlags
     * }
     */
    public static int queryFlags(MemorySegment struct) {
        return struct.get(queryFlags$LAYOUT, queryFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkQueryControlFlags queryFlags
     * }
     */
    public static void queryFlags(MemorySegment struct, int fieldValue) {
        struct.set(queryFlags$LAYOUT, queryFlags$OFFSET, fieldValue);
    }

    private static final OfInt pipelineStatistics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pipelineStatistics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkQueryPipelineStatisticFlags pipelineStatistics
     * }
     */
    public static final OfInt pipelineStatistics$layout() {
        return pipelineStatistics$LAYOUT;
    }

    private static final long pipelineStatistics$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkQueryPipelineStatisticFlags pipelineStatistics
     * }
     */
    public static final long pipelineStatistics$offset() {
        return pipelineStatistics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkQueryPipelineStatisticFlags pipelineStatistics
     * }
     */
    public static int pipelineStatistics(MemorySegment struct) {
        return struct.get(pipelineStatistics$LAYOUT, pipelineStatistics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkQueryPipelineStatisticFlags pipelineStatistics
     * }
     */
    public static void pipelineStatistics(MemorySegment struct, int fieldValue) {
        struct.set(pipelineStatistics$LAYOUT, pipelineStatistics$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

