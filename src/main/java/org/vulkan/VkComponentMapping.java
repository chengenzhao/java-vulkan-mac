// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkComponentMapping {
 *     VkComponentSwizzle r;
 *     VkComponentSwizzle g;
 *     VkComponentSwizzle b;
 *     VkComponentSwizzle a;
 * }
 * }
 */
public class VkComponentMapping {

    VkComponentMapping() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("r"),
        vulkan_h.C_INT.withName("g"),
        vulkan_h.C_INT.withName("b"),
        vulkan_h.C_INT.withName("a")
    ).withName("VkComponentMapping");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt r$LAYOUT = (OfInt)$LAYOUT.select(groupElement("r"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentSwizzle r
     * }
     */
    public static final OfInt r$layout() {
        return r$LAYOUT;
    }

    private static final long r$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentSwizzle r
     * }
     */
    public static final long r$offset() {
        return r$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle r
     * }
     */
    public static int r(MemorySegment struct) {
        return struct.get(r$LAYOUT, r$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle r
     * }
     */
    public static void r(MemorySegment struct, int fieldValue) {
        struct.set(r$LAYOUT, r$OFFSET, fieldValue);
    }

    private static final OfInt g$LAYOUT = (OfInt)$LAYOUT.select(groupElement("g"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentSwizzle g
     * }
     */
    public static final OfInt g$layout() {
        return g$LAYOUT;
    }

    private static final long g$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentSwizzle g
     * }
     */
    public static final long g$offset() {
        return g$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle g
     * }
     */
    public static int g(MemorySegment struct) {
        return struct.get(g$LAYOUT, g$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle g
     * }
     */
    public static void g(MemorySegment struct, int fieldValue) {
        struct.set(g$LAYOUT, g$OFFSET, fieldValue);
    }

    private static final OfInt b$LAYOUT = (OfInt)$LAYOUT.select(groupElement("b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentSwizzle b
     * }
     */
    public static final OfInt b$layout() {
        return b$LAYOUT;
    }

    private static final long b$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentSwizzle b
     * }
     */
    public static final long b$offset() {
        return b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle b
     * }
     */
    public static int b(MemorySegment struct) {
        return struct.get(b$LAYOUT, b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle b
     * }
     */
    public static void b(MemorySegment struct, int fieldValue) {
        struct.set(b$LAYOUT, b$OFFSET, fieldValue);
    }

    private static final OfInt a$LAYOUT = (OfInt)$LAYOUT.select(groupElement("a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentSwizzle a
     * }
     */
    public static final OfInt a$layout() {
        return a$LAYOUT;
    }

    private static final long a$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentSwizzle a
     * }
     */
    public static final long a$offset() {
        return a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle a
     * }
     */
    public static int a(MemorySegment struct) {
        return struct.get(a$LAYOUT, a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentSwizzle a
     * }
     */
    public static void a(MemorySegment struct, int fieldValue) {
        struct.set(a$LAYOUT, a$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

