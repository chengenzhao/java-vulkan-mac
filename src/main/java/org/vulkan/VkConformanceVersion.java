// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkConformanceVersion {
 *     uint8_t major;
 *     uint8_t minor;
 *     uint8_t subminor;
 *     uint8_t patch;
 * }
 * }
 */
public class VkConformanceVersion {

    VkConformanceVersion() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_CHAR.withName("major"),
        vulkan_h.C_CHAR.withName("minor"),
        vulkan_h.C_CHAR.withName("subminor"),
        vulkan_h.C_CHAR.withName("patch")
    ).withName("VkConformanceVersion");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte major$LAYOUT = (OfByte)$LAYOUT.select(groupElement("major"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t major
     * }
     */
    public static final OfByte major$layout() {
        return major$LAYOUT;
    }

    private static final long major$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t major
     * }
     */
    public static final long major$offset() {
        return major$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t major
     * }
     */
    public static byte major(MemorySegment struct) {
        return struct.get(major$LAYOUT, major$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t major
     * }
     */
    public static void major(MemorySegment struct, byte fieldValue) {
        struct.set(major$LAYOUT, major$OFFSET, fieldValue);
    }

    private static final OfByte minor$LAYOUT = (OfByte)$LAYOUT.select(groupElement("minor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t minor
     * }
     */
    public static final OfByte minor$layout() {
        return minor$LAYOUT;
    }

    private static final long minor$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t minor
     * }
     */
    public static final long minor$offset() {
        return minor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t minor
     * }
     */
    public static byte minor(MemorySegment struct) {
        return struct.get(minor$LAYOUT, minor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t minor
     * }
     */
    public static void minor(MemorySegment struct, byte fieldValue) {
        struct.set(minor$LAYOUT, minor$OFFSET, fieldValue);
    }

    private static final OfByte subminor$LAYOUT = (OfByte)$LAYOUT.select(groupElement("subminor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t subminor
     * }
     */
    public static final OfByte subminor$layout() {
        return subminor$LAYOUT;
    }

    private static final long subminor$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t subminor
     * }
     */
    public static final long subminor$offset() {
        return subminor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t subminor
     * }
     */
    public static byte subminor(MemorySegment struct) {
        return struct.get(subminor$LAYOUT, subminor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t subminor
     * }
     */
    public static void subminor(MemorySegment struct, byte fieldValue) {
        struct.set(subminor$LAYOUT, subminor$OFFSET, fieldValue);
    }

    private static final OfByte patch$LAYOUT = (OfByte)$LAYOUT.select(groupElement("patch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t patch
     * }
     */
    public static final OfByte patch$layout() {
        return patch$LAYOUT;
    }

    private static final long patch$OFFSET = 3;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t patch
     * }
     */
    public static final long patch$offset() {
        return patch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t patch
     * }
     */
    public static byte patch(MemorySegment struct) {
        return struct.get(patch$LAYOUT, patch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t patch
     * }
     */
    public static void patch(MemorySegment struct, byte fieldValue) {
        struct.set(patch$LAYOUT, patch$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

