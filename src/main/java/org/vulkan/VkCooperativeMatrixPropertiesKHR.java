// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkCooperativeMatrixPropertiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint32_t MSize;
 *     uint32_t NSize;
 *     uint32_t KSize;
 *     VkComponentTypeKHR AType;
 *     VkComponentTypeKHR BType;
 *     VkComponentTypeKHR CType;
 *     VkComponentTypeKHR ResultType;
 *     VkBool32 saturatingAccumulation;
 *     VkScopeKHR scope;
 * }
 * }
 */
public class VkCooperativeMatrixPropertiesKHR {

    VkCooperativeMatrixPropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("MSize"),
        vulkan_h.C_INT.withName("NSize"),
        vulkan_h.C_INT.withName("KSize"),
        vulkan_h.C_INT.withName("AType"),
        vulkan_h.C_INT.withName("BType"),
        vulkan_h.C_INT.withName("CType"),
        vulkan_h.C_INT.withName("ResultType"),
        vulkan_h.C_INT.withName("saturatingAccumulation"),
        vulkan_h.C_INT.withName("scope"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkCooperativeMatrixPropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt MSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("MSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t MSize
     * }
     */
    public static final OfInt MSize$layout() {
        return MSize$LAYOUT;
    }

    private static final long MSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t MSize
     * }
     */
    public static final long MSize$offset() {
        return MSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t MSize
     * }
     */
    public static int MSize(MemorySegment struct) {
        return struct.get(MSize$LAYOUT, MSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t MSize
     * }
     */
    public static void MSize(MemorySegment struct, int fieldValue) {
        struct.set(MSize$LAYOUT, MSize$OFFSET, fieldValue);
    }

    private static final OfInt NSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("NSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t NSize
     * }
     */
    public static final OfInt NSize$layout() {
        return NSize$LAYOUT;
    }

    private static final long NSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t NSize
     * }
     */
    public static final long NSize$offset() {
        return NSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t NSize
     * }
     */
    public static int NSize(MemorySegment struct) {
        return struct.get(NSize$LAYOUT, NSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t NSize
     * }
     */
    public static void NSize(MemorySegment struct, int fieldValue) {
        struct.set(NSize$LAYOUT, NSize$OFFSET, fieldValue);
    }

    private static final OfInt KSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("KSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t KSize
     * }
     */
    public static final OfInt KSize$layout() {
        return KSize$LAYOUT;
    }

    private static final long KSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t KSize
     * }
     */
    public static final long KSize$offset() {
        return KSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t KSize
     * }
     */
    public static int KSize(MemorySegment struct) {
        return struct.get(KSize$LAYOUT, KSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t KSize
     * }
     */
    public static void KSize(MemorySegment struct, int fieldValue) {
        struct.set(KSize$LAYOUT, KSize$OFFSET, fieldValue);
    }

    private static final OfInt AType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("AType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR AType
     * }
     */
    public static final OfInt AType$layout() {
        return AType$LAYOUT;
    }

    private static final long AType$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR AType
     * }
     */
    public static final long AType$offset() {
        return AType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR AType
     * }
     */
    public static int AType(MemorySegment struct) {
        return struct.get(AType$LAYOUT, AType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR AType
     * }
     */
    public static void AType(MemorySegment struct, int fieldValue) {
        struct.set(AType$LAYOUT, AType$OFFSET, fieldValue);
    }

    private static final OfInt BType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("BType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR BType
     * }
     */
    public static final OfInt BType$layout() {
        return BType$LAYOUT;
    }

    private static final long BType$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR BType
     * }
     */
    public static final long BType$offset() {
        return BType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR BType
     * }
     */
    public static int BType(MemorySegment struct) {
        return struct.get(BType$LAYOUT, BType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR BType
     * }
     */
    public static void BType(MemorySegment struct, int fieldValue) {
        struct.set(BType$LAYOUT, BType$OFFSET, fieldValue);
    }

    private static final OfInt CType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("CType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR CType
     * }
     */
    public static final OfInt CType$layout() {
        return CType$LAYOUT;
    }

    private static final long CType$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR CType
     * }
     */
    public static final long CType$offset() {
        return CType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR CType
     * }
     */
    public static int CType(MemorySegment struct) {
        return struct.get(CType$LAYOUT, CType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR CType
     * }
     */
    public static void CType(MemorySegment struct, int fieldValue) {
        struct.set(CType$LAYOUT, CType$OFFSET, fieldValue);
    }

    private static final OfInt ResultType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ResultType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR ResultType
     * }
     */
    public static final OfInt ResultType$layout() {
        return ResultType$LAYOUT;
    }

    private static final long ResultType$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR ResultType
     * }
     */
    public static final long ResultType$offset() {
        return ResultType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR ResultType
     * }
     */
    public static int ResultType(MemorySegment struct) {
        return struct.get(ResultType$LAYOUT, ResultType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentTypeKHR ResultType
     * }
     */
    public static void ResultType(MemorySegment struct, int fieldValue) {
        struct.set(ResultType$LAYOUT, ResultType$OFFSET, fieldValue);
    }

    private static final OfInt saturatingAccumulation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("saturatingAccumulation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 saturatingAccumulation
     * }
     */
    public static final OfInt saturatingAccumulation$layout() {
        return saturatingAccumulation$LAYOUT;
    }

    private static final long saturatingAccumulation$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 saturatingAccumulation
     * }
     */
    public static final long saturatingAccumulation$offset() {
        return saturatingAccumulation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 saturatingAccumulation
     * }
     */
    public static int saturatingAccumulation(MemorySegment struct) {
        return struct.get(saturatingAccumulation$LAYOUT, saturatingAccumulation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 saturatingAccumulation
     * }
     */
    public static void saturatingAccumulation(MemorySegment struct, int fieldValue) {
        struct.set(saturatingAccumulation$LAYOUT, saturatingAccumulation$OFFSET, fieldValue);
    }

    private static final OfInt scope$LAYOUT = (OfInt)$LAYOUT.select(groupElement("scope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkScopeKHR scope
     * }
     */
    public static final OfInt scope$layout() {
        return scope$LAYOUT;
    }

    private static final long scope$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkScopeKHR scope
     * }
     */
    public static final long scope$offset() {
        return scope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkScopeKHR scope
     * }
     */
    public static int scope(MemorySegment struct) {
        return struct.get(scope$LAYOUT, scope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkScopeKHR scope
     * }
     */
    public static void scope(MemorySegment struct, int fieldValue) {
        struct.set(scope$LAYOUT, scope$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

