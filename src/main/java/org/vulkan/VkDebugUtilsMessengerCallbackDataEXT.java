// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDebugUtilsMessengerCallbackDataEXT {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
 *     const char *pMessageIdName;
 *     int32_t messageIdNumber;
 *     const char *pMessage;
 *     uint32_t queueLabelCount;
 *     const VkDebugUtilsLabelEXT *pQueueLabels;
 *     uint32_t cmdBufLabelCount;
 *     const VkDebugUtilsLabelEXT *pCmdBufLabels;
 *     uint32_t objectCount;
 *     const VkDebugUtilsObjectNameInfoEXT *pObjects;
 * }
 * }
 */
public class VkDebugUtilsMessengerCallbackDataEXT {

    VkDebugUtilsMessengerCallbackDataEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pMessageIdName"),
        vulkan_h.C_INT.withName("messageIdNumber"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pMessage"),
        vulkan_h.C_INT.withName("queueLabelCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pQueueLabels"),
        vulkan_h.C_INT.withName("cmdBufLabelCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pCmdBufLabels"),
        vulkan_h.C_INT.withName("objectCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pObjects")
    ).withName("VkDebugUtilsMessengerCallbackDataEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDebugUtilsMessengerCallbackDataFlagsEXT flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDebugUtilsMessengerCallbackDataFlagsEXT flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDebugUtilsMessengerCallbackDataFlagsEXT flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDebugUtilsMessengerCallbackDataFlagsEXT flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final AddressLayout pMessageIdName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMessageIdName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *pMessageIdName
     * }
     */
    public static final AddressLayout pMessageIdName$layout() {
        return pMessageIdName$LAYOUT;
    }

    private static final long pMessageIdName$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *pMessageIdName
     * }
     */
    public static final long pMessageIdName$offset() {
        return pMessageIdName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *pMessageIdName
     * }
     */
    public static MemorySegment pMessageIdName(MemorySegment struct) {
        return struct.get(pMessageIdName$LAYOUT, pMessageIdName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *pMessageIdName
     * }
     */
    public static void pMessageIdName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMessageIdName$LAYOUT, pMessageIdName$OFFSET, fieldValue);
    }

    private static final OfInt messageIdNumber$LAYOUT = (OfInt)$LAYOUT.select(groupElement("messageIdNumber"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t messageIdNumber
     * }
     */
    public static final OfInt messageIdNumber$layout() {
        return messageIdNumber$LAYOUT;
    }

    private static final long messageIdNumber$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t messageIdNumber
     * }
     */
    public static final long messageIdNumber$offset() {
        return messageIdNumber$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t messageIdNumber
     * }
     */
    public static int messageIdNumber(MemorySegment struct) {
        return struct.get(messageIdNumber$LAYOUT, messageIdNumber$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t messageIdNumber
     * }
     */
    public static void messageIdNumber(MemorySegment struct, int fieldValue) {
        struct.set(messageIdNumber$LAYOUT, messageIdNumber$OFFSET, fieldValue);
    }

    private static final AddressLayout pMessage$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMessage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *pMessage
     * }
     */
    public static final AddressLayout pMessage$layout() {
        return pMessage$LAYOUT;
    }

    private static final long pMessage$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *pMessage
     * }
     */
    public static final long pMessage$offset() {
        return pMessage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *pMessage
     * }
     */
    public static MemorySegment pMessage(MemorySegment struct) {
        return struct.get(pMessage$LAYOUT, pMessage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *pMessage
     * }
     */
    public static void pMessage(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMessage$LAYOUT, pMessage$OFFSET, fieldValue);
    }

    private static final OfInt queueLabelCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("queueLabelCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t queueLabelCount
     * }
     */
    public static final OfInt queueLabelCount$layout() {
        return queueLabelCount$LAYOUT;
    }

    private static final long queueLabelCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t queueLabelCount
     * }
     */
    public static final long queueLabelCount$offset() {
        return queueLabelCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t queueLabelCount
     * }
     */
    public static int queueLabelCount(MemorySegment struct) {
        return struct.get(queueLabelCount$LAYOUT, queueLabelCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t queueLabelCount
     * }
     */
    public static void queueLabelCount(MemorySegment struct, int fieldValue) {
        struct.set(queueLabelCount$LAYOUT, queueLabelCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pQueueLabels$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pQueueLabels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pQueueLabels
     * }
     */
    public static final AddressLayout pQueueLabels$layout() {
        return pQueueLabels$LAYOUT;
    }

    private static final long pQueueLabels$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pQueueLabels
     * }
     */
    public static final long pQueueLabels$offset() {
        return pQueueLabels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pQueueLabels
     * }
     */
    public static MemorySegment pQueueLabels(MemorySegment struct) {
        return struct.get(pQueueLabels$LAYOUT, pQueueLabels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pQueueLabels
     * }
     */
    public static void pQueueLabels(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pQueueLabels$LAYOUT, pQueueLabels$OFFSET, fieldValue);
    }

    private static final OfInt cmdBufLabelCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cmdBufLabelCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t cmdBufLabelCount
     * }
     */
    public static final OfInt cmdBufLabelCount$layout() {
        return cmdBufLabelCount$LAYOUT;
    }

    private static final long cmdBufLabelCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t cmdBufLabelCount
     * }
     */
    public static final long cmdBufLabelCount$offset() {
        return cmdBufLabelCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t cmdBufLabelCount
     * }
     */
    public static int cmdBufLabelCount(MemorySegment struct) {
        return struct.get(cmdBufLabelCount$LAYOUT, cmdBufLabelCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t cmdBufLabelCount
     * }
     */
    public static void cmdBufLabelCount(MemorySegment struct, int fieldValue) {
        struct.set(cmdBufLabelCount$LAYOUT, cmdBufLabelCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pCmdBufLabels$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pCmdBufLabels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pCmdBufLabels
     * }
     */
    public static final AddressLayout pCmdBufLabels$layout() {
        return pCmdBufLabels$LAYOUT;
    }

    private static final long pCmdBufLabels$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pCmdBufLabels
     * }
     */
    public static final long pCmdBufLabels$offset() {
        return pCmdBufLabels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pCmdBufLabels
     * }
     */
    public static MemorySegment pCmdBufLabels(MemorySegment struct) {
        return struct.get(pCmdBufLabels$LAYOUT, pCmdBufLabels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkDebugUtilsLabelEXT *pCmdBufLabels
     * }
     */
    public static void pCmdBufLabels(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pCmdBufLabels$LAYOUT, pCmdBufLabels$OFFSET, fieldValue);
    }

    private static final OfInt objectCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("objectCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t objectCount
     * }
     */
    public static final OfInt objectCount$layout() {
        return objectCount$LAYOUT;
    }

    private static final long objectCount$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t objectCount
     * }
     */
    public static final long objectCount$offset() {
        return objectCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t objectCount
     * }
     */
    public static int objectCount(MemorySegment struct) {
        return struct.get(objectCount$LAYOUT, objectCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t objectCount
     * }
     */
    public static void objectCount(MemorySegment struct, int fieldValue) {
        struct.set(objectCount$LAYOUT, objectCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pObjects$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pObjects"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkDebugUtilsObjectNameInfoEXT *pObjects
     * }
     */
    public static final AddressLayout pObjects$layout() {
        return pObjects$LAYOUT;
    }

    private static final long pObjects$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkDebugUtilsObjectNameInfoEXT *pObjects
     * }
     */
    public static final long pObjects$offset() {
        return pObjects$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkDebugUtilsObjectNameInfoEXT *pObjects
     * }
     */
    public static MemorySegment pObjects(MemorySegment struct) {
        return struct.get(pObjects$LAYOUT, pObjects$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkDebugUtilsObjectNameInfoEXT *pObjects
     * }
     */
    public static void pObjects(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pObjects$LAYOUT, pObjects$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

