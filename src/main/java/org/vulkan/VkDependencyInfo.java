// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDependencyInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkDependencyFlags dependencyFlags;
 *     uint32_t memoryBarrierCount;
 *     const VkMemoryBarrier2 *pMemoryBarriers;
 *     uint32_t bufferMemoryBarrierCount;
 *     const VkBufferMemoryBarrier2 *pBufferMemoryBarriers;
 *     uint32_t imageMemoryBarrierCount;
 *     const VkImageMemoryBarrier2 *pImageMemoryBarriers;
 * }
 * }
 */
public class VkDependencyInfo {

    VkDependencyInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("dependencyFlags"),
        vulkan_h.C_INT.withName("memoryBarrierCount"),
        vulkan_h.C_POINTER.withName("pMemoryBarriers"),
        vulkan_h.C_INT.withName("bufferMemoryBarrierCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pBufferMemoryBarriers"),
        vulkan_h.C_INT.withName("imageMemoryBarrierCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pImageMemoryBarriers")
    ).withName("VkDependencyInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt dependencyFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dependencyFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDependencyFlags dependencyFlags
     * }
     */
    public static final OfInt dependencyFlags$layout() {
        return dependencyFlags$LAYOUT;
    }

    private static final long dependencyFlags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDependencyFlags dependencyFlags
     * }
     */
    public static final long dependencyFlags$offset() {
        return dependencyFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDependencyFlags dependencyFlags
     * }
     */
    public static int dependencyFlags(MemorySegment struct) {
        return struct.get(dependencyFlags$LAYOUT, dependencyFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDependencyFlags dependencyFlags
     * }
     */
    public static void dependencyFlags(MemorySegment struct, int fieldValue) {
        struct.set(dependencyFlags$LAYOUT, dependencyFlags$OFFSET, fieldValue);
    }

    private static final OfInt memoryBarrierCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("memoryBarrierCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t memoryBarrierCount
     * }
     */
    public static final OfInt memoryBarrierCount$layout() {
        return memoryBarrierCount$LAYOUT;
    }

    private static final long memoryBarrierCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t memoryBarrierCount
     * }
     */
    public static final long memoryBarrierCount$offset() {
        return memoryBarrierCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t memoryBarrierCount
     * }
     */
    public static int memoryBarrierCount(MemorySegment struct) {
        return struct.get(memoryBarrierCount$LAYOUT, memoryBarrierCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t memoryBarrierCount
     * }
     */
    public static void memoryBarrierCount(MemorySegment struct, int fieldValue) {
        struct.set(memoryBarrierCount$LAYOUT, memoryBarrierCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pMemoryBarriers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMemoryBarriers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkMemoryBarrier2 *pMemoryBarriers
     * }
     */
    public static final AddressLayout pMemoryBarriers$layout() {
        return pMemoryBarriers$LAYOUT;
    }

    private static final long pMemoryBarriers$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkMemoryBarrier2 *pMemoryBarriers
     * }
     */
    public static final long pMemoryBarriers$offset() {
        return pMemoryBarriers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkMemoryBarrier2 *pMemoryBarriers
     * }
     */
    public static MemorySegment pMemoryBarriers(MemorySegment struct) {
        return struct.get(pMemoryBarriers$LAYOUT, pMemoryBarriers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkMemoryBarrier2 *pMemoryBarriers
     * }
     */
    public static void pMemoryBarriers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMemoryBarriers$LAYOUT, pMemoryBarriers$OFFSET, fieldValue);
    }

    private static final OfInt bufferMemoryBarrierCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferMemoryBarrierCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bufferMemoryBarrierCount
     * }
     */
    public static final OfInt bufferMemoryBarrierCount$layout() {
        return bufferMemoryBarrierCount$LAYOUT;
    }

    private static final long bufferMemoryBarrierCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bufferMemoryBarrierCount
     * }
     */
    public static final long bufferMemoryBarrierCount$offset() {
        return bufferMemoryBarrierCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bufferMemoryBarrierCount
     * }
     */
    public static int bufferMemoryBarrierCount(MemorySegment struct) {
        return struct.get(bufferMemoryBarrierCount$LAYOUT, bufferMemoryBarrierCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bufferMemoryBarrierCount
     * }
     */
    public static void bufferMemoryBarrierCount(MemorySegment struct, int fieldValue) {
        struct.set(bufferMemoryBarrierCount$LAYOUT, bufferMemoryBarrierCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pBufferMemoryBarriers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pBufferMemoryBarriers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkBufferMemoryBarrier2 *pBufferMemoryBarriers
     * }
     */
    public static final AddressLayout pBufferMemoryBarriers$layout() {
        return pBufferMemoryBarriers$LAYOUT;
    }

    private static final long pBufferMemoryBarriers$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkBufferMemoryBarrier2 *pBufferMemoryBarriers
     * }
     */
    public static final long pBufferMemoryBarriers$offset() {
        return pBufferMemoryBarriers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkBufferMemoryBarrier2 *pBufferMemoryBarriers
     * }
     */
    public static MemorySegment pBufferMemoryBarriers(MemorySegment struct) {
        return struct.get(pBufferMemoryBarriers$LAYOUT, pBufferMemoryBarriers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkBufferMemoryBarrier2 *pBufferMemoryBarriers
     * }
     */
    public static void pBufferMemoryBarriers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pBufferMemoryBarriers$LAYOUT, pBufferMemoryBarriers$OFFSET, fieldValue);
    }

    private static final OfInt imageMemoryBarrierCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageMemoryBarrierCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imageMemoryBarrierCount
     * }
     */
    public static final OfInt imageMemoryBarrierCount$layout() {
        return imageMemoryBarrierCount$LAYOUT;
    }

    private static final long imageMemoryBarrierCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imageMemoryBarrierCount
     * }
     */
    public static final long imageMemoryBarrierCount$offset() {
        return imageMemoryBarrierCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imageMemoryBarrierCount
     * }
     */
    public static int imageMemoryBarrierCount(MemorySegment struct) {
        return struct.get(imageMemoryBarrierCount$LAYOUT, imageMemoryBarrierCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imageMemoryBarrierCount
     * }
     */
    public static void imageMemoryBarrierCount(MemorySegment struct, int fieldValue) {
        struct.set(imageMemoryBarrierCount$LAYOUT, imageMemoryBarrierCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pImageMemoryBarriers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pImageMemoryBarriers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkImageMemoryBarrier2 *pImageMemoryBarriers
     * }
     */
    public static final AddressLayout pImageMemoryBarriers$layout() {
        return pImageMemoryBarriers$LAYOUT;
    }

    private static final long pImageMemoryBarriers$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkImageMemoryBarrier2 *pImageMemoryBarriers
     * }
     */
    public static final long pImageMemoryBarriers$offset() {
        return pImageMemoryBarriers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkImageMemoryBarrier2 *pImageMemoryBarriers
     * }
     */
    public static MemorySegment pImageMemoryBarriers(MemorySegment struct) {
        return struct.get(pImageMemoryBarriers$LAYOUT, pImageMemoryBarriers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkImageMemoryBarrier2 *pImageMemoryBarriers
     * }
     */
    public static void pImageMemoryBarriers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pImageMemoryBarriers$LAYOUT, pImageMemoryBarriers$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

