// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDescriptorSetLayoutBinding {
 *     uint32_t binding;
 *     VkDescriptorType descriptorType;
 *     uint32_t descriptorCount;
 *     VkShaderStageFlags stageFlags;
 *     const VkSampler *pImmutableSamplers;
 * }
 * }
 */
public class VkDescriptorSetLayoutBinding {

    VkDescriptorSetLayoutBinding() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("binding"),
        vulkan_h.C_INT.withName("descriptorType"),
        vulkan_h.C_INT.withName("descriptorCount"),
        vulkan_h.C_INT.withName("stageFlags"),
        vulkan_h.C_POINTER.withName("pImmutableSamplers")
    ).withName("VkDescriptorSetLayoutBinding");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt binding$LAYOUT = (OfInt)$LAYOUT.select(groupElement("binding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t binding
     * }
     */
    public static final OfInt binding$layout() {
        return binding$LAYOUT;
    }

    private static final long binding$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t binding
     * }
     */
    public static final long binding$offset() {
        return binding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t binding
     * }
     */
    public static int binding(MemorySegment struct) {
        return struct.get(binding$LAYOUT, binding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t binding
     * }
     */
    public static void binding(MemorySegment struct, int fieldValue) {
        struct.set(binding$LAYOUT, binding$OFFSET, fieldValue);
    }

    private static final OfInt descriptorType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDescriptorType descriptorType
     * }
     */
    public static final OfInt descriptorType$layout() {
        return descriptorType$LAYOUT;
    }

    private static final long descriptorType$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDescriptorType descriptorType
     * }
     */
    public static final long descriptorType$offset() {
        return descriptorType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDescriptorType descriptorType
     * }
     */
    public static int descriptorType(MemorySegment struct) {
        return struct.get(descriptorType$LAYOUT, descriptorType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDescriptorType descriptorType
     * }
     */
    public static void descriptorType(MemorySegment struct, int fieldValue) {
        struct.set(descriptorType$LAYOUT, descriptorType$OFFSET, fieldValue);
    }

    private static final OfInt descriptorCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t descriptorCount
     * }
     */
    public static final OfInt descriptorCount$layout() {
        return descriptorCount$LAYOUT;
    }

    private static final long descriptorCount$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t descriptorCount
     * }
     */
    public static final long descriptorCount$offset() {
        return descriptorCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t descriptorCount
     * }
     */
    public static int descriptorCount(MemorySegment struct) {
        return struct.get(descriptorCount$LAYOUT, descriptorCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t descriptorCount
     * }
     */
    public static void descriptorCount(MemorySegment struct, int fieldValue) {
        struct.set(descriptorCount$LAYOUT, descriptorCount$OFFSET, fieldValue);
    }

    private static final OfInt stageFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stageFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static final OfInt stageFlags$layout() {
        return stageFlags$LAYOUT;
    }

    private static final long stageFlags$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static final long stageFlags$offset() {
        return stageFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static int stageFlags(MemorySegment struct) {
        return struct.get(stageFlags$LAYOUT, stageFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static void stageFlags(MemorySegment struct, int fieldValue) {
        struct.set(stageFlags$LAYOUT, stageFlags$OFFSET, fieldValue);
    }

    private static final AddressLayout pImmutableSamplers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pImmutableSamplers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSampler *pImmutableSamplers
     * }
     */
    public static final AddressLayout pImmutableSamplers$layout() {
        return pImmutableSamplers$LAYOUT;
    }

    private static final long pImmutableSamplers$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSampler *pImmutableSamplers
     * }
     */
    public static final long pImmutableSamplers$offset() {
        return pImmutableSamplers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSampler *pImmutableSamplers
     * }
     */
    public static MemorySegment pImmutableSamplers(MemorySegment struct) {
        return struct.get(pImmutableSamplers$LAYOUT, pImmutableSamplers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSampler *pImmutableSamplers
     * }
     */
    public static void pImmutableSamplers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pImmutableSamplers$LAYOUT, pImmutableSamplers$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

