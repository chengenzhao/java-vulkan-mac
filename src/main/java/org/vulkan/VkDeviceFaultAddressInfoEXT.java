// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDeviceFaultAddressInfoEXT {
 *     VkDeviceFaultAddressTypeEXT addressType;
 *     VkDeviceAddress reportedAddress;
 *     VkDeviceSize addressPrecision;
 * }
 * }
 */
public class VkDeviceFaultAddressInfoEXT {

    VkDeviceFaultAddressInfoEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("addressType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("reportedAddress"),
        vulkan_h.C_LONG_LONG.withName("addressPrecision")
    ).withName("VkDeviceFaultAddressInfoEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt addressType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("addressType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceFaultAddressTypeEXT addressType
     * }
     */
    public static final OfInt addressType$layout() {
        return addressType$LAYOUT;
    }

    private static final long addressType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceFaultAddressTypeEXT addressType
     * }
     */
    public static final long addressType$offset() {
        return addressType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceFaultAddressTypeEXT addressType
     * }
     */
    public static int addressType(MemorySegment struct) {
        return struct.get(addressType$LAYOUT, addressType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceFaultAddressTypeEXT addressType
     * }
     */
    public static void addressType(MemorySegment struct, int fieldValue) {
        struct.set(addressType$LAYOUT, addressType$OFFSET, fieldValue);
    }

    private static final OfLong reportedAddress$LAYOUT = (OfLong)$LAYOUT.select(groupElement("reportedAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceAddress reportedAddress
     * }
     */
    public static final OfLong reportedAddress$layout() {
        return reportedAddress$LAYOUT;
    }

    private static final long reportedAddress$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceAddress reportedAddress
     * }
     */
    public static final long reportedAddress$offset() {
        return reportedAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceAddress reportedAddress
     * }
     */
    public static long reportedAddress(MemorySegment struct) {
        return struct.get(reportedAddress$LAYOUT, reportedAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceAddress reportedAddress
     * }
     */
    public static void reportedAddress(MemorySegment struct, long fieldValue) {
        struct.set(reportedAddress$LAYOUT, reportedAddress$OFFSET, fieldValue);
    }

    private static final OfLong addressPrecision$LAYOUT = (OfLong)$LAYOUT.select(groupElement("addressPrecision"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize addressPrecision
     * }
     */
    public static final OfLong addressPrecision$layout() {
        return addressPrecision$LAYOUT;
    }

    private static final long addressPrecision$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize addressPrecision
     * }
     */
    public static final long addressPrecision$offset() {
        return addressPrecision$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize addressPrecision
     * }
     */
    public static long addressPrecision(MemorySegment struct) {
        return struct.get(addressPrecision$LAYOUT, addressPrecision$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize addressPrecision
     * }
     */
    public static void addressPrecision(MemorySegment struct, long fieldValue) {
        struct.set(addressPrecision$LAYOUT, addressPrecision$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

