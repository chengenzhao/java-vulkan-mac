// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT {
 *     uint32_t headerSize;
 *     VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
 *     uint32_t vendorID;
 *     uint32_t deviceID;
 *     uint32_t driverVersion;
 *     uint8_t pipelineCacheUUID[16];
 *     uint32_t applicationNameOffset;
 *     uint32_t applicationVersion;
 *     uint32_t engineNameOffset;
 *     uint32_t engineVersion;
 *     uint32_t apiVersion;
 * }
 * }
 */
public class VkDeviceFaultVendorBinaryHeaderVersionOneEXT {

    VkDeviceFaultVendorBinaryHeaderVersionOneEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("headerSize"),
        vulkan_h.C_INT.withName("headerVersion"),
        vulkan_h.C_INT.withName("vendorID"),
        vulkan_h.C_INT.withName("deviceID"),
        vulkan_h.C_INT.withName("driverVersion"),
        MemoryLayout.sequenceLayout(16, vulkan_h.C_CHAR).withName("pipelineCacheUUID"),
        vulkan_h.C_INT.withName("applicationNameOffset"),
        vulkan_h.C_INT.withName("applicationVersion"),
        vulkan_h.C_INT.withName("engineNameOffset"),
        vulkan_h.C_INT.withName("engineVersion"),
        vulkan_h.C_INT.withName("apiVersion")
    ).withName("VkDeviceFaultVendorBinaryHeaderVersionOneEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt headerSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("headerSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t headerSize
     * }
     */
    public static final OfInt headerSize$layout() {
        return headerSize$LAYOUT;
    }

    private static final long headerSize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t headerSize
     * }
     */
    public static final long headerSize$offset() {
        return headerSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t headerSize
     * }
     */
    public static int headerSize(MemorySegment struct) {
        return struct.get(headerSize$LAYOUT, headerSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t headerSize
     * }
     */
    public static void headerSize(MemorySegment struct, int fieldValue) {
        struct.set(headerSize$LAYOUT, headerSize$OFFSET, fieldValue);
    }

    private static final OfInt headerVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("headerVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion
     * }
     */
    public static final OfInt headerVersion$layout() {
        return headerVersion$LAYOUT;
    }

    private static final long headerVersion$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion
     * }
     */
    public static final long headerVersion$offset() {
        return headerVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion
     * }
     */
    public static int headerVersion(MemorySegment struct) {
        return struct.get(headerVersion$LAYOUT, headerVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion
     * }
     */
    public static void headerVersion(MemorySegment struct, int fieldValue) {
        struct.set(headerVersion$LAYOUT, headerVersion$OFFSET, fieldValue);
    }

    private static final OfInt vendorID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vendorID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static final OfInt vendorID$layout() {
        return vendorID$LAYOUT;
    }

    private static final long vendorID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static final long vendorID$offset() {
        return vendorID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static int vendorID(MemorySegment struct) {
        return struct.get(vendorID$LAYOUT, vendorID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static void vendorID(MemorySegment struct, int fieldValue) {
        struct.set(vendorID$LAYOUT, vendorID$OFFSET, fieldValue);
    }

    private static final OfInt deviceID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deviceID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static final OfInt deviceID$layout() {
        return deviceID$LAYOUT;
    }

    private static final long deviceID$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static final long deviceID$offset() {
        return deviceID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static int deviceID(MemorySegment struct) {
        return struct.get(deviceID$LAYOUT, deviceID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static void deviceID(MemorySegment struct, int fieldValue) {
        struct.set(deviceID$LAYOUT, deviceID$OFFSET, fieldValue);
    }

    private static final OfInt driverVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("driverVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static final OfInt driverVersion$layout() {
        return driverVersion$LAYOUT;
    }

    private static final long driverVersion$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static final long driverVersion$offset() {
        return driverVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static int driverVersion(MemorySegment struct) {
        return struct.get(driverVersion$LAYOUT, driverVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static void driverVersion(MemorySegment struct, int fieldValue) {
        struct.set(driverVersion$LAYOUT, driverVersion$OFFSET, fieldValue);
    }

    private static final SequenceLayout pipelineCacheUUID$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pipelineCacheUUID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static final SequenceLayout pipelineCacheUUID$layout() {
        return pipelineCacheUUID$LAYOUT;
    }

    private static final long pipelineCacheUUID$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static final long pipelineCacheUUID$offset() {
        return pipelineCacheUUID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static MemorySegment pipelineCacheUUID(MemorySegment struct) {
        return struct.asSlice(pipelineCacheUUID$OFFSET, pipelineCacheUUID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static void pipelineCacheUUID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pipelineCacheUUID$OFFSET, pipelineCacheUUID$LAYOUT.byteSize());
    }

    private static long[] pipelineCacheUUID$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static long[] pipelineCacheUUID$dimensions() {
        return pipelineCacheUUID$DIMS;
    }
    private static final VarHandle pipelineCacheUUID$ELEM_HANDLE = pipelineCacheUUID$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static byte pipelineCacheUUID(MemorySegment struct, long index0) {
        return (byte)pipelineCacheUUID$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static void pipelineCacheUUID(MemorySegment struct, long index0, byte fieldValue) {
        pipelineCacheUUID$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt applicationNameOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("applicationNameOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t applicationNameOffset
     * }
     */
    public static final OfInt applicationNameOffset$layout() {
        return applicationNameOffset$LAYOUT;
    }

    private static final long applicationNameOffset$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t applicationNameOffset
     * }
     */
    public static final long applicationNameOffset$offset() {
        return applicationNameOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t applicationNameOffset
     * }
     */
    public static int applicationNameOffset(MemorySegment struct) {
        return struct.get(applicationNameOffset$LAYOUT, applicationNameOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t applicationNameOffset
     * }
     */
    public static void applicationNameOffset(MemorySegment struct, int fieldValue) {
        struct.set(applicationNameOffset$LAYOUT, applicationNameOffset$OFFSET, fieldValue);
    }

    private static final OfInt applicationVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("applicationVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t applicationVersion
     * }
     */
    public static final OfInt applicationVersion$layout() {
        return applicationVersion$LAYOUT;
    }

    private static final long applicationVersion$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t applicationVersion
     * }
     */
    public static final long applicationVersion$offset() {
        return applicationVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t applicationVersion
     * }
     */
    public static int applicationVersion(MemorySegment struct) {
        return struct.get(applicationVersion$LAYOUT, applicationVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t applicationVersion
     * }
     */
    public static void applicationVersion(MemorySegment struct, int fieldValue) {
        struct.set(applicationVersion$LAYOUT, applicationVersion$OFFSET, fieldValue);
    }

    private static final OfInt engineNameOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("engineNameOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t engineNameOffset
     * }
     */
    public static final OfInt engineNameOffset$layout() {
        return engineNameOffset$LAYOUT;
    }

    private static final long engineNameOffset$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t engineNameOffset
     * }
     */
    public static final long engineNameOffset$offset() {
        return engineNameOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t engineNameOffset
     * }
     */
    public static int engineNameOffset(MemorySegment struct) {
        return struct.get(engineNameOffset$LAYOUT, engineNameOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t engineNameOffset
     * }
     */
    public static void engineNameOffset(MemorySegment struct, int fieldValue) {
        struct.set(engineNameOffset$LAYOUT, engineNameOffset$OFFSET, fieldValue);
    }

    private static final OfInt engineVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("engineVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t engineVersion
     * }
     */
    public static final OfInt engineVersion$layout() {
        return engineVersion$LAYOUT;
    }

    private static final long engineVersion$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t engineVersion
     * }
     */
    public static final long engineVersion$offset() {
        return engineVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t engineVersion
     * }
     */
    public static int engineVersion(MemorySegment struct) {
        return struct.get(engineVersion$LAYOUT, engineVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t engineVersion
     * }
     */
    public static void engineVersion(MemorySegment struct, int fieldValue) {
        struct.set(engineVersion$LAYOUT, engineVersion$OFFSET, fieldValue);
    }

    private static final OfInt apiVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("apiVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static final OfInt apiVersion$layout() {
        return apiVersion$LAYOUT;
    }

    private static final long apiVersion$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static final long apiVersion$offset() {
        return apiVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static int apiVersion(MemorySegment struct) {
        return struct.get(apiVersion$LAYOUT, apiVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static void apiVersion(MemorySegment struct, int fieldValue) {
        struct.set(apiVersion$LAYOUT, apiVersion$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

