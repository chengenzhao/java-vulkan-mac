// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDeviceFaultVendorInfoEXT {
 *     char description[256];
 *     uint64_t vendorFaultCode;
 *     uint64_t vendorFaultData;
 * }
 * }
 */
public class VkDeviceFaultVendorInfoEXT {

    VkDeviceFaultVendorInfoEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(256, vulkan_h.C_CHAR).withName("description"),
        vulkan_h.C_LONG_LONG.withName("vendorFaultCode"),
        vulkan_h.C_LONG_LONG.withName("vendorFaultData")
    ).withName("VkDeviceFaultVendorInfoEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout description$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("description"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char description[256]
     * }
     */
    public static final SequenceLayout description$layout() {
        return description$LAYOUT;
    }

    private static final long description$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char description[256]
     * }
     */
    public static final long description$offset() {
        return description$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char description[256]
     * }
     */
    public static MemorySegment description(MemorySegment struct) {
        return struct.asSlice(description$OFFSET, description$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char description[256]
     * }
     */
    public static void description(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, description$OFFSET, description$LAYOUT.byteSize());
    }

    private static long[] description$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char description[256]
     * }
     */
    public static long[] description$dimensions() {
        return description$DIMS;
    }
    private static final VarHandle description$ELEM_HANDLE = description$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char description[256]
     * }
     */
    public static byte description(MemorySegment struct, long index0) {
        return (byte)description$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char description[256]
     * }
     */
    public static void description(MemorySegment struct, long index0, byte fieldValue) {
        description$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfLong vendorFaultCode$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vendorFaultCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultCode
     * }
     */
    public static final OfLong vendorFaultCode$layout() {
        return vendorFaultCode$LAYOUT;
    }

    private static final long vendorFaultCode$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultCode
     * }
     */
    public static final long vendorFaultCode$offset() {
        return vendorFaultCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultCode
     * }
     */
    public static long vendorFaultCode(MemorySegment struct) {
        return struct.get(vendorFaultCode$LAYOUT, vendorFaultCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultCode
     * }
     */
    public static void vendorFaultCode(MemorySegment struct, long fieldValue) {
        struct.set(vendorFaultCode$LAYOUT, vendorFaultCode$OFFSET, fieldValue);
    }

    private static final OfLong vendorFaultData$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vendorFaultData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultData
     * }
     */
    public static final OfLong vendorFaultData$layout() {
        return vendorFaultData$LAYOUT;
    }

    private static final long vendorFaultData$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultData
     * }
     */
    public static final long vendorFaultData$offset() {
        return vendorFaultData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultData
     * }
     */
    public static long vendorFaultData(MemorySegment struct) {
        return struct.get(vendorFaultData$LAYOUT, vendorFaultData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t vendorFaultData
     * }
     */
    public static void vendorFaultData(MemorySegment struct, long fieldValue) {
        struct.set(vendorFaultData$LAYOUT, vendorFaultData$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

