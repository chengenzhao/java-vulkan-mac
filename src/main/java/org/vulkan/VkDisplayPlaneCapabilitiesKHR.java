// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDisplayPlaneCapabilitiesKHR {
 *     VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
 *     VkOffset2D minSrcPosition;
 *     VkOffset2D maxSrcPosition;
 *     VkExtent2D minSrcExtent;
 *     VkExtent2D maxSrcExtent;
 *     VkOffset2D minDstPosition;
 *     VkOffset2D maxDstPosition;
 *     VkExtent2D minDstExtent;
 *     VkExtent2D maxDstExtent;
 * }
 * }
 */
public class VkDisplayPlaneCapabilitiesKHR {

    VkDisplayPlaneCapabilitiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("supportedAlpha"),
        VkOffset2D.layout().withName("minSrcPosition"),
        VkOffset2D.layout().withName("maxSrcPosition"),
        VkExtent2D.layout().withName("minSrcExtent"),
        VkExtent2D.layout().withName("maxSrcExtent"),
        VkOffset2D.layout().withName("minDstPosition"),
        VkOffset2D.layout().withName("maxDstPosition"),
        VkExtent2D.layout().withName("minDstExtent"),
        VkExtent2D.layout().withName("maxDstExtent")
    ).withName("VkDisplayPlaneCapabilitiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt supportedAlpha$LAYOUT = (OfInt)$LAYOUT.select(groupElement("supportedAlpha"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDisplayPlaneAlphaFlagsKHR supportedAlpha
     * }
     */
    public static final OfInt supportedAlpha$layout() {
        return supportedAlpha$LAYOUT;
    }

    private static final long supportedAlpha$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDisplayPlaneAlphaFlagsKHR supportedAlpha
     * }
     */
    public static final long supportedAlpha$offset() {
        return supportedAlpha$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDisplayPlaneAlphaFlagsKHR supportedAlpha
     * }
     */
    public static int supportedAlpha(MemorySegment struct) {
        return struct.get(supportedAlpha$LAYOUT, supportedAlpha$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDisplayPlaneAlphaFlagsKHR supportedAlpha
     * }
     */
    public static void supportedAlpha(MemorySegment struct, int fieldValue) {
        struct.set(supportedAlpha$LAYOUT, supportedAlpha$OFFSET, fieldValue);
    }

    private static final GroupLayout minSrcPosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("minSrcPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOffset2D minSrcPosition
     * }
     */
    public static final GroupLayout minSrcPosition$layout() {
        return minSrcPosition$LAYOUT;
    }

    private static final long minSrcPosition$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOffset2D minSrcPosition
     * }
     */
    public static final long minSrcPosition$offset() {
        return minSrcPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOffset2D minSrcPosition
     * }
     */
    public static MemorySegment minSrcPosition(MemorySegment struct) {
        return struct.asSlice(minSrcPosition$OFFSET, minSrcPosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOffset2D minSrcPosition
     * }
     */
    public static void minSrcPosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, minSrcPosition$OFFSET, minSrcPosition$LAYOUT.byteSize());
    }

    private static final GroupLayout maxSrcPosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("maxSrcPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOffset2D maxSrcPosition
     * }
     */
    public static final GroupLayout maxSrcPosition$layout() {
        return maxSrcPosition$LAYOUT;
    }

    private static final long maxSrcPosition$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOffset2D maxSrcPosition
     * }
     */
    public static final long maxSrcPosition$offset() {
        return maxSrcPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOffset2D maxSrcPosition
     * }
     */
    public static MemorySegment maxSrcPosition(MemorySegment struct) {
        return struct.asSlice(maxSrcPosition$OFFSET, maxSrcPosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOffset2D maxSrcPosition
     * }
     */
    public static void maxSrcPosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSrcPosition$OFFSET, maxSrcPosition$LAYOUT.byteSize());
    }

    private static final GroupLayout minSrcExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("minSrcExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D minSrcExtent
     * }
     */
    public static final GroupLayout minSrcExtent$layout() {
        return minSrcExtent$LAYOUT;
    }

    private static final long minSrcExtent$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D minSrcExtent
     * }
     */
    public static final long minSrcExtent$offset() {
        return minSrcExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D minSrcExtent
     * }
     */
    public static MemorySegment minSrcExtent(MemorySegment struct) {
        return struct.asSlice(minSrcExtent$OFFSET, minSrcExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D minSrcExtent
     * }
     */
    public static void minSrcExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, minSrcExtent$OFFSET, minSrcExtent$LAYOUT.byteSize());
    }

    private static final GroupLayout maxSrcExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("maxSrcExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D maxSrcExtent
     * }
     */
    public static final GroupLayout maxSrcExtent$layout() {
        return maxSrcExtent$LAYOUT;
    }

    private static final long maxSrcExtent$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D maxSrcExtent
     * }
     */
    public static final long maxSrcExtent$offset() {
        return maxSrcExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D maxSrcExtent
     * }
     */
    public static MemorySegment maxSrcExtent(MemorySegment struct) {
        return struct.asSlice(maxSrcExtent$OFFSET, maxSrcExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D maxSrcExtent
     * }
     */
    public static void maxSrcExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxSrcExtent$OFFSET, maxSrcExtent$LAYOUT.byteSize());
    }

    private static final GroupLayout minDstPosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("minDstPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOffset2D minDstPosition
     * }
     */
    public static final GroupLayout minDstPosition$layout() {
        return minDstPosition$LAYOUT;
    }

    private static final long minDstPosition$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOffset2D minDstPosition
     * }
     */
    public static final long minDstPosition$offset() {
        return minDstPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOffset2D minDstPosition
     * }
     */
    public static MemorySegment minDstPosition(MemorySegment struct) {
        return struct.asSlice(minDstPosition$OFFSET, minDstPosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOffset2D minDstPosition
     * }
     */
    public static void minDstPosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, minDstPosition$OFFSET, minDstPosition$LAYOUT.byteSize());
    }

    private static final GroupLayout maxDstPosition$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("maxDstPosition"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOffset2D maxDstPosition
     * }
     */
    public static final GroupLayout maxDstPosition$layout() {
        return maxDstPosition$LAYOUT;
    }

    private static final long maxDstPosition$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOffset2D maxDstPosition
     * }
     */
    public static final long maxDstPosition$offset() {
        return maxDstPosition$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOffset2D maxDstPosition
     * }
     */
    public static MemorySegment maxDstPosition(MemorySegment struct) {
        return struct.asSlice(maxDstPosition$OFFSET, maxDstPosition$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOffset2D maxDstPosition
     * }
     */
    public static void maxDstPosition(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxDstPosition$OFFSET, maxDstPosition$LAYOUT.byteSize());
    }

    private static final GroupLayout minDstExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("minDstExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D minDstExtent
     * }
     */
    public static final GroupLayout minDstExtent$layout() {
        return minDstExtent$LAYOUT;
    }

    private static final long minDstExtent$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D minDstExtent
     * }
     */
    public static final long minDstExtent$offset() {
        return minDstExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D minDstExtent
     * }
     */
    public static MemorySegment minDstExtent(MemorySegment struct) {
        return struct.asSlice(minDstExtent$OFFSET, minDstExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D minDstExtent
     * }
     */
    public static void minDstExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, minDstExtent$OFFSET, minDstExtent$LAYOUT.byteSize());
    }

    private static final GroupLayout maxDstExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("maxDstExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D maxDstExtent
     * }
     */
    public static final GroupLayout maxDstExtent$layout() {
        return maxDstExtent$LAYOUT;
    }

    private static final long maxDstExtent$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D maxDstExtent
     * }
     */
    public static final long maxDstExtent$offset() {
        return maxDstExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D maxDstExtent
     * }
     */
    public static MemorySegment maxDstExtent(MemorySegment struct) {
        return struct.asSlice(maxDstExtent$OFFSET, maxDstExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D maxDstExtent
     * }
     */
    public static void maxDstExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxDstExtent$OFFSET, maxDstExtent$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

