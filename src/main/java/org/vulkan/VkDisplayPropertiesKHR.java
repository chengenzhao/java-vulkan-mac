// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkDisplayPropertiesKHR {
 *     VkDisplayKHR display;
 *     const char *displayName;
 *     VkExtent2D physicalDimensions;
 *     VkExtent2D physicalResolution;
 *     VkSurfaceTransformFlagsKHR supportedTransforms;
 *     VkBool32 planeReorderPossible;
 *     VkBool32 persistentContent;
 * }
 * }
 */
public class VkDisplayPropertiesKHR {

    VkDisplayPropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_POINTER.withName("display"),
        vulkan_h.C_POINTER.withName("displayName"),
        VkExtent2D.layout().withName("physicalDimensions"),
        VkExtent2D.layout().withName("physicalResolution"),
        vulkan_h.C_INT.withName("supportedTransforms"),
        vulkan_h.C_INT.withName("planeReorderPossible"),
        vulkan_h.C_INT.withName("persistentContent"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkDisplayPropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout display$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("display"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDisplayKHR display
     * }
     */
    public static final AddressLayout display$layout() {
        return display$LAYOUT;
    }

    private static final long display$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDisplayKHR display
     * }
     */
    public static final long display$offset() {
        return display$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDisplayKHR display
     * }
     */
    public static MemorySegment display(MemorySegment struct) {
        return struct.get(display$LAYOUT, display$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDisplayKHR display
     * }
     */
    public static void display(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(display$LAYOUT, display$OFFSET, fieldValue);
    }

    private static final AddressLayout displayName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("displayName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *displayName
     * }
     */
    public static final AddressLayout displayName$layout() {
        return displayName$LAYOUT;
    }

    private static final long displayName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *displayName
     * }
     */
    public static final long displayName$offset() {
        return displayName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *displayName
     * }
     */
    public static MemorySegment displayName(MemorySegment struct) {
        return struct.get(displayName$LAYOUT, displayName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *displayName
     * }
     */
    public static void displayName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(displayName$LAYOUT, displayName$OFFSET, fieldValue);
    }

    private static final GroupLayout physicalDimensions$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("physicalDimensions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D physicalDimensions
     * }
     */
    public static final GroupLayout physicalDimensions$layout() {
        return physicalDimensions$LAYOUT;
    }

    private static final long physicalDimensions$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D physicalDimensions
     * }
     */
    public static final long physicalDimensions$offset() {
        return physicalDimensions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D physicalDimensions
     * }
     */
    public static MemorySegment physicalDimensions(MemorySegment struct) {
        return struct.asSlice(physicalDimensions$OFFSET, physicalDimensions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D physicalDimensions
     * }
     */
    public static void physicalDimensions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, physicalDimensions$OFFSET, physicalDimensions$LAYOUT.byteSize());
    }

    private static final GroupLayout physicalResolution$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("physicalResolution"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D physicalResolution
     * }
     */
    public static final GroupLayout physicalResolution$layout() {
        return physicalResolution$LAYOUT;
    }

    private static final long physicalResolution$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D physicalResolution
     * }
     */
    public static final long physicalResolution$offset() {
        return physicalResolution$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D physicalResolution
     * }
     */
    public static MemorySegment physicalResolution(MemorySegment struct) {
        return struct.asSlice(physicalResolution$OFFSET, physicalResolution$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D physicalResolution
     * }
     */
    public static void physicalResolution(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, physicalResolution$OFFSET, physicalResolution$LAYOUT.byteSize());
    }

    private static final OfInt supportedTransforms$LAYOUT = (OfInt)$LAYOUT.select(groupElement("supportedTransforms"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSurfaceTransformFlagsKHR supportedTransforms
     * }
     */
    public static final OfInt supportedTransforms$layout() {
        return supportedTransforms$LAYOUT;
    }

    private static final long supportedTransforms$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSurfaceTransformFlagsKHR supportedTransforms
     * }
     */
    public static final long supportedTransforms$offset() {
        return supportedTransforms$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSurfaceTransformFlagsKHR supportedTransforms
     * }
     */
    public static int supportedTransforms(MemorySegment struct) {
        return struct.get(supportedTransforms$LAYOUT, supportedTransforms$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSurfaceTransformFlagsKHR supportedTransforms
     * }
     */
    public static void supportedTransforms(MemorySegment struct, int fieldValue) {
        struct.set(supportedTransforms$LAYOUT, supportedTransforms$OFFSET, fieldValue);
    }

    private static final OfInt planeReorderPossible$LAYOUT = (OfInt)$LAYOUT.select(groupElement("planeReorderPossible"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 planeReorderPossible
     * }
     */
    public static final OfInt planeReorderPossible$layout() {
        return planeReorderPossible$LAYOUT;
    }

    private static final long planeReorderPossible$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 planeReorderPossible
     * }
     */
    public static final long planeReorderPossible$offset() {
        return planeReorderPossible$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 planeReorderPossible
     * }
     */
    public static int planeReorderPossible(MemorySegment struct) {
        return struct.get(planeReorderPossible$LAYOUT, planeReorderPossible$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 planeReorderPossible
     * }
     */
    public static void planeReorderPossible(MemorySegment struct, int fieldValue) {
        struct.set(planeReorderPossible$LAYOUT, planeReorderPossible$OFFSET, fieldValue);
    }

    private static final OfInt persistentContent$LAYOUT = (OfInt)$LAYOUT.select(groupElement("persistentContent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 persistentContent
     * }
     */
    public static final OfInt persistentContent$layout() {
        return persistentContent$LAYOUT;
    }

    private static final long persistentContent$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 persistentContent
     * }
     */
    public static final long persistentContent$offset() {
        return persistentContent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 persistentContent
     * }
     */
    public static int persistentContent(MemorySegment struct) {
        return struct.get(persistentContent$LAYOUT, persistentContent$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 persistentContent
     * }
     */
    public static void persistentContent(MemorySegment struct, int fieldValue) {
        struct.set(persistentContent$LAYOUT, persistentContent$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

