// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkExternalImageFormatPropertiesNV {
 *     VkImageFormatProperties imageFormatProperties;
 *     VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
 *     VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
 *     VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
 * }
 * }
 */
public class VkExternalImageFormatPropertiesNV {

    VkExternalImageFormatPropertiesNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        VkImageFormatProperties.layout().withName("imageFormatProperties"),
        vulkan_h.C_INT.withName("externalMemoryFeatures"),
        vulkan_h.C_INT.withName("exportFromImportedHandleTypes"),
        vulkan_h.C_INT.withName("compatibleHandleTypes"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkExternalImageFormatPropertiesNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout imageFormatProperties$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("imageFormatProperties"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageFormatProperties imageFormatProperties
     * }
     */
    public static final GroupLayout imageFormatProperties$layout() {
        return imageFormatProperties$LAYOUT;
    }

    private static final long imageFormatProperties$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageFormatProperties imageFormatProperties
     * }
     */
    public static final long imageFormatProperties$offset() {
        return imageFormatProperties$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageFormatProperties imageFormatProperties
     * }
     */
    public static MemorySegment imageFormatProperties(MemorySegment struct) {
        return struct.asSlice(imageFormatProperties$OFFSET, imageFormatProperties$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageFormatProperties imageFormatProperties
     * }
     */
    public static void imageFormatProperties(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, imageFormatProperties$OFFSET, imageFormatProperties$LAYOUT.byteSize());
    }

    private static final OfInt externalMemoryFeatures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("externalMemoryFeatures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExternalMemoryFeatureFlagsNV externalMemoryFeatures
     * }
     */
    public static final OfInt externalMemoryFeatures$layout() {
        return externalMemoryFeatures$LAYOUT;
    }

    private static final long externalMemoryFeatures$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExternalMemoryFeatureFlagsNV externalMemoryFeatures
     * }
     */
    public static final long externalMemoryFeatures$offset() {
        return externalMemoryFeatures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExternalMemoryFeatureFlagsNV externalMemoryFeatures
     * }
     */
    public static int externalMemoryFeatures(MemorySegment struct) {
        return struct.get(externalMemoryFeatures$LAYOUT, externalMemoryFeatures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExternalMemoryFeatureFlagsNV externalMemoryFeatures
     * }
     */
    public static void externalMemoryFeatures(MemorySegment struct, int fieldValue) {
        struct.set(externalMemoryFeatures$LAYOUT, externalMemoryFeatures$OFFSET, fieldValue);
    }

    private static final OfInt exportFromImportedHandleTypes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("exportFromImportedHandleTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes
     * }
     */
    public static final OfInt exportFromImportedHandleTypes$layout() {
        return exportFromImportedHandleTypes$LAYOUT;
    }

    private static final long exportFromImportedHandleTypes$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes
     * }
     */
    public static final long exportFromImportedHandleTypes$offset() {
        return exportFromImportedHandleTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes
     * }
     */
    public static int exportFromImportedHandleTypes(MemorySegment struct) {
        return struct.get(exportFromImportedHandleTypes$LAYOUT, exportFromImportedHandleTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes
     * }
     */
    public static void exportFromImportedHandleTypes(MemorySegment struct, int fieldValue) {
        struct.set(exportFromImportedHandleTypes$LAYOUT, exportFromImportedHandleTypes$OFFSET, fieldValue);
    }

    private static final OfInt compatibleHandleTypes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compatibleHandleTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes
     * }
     */
    public static final OfInt compatibleHandleTypes$layout() {
        return compatibleHandleTypes$LAYOUT;
    }

    private static final long compatibleHandleTypes$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes
     * }
     */
    public static final long compatibleHandleTypes$offset() {
        return compatibleHandleTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes
     * }
     */
    public static int compatibleHandleTypes(MemorySegment struct) {
        return struct.get(compatibleHandleTypes$LAYOUT, compatibleHandleTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes
     * }
     */
    public static void compatibleHandleTypes(MemorySegment struct, int fieldValue) {
        struct.set(compatibleHandleTypes$LAYOUT, compatibleHandleTypes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

