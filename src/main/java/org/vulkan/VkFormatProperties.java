// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkFormatProperties {
 *     VkFormatFeatureFlags linearTilingFeatures;
 *     VkFormatFeatureFlags optimalTilingFeatures;
 *     VkFormatFeatureFlags bufferFeatures;
 * }
 * }
 */
public class VkFormatProperties {

    VkFormatProperties() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("linearTilingFeatures"),
        vulkan_h.C_INT.withName("optimalTilingFeatures"),
        vulkan_h.C_INT.withName("bufferFeatures")
    ).withName("VkFormatProperties");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt linearTilingFeatures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("linearTilingFeatures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags linearTilingFeatures
     * }
     */
    public static final OfInt linearTilingFeatures$layout() {
        return linearTilingFeatures$LAYOUT;
    }

    private static final long linearTilingFeatures$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags linearTilingFeatures
     * }
     */
    public static final long linearTilingFeatures$offset() {
        return linearTilingFeatures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags linearTilingFeatures
     * }
     */
    public static int linearTilingFeatures(MemorySegment struct) {
        return struct.get(linearTilingFeatures$LAYOUT, linearTilingFeatures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags linearTilingFeatures
     * }
     */
    public static void linearTilingFeatures(MemorySegment struct, int fieldValue) {
        struct.set(linearTilingFeatures$LAYOUT, linearTilingFeatures$OFFSET, fieldValue);
    }

    private static final OfInt optimalTilingFeatures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("optimalTilingFeatures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags optimalTilingFeatures
     * }
     */
    public static final OfInt optimalTilingFeatures$layout() {
        return optimalTilingFeatures$LAYOUT;
    }

    private static final long optimalTilingFeatures$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags optimalTilingFeatures
     * }
     */
    public static final long optimalTilingFeatures$offset() {
        return optimalTilingFeatures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags optimalTilingFeatures
     * }
     */
    public static int optimalTilingFeatures(MemorySegment struct) {
        return struct.get(optimalTilingFeatures$LAYOUT, optimalTilingFeatures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags optimalTilingFeatures
     * }
     */
    public static void optimalTilingFeatures(MemorySegment struct, int fieldValue) {
        struct.set(optimalTilingFeatures$LAYOUT, optimalTilingFeatures$OFFSET, fieldValue);
    }

    private static final OfInt bufferFeatures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferFeatures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags bufferFeatures
     * }
     */
    public static final OfInt bufferFeatures$layout() {
        return bufferFeatures$LAYOUT;
    }

    private static final long bufferFeatures$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags bufferFeatures
     * }
     */
    public static final long bufferFeatures$offset() {
        return bufferFeatures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags bufferFeatures
     * }
     */
    public static int bufferFeatures(MemorySegment struct) {
        return struct.get(bufferFeatures$LAYOUT, bufferFeatures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormatFeatureFlags bufferFeatures
     * }
     */
    public static void bufferFeatures(MemorySegment struct, int fieldValue) {
        struct.set(bufferFeatures$LAYOUT, bufferFeatures$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

