// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkFrameBoundaryEXT {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkFrameBoundaryFlagsEXT flags;
 *     uint64_t frameID;
 *     uint32_t imageCount;
 *     const VkImage *pImages;
 *     uint32_t bufferCount;
 *     const VkBuffer *pBuffers;
 *     uint64_t tagName;
 *     size_t tagSize;
 *     const void *pTag;
 * }
 * }
 */
public class VkFrameBoundaryEXT {

    VkFrameBoundaryEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("frameID"),
        vulkan_h.C_INT.withName("imageCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pImages"),
        vulkan_h.C_INT.withName("bufferCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pBuffers"),
        vulkan_h.C_LONG_LONG.withName("tagName"),
        vulkan_h.C_LONG.withName("tagSize"),
        vulkan_h.C_POINTER.withName("pTag")
    ).withName("VkFrameBoundaryEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFrameBoundaryFlagsEXT flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFrameBoundaryFlagsEXT flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFrameBoundaryFlagsEXT flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFrameBoundaryFlagsEXT flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong frameID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("frameID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t frameID
     * }
     */
    public static final OfLong frameID$layout() {
        return frameID$LAYOUT;
    }

    private static final long frameID$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t frameID
     * }
     */
    public static final long frameID$offset() {
        return frameID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t frameID
     * }
     */
    public static long frameID(MemorySegment struct) {
        return struct.get(frameID$LAYOUT, frameID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t frameID
     * }
     */
    public static void frameID(MemorySegment struct, long fieldValue) {
        struct.set(frameID$LAYOUT, frameID$OFFSET, fieldValue);
    }

    private static final OfInt imageCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static final OfInt imageCount$layout() {
        return imageCount$LAYOUT;
    }

    private static final long imageCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static final long imageCount$offset() {
        return imageCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static int imageCount(MemorySegment struct) {
        return struct.get(imageCount$LAYOUT, imageCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imageCount
     * }
     */
    public static void imageCount(MemorySegment struct, int fieldValue) {
        struct.set(imageCount$LAYOUT, imageCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pImages$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkImage *pImages
     * }
     */
    public static final AddressLayout pImages$layout() {
        return pImages$LAYOUT;
    }

    private static final long pImages$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkImage *pImages
     * }
     */
    public static final long pImages$offset() {
        return pImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkImage *pImages
     * }
     */
    public static MemorySegment pImages(MemorySegment struct) {
        return struct.get(pImages$LAYOUT, pImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkImage *pImages
     * }
     */
    public static void pImages(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pImages$LAYOUT, pImages$OFFSET, fieldValue);
    }

    private static final OfInt bufferCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t bufferCount
     * }
     */
    public static final OfInt bufferCount$layout() {
        return bufferCount$LAYOUT;
    }

    private static final long bufferCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t bufferCount
     * }
     */
    public static final long bufferCount$offset() {
        return bufferCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t bufferCount
     * }
     */
    public static int bufferCount(MemorySegment struct) {
        return struct.get(bufferCount$LAYOUT, bufferCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t bufferCount
     * }
     */
    public static void bufferCount(MemorySegment struct, int fieldValue) {
        struct.set(bufferCount$LAYOUT, bufferCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pBuffers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkBuffer *pBuffers
     * }
     */
    public static final AddressLayout pBuffers$layout() {
        return pBuffers$LAYOUT;
    }

    private static final long pBuffers$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkBuffer *pBuffers
     * }
     */
    public static final long pBuffers$offset() {
        return pBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkBuffer *pBuffers
     * }
     */
    public static MemorySegment pBuffers(MemorySegment struct) {
        return struct.get(pBuffers$LAYOUT, pBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkBuffer *pBuffers
     * }
     */
    public static void pBuffers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pBuffers$LAYOUT, pBuffers$OFFSET, fieldValue);
    }

    private static final OfLong tagName$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tagName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t tagName
     * }
     */
    public static final OfLong tagName$layout() {
        return tagName$LAYOUT;
    }

    private static final long tagName$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t tagName
     * }
     */
    public static final long tagName$offset() {
        return tagName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t tagName
     * }
     */
    public static long tagName(MemorySegment struct) {
        return struct.get(tagName$LAYOUT, tagName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t tagName
     * }
     */
    public static void tagName(MemorySegment struct, long fieldValue) {
        struct.set(tagName$LAYOUT, tagName$OFFSET, fieldValue);
    }

    private static final OfLong tagSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("tagSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t tagSize
     * }
     */
    public static final OfLong tagSize$layout() {
        return tagSize$LAYOUT;
    }

    private static final long tagSize$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t tagSize
     * }
     */
    public static final long tagSize$offset() {
        return tagSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t tagSize
     * }
     */
    public static long tagSize(MemorySegment struct) {
        return struct.get(tagSize$LAYOUT, tagSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t tagSize
     * }
     */
    public static void tagSize(MemorySegment struct, long fieldValue) {
        struct.set(tagSize$LAYOUT, tagSize$OFFSET, fieldValue);
    }

    private static final AddressLayout pTag$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTag"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pTag
     * }
     */
    public static final AddressLayout pTag$layout() {
        return pTag$LAYOUT;
    }

    private static final long pTag$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pTag
     * }
     */
    public static final long pTag$offset() {
        return pTag$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pTag
     * }
     */
    public static MemorySegment pTag(MemorySegment struct) {
        return struct.get(pTag$LAYOUT, pTag$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pTag
     * }
     */
    public static void pTag(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTag$LAYOUT, pTag$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

