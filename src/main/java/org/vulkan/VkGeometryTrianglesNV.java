// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkGeometryTrianglesNV {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkBuffer vertexData;
 *     VkDeviceSize vertexOffset;
 *     uint32_t vertexCount;
 *     VkDeviceSize vertexStride;
 *     VkFormat vertexFormat;
 *     VkBuffer indexData;
 *     VkDeviceSize indexOffset;
 *     uint32_t indexCount;
 *     VkIndexType indexType;
 *     VkBuffer transformData;
 *     VkDeviceSize transformOffset;
 * }
 * }
 */
public class VkGeometryTrianglesNV {

    VkGeometryTrianglesNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_POINTER.withName("vertexData"),
        vulkan_h.C_LONG_LONG.withName("vertexOffset"),
        vulkan_h.C_INT.withName("vertexCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("vertexStride"),
        vulkan_h.C_INT.withName("vertexFormat"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("indexData"),
        vulkan_h.C_LONG_LONG.withName("indexOffset"),
        vulkan_h.C_INT.withName("indexCount"),
        vulkan_h.C_INT.withName("indexType"),
        vulkan_h.C_POINTER.withName("transformData"),
        vulkan_h.C_LONG_LONG.withName("transformOffset")
    ).withName("VkGeometryTrianglesNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final AddressLayout vertexData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("vertexData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBuffer vertexData
     * }
     */
    public static final AddressLayout vertexData$layout() {
        return vertexData$LAYOUT;
    }

    private static final long vertexData$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBuffer vertexData
     * }
     */
    public static final long vertexData$offset() {
        return vertexData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBuffer vertexData
     * }
     */
    public static MemorySegment vertexData(MemorySegment struct) {
        return struct.get(vertexData$LAYOUT, vertexData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBuffer vertexData
     * }
     */
    public static void vertexData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(vertexData$LAYOUT, vertexData$OFFSET, fieldValue);
    }

    private static final OfLong vertexOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vertexOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexOffset
     * }
     */
    public static final OfLong vertexOffset$layout() {
        return vertexOffset$LAYOUT;
    }

    private static final long vertexOffset$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexOffset
     * }
     */
    public static final long vertexOffset$offset() {
        return vertexOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexOffset
     * }
     */
    public static long vertexOffset(MemorySegment struct) {
        return struct.get(vertexOffset$LAYOUT, vertexOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexOffset
     * }
     */
    public static void vertexOffset(MemorySegment struct, long fieldValue) {
        struct.set(vertexOffset$LAYOUT, vertexOffset$OFFSET, fieldValue);
    }

    private static final OfInt vertexCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertexCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vertexCount
     * }
     */
    public static final OfInt vertexCount$layout() {
        return vertexCount$LAYOUT;
    }

    private static final long vertexCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vertexCount
     * }
     */
    public static final long vertexCount$offset() {
        return vertexCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vertexCount
     * }
     */
    public static int vertexCount(MemorySegment struct) {
        return struct.get(vertexCount$LAYOUT, vertexCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vertexCount
     * }
     */
    public static void vertexCount(MemorySegment struct, int fieldValue) {
        struct.set(vertexCount$LAYOUT, vertexCount$OFFSET, fieldValue);
    }

    private static final OfLong vertexStride$LAYOUT = (OfLong)$LAYOUT.select(groupElement("vertexStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexStride
     * }
     */
    public static final OfLong vertexStride$layout() {
        return vertexStride$LAYOUT;
    }

    private static final long vertexStride$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexStride
     * }
     */
    public static final long vertexStride$offset() {
        return vertexStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexStride
     * }
     */
    public static long vertexStride(MemorySegment struct) {
        return struct.get(vertexStride$LAYOUT, vertexStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize vertexStride
     * }
     */
    public static void vertexStride(MemorySegment struct, long fieldValue) {
        struct.set(vertexStride$LAYOUT, vertexStride$OFFSET, fieldValue);
    }

    private static final OfInt vertexFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertexFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat vertexFormat
     * }
     */
    public static final OfInt vertexFormat$layout() {
        return vertexFormat$LAYOUT;
    }

    private static final long vertexFormat$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat vertexFormat
     * }
     */
    public static final long vertexFormat$offset() {
        return vertexFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat vertexFormat
     * }
     */
    public static int vertexFormat(MemorySegment struct) {
        return struct.get(vertexFormat$LAYOUT, vertexFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat vertexFormat
     * }
     */
    public static void vertexFormat(MemorySegment struct, int fieldValue) {
        struct.set(vertexFormat$LAYOUT, vertexFormat$OFFSET, fieldValue);
    }

    private static final AddressLayout indexData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("indexData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBuffer indexData
     * }
     */
    public static final AddressLayout indexData$layout() {
        return indexData$LAYOUT;
    }

    private static final long indexData$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBuffer indexData
     * }
     */
    public static final long indexData$offset() {
        return indexData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBuffer indexData
     * }
     */
    public static MemorySegment indexData(MemorySegment struct) {
        return struct.get(indexData$LAYOUT, indexData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBuffer indexData
     * }
     */
    public static void indexData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(indexData$LAYOUT, indexData$OFFSET, fieldValue);
    }

    private static final OfLong indexOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("indexOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize indexOffset
     * }
     */
    public static final OfLong indexOffset$layout() {
        return indexOffset$LAYOUT;
    }

    private static final long indexOffset$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize indexOffset
     * }
     */
    public static final long indexOffset$offset() {
        return indexOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize indexOffset
     * }
     */
    public static long indexOffset(MemorySegment struct) {
        return struct.get(indexOffset$LAYOUT, indexOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize indexOffset
     * }
     */
    public static void indexOffset(MemorySegment struct, long fieldValue) {
        struct.set(indexOffset$LAYOUT, indexOffset$OFFSET, fieldValue);
    }

    private static final OfInt indexCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("indexCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t indexCount
     * }
     */
    public static final OfInt indexCount$layout() {
        return indexCount$LAYOUT;
    }

    private static final long indexCount$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t indexCount
     * }
     */
    public static final long indexCount$offset() {
        return indexCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t indexCount
     * }
     */
    public static int indexCount(MemorySegment struct) {
        return struct.get(indexCount$LAYOUT, indexCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t indexCount
     * }
     */
    public static void indexCount(MemorySegment struct, int fieldValue) {
        struct.set(indexCount$LAYOUT, indexCount$OFFSET, fieldValue);
    }

    private static final OfInt indexType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("indexType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static final OfInt indexType$layout() {
        return indexType$LAYOUT;
    }

    private static final long indexType$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static final long indexType$offset() {
        return indexType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static int indexType(MemorySegment struct) {
        return struct.get(indexType$LAYOUT, indexType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkIndexType indexType
     * }
     */
    public static void indexType(MemorySegment struct, int fieldValue) {
        struct.set(indexType$LAYOUT, indexType$OFFSET, fieldValue);
    }

    private static final AddressLayout transformData$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("transformData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBuffer transformData
     * }
     */
    public static final AddressLayout transformData$layout() {
        return transformData$LAYOUT;
    }

    private static final long transformData$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBuffer transformData
     * }
     */
    public static final long transformData$offset() {
        return transformData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBuffer transformData
     * }
     */
    public static MemorySegment transformData(MemorySegment struct) {
        return struct.get(transformData$LAYOUT, transformData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBuffer transformData
     * }
     */
    public static void transformData(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(transformData$LAYOUT, transformData$OFFSET, fieldValue);
    }

    private static final OfLong transformOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("transformOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize transformOffset
     * }
     */
    public static final OfLong transformOffset$layout() {
        return transformOffset$LAYOUT;
    }

    private static final long transformOffset$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize transformOffset
     * }
     */
    public static final long transformOffset$offset() {
        return transformOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize transformOffset
     * }
     */
    public static long transformOffset(MemorySegment struct) {
        return struct.get(transformOffset$LAYOUT, transformOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize transformOffset
     * }
     */
    public static void transformOffset(MemorySegment struct, long fieldValue) {
        struct.set(transformOffset$LAYOUT, transformOffset$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

