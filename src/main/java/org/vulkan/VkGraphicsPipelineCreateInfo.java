// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkGraphicsPipelineCreateInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkPipelineCreateFlags flags;
 *     uint32_t stageCount;
 *     const VkPipelineShaderStageCreateInfo *pStages;
 *     const VkPipelineVertexInputStateCreateInfo *pVertexInputState;
 *     const VkPipelineInputAssemblyStateCreateInfo *pInputAssemblyState;
 *     const VkPipelineTessellationStateCreateInfo *pTessellationState;
 *     const VkPipelineViewportStateCreateInfo *pViewportState;
 *     const VkPipelineRasterizationStateCreateInfo *pRasterizationState;
 *     const VkPipelineMultisampleStateCreateInfo *pMultisampleState;
 *     const VkPipelineDepthStencilStateCreateInfo *pDepthStencilState;
 *     const VkPipelineColorBlendStateCreateInfo *pColorBlendState;
 *     const VkPipelineDynamicStateCreateInfo *pDynamicState;
 *     VkPipelineLayout layout;
 *     VkRenderPass renderPass;
 *     uint32_t subpass;
 *     VkPipeline basePipelineHandle;
 *     int32_t basePipelineIndex;
 * }
 * }
 */
public class VkGraphicsPipelineCreateInfo {

    VkGraphicsPipelineCreateInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("stageCount"),
        vulkan_h.C_POINTER.withName("pStages"),
        vulkan_h.C_POINTER.withName("pVertexInputState"),
        vulkan_h.C_POINTER.withName("pInputAssemblyState"),
        vulkan_h.C_POINTER.withName("pTessellationState"),
        vulkan_h.C_POINTER.withName("pViewportState"),
        vulkan_h.C_POINTER.withName("pRasterizationState"),
        vulkan_h.C_POINTER.withName("pMultisampleState"),
        vulkan_h.C_POINTER.withName("pDepthStencilState"),
        vulkan_h.C_POINTER.withName("pColorBlendState"),
        vulkan_h.C_POINTER.withName("pDynamicState"),
        vulkan_h.C_POINTER.withName("layout"),
        vulkan_h.C_POINTER.withName("renderPass"),
        vulkan_h.C_INT.withName("subpass"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("basePipelineHandle"),
        vulkan_h.C_INT.withName("basePipelineIndex"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkGraphicsPipelineCreateInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt stageCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stageCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static final OfInt stageCount$layout() {
        return stageCount$LAYOUT;
    }

    private static final long stageCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static final long stageCount$offset() {
        return stageCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static int stageCount(MemorySegment struct) {
        return struct.get(stageCount$LAYOUT, stageCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static void stageCount(MemorySegment struct, int fieldValue) {
        struct.set(stageCount$LAYOUT, stageCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pStages$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pStages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static final AddressLayout pStages$layout() {
        return pStages$LAYOUT;
    }

    private static final long pStages$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static final long pStages$offset() {
        return pStages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static MemorySegment pStages(MemorySegment struct) {
        return struct.get(pStages$LAYOUT, pStages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static void pStages(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pStages$LAYOUT, pStages$OFFSET, fieldValue);
    }

    private static final AddressLayout pVertexInputState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pVertexInputState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static final AddressLayout pVertexInputState$layout() {
        return pVertexInputState$LAYOUT;
    }

    private static final long pVertexInputState$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static final long pVertexInputState$offset() {
        return pVertexInputState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static MemorySegment pVertexInputState(MemorySegment struct) {
        return struct.get(pVertexInputState$LAYOUT, pVertexInputState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static void pVertexInputState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pVertexInputState$LAYOUT, pVertexInputState$OFFSET, fieldValue);
    }

    private static final AddressLayout pInputAssemblyState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pInputAssemblyState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineInputAssemblyStateCreateInfo *pInputAssemblyState
     * }
     */
    public static final AddressLayout pInputAssemblyState$layout() {
        return pInputAssemblyState$LAYOUT;
    }

    private static final long pInputAssemblyState$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineInputAssemblyStateCreateInfo *pInputAssemblyState
     * }
     */
    public static final long pInputAssemblyState$offset() {
        return pInputAssemblyState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineInputAssemblyStateCreateInfo *pInputAssemblyState
     * }
     */
    public static MemorySegment pInputAssemblyState(MemorySegment struct) {
        return struct.get(pInputAssemblyState$LAYOUT, pInputAssemblyState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineInputAssemblyStateCreateInfo *pInputAssemblyState
     * }
     */
    public static void pInputAssemblyState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pInputAssemblyState$LAYOUT, pInputAssemblyState$OFFSET, fieldValue);
    }

    private static final AddressLayout pTessellationState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTessellationState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static final AddressLayout pTessellationState$layout() {
        return pTessellationState$LAYOUT;
    }

    private static final long pTessellationState$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static final long pTessellationState$offset() {
        return pTessellationState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static MemorySegment pTessellationState(MemorySegment struct) {
        return struct.get(pTessellationState$LAYOUT, pTessellationState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static void pTessellationState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTessellationState$LAYOUT, pTessellationState$OFFSET, fieldValue);
    }

    private static final AddressLayout pViewportState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pViewportState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineViewportStateCreateInfo *pViewportState
     * }
     */
    public static final AddressLayout pViewportState$layout() {
        return pViewportState$LAYOUT;
    }

    private static final long pViewportState$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineViewportStateCreateInfo *pViewportState
     * }
     */
    public static final long pViewportState$offset() {
        return pViewportState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineViewportStateCreateInfo *pViewportState
     * }
     */
    public static MemorySegment pViewportState(MemorySegment struct) {
        return struct.get(pViewportState$LAYOUT, pViewportState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineViewportStateCreateInfo *pViewportState
     * }
     */
    public static void pViewportState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pViewportState$LAYOUT, pViewportState$OFFSET, fieldValue);
    }

    private static final AddressLayout pRasterizationState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pRasterizationState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineRasterizationStateCreateInfo *pRasterizationState
     * }
     */
    public static final AddressLayout pRasterizationState$layout() {
        return pRasterizationState$LAYOUT;
    }

    private static final long pRasterizationState$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineRasterizationStateCreateInfo *pRasterizationState
     * }
     */
    public static final long pRasterizationState$offset() {
        return pRasterizationState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineRasterizationStateCreateInfo *pRasterizationState
     * }
     */
    public static MemorySegment pRasterizationState(MemorySegment struct) {
        return struct.get(pRasterizationState$LAYOUT, pRasterizationState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineRasterizationStateCreateInfo *pRasterizationState
     * }
     */
    public static void pRasterizationState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pRasterizationState$LAYOUT, pRasterizationState$OFFSET, fieldValue);
    }

    private static final AddressLayout pMultisampleState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pMultisampleState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineMultisampleStateCreateInfo *pMultisampleState
     * }
     */
    public static final AddressLayout pMultisampleState$layout() {
        return pMultisampleState$LAYOUT;
    }

    private static final long pMultisampleState$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineMultisampleStateCreateInfo *pMultisampleState
     * }
     */
    public static final long pMultisampleState$offset() {
        return pMultisampleState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineMultisampleStateCreateInfo *pMultisampleState
     * }
     */
    public static MemorySegment pMultisampleState(MemorySegment struct) {
        return struct.get(pMultisampleState$LAYOUT, pMultisampleState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineMultisampleStateCreateInfo *pMultisampleState
     * }
     */
    public static void pMultisampleState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pMultisampleState$LAYOUT, pMultisampleState$OFFSET, fieldValue);
    }

    private static final AddressLayout pDepthStencilState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDepthStencilState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineDepthStencilStateCreateInfo *pDepthStencilState
     * }
     */
    public static final AddressLayout pDepthStencilState$layout() {
        return pDepthStencilState$LAYOUT;
    }

    private static final long pDepthStencilState$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineDepthStencilStateCreateInfo *pDepthStencilState
     * }
     */
    public static final long pDepthStencilState$offset() {
        return pDepthStencilState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineDepthStencilStateCreateInfo *pDepthStencilState
     * }
     */
    public static MemorySegment pDepthStencilState(MemorySegment struct) {
        return struct.get(pDepthStencilState$LAYOUT, pDepthStencilState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineDepthStencilStateCreateInfo *pDepthStencilState
     * }
     */
    public static void pDepthStencilState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDepthStencilState$LAYOUT, pDepthStencilState$OFFSET, fieldValue);
    }

    private static final AddressLayout pColorBlendState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pColorBlendState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineColorBlendStateCreateInfo *pColorBlendState
     * }
     */
    public static final AddressLayout pColorBlendState$layout() {
        return pColorBlendState$LAYOUT;
    }

    private static final long pColorBlendState$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineColorBlendStateCreateInfo *pColorBlendState
     * }
     */
    public static final long pColorBlendState$offset() {
        return pColorBlendState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineColorBlendStateCreateInfo *pColorBlendState
     * }
     */
    public static MemorySegment pColorBlendState(MemorySegment struct) {
        return struct.get(pColorBlendState$LAYOUT, pColorBlendState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineColorBlendStateCreateInfo *pColorBlendState
     * }
     */
    public static void pColorBlendState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pColorBlendState$LAYOUT, pColorBlendState$OFFSET, fieldValue);
    }

    private static final AddressLayout pDynamicState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDynamicState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineDynamicStateCreateInfo *pDynamicState
     * }
     */
    public static final AddressLayout pDynamicState$layout() {
        return pDynamicState$LAYOUT;
    }

    private static final long pDynamicState$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineDynamicStateCreateInfo *pDynamicState
     * }
     */
    public static final long pDynamicState$offset() {
        return pDynamicState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineDynamicStateCreateInfo *pDynamicState
     * }
     */
    public static MemorySegment pDynamicState(MemorySegment struct) {
        return struct.get(pDynamicState$LAYOUT, pDynamicState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineDynamicStateCreateInfo *pDynamicState
     * }
     */
    public static void pDynamicState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDynamicState$LAYOUT, pDynamicState$OFFSET, fieldValue);
    }

    private static final AddressLayout layout$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static final AddressLayout layout$layout() {
        return layout$LAYOUT;
    }

    private static final long layout$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static final long layout$offset() {
        return layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static MemorySegment layout(MemorySegment struct) {
        return struct.get(layout$LAYOUT, layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static void layout(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layout$LAYOUT, layout$OFFSET, fieldValue);
    }

    private static final AddressLayout renderPass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("renderPass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static final AddressLayout renderPass$layout() {
        return renderPass$LAYOUT;
    }

    private static final long renderPass$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static final long renderPass$offset() {
        return renderPass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static MemorySegment renderPass(MemorySegment struct) {
        return struct.get(renderPass$LAYOUT, renderPass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static void renderPass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(renderPass$LAYOUT, renderPass$OFFSET, fieldValue);
    }

    private static final OfInt subpass$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subpass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static final OfInt subpass$layout() {
        return subpass$LAYOUT;
    }

    private static final long subpass$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static final long subpass$offset() {
        return subpass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static int subpass(MemorySegment struct) {
        return struct.get(subpass$LAYOUT, subpass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t subpass
     * }
     */
    public static void subpass(MemorySegment struct, int fieldValue) {
        struct.set(subpass$LAYOUT, subpass$OFFSET, fieldValue);
    }

    private static final AddressLayout basePipelineHandle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("basePipelineHandle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static final AddressLayout basePipelineHandle$layout() {
        return basePipelineHandle$LAYOUT;
    }

    private static final long basePipelineHandle$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static final long basePipelineHandle$offset() {
        return basePipelineHandle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static MemorySegment basePipelineHandle(MemorySegment struct) {
        return struct.get(basePipelineHandle$LAYOUT, basePipelineHandle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static void basePipelineHandle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(basePipelineHandle$LAYOUT, basePipelineHandle$OFFSET, fieldValue);
    }

    private static final OfInt basePipelineIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("basePipelineIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static final OfInt basePipelineIndex$layout() {
        return basePipelineIndex$LAYOUT;
    }

    private static final long basePipelineIndex$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static final long basePipelineIndex$offset() {
        return basePipelineIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static int basePipelineIndex(MemorySegment struct) {
        return struct.get(basePipelineIndex$LAYOUT, basePipelineIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static void basePipelineIndex(MemorySegment struct, int fieldValue) {
        struct.set(basePipelineIndex$LAYOUT, basePipelineIndex$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

