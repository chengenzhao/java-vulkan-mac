// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkGraphicsShaderGroupCreateInfoNV {
 *     VkStructureType sType;
 *     const void *pNext;
 *     uint32_t stageCount;
 *     const VkPipelineShaderStageCreateInfo *pStages;
 *     const VkPipelineVertexInputStateCreateInfo *pVertexInputState;
 *     const VkPipelineTessellationStateCreateInfo *pTessellationState;
 * }
 * }
 */
public class VkGraphicsShaderGroupCreateInfoNV {

    VkGraphicsShaderGroupCreateInfoNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("stageCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pStages"),
        vulkan_h.C_POINTER.withName("pVertexInputState"),
        vulkan_h.C_POINTER.withName("pTessellationState")
    ).withName("VkGraphicsShaderGroupCreateInfoNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt stageCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stageCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static final OfInt stageCount$layout() {
        return stageCount$LAYOUT;
    }

    private static final long stageCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static final long stageCount$offset() {
        return stageCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static int stageCount(MemorySegment struct) {
        return struct.get(stageCount$LAYOUT, stageCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static void stageCount(MemorySegment struct, int fieldValue) {
        struct.set(stageCount$LAYOUT, stageCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pStages$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pStages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static final AddressLayout pStages$layout() {
        return pStages$LAYOUT;
    }

    private static final long pStages$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static final long pStages$offset() {
        return pStages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static MemorySegment pStages(MemorySegment struct) {
        return struct.get(pStages$LAYOUT, pStages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static void pStages(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pStages$LAYOUT, pStages$OFFSET, fieldValue);
    }

    private static final AddressLayout pVertexInputState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pVertexInputState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static final AddressLayout pVertexInputState$layout() {
        return pVertexInputState$LAYOUT;
    }

    private static final long pVertexInputState$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static final long pVertexInputState$offset() {
        return pVertexInputState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static MemorySegment pVertexInputState(MemorySegment struct) {
        return struct.get(pVertexInputState$LAYOUT, pVertexInputState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineVertexInputStateCreateInfo *pVertexInputState
     * }
     */
    public static void pVertexInputState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pVertexInputState$LAYOUT, pVertexInputState$OFFSET, fieldValue);
    }

    private static final AddressLayout pTessellationState$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTessellationState"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static final AddressLayout pTessellationState$layout() {
        return pTessellationState$LAYOUT;
    }

    private static final long pTessellationState$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static final long pTessellationState$offset() {
        return pTessellationState$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static MemorySegment pTessellationState(MemorySegment struct) {
        return struct.get(pTessellationState$LAYOUT, pTessellationState$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineTessellationStateCreateInfo *pTessellationState
     * }
     */
    public static void pTessellationState(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTessellationState$LAYOUT, pTessellationState$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

