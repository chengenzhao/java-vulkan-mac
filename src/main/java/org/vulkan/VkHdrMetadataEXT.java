// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkHdrMetadataEXT {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkXYColorEXT displayPrimaryRed;
 *     VkXYColorEXT displayPrimaryGreen;
 *     VkXYColorEXT displayPrimaryBlue;
 *     VkXYColorEXT whitePoint;
 *     float maxLuminance;
 *     float minLuminance;
 *     float maxContentLightLevel;
 *     float maxFrameAverageLightLevel;
 * }
 * }
 */
public class VkHdrMetadataEXT {

    VkHdrMetadataEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        VkXYColorEXT.layout().withName("displayPrimaryRed"),
        VkXYColorEXT.layout().withName("displayPrimaryGreen"),
        VkXYColorEXT.layout().withName("displayPrimaryBlue"),
        VkXYColorEXT.layout().withName("whitePoint"),
        vulkan_h.C_FLOAT.withName("maxLuminance"),
        vulkan_h.C_FLOAT.withName("minLuminance"),
        vulkan_h.C_FLOAT.withName("maxContentLightLevel"),
        vulkan_h.C_FLOAT.withName("maxFrameAverageLightLevel")
    ).withName("VkHdrMetadataEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final GroupLayout displayPrimaryRed$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("displayPrimaryRed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryRed
     * }
     */
    public static final GroupLayout displayPrimaryRed$layout() {
        return displayPrimaryRed$LAYOUT;
    }

    private static final long displayPrimaryRed$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryRed
     * }
     */
    public static final long displayPrimaryRed$offset() {
        return displayPrimaryRed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryRed
     * }
     */
    public static MemorySegment displayPrimaryRed(MemorySegment struct) {
        return struct.asSlice(displayPrimaryRed$OFFSET, displayPrimaryRed$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryRed
     * }
     */
    public static void displayPrimaryRed(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, displayPrimaryRed$OFFSET, displayPrimaryRed$LAYOUT.byteSize());
    }

    private static final GroupLayout displayPrimaryGreen$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("displayPrimaryGreen"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryGreen
     * }
     */
    public static final GroupLayout displayPrimaryGreen$layout() {
        return displayPrimaryGreen$LAYOUT;
    }

    private static final long displayPrimaryGreen$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryGreen
     * }
     */
    public static final long displayPrimaryGreen$offset() {
        return displayPrimaryGreen$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryGreen
     * }
     */
    public static MemorySegment displayPrimaryGreen(MemorySegment struct) {
        return struct.asSlice(displayPrimaryGreen$OFFSET, displayPrimaryGreen$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryGreen
     * }
     */
    public static void displayPrimaryGreen(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, displayPrimaryGreen$OFFSET, displayPrimaryGreen$LAYOUT.byteSize());
    }

    private static final GroupLayout displayPrimaryBlue$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("displayPrimaryBlue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryBlue
     * }
     */
    public static final GroupLayout displayPrimaryBlue$layout() {
        return displayPrimaryBlue$LAYOUT;
    }

    private static final long displayPrimaryBlue$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryBlue
     * }
     */
    public static final long displayPrimaryBlue$offset() {
        return displayPrimaryBlue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryBlue
     * }
     */
    public static MemorySegment displayPrimaryBlue(MemorySegment struct) {
        return struct.asSlice(displayPrimaryBlue$OFFSET, displayPrimaryBlue$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkXYColorEXT displayPrimaryBlue
     * }
     */
    public static void displayPrimaryBlue(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, displayPrimaryBlue$OFFSET, displayPrimaryBlue$LAYOUT.byteSize());
    }

    private static final GroupLayout whitePoint$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("whitePoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkXYColorEXT whitePoint
     * }
     */
    public static final GroupLayout whitePoint$layout() {
        return whitePoint$LAYOUT;
    }

    private static final long whitePoint$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkXYColorEXT whitePoint
     * }
     */
    public static final long whitePoint$offset() {
        return whitePoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkXYColorEXT whitePoint
     * }
     */
    public static MemorySegment whitePoint(MemorySegment struct) {
        return struct.asSlice(whitePoint$OFFSET, whitePoint$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkXYColorEXT whitePoint
     * }
     */
    public static void whitePoint(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, whitePoint$OFFSET, whitePoint$LAYOUT.byteSize());
    }

    private static final OfFloat maxLuminance$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxLuminance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxLuminance
     * }
     */
    public static final OfFloat maxLuminance$layout() {
        return maxLuminance$LAYOUT;
    }

    private static final long maxLuminance$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxLuminance
     * }
     */
    public static final long maxLuminance$offset() {
        return maxLuminance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxLuminance
     * }
     */
    public static float maxLuminance(MemorySegment struct) {
        return struct.get(maxLuminance$LAYOUT, maxLuminance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxLuminance
     * }
     */
    public static void maxLuminance(MemorySegment struct, float fieldValue) {
        struct.set(maxLuminance$LAYOUT, maxLuminance$OFFSET, fieldValue);
    }

    private static final OfFloat minLuminance$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minLuminance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minLuminance
     * }
     */
    public static final OfFloat minLuminance$layout() {
        return minLuminance$LAYOUT;
    }

    private static final long minLuminance$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minLuminance
     * }
     */
    public static final long minLuminance$offset() {
        return minLuminance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minLuminance
     * }
     */
    public static float minLuminance(MemorySegment struct) {
        return struct.get(minLuminance$LAYOUT, minLuminance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minLuminance
     * }
     */
    public static void minLuminance(MemorySegment struct, float fieldValue) {
        struct.set(minLuminance$LAYOUT, minLuminance$OFFSET, fieldValue);
    }

    private static final OfFloat maxContentLightLevel$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxContentLightLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxContentLightLevel
     * }
     */
    public static final OfFloat maxContentLightLevel$layout() {
        return maxContentLightLevel$LAYOUT;
    }

    private static final long maxContentLightLevel$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxContentLightLevel
     * }
     */
    public static final long maxContentLightLevel$offset() {
        return maxContentLightLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxContentLightLevel
     * }
     */
    public static float maxContentLightLevel(MemorySegment struct) {
        return struct.get(maxContentLightLevel$LAYOUT, maxContentLightLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxContentLightLevel
     * }
     */
    public static void maxContentLightLevel(MemorySegment struct, float fieldValue) {
        struct.set(maxContentLightLevel$LAYOUT, maxContentLightLevel$OFFSET, fieldValue);
    }

    private static final OfFloat maxFrameAverageLightLevel$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxFrameAverageLightLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxFrameAverageLightLevel
     * }
     */
    public static final OfFloat maxFrameAverageLightLevel$layout() {
        return maxFrameAverageLightLevel$LAYOUT;
    }

    private static final long maxFrameAverageLightLevel$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxFrameAverageLightLevel
     * }
     */
    public static final long maxFrameAverageLightLevel$offset() {
        return maxFrameAverageLightLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxFrameAverageLightLevel
     * }
     */
    public static float maxFrameAverageLightLevel(MemorySegment struct) {
        return struct.get(maxFrameAverageLightLevel$LAYOUT, maxFrameAverageLightLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxFrameAverageLightLevel
     * }
     */
    public static void maxFrameAverageLightLevel(MemorySegment struct, float fieldValue) {
        struct.set(maxFrameAverageLightLevel$LAYOUT, maxFrameAverageLightLevel$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

