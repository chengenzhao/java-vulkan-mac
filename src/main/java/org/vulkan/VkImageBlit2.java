// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkImageBlit2 {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkImageSubresourceLayers srcSubresource;
 *     VkOffset3D srcOffsets[2];
 *     VkImageSubresourceLayers dstSubresource;
 *     VkOffset3D dstOffsets[2];
 * }
 * }
 */
public class VkImageBlit2 {

    VkImageBlit2() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        VkImageSubresourceLayers.layout().withName("srcSubresource"),
        MemoryLayout.sequenceLayout(2, VkOffset3D.layout()).withName("srcOffsets"),
        VkImageSubresourceLayers.layout().withName("dstSubresource"),
        MemoryLayout.sequenceLayout(2, VkOffset3D.layout()).withName("dstOffsets")
    ).withName("VkImageBlit2");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final GroupLayout srcSubresource$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("srcSubresource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers srcSubresource
     * }
     */
    public static final GroupLayout srcSubresource$layout() {
        return srcSubresource$LAYOUT;
    }

    private static final long srcSubresource$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers srcSubresource
     * }
     */
    public static final long srcSubresource$offset() {
        return srcSubresource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers srcSubresource
     * }
     */
    public static MemorySegment srcSubresource(MemorySegment struct) {
        return struct.asSlice(srcSubresource$OFFSET, srcSubresource$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers srcSubresource
     * }
     */
    public static void srcSubresource(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srcSubresource$OFFSET, srcSubresource$LAYOUT.byteSize());
    }

    private static final SequenceLayout srcOffsets$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("srcOffsets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOffset3D srcOffsets[2]
     * }
     */
    public static final SequenceLayout srcOffsets$layout() {
        return srcOffsets$LAYOUT;
    }

    private static final long srcOffsets$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOffset3D srcOffsets[2]
     * }
     */
    public static final long srcOffsets$offset() {
        return srcOffsets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOffset3D srcOffsets[2]
     * }
     */
    public static MemorySegment srcOffsets(MemorySegment struct) {
        return struct.asSlice(srcOffsets$OFFSET, srcOffsets$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOffset3D srcOffsets[2]
     * }
     */
    public static void srcOffsets(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, srcOffsets$OFFSET, srcOffsets$LAYOUT.byteSize());
    }

    private static long[] srcOffsets$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * VkOffset3D srcOffsets[2]
     * }
     */
    public static long[] srcOffsets$dimensions() {
        return srcOffsets$DIMS;
    }
    private static final MethodHandle srcOffsets$ELEM_HANDLE = srcOffsets$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * VkOffset3D srcOffsets[2]
     * }
     */
    public static MemorySegment srcOffsets(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)srcOffsets$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * VkOffset3D srcOffsets[2]
     * }
     */
    public static void srcOffsets(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, srcOffsets(struct, index0), 0L, VkOffset3D.layout().byteSize());
    }

    private static final GroupLayout dstSubresource$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("dstSubresource"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers dstSubresource
     * }
     */
    public static final GroupLayout dstSubresource$layout() {
        return dstSubresource$LAYOUT;
    }

    private static final long dstSubresource$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers dstSubresource
     * }
     */
    public static final long dstSubresource$offset() {
        return dstSubresource$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers dstSubresource
     * }
     */
    public static MemorySegment dstSubresource(MemorySegment struct) {
        return struct.asSlice(dstSubresource$OFFSET, dstSubresource$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageSubresourceLayers dstSubresource
     * }
     */
    public static void dstSubresource(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dstSubresource$OFFSET, dstSubresource$LAYOUT.byteSize());
    }

    private static final SequenceLayout dstOffsets$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("dstOffsets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOffset3D dstOffsets[2]
     * }
     */
    public static final SequenceLayout dstOffsets$layout() {
        return dstOffsets$LAYOUT;
    }

    private static final long dstOffsets$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOffset3D dstOffsets[2]
     * }
     */
    public static final long dstOffsets$offset() {
        return dstOffsets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOffset3D dstOffsets[2]
     * }
     */
    public static MemorySegment dstOffsets(MemorySegment struct) {
        return struct.asSlice(dstOffsets$OFFSET, dstOffsets$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOffset3D dstOffsets[2]
     * }
     */
    public static void dstOffsets(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, dstOffsets$OFFSET, dstOffsets$LAYOUT.byteSize());
    }

    private static long[] dstOffsets$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * VkOffset3D dstOffsets[2]
     * }
     */
    public static long[] dstOffsets$dimensions() {
        return dstOffsets$DIMS;
    }
    private static final MethodHandle dstOffsets$ELEM_HANDLE = dstOffsets$LAYOUT.sliceHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * VkOffset3D dstOffsets[2]
     * }
     */
    public static MemorySegment dstOffsets(MemorySegment struct, long index0) {
        try {
            return (MemorySegment)dstOffsets$ELEM_HANDLE.invokeExact(struct, 0L, index0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * VkOffset3D dstOffsets[2]
     * }
     */
    public static void dstOffsets(MemorySegment struct, long index0, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, dstOffsets(struct, index0), 0L, VkOffset3D.layout().byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

