// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkImageCreateInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkImageCreateFlags flags;
 *     VkImageType imageType;
 *     VkFormat format;
 *     VkExtent3D extent;
 *     uint32_t mipLevels;
 *     uint32_t arrayLayers;
 *     VkSampleCountFlagBits samples;
 *     VkImageTiling tiling;
 *     VkImageUsageFlags usage;
 *     VkSharingMode sharingMode;
 *     uint32_t queueFamilyIndexCount;
 *     const uint32_t *pQueueFamilyIndices;
 *     VkImageLayout initialLayout;
 * }
 * }
 */
public class VkImageCreateInfo {

    VkImageCreateInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("imageType"),
        vulkan_h.C_INT.withName("format"),
        VkExtent3D.layout().withName("extent"),
        vulkan_h.C_INT.withName("mipLevels"),
        vulkan_h.C_INT.withName("arrayLayers"),
        vulkan_h.C_INT.withName("samples"),
        vulkan_h.C_INT.withName("tiling"),
        vulkan_h.C_INT.withName("usage"),
        vulkan_h.C_INT.withName("sharingMode"),
        vulkan_h.C_INT.withName("queueFamilyIndexCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pQueueFamilyIndices"),
        vulkan_h.C_INT.withName("initialLayout"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkImageCreateInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageCreateFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageCreateFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageCreateFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageCreateFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt imageType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static final OfInt imageType$layout() {
        return imageType$LAYOUT;
    }

    private static final long imageType$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static final long imageType$offset() {
        return imageType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static int imageType(MemorySegment struct) {
        return struct.get(imageType$LAYOUT, imageType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static void imageType(MemorySegment struct, int fieldValue) {
        struct.set(imageType$LAYOUT, imageType$OFFSET, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final GroupLayout extent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("extent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent3D extent
     * }
     */
    public static final GroupLayout extent$layout() {
        return extent$LAYOUT;
    }

    private static final long extent$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent3D extent
     * }
     */
    public static final long extent$offset() {
        return extent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent3D extent
     * }
     */
    public static MemorySegment extent(MemorySegment struct) {
        return struct.asSlice(extent$OFFSET, extent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent3D extent
     * }
     */
    public static void extent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, extent$OFFSET, extent$LAYOUT.byteSize());
    }

    private static final OfInt mipLevels$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mipLevels"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t mipLevels
     * }
     */
    public static final OfInt mipLevels$layout() {
        return mipLevels$LAYOUT;
    }

    private static final long mipLevels$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t mipLevels
     * }
     */
    public static final long mipLevels$offset() {
        return mipLevels$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t mipLevels
     * }
     */
    public static int mipLevels(MemorySegment struct) {
        return struct.get(mipLevels$LAYOUT, mipLevels$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t mipLevels
     * }
     */
    public static void mipLevels(MemorySegment struct, int fieldValue) {
        struct.set(mipLevels$LAYOUT, mipLevels$OFFSET, fieldValue);
    }

    private static final OfInt arrayLayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("arrayLayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t arrayLayers
     * }
     */
    public static final OfInt arrayLayers$layout() {
        return arrayLayers$LAYOUT;
    }

    private static final long arrayLayers$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t arrayLayers
     * }
     */
    public static final long arrayLayers$offset() {
        return arrayLayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t arrayLayers
     * }
     */
    public static int arrayLayers(MemorySegment struct) {
        return struct.get(arrayLayers$LAYOUT, arrayLayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t arrayLayers
     * }
     */
    public static void arrayLayers(MemorySegment struct, int fieldValue) {
        struct.set(arrayLayers$LAYOUT, arrayLayers$OFFSET, fieldValue);
    }

    private static final OfInt samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static final OfInt samples$layout() {
        return samples$LAYOUT;
    }

    private static final long samples$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static final long samples$offset() {
        return samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static int samples(MemorySegment struct) {
        return struct.get(samples$LAYOUT, samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits samples
     * }
     */
    public static void samples(MemorySegment struct, int fieldValue) {
        struct.set(samples$LAYOUT, samples$OFFSET, fieldValue);
    }

    private static final OfInt tiling$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tiling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageTiling tiling
     * }
     */
    public static final OfInt tiling$layout() {
        return tiling$LAYOUT;
    }

    private static final long tiling$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageTiling tiling
     * }
     */
    public static final long tiling$offset() {
        return tiling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageTiling tiling
     * }
     */
    public static int tiling(MemorySegment struct) {
        return struct.get(tiling$LAYOUT, tiling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageTiling tiling
     * }
     */
    public static void tiling(MemorySegment struct, int fieldValue) {
        struct.set(tiling$LAYOUT, tiling$OFFSET, fieldValue);
    }

    private static final OfInt usage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("usage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageUsageFlags usage
     * }
     */
    public static final OfInt usage$layout() {
        return usage$LAYOUT;
    }

    private static final long usage$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageUsageFlags usage
     * }
     */
    public static final long usage$offset() {
        return usage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageUsageFlags usage
     * }
     */
    public static int usage(MemorySegment struct) {
        return struct.get(usage$LAYOUT, usage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageUsageFlags usage
     * }
     */
    public static void usage(MemorySegment struct, int fieldValue) {
        struct.set(usage$LAYOUT, usage$OFFSET, fieldValue);
    }

    private static final OfInt sharingMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sharingMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSharingMode sharingMode
     * }
     */
    public static final OfInt sharingMode$layout() {
        return sharingMode$LAYOUT;
    }

    private static final long sharingMode$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSharingMode sharingMode
     * }
     */
    public static final long sharingMode$offset() {
        return sharingMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSharingMode sharingMode
     * }
     */
    public static int sharingMode(MemorySegment struct) {
        return struct.get(sharingMode$LAYOUT, sharingMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSharingMode sharingMode
     * }
     */
    public static void sharingMode(MemorySegment struct, int fieldValue) {
        struct.set(sharingMode$LAYOUT, sharingMode$OFFSET, fieldValue);
    }

    private static final OfInt queueFamilyIndexCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("queueFamilyIndexCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t queueFamilyIndexCount
     * }
     */
    public static final OfInt queueFamilyIndexCount$layout() {
        return queueFamilyIndexCount$LAYOUT;
    }

    private static final long queueFamilyIndexCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t queueFamilyIndexCount
     * }
     */
    public static final long queueFamilyIndexCount$offset() {
        return queueFamilyIndexCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t queueFamilyIndexCount
     * }
     */
    public static int queueFamilyIndexCount(MemorySegment struct) {
        return struct.get(queueFamilyIndexCount$LAYOUT, queueFamilyIndexCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t queueFamilyIndexCount
     * }
     */
    public static void queueFamilyIndexCount(MemorySegment struct, int fieldValue) {
        struct.set(queueFamilyIndexCount$LAYOUT, queueFamilyIndexCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pQueueFamilyIndices$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pQueueFamilyIndices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint32_t *pQueueFamilyIndices
     * }
     */
    public static final AddressLayout pQueueFamilyIndices$layout() {
        return pQueueFamilyIndices$LAYOUT;
    }

    private static final long pQueueFamilyIndices$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint32_t *pQueueFamilyIndices
     * }
     */
    public static final long pQueueFamilyIndices$offset() {
        return pQueueFamilyIndices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint32_t *pQueueFamilyIndices
     * }
     */
    public static MemorySegment pQueueFamilyIndices(MemorySegment struct) {
        return struct.get(pQueueFamilyIndices$LAYOUT, pQueueFamilyIndices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint32_t *pQueueFamilyIndices
     * }
     */
    public static void pQueueFamilyIndices(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pQueueFamilyIndices$LAYOUT, pQueueFamilyIndices$OFFSET, fieldValue);
    }

    private static final OfInt initialLayout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("initialLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static final OfInt initialLayout$layout() {
        return initialLayout$LAYOUT;
    }

    private static final long initialLayout$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static final long initialLayout$offset() {
        return initialLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static int initialLayout(MemorySegment struct) {
        return struct.get(initialLayout$LAYOUT, initialLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageLayout initialLayout
     * }
     */
    public static void initialLayout(MemorySegment struct, int fieldValue) {
        struct.set(initialLayout$LAYOUT, initialLayout$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

