// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkImageViewSampleWeightCreateInfoQCOM {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkOffset2D filterCenter;
 *     VkExtent2D filterSize;
 *     uint32_t numPhases;
 * }
 * }
 */
public class VkImageViewSampleWeightCreateInfoQCOM {

    VkImageViewSampleWeightCreateInfoQCOM() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        VkOffset2D.layout().withName("filterCenter"),
        VkExtent2D.layout().withName("filterSize"),
        vulkan_h.C_INT.withName("numPhases"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkImageViewSampleWeightCreateInfoQCOM");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final GroupLayout filterCenter$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("filterCenter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOffset2D filterCenter
     * }
     */
    public static final GroupLayout filterCenter$layout() {
        return filterCenter$LAYOUT;
    }

    private static final long filterCenter$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOffset2D filterCenter
     * }
     */
    public static final long filterCenter$offset() {
        return filterCenter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOffset2D filterCenter
     * }
     */
    public static MemorySegment filterCenter(MemorySegment struct) {
        return struct.asSlice(filterCenter$OFFSET, filterCenter$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOffset2D filterCenter
     * }
     */
    public static void filterCenter(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, filterCenter$OFFSET, filterCenter$LAYOUT.byteSize());
    }

    private static final GroupLayout filterSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("filterSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D filterSize
     * }
     */
    public static final GroupLayout filterSize$layout() {
        return filterSize$LAYOUT;
    }

    private static final long filterSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D filterSize
     * }
     */
    public static final long filterSize$offset() {
        return filterSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D filterSize
     * }
     */
    public static MemorySegment filterSize(MemorySegment struct) {
        return struct.asSlice(filterSize$OFFSET, filterSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D filterSize
     * }
     */
    public static void filterSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, filterSize$OFFSET, filterSize$LAYOUT.byteSize());
    }

    private static final OfInt numPhases$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numPhases"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t numPhases
     * }
     */
    public static final OfInt numPhases$layout() {
        return numPhases$LAYOUT;
    }

    private static final long numPhases$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t numPhases
     * }
     */
    public static final long numPhases$offset() {
        return numPhases$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t numPhases
     * }
     */
    public static int numPhases(MemorySegment struct) {
        return struct.get(numPhases$LAYOUT, numPhases$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t numPhases
     * }
     */
    public static void numPhases(MemorySegment struct, int fieldValue) {
        struct.set(numPhases$LAYOUT, numPhases$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

