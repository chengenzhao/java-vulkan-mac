// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkImportSemaphoreFdInfoKHR {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkSemaphore semaphore;
 *     VkSemaphoreImportFlags flags;
 *     VkExternalSemaphoreHandleTypeFlagBits handleType;
 *     int fd;
 * }
 * }
 */
public class VkImportSemaphoreFdInfoKHR {

    VkImportSemaphoreFdInfoKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_POINTER.withName("semaphore"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("handleType"),
        vulkan_h.C_INT.withName("fd"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkImportSemaphoreFdInfoKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final AddressLayout semaphore$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("semaphore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSemaphore semaphore
     * }
     */
    public static final AddressLayout semaphore$layout() {
        return semaphore$LAYOUT;
    }

    private static final long semaphore$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSemaphore semaphore
     * }
     */
    public static final long semaphore$offset() {
        return semaphore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSemaphore semaphore
     * }
     */
    public static MemorySegment semaphore(MemorySegment struct) {
        return struct.get(semaphore$LAYOUT, semaphore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSemaphore semaphore
     * }
     */
    public static void semaphore(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(semaphore$LAYOUT, semaphore$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSemaphoreImportFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSemaphoreImportFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSemaphoreImportFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSemaphoreImportFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt handleType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("handleType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExternalSemaphoreHandleTypeFlagBits handleType
     * }
     */
    public static final OfInt handleType$layout() {
        return handleType$LAYOUT;
    }

    private static final long handleType$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExternalSemaphoreHandleTypeFlagBits handleType
     * }
     */
    public static final long handleType$offset() {
        return handleType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExternalSemaphoreHandleTypeFlagBits handleType
     * }
     */
    public static int handleType(MemorySegment struct) {
        return struct.get(handleType$LAYOUT, handleType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExternalSemaphoreHandleTypeFlagBits handleType
     * }
     */
    public static void handleType(MemorySegment struct, int fieldValue) {
        struct.set(handleType$LAYOUT, handleType$OFFSET, fieldValue);
    }

    private static final OfInt fd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final OfInt fd$layout() {
        return fd$LAYOUT;
    }

    private static final long fd$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static final long fd$offset() {
        return fd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static int fd(MemorySegment struct) {
        return struct.get(fd$LAYOUT, fd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int fd
     * }
     */
    public static void fd(MemorySegment struct, int fieldValue) {
        struct.set(fd$LAYOUT, fd$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

