// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkIndirectCommandsLayoutCreateInfoNV {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkIndirectCommandsLayoutUsageFlagsNV flags;
 *     VkPipelineBindPoint pipelineBindPoint;
 *     uint32_t tokenCount;
 *     const VkIndirectCommandsLayoutTokenNV *pTokens;
 *     uint32_t streamCount;
 *     const uint32_t *pStreamStrides;
 * }
 * }
 */
public class VkIndirectCommandsLayoutCreateInfoNV {

    VkIndirectCommandsLayoutCreateInfoNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("pipelineBindPoint"),
        vulkan_h.C_INT.withName("tokenCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pTokens"),
        vulkan_h.C_INT.withName("streamCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pStreamStrides")
    ).withName("VkIndirectCommandsLayoutCreateInfoNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkIndirectCommandsLayoutUsageFlagsNV flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkIndirectCommandsLayoutUsageFlagsNV flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkIndirectCommandsLayoutUsageFlagsNV flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkIndirectCommandsLayoutUsageFlagsNV flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt pipelineBindPoint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pipelineBindPoint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineBindPoint pipelineBindPoint
     * }
     */
    public static final OfInt pipelineBindPoint$layout() {
        return pipelineBindPoint$LAYOUT;
    }

    private static final long pipelineBindPoint$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineBindPoint pipelineBindPoint
     * }
     */
    public static final long pipelineBindPoint$offset() {
        return pipelineBindPoint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineBindPoint pipelineBindPoint
     * }
     */
    public static int pipelineBindPoint(MemorySegment struct) {
        return struct.get(pipelineBindPoint$LAYOUT, pipelineBindPoint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineBindPoint pipelineBindPoint
     * }
     */
    public static void pipelineBindPoint(MemorySegment struct, int fieldValue) {
        struct.set(pipelineBindPoint$LAYOUT, pipelineBindPoint$OFFSET, fieldValue);
    }

    private static final OfInt tokenCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tokenCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t tokenCount
     * }
     */
    public static final OfInt tokenCount$layout() {
        return tokenCount$LAYOUT;
    }

    private static final long tokenCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t tokenCount
     * }
     */
    public static final long tokenCount$offset() {
        return tokenCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t tokenCount
     * }
     */
    public static int tokenCount(MemorySegment struct) {
        return struct.get(tokenCount$LAYOUT, tokenCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t tokenCount
     * }
     */
    public static void tokenCount(MemorySegment struct, int fieldValue) {
        struct.set(tokenCount$LAYOUT, tokenCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pTokens$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTokens"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkIndirectCommandsLayoutTokenNV *pTokens
     * }
     */
    public static final AddressLayout pTokens$layout() {
        return pTokens$LAYOUT;
    }

    private static final long pTokens$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkIndirectCommandsLayoutTokenNV *pTokens
     * }
     */
    public static final long pTokens$offset() {
        return pTokens$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkIndirectCommandsLayoutTokenNV *pTokens
     * }
     */
    public static MemorySegment pTokens(MemorySegment struct) {
        return struct.get(pTokens$LAYOUT, pTokens$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkIndirectCommandsLayoutTokenNV *pTokens
     * }
     */
    public static void pTokens(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTokens$LAYOUT, pTokens$OFFSET, fieldValue);
    }

    private static final OfInt streamCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("streamCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t streamCount
     * }
     */
    public static final OfInt streamCount$layout() {
        return streamCount$LAYOUT;
    }

    private static final long streamCount$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t streamCount
     * }
     */
    public static final long streamCount$offset() {
        return streamCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t streamCount
     * }
     */
    public static int streamCount(MemorySegment struct) {
        return struct.get(streamCount$LAYOUT, streamCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t streamCount
     * }
     */
    public static void streamCount(MemorySegment struct, int fieldValue) {
        struct.set(streamCount$LAYOUT, streamCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pStreamStrides$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pStreamStrides"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint32_t *pStreamStrides
     * }
     */
    public static final AddressLayout pStreamStrides$layout() {
        return pStreamStrides$LAYOUT;
    }

    private static final long pStreamStrides$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint32_t *pStreamStrides
     * }
     */
    public static final long pStreamStrides$offset() {
        return pStreamStrides$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint32_t *pStreamStrides
     * }
     */
    public static MemorySegment pStreamStrides(MemorySegment struct) {
        return struct.get(pStreamStrides$LAYOUT, pStreamStrides$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint32_t *pStreamStrides
     * }
     */
    public static void pStreamStrides(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pStreamStrides$LAYOUT, pStreamStrides$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

