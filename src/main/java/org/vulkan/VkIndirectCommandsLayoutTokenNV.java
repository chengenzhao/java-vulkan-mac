// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkIndirectCommandsLayoutTokenNV {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkIndirectCommandsTokenTypeNV tokenType;
 *     uint32_t stream;
 *     uint32_t offset;
 *     uint32_t vertexBindingUnit;
 *     VkBool32 vertexDynamicStride;
 *     VkPipelineLayout pushconstantPipelineLayout;
 *     VkShaderStageFlags pushconstantShaderStageFlags;
 *     uint32_t pushconstantOffset;
 *     uint32_t pushconstantSize;
 *     VkIndirectStateFlagsNV indirectStateFlags;
 *     uint32_t indexTypeCount;
 *     const VkIndexType *pIndexTypes;
 *     const uint32_t *pIndexTypeValues;
 * }
 * }
 */
public class VkIndirectCommandsLayoutTokenNV {

    VkIndirectCommandsLayoutTokenNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("tokenType"),
        vulkan_h.C_INT.withName("stream"),
        vulkan_h.C_INT.withName("offset"),
        vulkan_h.C_INT.withName("vertexBindingUnit"),
        vulkan_h.C_INT.withName("vertexDynamicStride"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pushconstantPipelineLayout"),
        vulkan_h.C_INT.withName("pushconstantShaderStageFlags"),
        vulkan_h.C_INT.withName("pushconstantOffset"),
        vulkan_h.C_INT.withName("pushconstantSize"),
        vulkan_h.C_INT.withName("indirectStateFlags"),
        vulkan_h.C_INT.withName("indexTypeCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pIndexTypes"),
        vulkan_h.C_POINTER.withName("pIndexTypeValues")
    ).withName("VkIndirectCommandsLayoutTokenNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt tokenType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tokenType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkIndirectCommandsTokenTypeNV tokenType
     * }
     */
    public static final OfInt tokenType$layout() {
        return tokenType$LAYOUT;
    }

    private static final long tokenType$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkIndirectCommandsTokenTypeNV tokenType
     * }
     */
    public static final long tokenType$offset() {
        return tokenType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkIndirectCommandsTokenTypeNV tokenType
     * }
     */
    public static int tokenType(MemorySegment struct) {
        return struct.get(tokenType$LAYOUT, tokenType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkIndirectCommandsTokenTypeNV tokenType
     * }
     */
    public static void tokenType(MemorySegment struct, int fieldValue) {
        struct.set(tokenType$LAYOUT, tokenType$OFFSET, fieldValue);
    }

    private static final OfInt stream$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stream
     * }
     */
    public static final OfInt stream$layout() {
        return stream$LAYOUT;
    }

    private static final long stream$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stream
     * }
     */
    public static final long stream$offset() {
        return stream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stream
     * }
     */
    public static int stream(MemorySegment struct) {
        return struct.get(stream$LAYOUT, stream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stream
     * }
     */
    public static void stream(MemorySegment struct, int fieldValue) {
        struct.set(stream$LAYOUT, stream$OFFSET, fieldValue);
    }

    private static final OfInt offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static final OfInt offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static int offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t offset
     * }
     */
    public static void offset(MemorySegment struct, int fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfInt vertexBindingUnit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertexBindingUnit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vertexBindingUnit
     * }
     */
    public static final OfInt vertexBindingUnit$layout() {
        return vertexBindingUnit$LAYOUT;
    }

    private static final long vertexBindingUnit$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vertexBindingUnit
     * }
     */
    public static final long vertexBindingUnit$offset() {
        return vertexBindingUnit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vertexBindingUnit
     * }
     */
    public static int vertexBindingUnit(MemorySegment struct) {
        return struct.get(vertexBindingUnit$LAYOUT, vertexBindingUnit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vertexBindingUnit
     * }
     */
    public static void vertexBindingUnit(MemorySegment struct, int fieldValue) {
        struct.set(vertexBindingUnit$LAYOUT, vertexBindingUnit$OFFSET, fieldValue);
    }

    private static final OfInt vertexDynamicStride$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertexDynamicStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 vertexDynamicStride
     * }
     */
    public static final OfInt vertexDynamicStride$layout() {
        return vertexDynamicStride$LAYOUT;
    }

    private static final long vertexDynamicStride$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 vertexDynamicStride
     * }
     */
    public static final long vertexDynamicStride$offset() {
        return vertexDynamicStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 vertexDynamicStride
     * }
     */
    public static int vertexDynamicStride(MemorySegment struct) {
        return struct.get(vertexDynamicStride$LAYOUT, vertexDynamicStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 vertexDynamicStride
     * }
     */
    public static void vertexDynamicStride(MemorySegment struct, int fieldValue) {
        struct.set(vertexDynamicStride$LAYOUT, vertexDynamicStride$OFFSET, fieldValue);
    }

    private static final AddressLayout pushconstantPipelineLayout$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pushconstantPipelineLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineLayout pushconstantPipelineLayout
     * }
     */
    public static final AddressLayout pushconstantPipelineLayout$layout() {
        return pushconstantPipelineLayout$LAYOUT;
    }

    private static final long pushconstantPipelineLayout$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineLayout pushconstantPipelineLayout
     * }
     */
    public static final long pushconstantPipelineLayout$offset() {
        return pushconstantPipelineLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineLayout pushconstantPipelineLayout
     * }
     */
    public static MemorySegment pushconstantPipelineLayout(MemorySegment struct) {
        return struct.get(pushconstantPipelineLayout$LAYOUT, pushconstantPipelineLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineLayout pushconstantPipelineLayout
     * }
     */
    public static void pushconstantPipelineLayout(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pushconstantPipelineLayout$LAYOUT, pushconstantPipelineLayout$OFFSET, fieldValue);
    }

    private static final OfInt pushconstantShaderStageFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pushconstantShaderStageFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderStageFlags pushconstantShaderStageFlags
     * }
     */
    public static final OfInt pushconstantShaderStageFlags$layout() {
        return pushconstantShaderStageFlags$LAYOUT;
    }

    private static final long pushconstantShaderStageFlags$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderStageFlags pushconstantShaderStageFlags
     * }
     */
    public static final long pushconstantShaderStageFlags$offset() {
        return pushconstantShaderStageFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags pushconstantShaderStageFlags
     * }
     */
    public static int pushconstantShaderStageFlags(MemorySegment struct) {
        return struct.get(pushconstantShaderStageFlags$LAYOUT, pushconstantShaderStageFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags pushconstantShaderStageFlags
     * }
     */
    public static void pushconstantShaderStageFlags(MemorySegment struct, int fieldValue) {
        struct.set(pushconstantShaderStageFlags$LAYOUT, pushconstantShaderStageFlags$OFFSET, fieldValue);
    }

    private static final OfInt pushconstantOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pushconstantOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pushconstantOffset
     * }
     */
    public static final OfInt pushconstantOffset$layout() {
        return pushconstantOffset$LAYOUT;
    }

    private static final long pushconstantOffset$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pushconstantOffset
     * }
     */
    public static final long pushconstantOffset$offset() {
        return pushconstantOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pushconstantOffset
     * }
     */
    public static int pushconstantOffset(MemorySegment struct) {
        return struct.get(pushconstantOffset$LAYOUT, pushconstantOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pushconstantOffset
     * }
     */
    public static void pushconstantOffset(MemorySegment struct, int fieldValue) {
        struct.set(pushconstantOffset$LAYOUT, pushconstantOffset$OFFSET, fieldValue);
    }

    private static final OfInt pushconstantSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pushconstantSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pushconstantSize
     * }
     */
    public static final OfInt pushconstantSize$layout() {
        return pushconstantSize$LAYOUT;
    }

    private static final long pushconstantSize$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pushconstantSize
     * }
     */
    public static final long pushconstantSize$offset() {
        return pushconstantSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pushconstantSize
     * }
     */
    public static int pushconstantSize(MemorySegment struct) {
        return struct.get(pushconstantSize$LAYOUT, pushconstantSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pushconstantSize
     * }
     */
    public static void pushconstantSize(MemorySegment struct, int fieldValue) {
        struct.set(pushconstantSize$LAYOUT, pushconstantSize$OFFSET, fieldValue);
    }

    private static final OfInt indirectStateFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("indirectStateFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkIndirectStateFlagsNV indirectStateFlags
     * }
     */
    public static final OfInt indirectStateFlags$layout() {
        return indirectStateFlags$LAYOUT;
    }

    private static final long indirectStateFlags$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkIndirectStateFlagsNV indirectStateFlags
     * }
     */
    public static final long indirectStateFlags$offset() {
        return indirectStateFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkIndirectStateFlagsNV indirectStateFlags
     * }
     */
    public static int indirectStateFlags(MemorySegment struct) {
        return struct.get(indirectStateFlags$LAYOUT, indirectStateFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkIndirectStateFlagsNV indirectStateFlags
     * }
     */
    public static void indirectStateFlags(MemorySegment struct, int fieldValue) {
        struct.set(indirectStateFlags$LAYOUT, indirectStateFlags$OFFSET, fieldValue);
    }

    private static final OfInt indexTypeCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("indexTypeCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t indexTypeCount
     * }
     */
    public static final OfInt indexTypeCount$layout() {
        return indexTypeCount$LAYOUT;
    }

    private static final long indexTypeCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t indexTypeCount
     * }
     */
    public static final long indexTypeCount$offset() {
        return indexTypeCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t indexTypeCount
     * }
     */
    public static int indexTypeCount(MemorySegment struct) {
        return struct.get(indexTypeCount$LAYOUT, indexTypeCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t indexTypeCount
     * }
     */
    public static void indexTypeCount(MemorySegment struct, int fieldValue) {
        struct.set(indexTypeCount$LAYOUT, indexTypeCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pIndexTypes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pIndexTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkIndexType *pIndexTypes
     * }
     */
    public static final AddressLayout pIndexTypes$layout() {
        return pIndexTypes$LAYOUT;
    }

    private static final long pIndexTypes$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkIndexType *pIndexTypes
     * }
     */
    public static final long pIndexTypes$offset() {
        return pIndexTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkIndexType *pIndexTypes
     * }
     */
    public static MemorySegment pIndexTypes(MemorySegment struct) {
        return struct.get(pIndexTypes$LAYOUT, pIndexTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkIndexType *pIndexTypes
     * }
     */
    public static void pIndexTypes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pIndexTypes$LAYOUT, pIndexTypes$OFFSET, fieldValue);
    }

    private static final AddressLayout pIndexTypeValues$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pIndexTypeValues"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint32_t *pIndexTypeValues
     * }
     */
    public static final AddressLayout pIndexTypeValues$layout() {
        return pIndexTypeValues$LAYOUT;
    }

    private static final long pIndexTypeValues$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint32_t *pIndexTypeValues
     * }
     */
    public static final long pIndexTypeValues$offset() {
        return pIndexTypeValues$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint32_t *pIndexTypeValues
     * }
     */
    public static MemorySegment pIndexTypeValues(MemorySegment struct) {
        return struct.get(pIndexTypeValues$LAYOUT, pIndexTypeValues$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint32_t *pIndexTypeValues
     * }
     */
    public static void pIndexTypeValues(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pIndexTypeValues$LAYOUT, pIndexTypeValues$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

