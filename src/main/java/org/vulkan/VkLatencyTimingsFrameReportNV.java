// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkLatencyTimingsFrameReportNV {
 *     VkStructureType sType;
 *     const void *pNext;
 *     uint64_t presentID;
 *     uint64_t inputSampleTimeUs;
 *     uint64_t simStartTimeUs;
 *     uint64_t simEndTimeUs;
 *     uint64_t renderSubmitStartTimeUs;
 *     uint64_t renderSubmitEndTimeUs;
 *     uint64_t presentStartTimeUs;
 *     uint64_t presentEndTimeUs;
 *     uint64_t driverStartTimeUs;
 *     uint64_t driverEndTimeUs;
 *     uint64_t osRenderQueueStartTimeUs;
 *     uint64_t osRenderQueueEndTimeUs;
 *     uint64_t gpuRenderStartTimeUs;
 *     uint64_t gpuRenderEndTimeUs;
 * }
 * }
 */
public class VkLatencyTimingsFrameReportNV {

    VkLatencyTimingsFrameReportNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_LONG_LONG.withName("presentID"),
        vulkan_h.C_LONG_LONG.withName("inputSampleTimeUs"),
        vulkan_h.C_LONG_LONG.withName("simStartTimeUs"),
        vulkan_h.C_LONG_LONG.withName("simEndTimeUs"),
        vulkan_h.C_LONG_LONG.withName("renderSubmitStartTimeUs"),
        vulkan_h.C_LONG_LONG.withName("renderSubmitEndTimeUs"),
        vulkan_h.C_LONG_LONG.withName("presentStartTimeUs"),
        vulkan_h.C_LONG_LONG.withName("presentEndTimeUs"),
        vulkan_h.C_LONG_LONG.withName("driverStartTimeUs"),
        vulkan_h.C_LONG_LONG.withName("driverEndTimeUs"),
        vulkan_h.C_LONG_LONG.withName("osRenderQueueStartTimeUs"),
        vulkan_h.C_LONG_LONG.withName("osRenderQueueEndTimeUs"),
        vulkan_h.C_LONG_LONG.withName("gpuRenderStartTimeUs"),
        vulkan_h.C_LONG_LONG.withName("gpuRenderEndTimeUs")
    ).withName("VkLatencyTimingsFrameReportNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfLong presentID$LAYOUT = (OfLong)$LAYOUT.select(groupElement("presentID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t presentID
     * }
     */
    public static final OfLong presentID$layout() {
        return presentID$LAYOUT;
    }

    private static final long presentID$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t presentID
     * }
     */
    public static final long presentID$offset() {
        return presentID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t presentID
     * }
     */
    public static long presentID(MemorySegment struct) {
        return struct.get(presentID$LAYOUT, presentID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t presentID
     * }
     */
    public static void presentID(MemorySegment struct, long fieldValue) {
        struct.set(presentID$LAYOUT, presentID$OFFSET, fieldValue);
    }

    private static final OfLong inputSampleTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("inputSampleTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t inputSampleTimeUs
     * }
     */
    public static final OfLong inputSampleTimeUs$layout() {
        return inputSampleTimeUs$LAYOUT;
    }

    private static final long inputSampleTimeUs$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t inputSampleTimeUs
     * }
     */
    public static final long inputSampleTimeUs$offset() {
        return inputSampleTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t inputSampleTimeUs
     * }
     */
    public static long inputSampleTimeUs(MemorySegment struct) {
        return struct.get(inputSampleTimeUs$LAYOUT, inputSampleTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t inputSampleTimeUs
     * }
     */
    public static void inputSampleTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(inputSampleTimeUs$LAYOUT, inputSampleTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong simStartTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("simStartTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t simStartTimeUs
     * }
     */
    public static final OfLong simStartTimeUs$layout() {
        return simStartTimeUs$LAYOUT;
    }

    private static final long simStartTimeUs$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t simStartTimeUs
     * }
     */
    public static final long simStartTimeUs$offset() {
        return simStartTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t simStartTimeUs
     * }
     */
    public static long simStartTimeUs(MemorySegment struct) {
        return struct.get(simStartTimeUs$LAYOUT, simStartTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t simStartTimeUs
     * }
     */
    public static void simStartTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(simStartTimeUs$LAYOUT, simStartTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong simEndTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("simEndTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t simEndTimeUs
     * }
     */
    public static final OfLong simEndTimeUs$layout() {
        return simEndTimeUs$LAYOUT;
    }

    private static final long simEndTimeUs$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t simEndTimeUs
     * }
     */
    public static final long simEndTimeUs$offset() {
        return simEndTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t simEndTimeUs
     * }
     */
    public static long simEndTimeUs(MemorySegment struct) {
        return struct.get(simEndTimeUs$LAYOUT, simEndTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t simEndTimeUs
     * }
     */
    public static void simEndTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(simEndTimeUs$LAYOUT, simEndTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong renderSubmitStartTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("renderSubmitStartTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitStartTimeUs
     * }
     */
    public static final OfLong renderSubmitStartTimeUs$layout() {
        return renderSubmitStartTimeUs$LAYOUT;
    }

    private static final long renderSubmitStartTimeUs$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitStartTimeUs
     * }
     */
    public static final long renderSubmitStartTimeUs$offset() {
        return renderSubmitStartTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitStartTimeUs
     * }
     */
    public static long renderSubmitStartTimeUs(MemorySegment struct) {
        return struct.get(renderSubmitStartTimeUs$LAYOUT, renderSubmitStartTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitStartTimeUs
     * }
     */
    public static void renderSubmitStartTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(renderSubmitStartTimeUs$LAYOUT, renderSubmitStartTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong renderSubmitEndTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("renderSubmitEndTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitEndTimeUs
     * }
     */
    public static final OfLong renderSubmitEndTimeUs$layout() {
        return renderSubmitEndTimeUs$LAYOUT;
    }

    private static final long renderSubmitEndTimeUs$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitEndTimeUs
     * }
     */
    public static final long renderSubmitEndTimeUs$offset() {
        return renderSubmitEndTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitEndTimeUs
     * }
     */
    public static long renderSubmitEndTimeUs(MemorySegment struct) {
        return struct.get(renderSubmitEndTimeUs$LAYOUT, renderSubmitEndTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t renderSubmitEndTimeUs
     * }
     */
    public static void renderSubmitEndTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(renderSubmitEndTimeUs$LAYOUT, renderSubmitEndTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong presentStartTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("presentStartTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t presentStartTimeUs
     * }
     */
    public static final OfLong presentStartTimeUs$layout() {
        return presentStartTimeUs$LAYOUT;
    }

    private static final long presentStartTimeUs$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t presentStartTimeUs
     * }
     */
    public static final long presentStartTimeUs$offset() {
        return presentStartTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t presentStartTimeUs
     * }
     */
    public static long presentStartTimeUs(MemorySegment struct) {
        return struct.get(presentStartTimeUs$LAYOUT, presentStartTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t presentStartTimeUs
     * }
     */
    public static void presentStartTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(presentStartTimeUs$LAYOUT, presentStartTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong presentEndTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("presentEndTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t presentEndTimeUs
     * }
     */
    public static final OfLong presentEndTimeUs$layout() {
        return presentEndTimeUs$LAYOUT;
    }

    private static final long presentEndTimeUs$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t presentEndTimeUs
     * }
     */
    public static final long presentEndTimeUs$offset() {
        return presentEndTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t presentEndTimeUs
     * }
     */
    public static long presentEndTimeUs(MemorySegment struct) {
        return struct.get(presentEndTimeUs$LAYOUT, presentEndTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t presentEndTimeUs
     * }
     */
    public static void presentEndTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(presentEndTimeUs$LAYOUT, presentEndTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong driverStartTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("driverStartTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t driverStartTimeUs
     * }
     */
    public static final OfLong driverStartTimeUs$layout() {
        return driverStartTimeUs$LAYOUT;
    }

    private static final long driverStartTimeUs$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t driverStartTimeUs
     * }
     */
    public static final long driverStartTimeUs$offset() {
        return driverStartTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t driverStartTimeUs
     * }
     */
    public static long driverStartTimeUs(MemorySegment struct) {
        return struct.get(driverStartTimeUs$LAYOUT, driverStartTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t driverStartTimeUs
     * }
     */
    public static void driverStartTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(driverStartTimeUs$LAYOUT, driverStartTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong driverEndTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("driverEndTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t driverEndTimeUs
     * }
     */
    public static final OfLong driverEndTimeUs$layout() {
        return driverEndTimeUs$LAYOUT;
    }

    private static final long driverEndTimeUs$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t driverEndTimeUs
     * }
     */
    public static final long driverEndTimeUs$offset() {
        return driverEndTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t driverEndTimeUs
     * }
     */
    public static long driverEndTimeUs(MemorySegment struct) {
        return struct.get(driverEndTimeUs$LAYOUT, driverEndTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t driverEndTimeUs
     * }
     */
    public static void driverEndTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(driverEndTimeUs$LAYOUT, driverEndTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong osRenderQueueStartTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("osRenderQueueStartTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueStartTimeUs
     * }
     */
    public static final OfLong osRenderQueueStartTimeUs$layout() {
        return osRenderQueueStartTimeUs$LAYOUT;
    }

    private static final long osRenderQueueStartTimeUs$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueStartTimeUs
     * }
     */
    public static final long osRenderQueueStartTimeUs$offset() {
        return osRenderQueueStartTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueStartTimeUs
     * }
     */
    public static long osRenderQueueStartTimeUs(MemorySegment struct) {
        return struct.get(osRenderQueueStartTimeUs$LAYOUT, osRenderQueueStartTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueStartTimeUs
     * }
     */
    public static void osRenderQueueStartTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(osRenderQueueStartTimeUs$LAYOUT, osRenderQueueStartTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong osRenderQueueEndTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("osRenderQueueEndTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueEndTimeUs
     * }
     */
    public static final OfLong osRenderQueueEndTimeUs$layout() {
        return osRenderQueueEndTimeUs$LAYOUT;
    }

    private static final long osRenderQueueEndTimeUs$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueEndTimeUs
     * }
     */
    public static final long osRenderQueueEndTimeUs$offset() {
        return osRenderQueueEndTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueEndTimeUs
     * }
     */
    public static long osRenderQueueEndTimeUs(MemorySegment struct) {
        return struct.get(osRenderQueueEndTimeUs$LAYOUT, osRenderQueueEndTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t osRenderQueueEndTimeUs
     * }
     */
    public static void osRenderQueueEndTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(osRenderQueueEndTimeUs$LAYOUT, osRenderQueueEndTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong gpuRenderStartTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("gpuRenderStartTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderStartTimeUs
     * }
     */
    public static final OfLong gpuRenderStartTimeUs$layout() {
        return gpuRenderStartTimeUs$LAYOUT;
    }

    private static final long gpuRenderStartTimeUs$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderStartTimeUs
     * }
     */
    public static final long gpuRenderStartTimeUs$offset() {
        return gpuRenderStartTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderStartTimeUs
     * }
     */
    public static long gpuRenderStartTimeUs(MemorySegment struct) {
        return struct.get(gpuRenderStartTimeUs$LAYOUT, gpuRenderStartTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderStartTimeUs
     * }
     */
    public static void gpuRenderStartTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(gpuRenderStartTimeUs$LAYOUT, gpuRenderStartTimeUs$OFFSET, fieldValue);
    }

    private static final OfLong gpuRenderEndTimeUs$LAYOUT = (OfLong)$LAYOUT.select(groupElement("gpuRenderEndTimeUs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderEndTimeUs
     * }
     */
    public static final OfLong gpuRenderEndTimeUs$layout() {
        return gpuRenderEndTimeUs$LAYOUT;
    }

    private static final long gpuRenderEndTimeUs$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderEndTimeUs
     * }
     */
    public static final long gpuRenderEndTimeUs$offset() {
        return gpuRenderEndTimeUs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderEndTimeUs
     * }
     */
    public static long gpuRenderEndTimeUs(MemorySegment struct) {
        return struct.get(gpuRenderEndTimeUs$LAYOUT, gpuRenderEndTimeUs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t gpuRenderEndTimeUs
     * }
     */
    public static void gpuRenderEndTimeUs(MemorySegment struct, long fieldValue) {
        struct.set(gpuRenderEndTimeUs$LAYOUT, gpuRenderEndTimeUs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

