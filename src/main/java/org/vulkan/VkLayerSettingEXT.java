// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkLayerSettingEXT {
 *     const char *pLayerName;
 *     const char *pSettingName;
 *     VkLayerSettingTypeEXT type;
 *     uint32_t valueCount;
 *     const void *pValues;
 * }
 * }
 */
public class VkLayerSettingEXT {

    VkLayerSettingEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_POINTER.withName("pLayerName"),
        vulkan_h.C_POINTER.withName("pSettingName"),
        vulkan_h.C_INT.withName("type"),
        vulkan_h.C_INT.withName("valueCount"),
        vulkan_h.C_POINTER.withName("pValues")
    ).withName("VkLayerSettingEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout pLayerName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pLayerName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *pLayerName
     * }
     */
    public static final AddressLayout pLayerName$layout() {
        return pLayerName$LAYOUT;
    }

    private static final long pLayerName$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *pLayerName
     * }
     */
    public static final long pLayerName$offset() {
        return pLayerName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *pLayerName
     * }
     */
    public static MemorySegment pLayerName(MemorySegment struct) {
        return struct.get(pLayerName$LAYOUT, pLayerName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *pLayerName
     * }
     */
    public static void pLayerName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pLayerName$LAYOUT, pLayerName$OFFSET, fieldValue);
    }

    private static final AddressLayout pSettingName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSettingName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *pSettingName
     * }
     */
    public static final AddressLayout pSettingName$layout() {
        return pSettingName$LAYOUT;
    }

    private static final long pSettingName$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *pSettingName
     * }
     */
    public static final long pSettingName$offset() {
        return pSettingName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *pSettingName
     * }
     */
    public static MemorySegment pSettingName(MemorySegment struct) {
        return struct.get(pSettingName$LAYOUT, pSettingName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *pSettingName
     * }
     */
    public static void pSettingName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSettingName$LAYOUT, pSettingName$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkLayerSettingTypeEXT type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkLayerSettingTypeEXT type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkLayerSettingTypeEXT type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkLayerSettingTypeEXT type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt valueCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("valueCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t valueCount
     * }
     */
    public static final OfInt valueCount$layout() {
        return valueCount$LAYOUT;
    }

    private static final long valueCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t valueCount
     * }
     */
    public static final long valueCount$offset() {
        return valueCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t valueCount
     * }
     */
    public static int valueCount(MemorySegment struct) {
        return struct.get(valueCount$LAYOUT, valueCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t valueCount
     * }
     */
    public static void valueCount(MemorySegment struct, int fieldValue) {
        struct.set(valueCount$LAYOUT, valueCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pValues$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pValues"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pValues
     * }
     */
    public static final AddressLayout pValues$layout() {
        return pValues$LAYOUT;
    }

    private static final long pValues$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pValues
     * }
     */
    public static final long pValues$offset() {
        return pValues$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pValues
     * }
     */
    public static MemorySegment pValues(MemorySegment struct) {
        return struct.get(pValues$LAYOUT, pValues$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pValues
     * }
     */
    public static void pValues(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pValues$LAYOUT, pValues$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

