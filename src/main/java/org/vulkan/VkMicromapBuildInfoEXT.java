// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkMicromapBuildInfoEXT {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkMicromapTypeEXT type;
 *     VkBuildMicromapFlagsEXT flags;
 *     VkBuildMicromapModeEXT mode;
 *     VkMicromapEXT dstMicromap;
 *     uint32_t usageCountsCount;
 *     const VkMicromapUsageEXT *pUsageCounts;
 *     const VkMicromapUsageEXT *const *ppUsageCounts;
 *     VkDeviceOrHostAddressConstKHR data;
 *     VkDeviceOrHostAddressKHR scratchData;
 *     VkDeviceOrHostAddressConstKHR triangleArray;
 *     VkDeviceSize triangleArrayStride;
 * }
 * }
 */
public class VkMicromapBuildInfoEXT {

    VkMicromapBuildInfoEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("type"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("mode"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("dstMicromap"),
        vulkan_h.C_INT.withName("usageCountsCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pUsageCounts"),
        vulkan_h.C_POINTER.withName("ppUsageCounts"),
        VkDeviceOrHostAddressConstKHR.layout().withName("data"),
        VkDeviceOrHostAddressKHR.layout().withName("scratchData"),
        VkDeviceOrHostAddressConstKHR.layout().withName("triangleArray"),
        vulkan_h.C_LONG_LONG.withName("triangleArrayStride")
    ).withName("VkMicromapBuildInfoEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkMicromapTypeEXT type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkMicromapTypeEXT type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkMicromapTypeEXT type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkMicromapTypeEXT type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBuildMicromapFlagsEXT flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBuildMicromapFlagsEXT flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBuildMicromapFlagsEXT flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBuildMicromapFlagsEXT flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBuildMicromapModeEXT mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBuildMicromapModeEXT mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBuildMicromapModeEXT mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBuildMicromapModeEXT mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final AddressLayout dstMicromap$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dstMicromap"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkMicromapEXT dstMicromap
     * }
     */
    public static final AddressLayout dstMicromap$layout() {
        return dstMicromap$LAYOUT;
    }

    private static final long dstMicromap$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkMicromapEXT dstMicromap
     * }
     */
    public static final long dstMicromap$offset() {
        return dstMicromap$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkMicromapEXT dstMicromap
     * }
     */
    public static MemorySegment dstMicromap(MemorySegment struct) {
        return struct.get(dstMicromap$LAYOUT, dstMicromap$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkMicromapEXT dstMicromap
     * }
     */
    public static void dstMicromap(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dstMicromap$LAYOUT, dstMicromap$OFFSET, fieldValue);
    }

    private static final OfInt usageCountsCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("usageCountsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static final OfInt usageCountsCount$layout() {
        return usageCountsCount$LAYOUT;
    }

    private static final long usageCountsCount$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static final long usageCountsCount$offset() {
        return usageCountsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static int usageCountsCount(MemorySegment struct) {
        return struct.get(usageCountsCount$LAYOUT, usageCountsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t usageCountsCount
     * }
     */
    public static void usageCountsCount(MemorySegment struct, int fieldValue) {
        struct.set(usageCountsCount$LAYOUT, usageCountsCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pUsageCounts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pUsageCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static final AddressLayout pUsageCounts$layout() {
        return pUsageCounts$LAYOUT;
    }

    private static final long pUsageCounts$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static final long pUsageCounts$offset() {
        return pUsageCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static MemorySegment pUsageCounts(MemorySegment struct) {
        return struct.get(pUsageCounts$LAYOUT, pUsageCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *pUsageCounts
     * }
     */
    public static void pUsageCounts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pUsageCounts$LAYOUT, pUsageCounts$OFFSET, fieldValue);
    }

    private static final AddressLayout ppUsageCounts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ppUsageCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static final AddressLayout ppUsageCounts$layout() {
        return ppUsageCounts$LAYOUT;
    }

    private static final long ppUsageCounts$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static final long ppUsageCounts$offset() {
        return ppUsageCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static MemorySegment ppUsageCounts(MemorySegment struct) {
        return struct.get(ppUsageCounts$LAYOUT, ppUsageCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkMicromapUsageEXT *const *ppUsageCounts
     * }
     */
    public static void ppUsageCounts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(ppUsageCounts$LAYOUT, ppUsageCounts$OFFSET, fieldValue);
    }

    private static final GroupLayout data$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR data
     * }
     */
    public static final GroupLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.asSlice(data$OFFSET, data$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, data$OFFSET, data$LAYOUT.byteSize());
    }

    private static final GroupLayout scratchData$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("scratchData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressKHR scratchData
     * }
     */
    public static final GroupLayout scratchData$layout() {
        return scratchData$LAYOUT;
    }

    private static final long scratchData$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressKHR scratchData
     * }
     */
    public static final long scratchData$offset() {
        return scratchData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressKHR scratchData
     * }
     */
    public static MemorySegment scratchData(MemorySegment struct) {
        return struct.asSlice(scratchData$OFFSET, scratchData$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressKHR scratchData
     * }
     */
    public static void scratchData(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, scratchData$OFFSET, scratchData$LAYOUT.byteSize());
    }

    private static final GroupLayout triangleArray$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("triangleArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR triangleArray
     * }
     */
    public static final GroupLayout triangleArray$layout() {
        return triangleArray$LAYOUT;
    }

    private static final long triangleArray$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR triangleArray
     * }
     */
    public static final long triangleArray$offset() {
        return triangleArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR triangleArray
     * }
     */
    public static MemorySegment triangleArray(MemorySegment struct) {
        return struct.asSlice(triangleArray$OFFSET, triangleArray$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceOrHostAddressConstKHR triangleArray
     * }
     */
    public static void triangleArray(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, triangleArray$OFFSET, triangleArray$LAYOUT.byteSize());
    }

    private static final OfLong triangleArrayStride$LAYOUT = (OfLong)$LAYOUT.select(groupElement("triangleArrayStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize triangleArrayStride
     * }
     */
    public static final OfLong triangleArrayStride$layout() {
        return triangleArrayStride$LAYOUT;
    }

    private static final long triangleArrayStride$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize triangleArrayStride
     * }
     */
    public static final long triangleArrayStride$offset() {
        return triangleArrayStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize triangleArrayStride
     * }
     */
    public static long triangleArrayStride(MemorySegment struct) {
        return struct.get(triangleArrayStride$LAYOUT, triangleArrayStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize triangleArrayStride
     * }
     */
    public static void triangleArrayStride(MemorySegment struct, long fieldValue) {
        struct.set(triangleArrayStride$LAYOUT, triangleArrayStride$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

