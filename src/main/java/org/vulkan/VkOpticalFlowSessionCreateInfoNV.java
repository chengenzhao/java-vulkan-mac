// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkOpticalFlowSessionCreateInfoNV {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint32_t width;
 *     uint32_t height;
 *     VkFormat imageFormat;
 *     VkFormat flowVectorFormat;
 *     VkFormat costFormat;
 *     VkOpticalFlowGridSizeFlagsNV outputGridSize;
 *     VkOpticalFlowGridSizeFlagsNV hintGridSize;
 *     VkOpticalFlowPerformanceLevelNV performanceLevel;
 *     VkOpticalFlowSessionCreateFlagsNV flags;
 * }
 * }
 */
public class VkOpticalFlowSessionCreateInfoNV {

    VkOpticalFlowSessionCreateInfoNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("width"),
        vulkan_h.C_INT.withName("height"),
        vulkan_h.C_INT.withName("imageFormat"),
        vulkan_h.C_INT.withName("flowVectorFormat"),
        vulkan_h.C_INT.withName("costFormat"),
        vulkan_h.C_INT.withName("outputGridSize"),
        vulkan_h.C_INT.withName("hintGridSize"),
        vulkan_h.C_INT.withName("performanceLevel"),
        vulkan_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkOpticalFlowSessionCreateInfoNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt imageFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat imageFormat
     * }
     */
    public static final OfInt imageFormat$layout() {
        return imageFormat$LAYOUT;
    }

    private static final long imageFormat$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat imageFormat
     * }
     */
    public static final long imageFormat$offset() {
        return imageFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat imageFormat
     * }
     */
    public static int imageFormat(MemorySegment struct) {
        return struct.get(imageFormat$LAYOUT, imageFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat imageFormat
     * }
     */
    public static void imageFormat(MemorySegment struct, int fieldValue) {
        struct.set(imageFormat$LAYOUT, imageFormat$OFFSET, fieldValue);
    }

    private static final OfInt flowVectorFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flowVectorFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat flowVectorFormat
     * }
     */
    public static final OfInt flowVectorFormat$layout() {
        return flowVectorFormat$LAYOUT;
    }

    private static final long flowVectorFormat$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat flowVectorFormat
     * }
     */
    public static final long flowVectorFormat$offset() {
        return flowVectorFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat flowVectorFormat
     * }
     */
    public static int flowVectorFormat(MemorySegment struct) {
        return struct.get(flowVectorFormat$LAYOUT, flowVectorFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat flowVectorFormat
     * }
     */
    public static void flowVectorFormat(MemorySegment struct, int fieldValue) {
        struct.set(flowVectorFormat$LAYOUT, flowVectorFormat$OFFSET, fieldValue);
    }

    private static final OfInt costFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("costFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat costFormat
     * }
     */
    public static final OfInt costFormat$layout() {
        return costFormat$LAYOUT;
    }

    private static final long costFormat$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat costFormat
     * }
     */
    public static final long costFormat$offset() {
        return costFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat costFormat
     * }
     */
    public static int costFormat(MemorySegment struct) {
        return struct.get(costFormat$LAYOUT, costFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat costFormat
     * }
     */
    public static void costFormat(MemorySegment struct, int fieldValue) {
        struct.set(costFormat$LAYOUT, costFormat$OFFSET, fieldValue);
    }

    private static final OfInt outputGridSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("outputGridSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV outputGridSize
     * }
     */
    public static final OfInt outputGridSize$layout() {
        return outputGridSize$LAYOUT;
    }

    private static final long outputGridSize$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV outputGridSize
     * }
     */
    public static final long outputGridSize$offset() {
        return outputGridSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV outputGridSize
     * }
     */
    public static int outputGridSize(MemorySegment struct) {
        return struct.get(outputGridSize$LAYOUT, outputGridSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV outputGridSize
     * }
     */
    public static void outputGridSize(MemorySegment struct, int fieldValue) {
        struct.set(outputGridSize$LAYOUT, outputGridSize$OFFSET, fieldValue);
    }

    private static final OfInt hintGridSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hintGridSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV hintGridSize
     * }
     */
    public static final OfInt hintGridSize$layout() {
        return hintGridSize$LAYOUT;
    }

    private static final long hintGridSize$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV hintGridSize
     * }
     */
    public static final long hintGridSize$offset() {
        return hintGridSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV hintGridSize
     * }
     */
    public static int hintGridSize(MemorySegment struct) {
        return struct.get(hintGridSize$LAYOUT, hintGridSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV hintGridSize
     * }
     */
    public static void hintGridSize(MemorySegment struct, int fieldValue) {
        struct.set(hintGridSize$LAYOUT, hintGridSize$OFFSET, fieldValue);
    }

    private static final OfInt performanceLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("performanceLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOpticalFlowPerformanceLevelNV performanceLevel
     * }
     */
    public static final OfInt performanceLevel$layout() {
        return performanceLevel$LAYOUT;
    }

    private static final long performanceLevel$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOpticalFlowPerformanceLevelNV performanceLevel
     * }
     */
    public static final long performanceLevel$offset() {
        return performanceLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOpticalFlowPerformanceLevelNV performanceLevel
     * }
     */
    public static int performanceLevel(MemorySegment struct) {
        return struct.get(performanceLevel$LAYOUT, performanceLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOpticalFlowPerformanceLevelNV performanceLevel
     * }
     */
    public static void performanceLevel(MemorySegment struct, int fieldValue) {
        struct.set(performanceLevel$LAYOUT, performanceLevel$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOpticalFlowSessionCreateFlagsNV flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOpticalFlowSessionCreateFlagsNV flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOpticalFlowSessionCreateFlagsNV flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOpticalFlowSessionCreateFlagsNV flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

