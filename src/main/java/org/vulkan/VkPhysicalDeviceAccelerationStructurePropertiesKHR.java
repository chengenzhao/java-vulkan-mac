// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceAccelerationStructurePropertiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint64_t maxGeometryCount;
 *     uint64_t maxInstanceCount;
 *     uint64_t maxPrimitiveCount;
 *     uint32_t maxPerStageDescriptorAccelerationStructures;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
 *     uint32_t maxDescriptorSetAccelerationStructures;
 *     uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures;
 *     uint32_t minAccelerationStructureScratchOffsetAlignment;
 * }
 * }
 */
public class VkPhysicalDeviceAccelerationStructurePropertiesKHR {

    VkPhysicalDeviceAccelerationStructurePropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_LONG_LONG.withName("maxGeometryCount"),
        vulkan_h.C_LONG_LONG.withName("maxInstanceCount"),
        vulkan_h.C_LONG_LONG.withName("maxPrimitiveCount"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorAccelerationStructures"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUpdateAfterBindAccelerationStructures"),
        vulkan_h.C_INT.withName("maxDescriptorSetAccelerationStructures"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindAccelerationStructures"),
        vulkan_h.C_INT.withName("minAccelerationStructureScratchOffsetAlignment"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceAccelerationStructurePropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfLong maxGeometryCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maxGeometryCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t maxGeometryCount
     * }
     */
    public static final OfLong maxGeometryCount$layout() {
        return maxGeometryCount$LAYOUT;
    }

    private static final long maxGeometryCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t maxGeometryCount
     * }
     */
    public static final long maxGeometryCount$offset() {
        return maxGeometryCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t maxGeometryCount
     * }
     */
    public static long maxGeometryCount(MemorySegment struct) {
        return struct.get(maxGeometryCount$LAYOUT, maxGeometryCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t maxGeometryCount
     * }
     */
    public static void maxGeometryCount(MemorySegment struct, long fieldValue) {
        struct.set(maxGeometryCount$LAYOUT, maxGeometryCount$OFFSET, fieldValue);
    }

    private static final OfLong maxInstanceCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maxInstanceCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t maxInstanceCount
     * }
     */
    public static final OfLong maxInstanceCount$layout() {
        return maxInstanceCount$LAYOUT;
    }

    private static final long maxInstanceCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t maxInstanceCount
     * }
     */
    public static final long maxInstanceCount$offset() {
        return maxInstanceCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t maxInstanceCount
     * }
     */
    public static long maxInstanceCount(MemorySegment struct) {
        return struct.get(maxInstanceCount$LAYOUT, maxInstanceCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t maxInstanceCount
     * }
     */
    public static void maxInstanceCount(MemorySegment struct, long fieldValue) {
        struct.set(maxInstanceCount$LAYOUT, maxInstanceCount$OFFSET, fieldValue);
    }

    private static final OfLong maxPrimitiveCount$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maxPrimitiveCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t maxPrimitiveCount
     * }
     */
    public static final OfLong maxPrimitiveCount$layout() {
        return maxPrimitiveCount$LAYOUT;
    }

    private static final long maxPrimitiveCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t maxPrimitiveCount
     * }
     */
    public static final long maxPrimitiveCount$offset() {
        return maxPrimitiveCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t maxPrimitiveCount
     * }
     */
    public static long maxPrimitiveCount(MemorySegment struct) {
        return struct.get(maxPrimitiveCount$LAYOUT, maxPrimitiveCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t maxPrimitiveCount
     * }
     */
    public static void maxPrimitiveCount(MemorySegment struct, long fieldValue) {
        struct.set(maxPrimitiveCount$LAYOUT, maxPrimitiveCount$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorAccelerationStructures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorAccelerationStructures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorAccelerationStructures
     * }
     */
    public static final OfInt maxPerStageDescriptorAccelerationStructures$layout() {
        return maxPerStageDescriptorAccelerationStructures$LAYOUT;
    }

    private static final long maxPerStageDescriptorAccelerationStructures$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorAccelerationStructures
     * }
     */
    public static final long maxPerStageDescriptorAccelerationStructures$offset() {
        return maxPerStageDescriptorAccelerationStructures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorAccelerationStructures
     * }
     */
    public static int maxPerStageDescriptorAccelerationStructures(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorAccelerationStructures$LAYOUT, maxPerStageDescriptorAccelerationStructures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorAccelerationStructures
     * }
     */
    public static void maxPerStageDescriptorAccelerationStructures(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorAccelerationStructures$LAYOUT, maxPerStageDescriptorAccelerationStructures$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUpdateAfterBindAccelerationStructures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUpdateAfterBindAccelerationStructures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures
     * }
     */
    public static final OfInt maxPerStageDescriptorUpdateAfterBindAccelerationStructures$layout() {
        return maxPerStageDescriptorUpdateAfterBindAccelerationStructures$LAYOUT;
    }

    private static final long maxPerStageDescriptorUpdateAfterBindAccelerationStructures$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures
     * }
     */
    public static final long maxPerStageDescriptorUpdateAfterBindAccelerationStructures$offset() {
        return maxPerStageDescriptorUpdateAfterBindAccelerationStructures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindAccelerationStructures(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUpdateAfterBindAccelerationStructures$LAYOUT, maxPerStageDescriptorUpdateAfterBindAccelerationStructures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindAccelerationStructures
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindAccelerationStructures(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUpdateAfterBindAccelerationStructures$LAYOUT, maxPerStageDescriptorUpdateAfterBindAccelerationStructures$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetAccelerationStructures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetAccelerationStructures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetAccelerationStructures
     * }
     */
    public static final OfInt maxDescriptorSetAccelerationStructures$layout() {
        return maxDescriptorSetAccelerationStructures$LAYOUT;
    }

    private static final long maxDescriptorSetAccelerationStructures$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetAccelerationStructures
     * }
     */
    public static final long maxDescriptorSetAccelerationStructures$offset() {
        return maxDescriptorSetAccelerationStructures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetAccelerationStructures
     * }
     */
    public static int maxDescriptorSetAccelerationStructures(MemorySegment struct) {
        return struct.get(maxDescriptorSetAccelerationStructures$LAYOUT, maxDescriptorSetAccelerationStructures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetAccelerationStructures
     * }
     */
    public static void maxDescriptorSetAccelerationStructures(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetAccelerationStructures$LAYOUT, maxDescriptorSetAccelerationStructures$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindAccelerationStructures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindAccelerationStructures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindAccelerationStructures$layout() {
        return maxDescriptorSetUpdateAfterBindAccelerationStructures$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindAccelerationStructures$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindAccelerationStructures$offset() {
        return maxDescriptorSetUpdateAfterBindAccelerationStructures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindAccelerationStructures(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindAccelerationStructures$LAYOUT, maxDescriptorSetUpdateAfterBindAccelerationStructures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindAccelerationStructures
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindAccelerationStructures(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindAccelerationStructures$LAYOUT, maxDescriptorSetUpdateAfterBindAccelerationStructures$OFFSET, fieldValue);
    }

    private static final OfInt minAccelerationStructureScratchOffsetAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minAccelerationStructureScratchOffsetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t minAccelerationStructureScratchOffsetAlignment
     * }
     */
    public static final OfInt minAccelerationStructureScratchOffsetAlignment$layout() {
        return minAccelerationStructureScratchOffsetAlignment$LAYOUT;
    }

    private static final long minAccelerationStructureScratchOffsetAlignment$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t minAccelerationStructureScratchOffsetAlignment
     * }
     */
    public static final long minAccelerationStructureScratchOffsetAlignment$offset() {
        return minAccelerationStructureScratchOffsetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t minAccelerationStructureScratchOffsetAlignment
     * }
     */
    public static int minAccelerationStructureScratchOffsetAlignment(MemorySegment struct) {
        return struct.get(minAccelerationStructureScratchOffsetAlignment$LAYOUT, minAccelerationStructureScratchOffsetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t minAccelerationStructureScratchOffsetAlignment
     * }
     */
    public static void minAccelerationStructureScratchOffsetAlignment(MemorySegment struct, int fieldValue) {
        struct.set(minAccelerationStructureScratchOffsetAlignment$LAYOUT, minAccelerationStructureScratchOffsetAlignment$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

