// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     float primitiveOverestimationSize;
 *     float maxExtraPrimitiveOverestimationSize;
 *     float extraPrimitiveOverestimationSizeGranularity;
 *     VkBool32 primitiveUnderestimation;
 *     VkBool32 conservativePointAndLineRasterization;
 *     VkBool32 degenerateTrianglesRasterized;
 *     VkBool32 degenerateLinesRasterized;
 *     VkBool32 fullyCoveredFragmentShaderInputVariable;
 *     VkBool32 conservativeRasterizationPostDepthCoverage;
 * }
 * }
 */
public class VkPhysicalDeviceConservativeRasterizationPropertiesEXT {

    VkPhysicalDeviceConservativeRasterizationPropertiesEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_FLOAT.withName("primitiveOverestimationSize"),
        vulkan_h.C_FLOAT.withName("maxExtraPrimitiveOverestimationSize"),
        vulkan_h.C_FLOAT.withName("extraPrimitiveOverestimationSizeGranularity"),
        vulkan_h.C_INT.withName("primitiveUnderestimation"),
        vulkan_h.C_INT.withName("conservativePointAndLineRasterization"),
        vulkan_h.C_INT.withName("degenerateTrianglesRasterized"),
        vulkan_h.C_INT.withName("degenerateLinesRasterized"),
        vulkan_h.C_INT.withName("fullyCoveredFragmentShaderInputVariable"),
        vulkan_h.C_INT.withName("conservativeRasterizationPostDepthCoverage"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceConservativeRasterizationPropertiesEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfFloat primitiveOverestimationSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("primitiveOverestimationSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float primitiveOverestimationSize
     * }
     */
    public static final OfFloat primitiveOverestimationSize$layout() {
        return primitiveOverestimationSize$LAYOUT;
    }

    private static final long primitiveOverestimationSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float primitiveOverestimationSize
     * }
     */
    public static final long primitiveOverestimationSize$offset() {
        return primitiveOverestimationSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float primitiveOverestimationSize
     * }
     */
    public static float primitiveOverestimationSize(MemorySegment struct) {
        return struct.get(primitiveOverestimationSize$LAYOUT, primitiveOverestimationSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float primitiveOverestimationSize
     * }
     */
    public static void primitiveOverestimationSize(MemorySegment struct, float fieldValue) {
        struct.set(primitiveOverestimationSize$LAYOUT, primitiveOverestimationSize$OFFSET, fieldValue);
    }

    private static final OfFloat maxExtraPrimitiveOverestimationSize$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxExtraPrimitiveOverestimationSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxExtraPrimitiveOverestimationSize
     * }
     */
    public static final OfFloat maxExtraPrimitiveOverestimationSize$layout() {
        return maxExtraPrimitiveOverestimationSize$LAYOUT;
    }

    private static final long maxExtraPrimitiveOverestimationSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxExtraPrimitiveOverestimationSize
     * }
     */
    public static final long maxExtraPrimitiveOverestimationSize$offset() {
        return maxExtraPrimitiveOverestimationSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxExtraPrimitiveOverestimationSize
     * }
     */
    public static float maxExtraPrimitiveOverestimationSize(MemorySegment struct) {
        return struct.get(maxExtraPrimitiveOverestimationSize$LAYOUT, maxExtraPrimitiveOverestimationSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxExtraPrimitiveOverestimationSize
     * }
     */
    public static void maxExtraPrimitiveOverestimationSize(MemorySegment struct, float fieldValue) {
        struct.set(maxExtraPrimitiveOverestimationSize$LAYOUT, maxExtraPrimitiveOverestimationSize$OFFSET, fieldValue);
    }

    private static final OfFloat extraPrimitiveOverestimationSizeGranularity$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("extraPrimitiveOverestimationSizeGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float extraPrimitiveOverestimationSizeGranularity
     * }
     */
    public static final OfFloat extraPrimitiveOverestimationSizeGranularity$layout() {
        return extraPrimitiveOverestimationSizeGranularity$LAYOUT;
    }

    private static final long extraPrimitiveOverestimationSizeGranularity$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float extraPrimitiveOverestimationSizeGranularity
     * }
     */
    public static final long extraPrimitiveOverestimationSizeGranularity$offset() {
        return extraPrimitiveOverestimationSizeGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float extraPrimitiveOverestimationSizeGranularity
     * }
     */
    public static float extraPrimitiveOverestimationSizeGranularity(MemorySegment struct) {
        return struct.get(extraPrimitiveOverestimationSizeGranularity$LAYOUT, extraPrimitiveOverestimationSizeGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float extraPrimitiveOverestimationSizeGranularity
     * }
     */
    public static void extraPrimitiveOverestimationSizeGranularity(MemorySegment struct, float fieldValue) {
        struct.set(extraPrimitiveOverestimationSizeGranularity$LAYOUT, extraPrimitiveOverestimationSizeGranularity$OFFSET, fieldValue);
    }

    private static final OfInt primitiveUnderestimation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("primitiveUnderestimation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 primitiveUnderestimation
     * }
     */
    public static final OfInt primitiveUnderestimation$layout() {
        return primitiveUnderestimation$LAYOUT;
    }

    private static final long primitiveUnderestimation$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 primitiveUnderestimation
     * }
     */
    public static final long primitiveUnderestimation$offset() {
        return primitiveUnderestimation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 primitiveUnderestimation
     * }
     */
    public static int primitiveUnderestimation(MemorySegment struct) {
        return struct.get(primitiveUnderestimation$LAYOUT, primitiveUnderestimation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 primitiveUnderestimation
     * }
     */
    public static void primitiveUnderestimation(MemorySegment struct, int fieldValue) {
        struct.set(primitiveUnderestimation$LAYOUT, primitiveUnderestimation$OFFSET, fieldValue);
    }

    private static final OfInt conservativePointAndLineRasterization$LAYOUT = (OfInt)$LAYOUT.select(groupElement("conservativePointAndLineRasterization"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 conservativePointAndLineRasterization
     * }
     */
    public static final OfInt conservativePointAndLineRasterization$layout() {
        return conservativePointAndLineRasterization$LAYOUT;
    }

    private static final long conservativePointAndLineRasterization$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 conservativePointAndLineRasterization
     * }
     */
    public static final long conservativePointAndLineRasterization$offset() {
        return conservativePointAndLineRasterization$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 conservativePointAndLineRasterization
     * }
     */
    public static int conservativePointAndLineRasterization(MemorySegment struct) {
        return struct.get(conservativePointAndLineRasterization$LAYOUT, conservativePointAndLineRasterization$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 conservativePointAndLineRasterization
     * }
     */
    public static void conservativePointAndLineRasterization(MemorySegment struct, int fieldValue) {
        struct.set(conservativePointAndLineRasterization$LAYOUT, conservativePointAndLineRasterization$OFFSET, fieldValue);
    }

    private static final OfInt degenerateTrianglesRasterized$LAYOUT = (OfInt)$LAYOUT.select(groupElement("degenerateTrianglesRasterized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 degenerateTrianglesRasterized
     * }
     */
    public static final OfInt degenerateTrianglesRasterized$layout() {
        return degenerateTrianglesRasterized$LAYOUT;
    }

    private static final long degenerateTrianglesRasterized$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 degenerateTrianglesRasterized
     * }
     */
    public static final long degenerateTrianglesRasterized$offset() {
        return degenerateTrianglesRasterized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 degenerateTrianglesRasterized
     * }
     */
    public static int degenerateTrianglesRasterized(MemorySegment struct) {
        return struct.get(degenerateTrianglesRasterized$LAYOUT, degenerateTrianglesRasterized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 degenerateTrianglesRasterized
     * }
     */
    public static void degenerateTrianglesRasterized(MemorySegment struct, int fieldValue) {
        struct.set(degenerateTrianglesRasterized$LAYOUT, degenerateTrianglesRasterized$OFFSET, fieldValue);
    }

    private static final OfInt degenerateLinesRasterized$LAYOUT = (OfInt)$LAYOUT.select(groupElement("degenerateLinesRasterized"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 degenerateLinesRasterized
     * }
     */
    public static final OfInt degenerateLinesRasterized$layout() {
        return degenerateLinesRasterized$LAYOUT;
    }

    private static final long degenerateLinesRasterized$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 degenerateLinesRasterized
     * }
     */
    public static final long degenerateLinesRasterized$offset() {
        return degenerateLinesRasterized$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 degenerateLinesRasterized
     * }
     */
    public static int degenerateLinesRasterized(MemorySegment struct) {
        return struct.get(degenerateLinesRasterized$LAYOUT, degenerateLinesRasterized$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 degenerateLinesRasterized
     * }
     */
    public static void degenerateLinesRasterized(MemorySegment struct, int fieldValue) {
        struct.set(degenerateLinesRasterized$LAYOUT, degenerateLinesRasterized$OFFSET, fieldValue);
    }

    private static final OfInt fullyCoveredFragmentShaderInputVariable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fullyCoveredFragmentShaderInputVariable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 fullyCoveredFragmentShaderInputVariable
     * }
     */
    public static final OfInt fullyCoveredFragmentShaderInputVariable$layout() {
        return fullyCoveredFragmentShaderInputVariable$LAYOUT;
    }

    private static final long fullyCoveredFragmentShaderInputVariable$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 fullyCoveredFragmentShaderInputVariable
     * }
     */
    public static final long fullyCoveredFragmentShaderInputVariable$offset() {
        return fullyCoveredFragmentShaderInputVariable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 fullyCoveredFragmentShaderInputVariable
     * }
     */
    public static int fullyCoveredFragmentShaderInputVariable(MemorySegment struct) {
        return struct.get(fullyCoveredFragmentShaderInputVariable$LAYOUT, fullyCoveredFragmentShaderInputVariable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 fullyCoveredFragmentShaderInputVariable
     * }
     */
    public static void fullyCoveredFragmentShaderInputVariable(MemorySegment struct, int fieldValue) {
        struct.set(fullyCoveredFragmentShaderInputVariable$LAYOUT, fullyCoveredFragmentShaderInputVariable$OFFSET, fieldValue);
    }

    private static final OfInt conservativeRasterizationPostDepthCoverage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("conservativeRasterizationPostDepthCoverage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 conservativeRasterizationPostDepthCoverage
     * }
     */
    public static final OfInt conservativeRasterizationPostDepthCoverage$layout() {
        return conservativeRasterizationPostDepthCoverage$LAYOUT;
    }

    private static final long conservativeRasterizationPostDepthCoverage$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 conservativeRasterizationPostDepthCoverage
     * }
     */
    public static final long conservativeRasterizationPostDepthCoverage$offset() {
        return conservativeRasterizationPostDepthCoverage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 conservativeRasterizationPostDepthCoverage
     * }
     */
    public static int conservativeRasterizationPostDepthCoverage(MemorySegment struct) {
        return struct.get(conservativeRasterizationPostDepthCoverage$LAYOUT, conservativeRasterizationPostDepthCoverage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 conservativeRasterizationPostDepthCoverage
     * }
     */
    public static void conservativeRasterizationPostDepthCoverage(MemorySegment struct, int fieldValue) {
        struct.set(conservativeRasterizationPostDepthCoverage$LAYOUT, conservativeRasterizationPostDepthCoverage$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

