// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceDepthStencilResolveProperties {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkResolveModeFlags supportedDepthResolveModes;
 *     VkResolveModeFlags supportedStencilResolveModes;
 *     VkBool32 independentResolveNone;
 *     VkBool32 independentResolve;
 * }
 * }
 */
public class VkPhysicalDeviceDepthStencilResolveProperties {

    VkPhysicalDeviceDepthStencilResolveProperties() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("supportedDepthResolveModes"),
        vulkan_h.C_INT.withName("supportedStencilResolveModes"),
        vulkan_h.C_INT.withName("independentResolveNone"),
        vulkan_h.C_INT.withName("independentResolve")
    ).withName("VkPhysicalDeviceDepthStencilResolveProperties");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt supportedDepthResolveModes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("supportedDepthResolveModes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedDepthResolveModes
     * }
     */
    public static final OfInt supportedDepthResolveModes$layout() {
        return supportedDepthResolveModes$LAYOUT;
    }

    private static final long supportedDepthResolveModes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedDepthResolveModes
     * }
     */
    public static final long supportedDepthResolveModes$offset() {
        return supportedDepthResolveModes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedDepthResolveModes
     * }
     */
    public static int supportedDepthResolveModes(MemorySegment struct) {
        return struct.get(supportedDepthResolveModes$LAYOUT, supportedDepthResolveModes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedDepthResolveModes
     * }
     */
    public static void supportedDepthResolveModes(MemorySegment struct, int fieldValue) {
        struct.set(supportedDepthResolveModes$LAYOUT, supportedDepthResolveModes$OFFSET, fieldValue);
    }

    private static final OfInt supportedStencilResolveModes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("supportedStencilResolveModes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedStencilResolveModes
     * }
     */
    public static final OfInt supportedStencilResolveModes$layout() {
        return supportedStencilResolveModes$LAYOUT;
    }

    private static final long supportedStencilResolveModes$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedStencilResolveModes
     * }
     */
    public static final long supportedStencilResolveModes$offset() {
        return supportedStencilResolveModes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedStencilResolveModes
     * }
     */
    public static int supportedStencilResolveModes(MemorySegment struct) {
        return struct.get(supportedStencilResolveModes$LAYOUT, supportedStencilResolveModes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkResolveModeFlags supportedStencilResolveModes
     * }
     */
    public static void supportedStencilResolveModes(MemorySegment struct, int fieldValue) {
        struct.set(supportedStencilResolveModes$LAYOUT, supportedStencilResolveModes$OFFSET, fieldValue);
    }

    private static final OfInt independentResolveNone$LAYOUT = (OfInt)$LAYOUT.select(groupElement("independentResolveNone"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 independentResolveNone
     * }
     */
    public static final OfInt independentResolveNone$layout() {
        return independentResolveNone$LAYOUT;
    }

    private static final long independentResolveNone$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 independentResolveNone
     * }
     */
    public static final long independentResolveNone$offset() {
        return independentResolveNone$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 independentResolveNone
     * }
     */
    public static int independentResolveNone(MemorySegment struct) {
        return struct.get(independentResolveNone$LAYOUT, independentResolveNone$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 independentResolveNone
     * }
     */
    public static void independentResolveNone(MemorySegment struct, int fieldValue) {
        struct.set(independentResolveNone$LAYOUT, independentResolveNone$OFFSET, fieldValue);
    }

    private static final OfInt independentResolve$LAYOUT = (OfInt)$LAYOUT.select(groupElement("independentResolve"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 independentResolve
     * }
     */
    public static final OfInt independentResolve$layout() {
        return independentResolve$LAYOUT;
    }

    private static final long independentResolve$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 independentResolve
     * }
     */
    public static final long independentResolve$offset() {
        return independentResolve$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 independentResolve
     * }
     */
    public static int independentResolve(MemorySegment struct) {
        return struct.get(independentResolve$LAYOUT, independentResolve$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 independentResolve
     * }
     */
    public static void independentResolve(MemorySegment struct, int fieldValue) {
        struct.set(independentResolve$LAYOUT, independentResolve$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

