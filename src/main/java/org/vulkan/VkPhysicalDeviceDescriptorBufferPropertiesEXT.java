// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceDescriptorBufferPropertiesEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 combinedImageSamplerDescriptorSingleArray;
 *     VkBool32 bufferlessPushDescriptors;
 *     VkBool32 allowSamplerImageViewPostSubmitCreation;
 *     VkDeviceSize descriptorBufferOffsetAlignment;
 *     uint32_t maxDescriptorBufferBindings;
 *     uint32_t maxResourceDescriptorBufferBindings;
 *     uint32_t maxSamplerDescriptorBufferBindings;
 *     uint32_t maxEmbeddedImmutableSamplerBindings;
 *     uint32_t maxEmbeddedImmutableSamplers;
 *     size_t bufferCaptureReplayDescriptorDataSize;
 *     size_t imageCaptureReplayDescriptorDataSize;
 *     size_t imageViewCaptureReplayDescriptorDataSize;
 *     size_t samplerCaptureReplayDescriptorDataSize;
 *     size_t accelerationStructureCaptureReplayDescriptorDataSize;
 *     size_t samplerDescriptorSize;
 *     size_t combinedImageSamplerDescriptorSize;
 *     size_t sampledImageDescriptorSize;
 *     size_t storageImageDescriptorSize;
 *     size_t uniformTexelBufferDescriptorSize;
 *     size_t robustUniformTexelBufferDescriptorSize;
 *     size_t storageTexelBufferDescriptorSize;
 *     size_t robustStorageTexelBufferDescriptorSize;
 *     size_t uniformBufferDescriptorSize;
 *     size_t robustUniformBufferDescriptorSize;
 *     size_t storageBufferDescriptorSize;
 *     size_t robustStorageBufferDescriptorSize;
 *     size_t inputAttachmentDescriptorSize;
 *     size_t accelerationStructureDescriptorSize;
 *     VkDeviceSize maxSamplerDescriptorBufferRange;
 *     VkDeviceSize maxResourceDescriptorBufferRange;
 *     VkDeviceSize samplerDescriptorBufferAddressSpaceSize;
 *     VkDeviceSize resourceDescriptorBufferAddressSpaceSize;
 *     VkDeviceSize descriptorBufferAddressSpaceSize;
 * }
 * }
 */
public class VkPhysicalDeviceDescriptorBufferPropertiesEXT {

    VkPhysicalDeviceDescriptorBufferPropertiesEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("combinedImageSamplerDescriptorSingleArray"),
        vulkan_h.C_INT.withName("bufferlessPushDescriptors"),
        vulkan_h.C_INT.withName("allowSamplerImageViewPostSubmitCreation"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("descriptorBufferOffsetAlignment"),
        vulkan_h.C_INT.withName("maxDescriptorBufferBindings"),
        vulkan_h.C_INT.withName("maxResourceDescriptorBufferBindings"),
        vulkan_h.C_INT.withName("maxSamplerDescriptorBufferBindings"),
        vulkan_h.C_INT.withName("maxEmbeddedImmutableSamplerBindings"),
        vulkan_h.C_INT.withName("maxEmbeddedImmutableSamplers"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG.withName("bufferCaptureReplayDescriptorDataSize"),
        vulkan_h.C_LONG.withName("imageCaptureReplayDescriptorDataSize"),
        vulkan_h.C_LONG.withName("imageViewCaptureReplayDescriptorDataSize"),
        vulkan_h.C_LONG.withName("samplerCaptureReplayDescriptorDataSize"),
        vulkan_h.C_LONG.withName("accelerationStructureCaptureReplayDescriptorDataSize"),
        vulkan_h.C_LONG.withName("samplerDescriptorSize"),
        vulkan_h.C_LONG.withName("combinedImageSamplerDescriptorSize"),
        vulkan_h.C_LONG.withName("sampledImageDescriptorSize"),
        vulkan_h.C_LONG.withName("storageImageDescriptorSize"),
        vulkan_h.C_LONG.withName("uniformTexelBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("robustUniformTexelBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("storageTexelBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("robustStorageTexelBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("uniformBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("robustUniformBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("storageBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("robustStorageBufferDescriptorSize"),
        vulkan_h.C_LONG.withName("inputAttachmentDescriptorSize"),
        vulkan_h.C_LONG.withName("accelerationStructureDescriptorSize"),
        vulkan_h.C_LONG_LONG.withName("maxSamplerDescriptorBufferRange"),
        vulkan_h.C_LONG_LONG.withName("maxResourceDescriptorBufferRange"),
        vulkan_h.C_LONG_LONG.withName("samplerDescriptorBufferAddressSpaceSize"),
        vulkan_h.C_LONG_LONG.withName("resourceDescriptorBufferAddressSpaceSize"),
        vulkan_h.C_LONG_LONG.withName("descriptorBufferAddressSpaceSize")
    ).withName("VkPhysicalDeviceDescriptorBufferPropertiesEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt combinedImageSamplerDescriptorSingleArray$LAYOUT = (OfInt)$LAYOUT.select(groupElement("combinedImageSamplerDescriptorSingleArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 combinedImageSamplerDescriptorSingleArray
     * }
     */
    public static final OfInt combinedImageSamplerDescriptorSingleArray$layout() {
        return combinedImageSamplerDescriptorSingleArray$LAYOUT;
    }

    private static final long combinedImageSamplerDescriptorSingleArray$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 combinedImageSamplerDescriptorSingleArray
     * }
     */
    public static final long combinedImageSamplerDescriptorSingleArray$offset() {
        return combinedImageSamplerDescriptorSingleArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 combinedImageSamplerDescriptorSingleArray
     * }
     */
    public static int combinedImageSamplerDescriptorSingleArray(MemorySegment struct) {
        return struct.get(combinedImageSamplerDescriptorSingleArray$LAYOUT, combinedImageSamplerDescriptorSingleArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 combinedImageSamplerDescriptorSingleArray
     * }
     */
    public static void combinedImageSamplerDescriptorSingleArray(MemorySegment struct, int fieldValue) {
        struct.set(combinedImageSamplerDescriptorSingleArray$LAYOUT, combinedImageSamplerDescriptorSingleArray$OFFSET, fieldValue);
    }

    private static final OfInt bufferlessPushDescriptors$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferlessPushDescriptors"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 bufferlessPushDescriptors
     * }
     */
    public static final OfInt bufferlessPushDescriptors$layout() {
        return bufferlessPushDescriptors$LAYOUT;
    }

    private static final long bufferlessPushDescriptors$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 bufferlessPushDescriptors
     * }
     */
    public static final long bufferlessPushDescriptors$offset() {
        return bufferlessPushDescriptors$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 bufferlessPushDescriptors
     * }
     */
    public static int bufferlessPushDescriptors(MemorySegment struct) {
        return struct.get(bufferlessPushDescriptors$LAYOUT, bufferlessPushDescriptors$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 bufferlessPushDescriptors
     * }
     */
    public static void bufferlessPushDescriptors(MemorySegment struct, int fieldValue) {
        struct.set(bufferlessPushDescriptors$LAYOUT, bufferlessPushDescriptors$OFFSET, fieldValue);
    }

    private static final OfInt allowSamplerImageViewPostSubmitCreation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("allowSamplerImageViewPostSubmitCreation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 allowSamplerImageViewPostSubmitCreation
     * }
     */
    public static final OfInt allowSamplerImageViewPostSubmitCreation$layout() {
        return allowSamplerImageViewPostSubmitCreation$LAYOUT;
    }

    private static final long allowSamplerImageViewPostSubmitCreation$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 allowSamplerImageViewPostSubmitCreation
     * }
     */
    public static final long allowSamplerImageViewPostSubmitCreation$offset() {
        return allowSamplerImageViewPostSubmitCreation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 allowSamplerImageViewPostSubmitCreation
     * }
     */
    public static int allowSamplerImageViewPostSubmitCreation(MemorySegment struct) {
        return struct.get(allowSamplerImageViewPostSubmitCreation$LAYOUT, allowSamplerImageViewPostSubmitCreation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 allowSamplerImageViewPostSubmitCreation
     * }
     */
    public static void allowSamplerImageViewPostSubmitCreation(MemorySegment struct, int fieldValue) {
        struct.set(allowSamplerImageViewPostSubmitCreation$LAYOUT, allowSamplerImageViewPostSubmitCreation$OFFSET, fieldValue);
    }

    private static final OfLong descriptorBufferOffsetAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("descriptorBufferOffsetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferOffsetAlignment
     * }
     */
    public static final OfLong descriptorBufferOffsetAlignment$layout() {
        return descriptorBufferOffsetAlignment$LAYOUT;
    }

    private static final long descriptorBufferOffsetAlignment$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferOffsetAlignment
     * }
     */
    public static final long descriptorBufferOffsetAlignment$offset() {
        return descriptorBufferOffsetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferOffsetAlignment
     * }
     */
    public static long descriptorBufferOffsetAlignment(MemorySegment struct) {
        return struct.get(descriptorBufferOffsetAlignment$LAYOUT, descriptorBufferOffsetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferOffsetAlignment
     * }
     */
    public static void descriptorBufferOffsetAlignment(MemorySegment struct, long fieldValue) {
        struct.set(descriptorBufferOffsetAlignment$LAYOUT, descriptorBufferOffsetAlignment$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorBufferBindings$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorBufferBindings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorBufferBindings
     * }
     */
    public static final OfInt maxDescriptorBufferBindings$layout() {
        return maxDescriptorBufferBindings$LAYOUT;
    }

    private static final long maxDescriptorBufferBindings$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorBufferBindings
     * }
     */
    public static final long maxDescriptorBufferBindings$offset() {
        return maxDescriptorBufferBindings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorBufferBindings
     * }
     */
    public static int maxDescriptorBufferBindings(MemorySegment struct) {
        return struct.get(maxDescriptorBufferBindings$LAYOUT, maxDescriptorBufferBindings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorBufferBindings
     * }
     */
    public static void maxDescriptorBufferBindings(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorBufferBindings$LAYOUT, maxDescriptorBufferBindings$OFFSET, fieldValue);
    }

    private static final OfInt maxResourceDescriptorBufferBindings$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxResourceDescriptorBufferBindings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxResourceDescriptorBufferBindings
     * }
     */
    public static final OfInt maxResourceDescriptorBufferBindings$layout() {
        return maxResourceDescriptorBufferBindings$LAYOUT;
    }

    private static final long maxResourceDescriptorBufferBindings$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxResourceDescriptorBufferBindings
     * }
     */
    public static final long maxResourceDescriptorBufferBindings$offset() {
        return maxResourceDescriptorBufferBindings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxResourceDescriptorBufferBindings
     * }
     */
    public static int maxResourceDescriptorBufferBindings(MemorySegment struct) {
        return struct.get(maxResourceDescriptorBufferBindings$LAYOUT, maxResourceDescriptorBufferBindings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxResourceDescriptorBufferBindings
     * }
     */
    public static void maxResourceDescriptorBufferBindings(MemorySegment struct, int fieldValue) {
        struct.set(maxResourceDescriptorBufferBindings$LAYOUT, maxResourceDescriptorBufferBindings$OFFSET, fieldValue);
    }

    private static final OfInt maxSamplerDescriptorBufferBindings$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxSamplerDescriptorBufferBindings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerDescriptorBufferBindings
     * }
     */
    public static final OfInt maxSamplerDescriptorBufferBindings$layout() {
        return maxSamplerDescriptorBufferBindings$LAYOUT;
    }

    private static final long maxSamplerDescriptorBufferBindings$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerDescriptorBufferBindings
     * }
     */
    public static final long maxSamplerDescriptorBufferBindings$offset() {
        return maxSamplerDescriptorBufferBindings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerDescriptorBufferBindings
     * }
     */
    public static int maxSamplerDescriptorBufferBindings(MemorySegment struct) {
        return struct.get(maxSamplerDescriptorBufferBindings$LAYOUT, maxSamplerDescriptorBufferBindings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerDescriptorBufferBindings
     * }
     */
    public static void maxSamplerDescriptorBufferBindings(MemorySegment struct, int fieldValue) {
        struct.set(maxSamplerDescriptorBufferBindings$LAYOUT, maxSamplerDescriptorBufferBindings$OFFSET, fieldValue);
    }

    private static final OfInt maxEmbeddedImmutableSamplerBindings$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxEmbeddedImmutableSamplerBindings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplerBindings
     * }
     */
    public static final OfInt maxEmbeddedImmutableSamplerBindings$layout() {
        return maxEmbeddedImmutableSamplerBindings$LAYOUT;
    }

    private static final long maxEmbeddedImmutableSamplerBindings$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplerBindings
     * }
     */
    public static final long maxEmbeddedImmutableSamplerBindings$offset() {
        return maxEmbeddedImmutableSamplerBindings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplerBindings
     * }
     */
    public static int maxEmbeddedImmutableSamplerBindings(MemorySegment struct) {
        return struct.get(maxEmbeddedImmutableSamplerBindings$LAYOUT, maxEmbeddedImmutableSamplerBindings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplerBindings
     * }
     */
    public static void maxEmbeddedImmutableSamplerBindings(MemorySegment struct, int fieldValue) {
        struct.set(maxEmbeddedImmutableSamplerBindings$LAYOUT, maxEmbeddedImmutableSamplerBindings$OFFSET, fieldValue);
    }

    private static final OfInt maxEmbeddedImmutableSamplers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxEmbeddedImmutableSamplers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplers
     * }
     */
    public static final OfInt maxEmbeddedImmutableSamplers$layout() {
        return maxEmbeddedImmutableSamplers$LAYOUT;
    }

    private static final long maxEmbeddedImmutableSamplers$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplers
     * }
     */
    public static final long maxEmbeddedImmutableSamplers$offset() {
        return maxEmbeddedImmutableSamplers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplers
     * }
     */
    public static int maxEmbeddedImmutableSamplers(MemorySegment struct) {
        return struct.get(maxEmbeddedImmutableSamplers$LAYOUT, maxEmbeddedImmutableSamplers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxEmbeddedImmutableSamplers
     * }
     */
    public static void maxEmbeddedImmutableSamplers(MemorySegment struct, int fieldValue) {
        struct.set(maxEmbeddedImmutableSamplers$LAYOUT, maxEmbeddedImmutableSamplers$OFFSET, fieldValue);
    }

    private static final OfLong bufferCaptureReplayDescriptorDataSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bufferCaptureReplayDescriptorDataSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t bufferCaptureReplayDescriptorDataSize
     * }
     */
    public static final OfLong bufferCaptureReplayDescriptorDataSize$layout() {
        return bufferCaptureReplayDescriptorDataSize$LAYOUT;
    }

    private static final long bufferCaptureReplayDescriptorDataSize$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t bufferCaptureReplayDescriptorDataSize
     * }
     */
    public static final long bufferCaptureReplayDescriptorDataSize$offset() {
        return bufferCaptureReplayDescriptorDataSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t bufferCaptureReplayDescriptorDataSize
     * }
     */
    public static long bufferCaptureReplayDescriptorDataSize(MemorySegment struct) {
        return struct.get(bufferCaptureReplayDescriptorDataSize$LAYOUT, bufferCaptureReplayDescriptorDataSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t bufferCaptureReplayDescriptorDataSize
     * }
     */
    public static void bufferCaptureReplayDescriptorDataSize(MemorySegment struct, long fieldValue) {
        struct.set(bufferCaptureReplayDescriptorDataSize$LAYOUT, bufferCaptureReplayDescriptorDataSize$OFFSET, fieldValue);
    }

    private static final OfLong imageCaptureReplayDescriptorDataSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("imageCaptureReplayDescriptorDataSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t imageCaptureReplayDescriptorDataSize
     * }
     */
    public static final OfLong imageCaptureReplayDescriptorDataSize$layout() {
        return imageCaptureReplayDescriptorDataSize$LAYOUT;
    }

    private static final long imageCaptureReplayDescriptorDataSize$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t imageCaptureReplayDescriptorDataSize
     * }
     */
    public static final long imageCaptureReplayDescriptorDataSize$offset() {
        return imageCaptureReplayDescriptorDataSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t imageCaptureReplayDescriptorDataSize
     * }
     */
    public static long imageCaptureReplayDescriptorDataSize(MemorySegment struct) {
        return struct.get(imageCaptureReplayDescriptorDataSize$LAYOUT, imageCaptureReplayDescriptorDataSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t imageCaptureReplayDescriptorDataSize
     * }
     */
    public static void imageCaptureReplayDescriptorDataSize(MemorySegment struct, long fieldValue) {
        struct.set(imageCaptureReplayDescriptorDataSize$LAYOUT, imageCaptureReplayDescriptorDataSize$OFFSET, fieldValue);
    }

    private static final OfLong imageViewCaptureReplayDescriptorDataSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("imageViewCaptureReplayDescriptorDataSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t imageViewCaptureReplayDescriptorDataSize
     * }
     */
    public static final OfLong imageViewCaptureReplayDescriptorDataSize$layout() {
        return imageViewCaptureReplayDescriptorDataSize$LAYOUT;
    }

    private static final long imageViewCaptureReplayDescriptorDataSize$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t imageViewCaptureReplayDescriptorDataSize
     * }
     */
    public static final long imageViewCaptureReplayDescriptorDataSize$offset() {
        return imageViewCaptureReplayDescriptorDataSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t imageViewCaptureReplayDescriptorDataSize
     * }
     */
    public static long imageViewCaptureReplayDescriptorDataSize(MemorySegment struct) {
        return struct.get(imageViewCaptureReplayDescriptorDataSize$LAYOUT, imageViewCaptureReplayDescriptorDataSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t imageViewCaptureReplayDescriptorDataSize
     * }
     */
    public static void imageViewCaptureReplayDescriptorDataSize(MemorySegment struct, long fieldValue) {
        struct.set(imageViewCaptureReplayDescriptorDataSize$LAYOUT, imageViewCaptureReplayDescriptorDataSize$OFFSET, fieldValue);
    }

    private static final OfLong samplerCaptureReplayDescriptorDataSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("samplerCaptureReplayDescriptorDataSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t samplerCaptureReplayDescriptorDataSize
     * }
     */
    public static final OfLong samplerCaptureReplayDescriptorDataSize$layout() {
        return samplerCaptureReplayDescriptorDataSize$LAYOUT;
    }

    private static final long samplerCaptureReplayDescriptorDataSize$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t samplerCaptureReplayDescriptorDataSize
     * }
     */
    public static final long samplerCaptureReplayDescriptorDataSize$offset() {
        return samplerCaptureReplayDescriptorDataSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t samplerCaptureReplayDescriptorDataSize
     * }
     */
    public static long samplerCaptureReplayDescriptorDataSize(MemorySegment struct) {
        return struct.get(samplerCaptureReplayDescriptorDataSize$LAYOUT, samplerCaptureReplayDescriptorDataSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t samplerCaptureReplayDescriptorDataSize
     * }
     */
    public static void samplerCaptureReplayDescriptorDataSize(MemorySegment struct, long fieldValue) {
        struct.set(samplerCaptureReplayDescriptorDataSize$LAYOUT, samplerCaptureReplayDescriptorDataSize$OFFSET, fieldValue);
    }

    private static final OfLong accelerationStructureCaptureReplayDescriptorDataSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("accelerationStructureCaptureReplayDescriptorDataSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t accelerationStructureCaptureReplayDescriptorDataSize
     * }
     */
    public static final OfLong accelerationStructureCaptureReplayDescriptorDataSize$layout() {
        return accelerationStructureCaptureReplayDescriptorDataSize$LAYOUT;
    }

    private static final long accelerationStructureCaptureReplayDescriptorDataSize$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t accelerationStructureCaptureReplayDescriptorDataSize
     * }
     */
    public static final long accelerationStructureCaptureReplayDescriptorDataSize$offset() {
        return accelerationStructureCaptureReplayDescriptorDataSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t accelerationStructureCaptureReplayDescriptorDataSize
     * }
     */
    public static long accelerationStructureCaptureReplayDescriptorDataSize(MemorySegment struct) {
        return struct.get(accelerationStructureCaptureReplayDescriptorDataSize$LAYOUT, accelerationStructureCaptureReplayDescriptorDataSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t accelerationStructureCaptureReplayDescriptorDataSize
     * }
     */
    public static void accelerationStructureCaptureReplayDescriptorDataSize(MemorySegment struct, long fieldValue) {
        struct.set(accelerationStructureCaptureReplayDescriptorDataSize$LAYOUT, accelerationStructureCaptureReplayDescriptorDataSize$OFFSET, fieldValue);
    }

    private static final OfLong samplerDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("samplerDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t samplerDescriptorSize
     * }
     */
    public static final OfLong samplerDescriptorSize$layout() {
        return samplerDescriptorSize$LAYOUT;
    }

    private static final long samplerDescriptorSize$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t samplerDescriptorSize
     * }
     */
    public static final long samplerDescriptorSize$offset() {
        return samplerDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t samplerDescriptorSize
     * }
     */
    public static long samplerDescriptorSize(MemorySegment struct) {
        return struct.get(samplerDescriptorSize$LAYOUT, samplerDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t samplerDescriptorSize
     * }
     */
    public static void samplerDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(samplerDescriptorSize$LAYOUT, samplerDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong combinedImageSamplerDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("combinedImageSamplerDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t combinedImageSamplerDescriptorSize
     * }
     */
    public static final OfLong combinedImageSamplerDescriptorSize$layout() {
        return combinedImageSamplerDescriptorSize$LAYOUT;
    }

    private static final long combinedImageSamplerDescriptorSize$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t combinedImageSamplerDescriptorSize
     * }
     */
    public static final long combinedImageSamplerDescriptorSize$offset() {
        return combinedImageSamplerDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t combinedImageSamplerDescriptorSize
     * }
     */
    public static long combinedImageSamplerDescriptorSize(MemorySegment struct) {
        return struct.get(combinedImageSamplerDescriptorSize$LAYOUT, combinedImageSamplerDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t combinedImageSamplerDescriptorSize
     * }
     */
    public static void combinedImageSamplerDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(combinedImageSamplerDescriptorSize$LAYOUT, combinedImageSamplerDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong sampledImageDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sampledImageDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t sampledImageDescriptorSize
     * }
     */
    public static final OfLong sampledImageDescriptorSize$layout() {
        return sampledImageDescriptorSize$LAYOUT;
    }

    private static final long sampledImageDescriptorSize$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t sampledImageDescriptorSize
     * }
     */
    public static final long sampledImageDescriptorSize$offset() {
        return sampledImageDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t sampledImageDescriptorSize
     * }
     */
    public static long sampledImageDescriptorSize(MemorySegment struct) {
        return struct.get(sampledImageDescriptorSize$LAYOUT, sampledImageDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t sampledImageDescriptorSize
     * }
     */
    public static void sampledImageDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(sampledImageDescriptorSize$LAYOUT, sampledImageDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong storageImageDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("storageImageDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t storageImageDescriptorSize
     * }
     */
    public static final OfLong storageImageDescriptorSize$layout() {
        return storageImageDescriptorSize$LAYOUT;
    }

    private static final long storageImageDescriptorSize$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t storageImageDescriptorSize
     * }
     */
    public static final long storageImageDescriptorSize$offset() {
        return storageImageDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t storageImageDescriptorSize
     * }
     */
    public static long storageImageDescriptorSize(MemorySegment struct) {
        return struct.get(storageImageDescriptorSize$LAYOUT, storageImageDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t storageImageDescriptorSize
     * }
     */
    public static void storageImageDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(storageImageDescriptorSize$LAYOUT, storageImageDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong uniformTexelBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("uniformTexelBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t uniformTexelBufferDescriptorSize
     * }
     */
    public static final OfLong uniformTexelBufferDescriptorSize$layout() {
        return uniformTexelBufferDescriptorSize$LAYOUT;
    }

    private static final long uniformTexelBufferDescriptorSize$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t uniformTexelBufferDescriptorSize
     * }
     */
    public static final long uniformTexelBufferDescriptorSize$offset() {
        return uniformTexelBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t uniformTexelBufferDescriptorSize
     * }
     */
    public static long uniformTexelBufferDescriptorSize(MemorySegment struct) {
        return struct.get(uniformTexelBufferDescriptorSize$LAYOUT, uniformTexelBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t uniformTexelBufferDescriptorSize
     * }
     */
    public static void uniformTexelBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(uniformTexelBufferDescriptorSize$LAYOUT, uniformTexelBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong robustUniformTexelBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("robustUniformTexelBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t robustUniformTexelBufferDescriptorSize
     * }
     */
    public static final OfLong robustUniformTexelBufferDescriptorSize$layout() {
        return robustUniformTexelBufferDescriptorSize$LAYOUT;
    }

    private static final long robustUniformTexelBufferDescriptorSize$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t robustUniformTexelBufferDescriptorSize
     * }
     */
    public static final long robustUniformTexelBufferDescriptorSize$offset() {
        return robustUniformTexelBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t robustUniformTexelBufferDescriptorSize
     * }
     */
    public static long robustUniformTexelBufferDescriptorSize(MemorySegment struct) {
        return struct.get(robustUniformTexelBufferDescriptorSize$LAYOUT, robustUniformTexelBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t robustUniformTexelBufferDescriptorSize
     * }
     */
    public static void robustUniformTexelBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(robustUniformTexelBufferDescriptorSize$LAYOUT, robustUniformTexelBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong storageTexelBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("storageTexelBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t storageTexelBufferDescriptorSize
     * }
     */
    public static final OfLong storageTexelBufferDescriptorSize$layout() {
        return storageTexelBufferDescriptorSize$LAYOUT;
    }

    private static final long storageTexelBufferDescriptorSize$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t storageTexelBufferDescriptorSize
     * }
     */
    public static final long storageTexelBufferDescriptorSize$offset() {
        return storageTexelBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t storageTexelBufferDescriptorSize
     * }
     */
    public static long storageTexelBufferDescriptorSize(MemorySegment struct) {
        return struct.get(storageTexelBufferDescriptorSize$LAYOUT, storageTexelBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t storageTexelBufferDescriptorSize
     * }
     */
    public static void storageTexelBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(storageTexelBufferDescriptorSize$LAYOUT, storageTexelBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong robustStorageTexelBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("robustStorageTexelBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t robustStorageTexelBufferDescriptorSize
     * }
     */
    public static final OfLong robustStorageTexelBufferDescriptorSize$layout() {
        return robustStorageTexelBufferDescriptorSize$LAYOUT;
    }

    private static final long robustStorageTexelBufferDescriptorSize$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t robustStorageTexelBufferDescriptorSize
     * }
     */
    public static final long robustStorageTexelBufferDescriptorSize$offset() {
        return robustStorageTexelBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t robustStorageTexelBufferDescriptorSize
     * }
     */
    public static long robustStorageTexelBufferDescriptorSize(MemorySegment struct) {
        return struct.get(robustStorageTexelBufferDescriptorSize$LAYOUT, robustStorageTexelBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t robustStorageTexelBufferDescriptorSize
     * }
     */
    public static void robustStorageTexelBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(robustStorageTexelBufferDescriptorSize$LAYOUT, robustStorageTexelBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong uniformBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("uniformBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t uniformBufferDescriptorSize
     * }
     */
    public static final OfLong uniformBufferDescriptorSize$layout() {
        return uniformBufferDescriptorSize$LAYOUT;
    }

    private static final long uniformBufferDescriptorSize$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t uniformBufferDescriptorSize
     * }
     */
    public static final long uniformBufferDescriptorSize$offset() {
        return uniformBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t uniformBufferDescriptorSize
     * }
     */
    public static long uniformBufferDescriptorSize(MemorySegment struct) {
        return struct.get(uniformBufferDescriptorSize$LAYOUT, uniformBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t uniformBufferDescriptorSize
     * }
     */
    public static void uniformBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(uniformBufferDescriptorSize$LAYOUT, uniformBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong robustUniformBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("robustUniformBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t robustUniformBufferDescriptorSize
     * }
     */
    public static final OfLong robustUniformBufferDescriptorSize$layout() {
        return robustUniformBufferDescriptorSize$LAYOUT;
    }

    private static final long robustUniformBufferDescriptorSize$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t robustUniformBufferDescriptorSize
     * }
     */
    public static final long robustUniformBufferDescriptorSize$offset() {
        return robustUniformBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t robustUniformBufferDescriptorSize
     * }
     */
    public static long robustUniformBufferDescriptorSize(MemorySegment struct) {
        return struct.get(robustUniformBufferDescriptorSize$LAYOUT, robustUniformBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t robustUniformBufferDescriptorSize
     * }
     */
    public static void robustUniformBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(robustUniformBufferDescriptorSize$LAYOUT, robustUniformBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong storageBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("storageBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t storageBufferDescriptorSize
     * }
     */
    public static final OfLong storageBufferDescriptorSize$layout() {
        return storageBufferDescriptorSize$LAYOUT;
    }

    private static final long storageBufferDescriptorSize$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t storageBufferDescriptorSize
     * }
     */
    public static final long storageBufferDescriptorSize$offset() {
        return storageBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t storageBufferDescriptorSize
     * }
     */
    public static long storageBufferDescriptorSize(MemorySegment struct) {
        return struct.get(storageBufferDescriptorSize$LAYOUT, storageBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t storageBufferDescriptorSize
     * }
     */
    public static void storageBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(storageBufferDescriptorSize$LAYOUT, storageBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong robustStorageBufferDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("robustStorageBufferDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t robustStorageBufferDescriptorSize
     * }
     */
    public static final OfLong robustStorageBufferDescriptorSize$layout() {
        return robustStorageBufferDescriptorSize$LAYOUT;
    }

    private static final long robustStorageBufferDescriptorSize$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t robustStorageBufferDescriptorSize
     * }
     */
    public static final long robustStorageBufferDescriptorSize$offset() {
        return robustStorageBufferDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t robustStorageBufferDescriptorSize
     * }
     */
    public static long robustStorageBufferDescriptorSize(MemorySegment struct) {
        return struct.get(robustStorageBufferDescriptorSize$LAYOUT, robustStorageBufferDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t robustStorageBufferDescriptorSize
     * }
     */
    public static void robustStorageBufferDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(robustStorageBufferDescriptorSize$LAYOUT, robustStorageBufferDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong inputAttachmentDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("inputAttachmentDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t inputAttachmentDescriptorSize
     * }
     */
    public static final OfLong inputAttachmentDescriptorSize$layout() {
        return inputAttachmentDescriptorSize$LAYOUT;
    }

    private static final long inputAttachmentDescriptorSize$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t inputAttachmentDescriptorSize
     * }
     */
    public static final long inputAttachmentDescriptorSize$offset() {
        return inputAttachmentDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t inputAttachmentDescriptorSize
     * }
     */
    public static long inputAttachmentDescriptorSize(MemorySegment struct) {
        return struct.get(inputAttachmentDescriptorSize$LAYOUT, inputAttachmentDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t inputAttachmentDescriptorSize
     * }
     */
    public static void inputAttachmentDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(inputAttachmentDescriptorSize$LAYOUT, inputAttachmentDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong accelerationStructureDescriptorSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("accelerationStructureDescriptorSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t accelerationStructureDescriptorSize
     * }
     */
    public static final OfLong accelerationStructureDescriptorSize$layout() {
        return accelerationStructureDescriptorSize$LAYOUT;
    }

    private static final long accelerationStructureDescriptorSize$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t accelerationStructureDescriptorSize
     * }
     */
    public static final long accelerationStructureDescriptorSize$offset() {
        return accelerationStructureDescriptorSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t accelerationStructureDescriptorSize
     * }
     */
    public static long accelerationStructureDescriptorSize(MemorySegment struct) {
        return struct.get(accelerationStructureDescriptorSize$LAYOUT, accelerationStructureDescriptorSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t accelerationStructureDescriptorSize
     * }
     */
    public static void accelerationStructureDescriptorSize(MemorySegment struct, long fieldValue) {
        struct.set(accelerationStructureDescriptorSize$LAYOUT, accelerationStructureDescriptorSize$OFFSET, fieldValue);
    }

    private static final OfLong maxSamplerDescriptorBufferRange$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maxSamplerDescriptorBufferRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize maxSamplerDescriptorBufferRange
     * }
     */
    public static final OfLong maxSamplerDescriptorBufferRange$layout() {
        return maxSamplerDescriptorBufferRange$LAYOUT;
    }

    private static final long maxSamplerDescriptorBufferRange$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize maxSamplerDescriptorBufferRange
     * }
     */
    public static final long maxSamplerDescriptorBufferRange$offset() {
        return maxSamplerDescriptorBufferRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize maxSamplerDescriptorBufferRange
     * }
     */
    public static long maxSamplerDescriptorBufferRange(MemorySegment struct) {
        return struct.get(maxSamplerDescriptorBufferRange$LAYOUT, maxSamplerDescriptorBufferRange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize maxSamplerDescriptorBufferRange
     * }
     */
    public static void maxSamplerDescriptorBufferRange(MemorySegment struct, long fieldValue) {
        struct.set(maxSamplerDescriptorBufferRange$LAYOUT, maxSamplerDescriptorBufferRange$OFFSET, fieldValue);
    }

    private static final OfLong maxResourceDescriptorBufferRange$LAYOUT = (OfLong)$LAYOUT.select(groupElement("maxResourceDescriptorBufferRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize maxResourceDescriptorBufferRange
     * }
     */
    public static final OfLong maxResourceDescriptorBufferRange$layout() {
        return maxResourceDescriptorBufferRange$LAYOUT;
    }

    private static final long maxResourceDescriptorBufferRange$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize maxResourceDescriptorBufferRange
     * }
     */
    public static final long maxResourceDescriptorBufferRange$offset() {
        return maxResourceDescriptorBufferRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize maxResourceDescriptorBufferRange
     * }
     */
    public static long maxResourceDescriptorBufferRange(MemorySegment struct) {
        return struct.get(maxResourceDescriptorBufferRange$LAYOUT, maxResourceDescriptorBufferRange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize maxResourceDescriptorBufferRange
     * }
     */
    public static void maxResourceDescriptorBufferRange(MemorySegment struct, long fieldValue) {
        struct.set(maxResourceDescriptorBufferRange$LAYOUT, maxResourceDescriptorBufferRange$OFFSET, fieldValue);
    }

    private static final OfLong samplerDescriptorBufferAddressSpaceSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("samplerDescriptorBufferAddressSpaceSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize samplerDescriptorBufferAddressSpaceSize
     * }
     */
    public static final OfLong samplerDescriptorBufferAddressSpaceSize$layout() {
        return samplerDescriptorBufferAddressSpaceSize$LAYOUT;
    }

    private static final long samplerDescriptorBufferAddressSpaceSize$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize samplerDescriptorBufferAddressSpaceSize
     * }
     */
    public static final long samplerDescriptorBufferAddressSpaceSize$offset() {
        return samplerDescriptorBufferAddressSpaceSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize samplerDescriptorBufferAddressSpaceSize
     * }
     */
    public static long samplerDescriptorBufferAddressSpaceSize(MemorySegment struct) {
        return struct.get(samplerDescriptorBufferAddressSpaceSize$LAYOUT, samplerDescriptorBufferAddressSpaceSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize samplerDescriptorBufferAddressSpaceSize
     * }
     */
    public static void samplerDescriptorBufferAddressSpaceSize(MemorySegment struct, long fieldValue) {
        struct.set(samplerDescriptorBufferAddressSpaceSize$LAYOUT, samplerDescriptorBufferAddressSpaceSize$OFFSET, fieldValue);
    }

    private static final OfLong resourceDescriptorBufferAddressSpaceSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("resourceDescriptorBufferAddressSpaceSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize resourceDescriptorBufferAddressSpaceSize
     * }
     */
    public static final OfLong resourceDescriptorBufferAddressSpaceSize$layout() {
        return resourceDescriptorBufferAddressSpaceSize$LAYOUT;
    }

    private static final long resourceDescriptorBufferAddressSpaceSize$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize resourceDescriptorBufferAddressSpaceSize
     * }
     */
    public static final long resourceDescriptorBufferAddressSpaceSize$offset() {
        return resourceDescriptorBufferAddressSpaceSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize resourceDescriptorBufferAddressSpaceSize
     * }
     */
    public static long resourceDescriptorBufferAddressSpaceSize(MemorySegment struct) {
        return struct.get(resourceDescriptorBufferAddressSpaceSize$LAYOUT, resourceDescriptorBufferAddressSpaceSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize resourceDescriptorBufferAddressSpaceSize
     * }
     */
    public static void resourceDescriptorBufferAddressSpaceSize(MemorySegment struct, long fieldValue) {
        struct.set(resourceDescriptorBufferAddressSpaceSize$LAYOUT, resourceDescriptorBufferAddressSpaceSize$OFFSET, fieldValue);
    }

    private static final OfLong descriptorBufferAddressSpaceSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("descriptorBufferAddressSpaceSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferAddressSpaceSize
     * }
     */
    public static final OfLong descriptorBufferAddressSpaceSize$layout() {
        return descriptorBufferAddressSpaceSize$LAYOUT;
    }

    private static final long descriptorBufferAddressSpaceSize$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferAddressSpaceSize
     * }
     */
    public static final long descriptorBufferAddressSpaceSize$offset() {
        return descriptorBufferAddressSpaceSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferAddressSpaceSize
     * }
     */
    public static long descriptorBufferAddressSpaceSize(MemorySegment struct) {
        return struct.get(descriptorBufferAddressSpaceSize$LAYOUT, descriptorBufferAddressSpaceSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize descriptorBufferAddressSpaceSize
     * }
     */
    public static void descriptorBufferAddressSpaceSize(MemorySegment struct, long fieldValue) {
        struct.set(descriptorBufferAddressSpaceSize$LAYOUT, descriptorBufferAddressSpaceSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

