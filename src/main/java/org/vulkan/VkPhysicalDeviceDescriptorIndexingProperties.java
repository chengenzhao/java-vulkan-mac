// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceDescriptorIndexingProperties {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint32_t maxUpdateAfterBindDescriptorsInAllPools;
 *     VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
 *     VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
 *     VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
 *     VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
 *     VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
 *     VkBool32 robustBufferAccessUpdateAfterBind;
 *     VkBool32 quadDivergentImplicitLod;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindSamplers;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages;
 *     uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments;
 *     uint32_t maxPerStageUpdateAfterBindResources;
 *     uint32_t maxDescriptorSetUpdateAfterBindSamplers;
 *     uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers;
 *     uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
 *     uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers;
 *     uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
 *     uint32_t maxDescriptorSetUpdateAfterBindSampledImages;
 *     uint32_t maxDescriptorSetUpdateAfterBindStorageImages;
 *     uint32_t maxDescriptorSetUpdateAfterBindInputAttachments;
 * }
 * }
 */
public class VkPhysicalDeviceDescriptorIndexingProperties {

    VkPhysicalDeviceDescriptorIndexingProperties() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("maxUpdateAfterBindDescriptorsInAllPools"),
        vulkan_h.C_INT.withName("shaderUniformBufferArrayNonUniformIndexingNative"),
        vulkan_h.C_INT.withName("shaderSampledImageArrayNonUniformIndexingNative"),
        vulkan_h.C_INT.withName("shaderStorageBufferArrayNonUniformIndexingNative"),
        vulkan_h.C_INT.withName("shaderStorageImageArrayNonUniformIndexingNative"),
        vulkan_h.C_INT.withName("shaderInputAttachmentArrayNonUniformIndexingNative"),
        vulkan_h.C_INT.withName("robustBufferAccessUpdateAfterBind"),
        vulkan_h.C_INT.withName("quadDivergentImplicitLod"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUpdateAfterBindSamplers"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUpdateAfterBindUniformBuffers"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUpdateAfterBindStorageBuffers"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUpdateAfterBindSampledImages"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUpdateAfterBindStorageImages"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUpdateAfterBindInputAttachments"),
        vulkan_h.C_INT.withName("maxPerStageUpdateAfterBindResources"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindSamplers"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindUniformBuffers"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindStorageBuffers"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindSampledImages"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindStorageImages"),
        vulkan_h.C_INT.withName("maxDescriptorSetUpdateAfterBindInputAttachments"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceDescriptorIndexingProperties");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt maxUpdateAfterBindDescriptorsInAllPools$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxUpdateAfterBindDescriptorsInAllPools"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxUpdateAfterBindDescriptorsInAllPools
     * }
     */
    public static final OfInt maxUpdateAfterBindDescriptorsInAllPools$layout() {
        return maxUpdateAfterBindDescriptorsInAllPools$LAYOUT;
    }

    private static final long maxUpdateAfterBindDescriptorsInAllPools$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxUpdateAfterBindDescriptorsInAllPools
     * }
     */
    public static final long maxUpdateAfterBindDescriptorsInAllPools$offset() {
        return maxUpdateAfterBindDescriptorsInAllPools$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxUpdateAfterBindDescriptorsInAllPools
     * }
     */
    public static int maxUpdateAfterBindDescriptorsInAllPools(MemorySegment struct) {
        return struct.get(maxUpdateAfterBindDescriptorsInAllPools$LAYOUT, maxUpdateAfterBindDescriptorsInAllPools$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxUpdateAfterBindDescriptorsInAllPools
     * }
     */
    public static void maxUpdateAfterBindDescriptorsInAllPools(MemorySegment struct, int fieldValue) {
        struct.set(maxUpdateAfterBindDescriptorsInAllPools$LAYOUT, maxUpdateAfterBindDescriptorsInAllPools$OFFSET, fieldValue);
    }

    private static final OfInt shaderUniformBufferArrayNonUniformIndexingNative$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderUniformBufferArrayNonUniformIndexingNative"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexingNative
     * }
     */
    public static final OfInt shaderUniformBufferArrayNonUniformIndexingNative$layout() {
        return shaderUniformBufferArrayNonUniformIndexingNative$LAYOUT;
    }

    private static final long shaderUniformBufferArrayNonUniformIndexingNative$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexingNative
     * }
     */
    public static final long shaderUniformBufferArrayNonUniformIndexingNative$offset() {
        return shaderUniformBufferArrayNonUniformIndexingNative$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexingNative
     * }
     */
    public static int shaderUniformBufferArrayNonUniformIndexingNative(MemorySegment struct) {
        return struct.get(shaderUniformBufferArrayNonUniformIndexingNative$LAYOUT, shaderUniformBufferArrayNonUniformIndexingNative$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexingNative
     * }
     */
    public static void shaderUniformBufferArrayNonUniformIndexingNative(MemorySegment struct, int fieldValue) {
        struct.set(shaderUniformBufferArrayNonUniformIndexingNative$LAYOUT, shaderUniformBufferArrayNonUniformIndexingNative$OFFSET, fieldValue);
    }

    private static final OfInt shaderSampledImageArrayNonUniformIndexingNative$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSampledImageArrayNonUniformIndexingNative"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexingNative
     * }
     */
    public static final OfInt shaderSampledImageArrayNonUniformIndexingNative$layout() {
        return shaderSampledImageArrayNonUniformIndexingNative$LAYOUT;
    }

    private static final long shaderSampledImageArrayNonUniformIndexingNative$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexingNative
     * }
     */
    public static final long shaderSampledImageArrayNonUniformIndexingNative$offset() {
        return shaderSampledImageArrayNonUniformIndexingNative$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexingNative
     * }
     */
    public static int shaderSampledImageArrayNonUniformIndexingNative(MemorySegment struct) {
        return struct.get(shaderSampledImageArrayNonUniformIndexingNative$LAYOUT, shaderSampledImageArrayNonUniformIndexingNative$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexingNative
     * }
     */
    public static void shaderSampledImageArrayNonUniformIndexingNative(MemorySegment struct, int fieldValue) {
        struct.set(shaderSampledImageArrayNonUniformIndexingNative$LAYOUT, shaderSampledImageArrayNonUniformIndexingNative$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageBufferArrayNonUniformIndexingNative$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageBufferArrayNonUniformIndexingNative"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexingNative
     * }
     */
    public static final OfInt shaderStorageBufferArrayNonUniformIndexingNative$layout() {
        return shaderStorageBufferArrayNonUniformIndexingNative$LAYOUT;
    }

    private static final long shaderStorageBufferArrayNonUniformIndexingNative$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexingNative
     * }
     */
    public static final long shaderStorageBufferArrayNonUniformIndexingNative$offset() {
        return shaderStorageBufferArrayNonUniformIndexingNative$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexingNative
     * }
     */
    public static int shaderStorageBufferArrayNonUniformIndexingNative(MemorySegment struct) {
        return struct.get(shaderStorageBufferArrayNonUniformIndexingNative$LAYOUT, shaderStorageBufferArrayNonUniformIndexingNative$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexingNative
     * }
     */
    public static void shaderStorageBufferArrayNonUniformIndexingNative(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageBufferArrayNonUniformIndexingNative$LAYOUT, shaderStorageBufferArrayNonUniformIndexingNative$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageImageArrayNonUniformIndexingNative$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageImageArrayNonUniformIndexingNative"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexingNative
     * }
     */
    public static final OfInt shaderStorageImageArrayNonUniformIndexingNative$layout() {
        return shaderStorageImageArrayNonUniformIndexingNative$LAYOUT;
    }

    private static final long shaderStorageImageArrayNonUniformIndexingNative$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexingNative
     * }
     */
    public static final long shaderStorageImageArrayNonUniformIndexingNative$offset() {
        return shaderStorageImageArrayNonUniformIndexingNative$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexingNative
     * }
     */
    public static int shaderStorageImageArrayNonUniformIndexingNative(MemorySegment struct) {
        return struct.get(shaderStorageImageArrayNonUniformIndexingNative$LAYOUT, shaderStorageImageArrayNonUniformIndexingNative$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexingNative
     * }
     */
    public static void shaderStorageImageArrayNonUniformIndexingNative(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageImageArrayNonUniformIndexingNative$LAYOUT, shaderStorageImageArrayNonUniformIndexingNative$OFFSET, fieldValue);
    }

    private static final OfInt shaderInputAttachmentArrayNonUniformIndexingNative$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderInputAttachmentArrayNonUniformIndexingNative"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative
     * }
     */
    public static final OfInt shaderInputAttachmentArrayNonUniformIndexingNative$layout() {
        return shaderInputAttachmentArrayNonUniformIndexingNative$LAYOUT;
    }

    private static final long shaderInputAttachmentArrayNonUniformIndexingNative$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative
     * }
     */
    public static final long shaderInputAttachmentArrayNonUniformIndexingNative$offset() {
        return shaderInputAttachmentArrayNonUniformIndexingNative$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative
     * }
     */
    public static int shaderInputAttachmentArrayNonUniformIndexingNative(MemorySegment struct) {
        return struct.get(shaderInputAttachmentArrayNonUniformIndexingNative$LAYOUT, shaderInputAttachmentArrayNonUniformIndexingNative$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative
     * }
     */
    public static void shaderInputAttachmentArrayNonUniformIndexingNative(MemorySegment struct, int fieldValue) {
        struct.set(shaderInputAttachmentArrayNonUniformIndexingNative$LAYOUT, shaderInputAttachmentArrayNonUniformIndexingNative$OFFSET, fieldValue);
    }

    private static final OfInt robustBufferAccessUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("robustBufferAccessUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccessUpdateAfterBind
     * }
     */
    public static final OfInt robustBufferAccessUpdateAfterBind$layout() {
        return robustBufferAccessUpdateAfterBind$LAYOUT;
    }

    private static final long robustBufferAccessUpdateAfterBind$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccessUpdateAfterBind
     * }
     */
    public static final long robustBufferAccessUpdateAfterBind$offset() {
        return robustBufferAccessUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccessUpdateAfterBind
     * }
     */
    public static int robustBufferAccessUpdateAfterBind(MemorySegment struct) {
        return struct.get(robustBufferAccessUpdateAfterBind$LAYOUT, robustBufferAccessUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccessUpdateAfterBind
     * }
     */
    public static void robustBufferAccessUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(robustBufferAccessUpdateAfterBind$LAYOUT, robustBufferAccessUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt quadDivergentImplicitLod$LAYOUT = (OfInt)$LAYOUT.select(groupElement("quadDivergentImplicitLod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 quadDivergentImplicitLod
     * }
     */
    public static final OfInt quadDivergentImplicitLod$layout() {
        return quadDivergentImplicitLod$LAYOUT;
    }

    private static final long quadDivergentImplicitLod$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 quadDivergentImplicitLod
     * }
     */
    public static final long quadDivergentImplicitLod$offset() {
        return quadDivergentImplicitLod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 quadDivergentImplicitLod
     * }
     */
    public static int quadDivergentImplicitLod(MemorySegment struct) {
        return struct.get(quadDivergentImplicitLod$LAYOUT, quadDivergentImplicitLod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 quadDivergentImplicitLod
     * }
     */
    public static void quadDivergentImplicitLod(MemorySegment struct, int fieldValue) {
        struct.set(quadDivergentImplicitLod$LAYOUT, quadDivergentImplicitLod$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUpdateAfterBindSamplers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUpdateAfterBindSamplers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSamplers
     * }
     */
    public static final OfInt maxPerStageDescriptorUpdateAfterBindSamplers$layout() {
        return maxPerStageDescriptorUpdateAfterBindSamplers$LAYOUT;
    }

    private static final long maxPerStageDescriptorUpdateAfterBindSamplers$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSamplers
     * }
     */
    public static final long maxPerStageDescriptorUpdateAfterBindSamplers$offset() {
        return maxPerStageDescriptorUpdateAfterBindSamplers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSamplers
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindSamplers(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUpdateAfterBindSamplers$LAYOUT, maxPerStageDescriptorUpdateAfterBindSamplers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSamplers
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindSamplers(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUpdateAfterBindSamplers$LAYOUT, maxPerStageDescriptorUpdateAfterBindSamplers$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUpdateAfterBindUniformBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUpdateAfterBindUniformBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers
     * }
     */
    public static final OfInt maxPerStageDescriptorUpdateAfterBindUniformBuffers$layout() {
        return maxPerStageDescriptorUpdateAfterBindUniformBuffers$LAYOUT;
    }

    private static final long maxPerStageDescriptorUpdateAfterBindUniformBuffers$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers
     * }
     */
    public static final long maxPerStageDescriptorUpdateAfterBindUniformBuffers$offset() {
        return maxPerStageDescriptorUpdateAfterBindUniformBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindUniformBuffers(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUpdateAfterBindUniformBuffers$LAYOUT, maxPerStageDescriptorUpdateAfterBindUniformBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindUniformBuffers
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindUniformBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUpdateAfterBindUniformBuffers$LAYOUT, maxPerStageDescriptorUpdateAfterBindUniformBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUpdateAfterBindStorageBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUpdateAfterBindStorageBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers
     * }
     */
    public static final OfInt maxPerStageDescriptorUpdateAfterBindStorageBuffers$layout() {
        return maxPerStageDescriptorUpdateAfterBindStorageBuffers$LAYOUT;
    }

    private static final long maxPerStageDescriptorUpdateAfterBindStorageBuffers$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers
     * }
     */
    public static final long maxPerStageDescriptorUpdateAfterBindStorageBuffers$offset() {
        return maxPerStageDescriptorUpdateAfterBindStorageBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindStorageBuffers(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUpdateAfterBindStorageBuffers$LAYOUT, maxPerStageDescriptorUpdateAfterBindStorageBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageBuffers
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindStorageBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUpdateAfterBindStorageBuffers$LAYOUT, maxPerStageDescriptorUpdateAfterBindStorageBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUpdateAfterBindSampledImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUpdateAfterBindSampledImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages
     * }
     */
    public static final OfInt maxPerStageDescriptorUpdateAfterBindSampledImages$layout() {
        return maxPerStageDescriptorUpdateAfterBindSampledImages$LAYOUT;
    }

    private static final long maxPerStageDescriptorUpdateAfterBindSampledImages$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages
     * }
     */
    public static final long maxPerStageDescriptorUpdateAfterBindSampledImages$offset() {
        return maxPerStageDescriptorUpdateAfterBindSampledImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindSampledImages(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUpdateAfterBindSampledImages$LAYOUT, maxPerStageDescriptorUpdateAfterBindSampledImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindSampledImages
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindSampledImages(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUpdateAfterBindSampledImages$LAYOUT, maxPerStageDescriptorUpdateAfterBindSampledImages$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUpdateAfterBindStorageImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUpdateAfterBindStorageImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages
     * }
     */
    public static final OfInt maxPerStageDescriptorUpdateAfterBindStorageImages$layout() {
        return maxPerStageDescriptorUpdateAfterBindStorageImages$LAYOUT;
    }

    private static final long maxPerStageDescriptorUpdateAfterBindStorageImages$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages
     * }
     */
    public static final long maxPerStageDescriptorUpdateAfterBindStorageImages$offset() {
        return maxPerStageDescriptorUpdateAfterBindStorageImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindStorageImages(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUpdateAfterBindStorageImages$LAYOUT, maxPerStageDescriptorUpdateAfterBindStorageImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindStorageImages
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindStorageImages(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUpdateAfterBindStorageImages$LAYOUT, maxPerStageDescriptorUpdateAfterBindStorageImages$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUpdateAfterBindInputAttachments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUpdateAfterBindInputAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments
     * }
     */
    public static final OfInt maxPerStageDescriptorUpdateAfterBindInputAttachments$layout() {
        return maxPerStageDescriptorUpdateAfterBindInputAttachments$LAYOUT;
    }

    private static final long maxPerStageDescriptorUpdateAfterBindInputAttachments$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments
     * }
     */
    public static final long maxPerStageDescriptorUpdateAfterBindInputAttachments$offset() {
        return maxPerStageDescriptorUpdateAfterBindInputAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments
     * }
     */
    public static int maxPerStageDescriptorUpdateAfterBindInputAttachments(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUpdateAfterBindInputAttachments$LAYOUT, maxPerStageDescriptorUpdateAfterBindInputAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUpdateAfterBindInputAttachments
     * }
     */
    public static void maxPerStageDescriptorUpdateAfterBindInputAttachments(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUpdateAfterBindInputAttachments$LAYOUT, maxPerStageDescriptorUpdateAfterBindInputAttachments$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageUpdateAfterBindResources$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageUpdateAfterBindResources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageUpdateAfterBindResources
     * }
     */
    public static final OfInt maxPerStageUpdateAfterBindResources$layout() {
        return maxPerStageUpdateAfterBindResources$LAYOUT;
    }

    private static final long maxPerStageUpdateAfterBindResources$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageUpdateAfterBindResources
     * }
     */
    public static final long maxPerStageUpdateAfterBindResources$offset() {
        return maxPerStageUpdateAfterBindResources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageUpdateAfterBindResources
     * }
     */
    public static int maxPerStageUpdateAfterBindResources(MemorySegment struct) {
        return struct.get(maxPerStageUpdateAfterBindResources$LAYOUT, maxPerStageUpdateAfterBindResources$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageUpdateAfterBindResources
     * }
     */
    public static void maxPerStageUpdateAfterBindResources(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageUpdateAfterBindResources$LAYOUT, maxPerStageUpdateAfterBindResources$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindSamplers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindSamplers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSamplers
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindSamplers$layout() {
        return maxDescriptorSetUpdateAfterBindSamplers$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindSamplers$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSamplers
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindSamplers$offset() {
        return maxDescriptorSetUpdateAfterBindSamplers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSamplers
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindSamplers(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindSamplers$LAYOUT, maxDescriptorSetUpdateAfterBindSamplers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSamplers
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindSamplers(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindSamplers$LAYOUT, maxDescriptorSetUpdateAfterBindSamplers$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindUniformBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindUniformBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindUniformBuffers$layout() {
        return maxDescriptorSetUpdateAfterBindUniformBuffers$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindUniformBuffers$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindUniformBuffers$offset() {
        return maxDescriptorSetUpdateAfterBindUniformBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindUniformBuffers(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindUniformBuffers$LAYOUT, maxDescriptorSetUpdateAfterBindUniformBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffers
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindUniformBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindUniformBuffers$LAYOUT, maxDescriptorSetUpdateAfterBindUniformBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindUniformBuffersDynamic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$layout() {
        return maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$offset() {
        return maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindUniformBuffersDynamic(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$LAYOUT, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindUniformBuffersDynamic
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindUniformBuffersDynamic(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$LAYOUT, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindStorageBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindStorageBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindStorageBuffers$layout() {
        return maxDescriptorSetUpdateAfterBindStorageBuffers$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindStorageBuffers$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindStorageBuffers$offset() {
        return maxDescriptorSetUpdateAfterBindStorageBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindStorageBuffers(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindStorageBuffers$LAYOUT, maxDescriptorSetUpdateAfterBindStorageBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffers
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindStorageBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindStorageBuffers$LAYOUT, maxDescriptorSetUpdateAfterBindStorageBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindStorageBuffersDynamic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$layout() {
        return maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$offset() {
        return maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindStorageBuffersDynamic(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$LAYOUT, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageBuffersDynamic
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindStorageBuffersDynamic(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$LAYOUT, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindSampledImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindSampledImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSampledImages
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindSampledImages$layout() {
        return maxDescriptorSetUpdateAfterBindSampledImages$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindSampledImages$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSampledImages
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindSampledImages$offset() {
        return maxDescriptorSetUpdateAfterBindSampledImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSampledImages
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindSampledImages(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindSampledImages$LAYOUT, maxDescriptorSetUpdateAfterBindSampledImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindSampledImages
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindSampledImages(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindSampledImages$LAYOUT, maxDescriptorSetUpdateAfterBindSampledImages$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindStorageImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindStorageImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageImages
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindStorageImages$layout() {
        return maxDescriptorSetUpdateAfterBindStorageImages$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindStorageImages$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageImages
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindStorageImages$offset() {
        return maxDescriptorSetUpdateAfterBindStorageImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageImages
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindStorageImages(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindStorageImages$LAYOUT, maxDescriptorSetUpdateAfterBindStorageImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindStorageImages
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindStorageImages(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindStorageImages$LAYOUT, maxDescriptorSetUpdateAfterBindStorageImages$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUpdateAfterBindInputAttachments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUpdateAfterBindInputAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindInputAttachments
     * }
     */
    public static final OfInt maxDescriptorSetUpdateAfterBindInputAttachments$layout() {
        return maxDescriptorSetUpdateAfterBindInputAttachments$LAYOUT;
    }

    private static final long maxDescriptorSetUpdateAfterBindInputAttachments$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindInputAttachments
     * }
     */
    public static final long maxDescriptorSetUpdateAfterBindInputAttachments$offset() {
        return maxDescriptorSetUpdateAfterBindInputAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindInputAttachments
     * }
     */
    public static int maxDescriptorSetUpdateAfterBindInputAttachments(MemorySegment struct) {
        return struct.get(maxDescriptorSetUpdateAfterBindInputAttachments$LAYOUT, maxDescriptorSetUpdateAfterBindInputAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUpdateAfterBindInputAttachments
     * }
     */
    public static void maxDescriptorSetUpdateAfterBindInputAttachments(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUpdateAfterBindInputAttachments$LAYOUT, maxDescriptorSetUpdateAfterBindInputAttachments$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

