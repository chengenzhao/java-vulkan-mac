// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceDriverProperties {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkDriverId driverID;
 *     char driverName[256];
 *     char driverInfo[256];
 *     VkConformanceVersion conformanceVersion;
 * }
 * }
 */
public class VkPhysicalDeviceDriverProperties {

    VkPhysicalDeviceDriverProperties() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("driverID"),
        MemoryLayout.sequenceLayout(256, vulkan_h.C_CHAR).withName("driverName"),
        MemoryLayout.sequenceLayout(256, vulkan_h.C_CHAR).withName("driverInfo"),
        VkConformanceVersion.layout().withName("conformanceVersion")
    ).withName("VkPhysicalDeviceDriverProperties");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt driverID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("driverID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDriverId driverID
     * }
     */
    public static final OfInt driverID$layout() {
        return driverID$LAYOUT;
    }

    private static final long driverID$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDriverId driverID
     * }
     */
    public static final long driverID$offset() {
        return driverID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDriverId driverID
     * }
     */
    public static int driverID(MemorySegment struct) {
        return struct.get(driverID$LAYOUT, driverID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDriverId driverID
     * }
     */
    public static void driverID(MemorySegment struct, int fieldValue) {
        struct.set(driverID$LAYOUT, driverID$OFFSET, fieldValue);
    }

    private static final SequenceLayout driverName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("driverName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char driverName[256]
     * }
     */
    public static final SequenceLayout driverName$layout() {
        return driverName$LAYOUT;
    }

    private static final long driverName$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char driverName[256]
     * }
     */
    public static final long driverName$offset() {
        return driverName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char driverName[256]
     * }
     */
    public static MemorySegment driverName(MemorySegment struct) {
        return struct.asSlice(driverName$OFFSET, driverName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char driverName[256]
     * }
     */
    public static void driverName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, driverName$OFFSET, driverName$LAYOUT.byteSize());
    }

    private static long[] driverName$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char driverName[256]
     * }
     */
    public static long[] driverName$dimensions() {
        return driverName$DIMS;
    }
    private static final VarHandle driverName$ELEM_HANDLE = driverName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char driverName[256]
     * }
     */
    public static byte driverName(MemorySegment struct, long index0) {
        return (byte)driverName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char driverName[256]
     * }
     */
    public static void driverName(MemorySegment struct, long index0, byte fieldValue) {
        driverName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout driverInfo$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("driverInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char driverInfo[256]
     * }
     */
    public static final SequenceLayout driverInfo$layout() {
        return driverInfo$LAYOUT;
    }

    private static final long driverInfo$OFFSET = 276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char driverInfo[256]
     * }
     */
    public static final long driverInfo$offset() {
        return driverInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char driverInfo[256]
     * }
     */
    public static MemorySegment driverInfo(MemorySegment struct) {
        return struct.asSlice(driverInfo$OFFSET, driverInfo$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char driverInfo[256]
     * }
     */
    public static void driverInfo(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, driverInfo$OFFSET, driverInfo$LAYOUT.byteSize());
    }

    private static long[] driverInfo$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char driverInfo[256]
     * }
     */
    public static long[] driverInfo$dimensions() {
        return driverInfo$DIMS;
    }
    private static final VarHandle driverInfo$ELEM_HANDLE = driverInfo$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char driverInfo[256]
     * }
     */
    public static byte driverInfo(MemorySegment struct, long index0) {
        return (byte)driverInfo$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char driverInfo[256]
     * }
     */
    public static void driverInfo(MemorySegment struct, long index0, byte fieldValue) {
        driverInfo$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout conformanceVersion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("conformanceVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkConformanceVersion conformanceVersion
     * }
     */
    public static final GroupLayout conformanceVersion$layout() {
        return conformanceVersion$LAYOUT;
    }

    private static final long conformanceVersion$OFFSET = 532;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkConformanceVersion conformanceVersion
     * }
     */
    public static final long conformanceVersion$offset() {
        return conformanceVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkConformanceVersion conformanceVersion
     * }
     */
    public static MemorySegment conformanceVersion(MemorySegment struct) {
        return struct.asSlice(conformanceVersion$OFFSET, conformanceVersion$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkConformanceVersion conformanceVersion
     * }
     */
    public static void conformanceVersion(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, conformanceVersion$OFFSET, conformanceVersion$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

