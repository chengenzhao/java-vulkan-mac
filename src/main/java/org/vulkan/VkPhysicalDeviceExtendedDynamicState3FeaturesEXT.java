// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 extendedDynamicState3TessellationDomainOrigin;
 *     VkBool32 extendedDynamicState3DepthClampEnable;
 *     VkBool32 extendedDynamicState3PolygonMode;
 *     VkBool32 extendedDynamicState3RasterizationSamples;
 *     VkBool32 extendedDynamicState3SampleMask;
 *     VkBool32 extendedDynamicState3AlphaToCoverageEnable;
 *     VkBool32 extendedDynamicState3AlphaToOneEnable;
 *     VkBool32 extendedDynamicState3LogicOpEnable;
 *     VkBool32 extendedDynamicState3ColorBlendEnable;
 *     VkBool32 extendedDynamicState3ColorBlendEquation;
 *     VkBool32 extendedDynamicState3ColorWriteMask;
 *     VkBool32 extendedDynamicState3RasterizationStream;
 *     VkBool32 extendedDynamicState3ConservativeRasterizationMode;
 *     VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
 *     VkBool32 extendedDynamicState3DepthClipEnable;
 *     VkBool32 extendedDynamicState3SampleLocationsEnable;
 *     VkBool32 extendedDynamicState3ColorBlendAdvanced;
 *     VkBool32 extendedDynamicState3ProvokingVertexMode;
 *     VkBool32 extendedDynamicState3LineRasterizationMode;
 *     VkBool32 extendedDynamicState3LineStippleEnable;
 *     VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
 *     VkBool32 extendedDynamicState3ViewportWScalingEnable;
 *     VkBool32 extendedDynamicState3ViewportSwizzle;
 *     VkBool32 extendedDynamicState3CoverageToColorEnable;
 *     VkBool32 extendedDynamicState3CoverageToColorLocation;
 *     VkBool32 extendedDynamicState3CoverageModulationMode;
 *     VkBool32 extendedDynamicState3CoverageModulationTableEnable;
 *     VkBool32 extendedDynamicState3CoverageModulationTable;
 *     VkBool32 extendedDynamicState3CoverageReductionMode;
 *     VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
 *     VkBool32 extendedDynamicState3ShadingRateImageEnable;
 * }
 * }
 */
public class VkPhysicalDeviceExtendedDynamicState3FeaturesEXT {

    VkPhysicalDeviceExtendedDynamicState3FeaturesEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("extendedDynamicState3TessellationDomainOrigin"),
        vulkan_h.C_INT.withName("extendedDynamicState3DepthClampEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3PolygonMode"),
        vulkan_h.C_INT.withName("extendedDynamicState3RasterizationSamples"),
        vulkan_h.C_INT.withName("extendedDynamicState3SampleMask"),
        vulkan_h.C_INT.withName("extendedDynamicState3AlphaToCoverageEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3AlphaToOneEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3LogicOpEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3ColorBlendEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3ColorBlendEquation"),
        vulkan_h.C_INT.withName("extendedDynamicState3ColorWriteMask"),
        vulkan_h.C_INT.withName("extendedDynamicState3RasterizationStream"),
        vulkan_h.C_INT.withName("extendedDynamicState3ConservativeRasterizationMode"),
        vulkan_h.C_INT.withName("extendedDynamicState3ExtraPrimitiveOverestimationSize"),
        vulkan_h.C_INT.withName("extendedDynamicState3DepthClipEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3SampleLocationsEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3ColorBlendAdvanced"),
        vulkan_h.C_INT.withName("extendedDynamicState3ProvokingVertexMode"),
        vulkan_h.C_INT.withName("extendedDynamicState3LineRasterizationMode"),
        vulkan_h.C_INT.withName("extendedDynamicState3LineStippleEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3DepthClipNegativeOneToOne"),
        vulkan_h.C_INT.withName("extendedDynamicState3ViewportWScalingEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3ViewportSwizzle"),
        vulkan_h.C_INT.withName("extendedDynamicState3CoverageToColorEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3CoverageToColorLocation"),
        vulkan_h.C_INT.withName("extendedDynamicState3CoverageModulationMode"),
        vulkan_h.C_INT.withName("extendedDynamicState3CoverageModulationTableEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3CoverageModulationTable"),
        vulkan_h.C_INT.withName("extendedDynamicState3CoverageReductionMode"),
        vulkan_h.C_INT.withName("extendedDynamicState3RepresentativeFragmentTestEnable"),
        vulkan_h.C_INT.withName("extendedDynamicState3ShadingRateImageEnable"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceExtendedDynamicState3FeaturesEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3TessellationDomainOrigin$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3TessellationDomainOrigin"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3TessellationDomainOrigin
     * }
     */
    public static final OfInt extendedDynamicState3TessellationDomainOrigin$layout() {
        return extendedDynamicState3TessellationDomainOrigin$LAYOUT;
    }

    private static final long extendedDynamicState3TessellationDomainOrigin$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3TessellationDomainOrigin
     * }
     */
    public static final long extendedDynamicState3TessellationDomainOrigin$offset() {
        return extendedDynamicState3TessellationDomainOrigin$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3TessellationDomainOrigin
     * }
     */
    public static int extendedDynamicState3TessellationDomainOrigin(MemorySegment struct) {
        return struct.get(extendedDynamicState3TessellationDomainOrigin$LAYOUT, extendedDynamicState3TessellationDomainOrigin$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3TessellationDomainOrigin
     * }
     */
    public static void extendedDynamicState3TessellationDomainOrigin(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3TessellationDomainOrigin$LAYOUT, extendedDynamicState3TessellationDomainOrigin$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3DepthClampEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3DepthClampEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClampEnable
     * }
     */
    public static final OfInt extendedDynamicState3DepthClampEnable$layout() {
        return extendedDynamicState3DepthClampEnable$LAYOUT;
    }

    private static final long extendedDynamicState3DepthClampEnable$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClampEnable
     * }
     */
    public static final long extendedDynamicState3DepthClampEnable$offset() {
        return extendedDynamicState3DepthClampEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClampEnable
     * }
     */
    public static int extendedDynamicState3DepthClampEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3DepthClampEnable$LAYOUT, extendedDynamicState3DepthClampEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClampEnable
     * }
     */
    public static void extendedDynamicState3DepthClampEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3DepthClampEnable$LAYOUT, extendedDynamicState3DepthClampEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3PolygonMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3PolygonMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3PolygonMode
     * }
     */
    public static final OfInt extendedDynamicState3PolygonMode$layout() {
        return extendedDynamicState3PolygonMode$LAYOUT;
    }

    private static final long extendedDynamicState3PolygonMode$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3PolygonMode
     * }
     */
    public static final long extendedDynamicState3PolygonMode$offset() {
        return extendedDynamicState3PolygonMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3PolygonMode
     * }
     */
    public static int extendedDynamicState3PolygonMode(MemorySegment struct) {
        return struct.get(extendedDynamicState3PolygonMode$LAYOUT, extendedDynamicState3PolygonMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3PolygonMode
     * }
     */
    public static void extendedDynamicState3PolygonMode(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3PolygonMode$LAYOUT, extendedDynamicState3PolygonMode$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3RasterizationSamples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3RasterizationSamples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationSamples
     * }
     */
    public static final OfInt extendedDynamicState3RasterizationSamples$layout() {
        return extendedDynamicState3RasterizationSamples$LAYOUT;
    }

    private static final long extendedDynamicState3RasterizationSamples$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationSamples
     * }
     */
    public static final long extendedDynamicState3RasterizationSamples$offset() {
        return extendedDynamicState3RasterizationSamples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationSamples
     * }
     */
    public static int extendedDynamicState3RasterizationSamples(MemorySegment struct) {
        return struct.get(extendedDynamicState3RasterizationSamples$LAYOUT, extendedDynamicState3RasterizationSamples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationSamples
     * }
     */
    public static void extendedDynamicState3RasterizationSamples(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3RasterizationSamples$LAYOUT, extendedDynamicState3RasterizationSamples$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3SampleMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3SampleMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleMask
     * }
     */
    public static final OfInt extendedDynamicState3SampleMask$layout() {
        return extendedDynamicState3SampleMask$LAYOUT;
    }

    private static final long extendedDynamicState3SampleMask$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleMask
     * }
     */
    public static final long extendedDynamicState3SampleMask$offset() {
        return extendedDynamicState3SampleMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleMask
     * }
     */
    public static int extendedDynamicState3SampleMask(MemorySegment struct) {
        return struct.get(extendedDynamicState3SampleMask$LAYOUT, extendedDynamicState3SampleMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleMask
     * }
     */
    public static void extendedDynamicState3SampleMask(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3SampleMask$LAYOUT, extendedDynamicState3SampleMask$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3AlphaToCoverageEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3AlphaToCoverageEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToCoverageEnable
     * }
     */
    public static final OfInt extendedDynamicState3AlphaToCoverageEnable$layout() {
        return extendedDynamicState3AlphaToCoverageEnable$LAYOUT;
    }

    private static final long extendedDynamicState3AlphaToCoverageEnable$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToCoverageEnable
     * }
     */
    public static final long extendedDynamicState3AlphaToCoverageEnable$offset() {
        return extendedDynamicState3AlphaToCoverageEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToCoverageEnable
     * }
     */
    public static int extendedDynamicState3AlphaToCoverageEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3AlphaToCoverageEnable$LAYOUT, extendedDynamicState3AlphaToCoverageEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToCoverageEnable
     * }
     */
    public static void extendedDynamicState3AlphaToCoverageEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3AlphaToCoverageEnable$LAYOUT, extendedDynamicState3AlphaToCoverageEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3AlphaToOneEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3AlphaToOneEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToOneEnable
     * }
     */
    public static final OfInt extendedDynamicState3AlphaToOneEnable$layout() {
        return extendedDynamicState3AlphaToOneEnable$LAYOUT;
    }

    private static final long extendedDynamicState3AlphaToOneEnable$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToOneEnable
     * }
     */
    public static final long extendedDynamicState3AlphaToOneEnable$offset() {
        return extendedDynamicState3AlphaToOneEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToOneEnable
     * }
     */
    public static int extendedDynamicState3AlphaToOneEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3AlphaToOneEnable$LAYOUT, extendedDynamicState3AlphaToOneEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3AlphaToOneEnable
     * }
     */
    public static void extendedDynamicState3AlphaToOneEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3AlphaToOneEnable$LAYOUT, extendedDynamicState3AlphaToOneEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3LogicOpEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3LogicOpEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LogicOpEnable
     * }
     */
    public static final OfInt extendedDynamicState3LogicOpEnable$layout() {
        return extendedDynamicState3LogicOpEnable$LAYOUT;
    }

    private static final long extendedDynamicState3LogicOpEnable$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LogicOpEnable
     * }
     */
    public static final long extendedDynamicState3LogicOpEnable$offset() {
        return extendedDynamicState3LogicOpEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LogicOpEnable
     * }
     */
    public static int extendedDynamicState3LogicOpEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3LogicOpEnable$LAYOUT, extendedDynamicState3LogicOpEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LogicOpEnable
     * }
     */
    public static void extendedDynamicState3LogicOpEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3LogicOpEnable$LAYOUT, extendedDynamicState3LogicOpEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ColorBlendEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ColorBlendEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEnable
     * }
     */
    public static final OfInt extendedDynamicState3ColorBlendEnable$layout() {
        return extendedDynamicState3ColorBlendEnable$LAYOUT;
    }

    private static final long extendedDynamicState3ColorBlendEnable$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEnable
     * }
     */
    public static final long extendedDynamicState3ColorBlendEnable$offset() {
        return extendedDynamicState3ColorBlendEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEnable
     * }
     */
    public static int extendedDynamicState3ColorBlendEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3ColorBlendEnable$LAYOUT, extendedDynamicState3ColorBlendEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEnable
     * }
     */
    public static void extendedDynamicState3ColorBlendEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ColorBlendEnable$LAYOUT, extendedDynamicState3ColorBlendEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ColorBlendEquation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ColorBlendEquation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEquation
     * }
     */
    public static final OfInt extendedDynamicState3ColorBlendEquation$layout() {
        return extendedDynamicState3ColorBlendEquation$LAYOUT;
    }

    private static final long extendedDynamicState3ColorBlendEquation$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEquation
     * }
     */
    public static final long extendedDynamicState3ColorBlendEquation$offset() {
        return extendedDynamicState3ColorBlendEquation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEquation
     * }
     */
    public static int extendedDynamicState3ColorBlendEquation(MemorySegment struct) {
        return struct.get(extendedDynamicState3ColorBlendEquation$LAYOUT, extendedDynamicState3ColorBlendEquation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendEquation
     * }
     */
    public static void extendedDynamicState3ColorBlendEquation(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ColorBlendEquation$LAYOUT, extendedDynamicState3ColorBlendEquation$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ColorWriteMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ColorWriteMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorWriteMask
     * }
     */
    public static final OfInt extendedDynamicState3ColorWriteMask$layout() {
        return extendedDynamicState3ColorWriteMask$LAYOUT;
    }

    private static final long extendedDynamicState3ColorWriteMask$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorWriteMask
     * }
     */
    public static final long extendedDynamicState3ColorWriteMask$offset() {
        return extendedDynamicState3ColorWriteMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorWriteMask
     * }
     */
    public static int extendedDynamicState3ColorWriteMask(MemorySegment struct) {
        return struct.get(extendedDynamicState3ColorWriteMask$LAYOUT, extendedDynamicState3ColorWriteMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorWriteMask
     * }
     */
    public static void extendedDynamicState3ColorWriteMask(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ColorWriteMask$LAYOUT, extendedDynamicState3ColorWriteMask$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3RasterizationStream$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3RasterizationStream"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationStream
     * }
     */
    public static final OfInt extendedDynamicState3RasterizationStream$layout() {
        return extendedDynamicState3RasterizationStream$LAYOUT;
    }

    private static final long extendedDynamicState3RasterizationStream$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationStream
     * }
     */
    public static final long extendedDynamicState3RasterizationStream$offset() {
        return extendedDynamicState3RasterizationStream$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationStream
     * }
     */
    public static int extendedDynamicState3RasterizationStream(MemorySegment struct) {
        return struct.get(extendedDynamicState3RasterizationStream$LAYOUT, extendedDynamicState3RasterizationStream$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RasterizationStream
     * }
     */
    public static void extendedDynamicState3RasterizationStream(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3RasterizationStream$LAYOUT, extendedDynamicState3RasterizationStream$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ConservativeRasterizationMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ConservativeRasterizationMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ConservativeRasterizationMode
     * }
     */
    public static final OfInt extendedDynamicState3ConservativeRasterizationMode$layout() {
        return extendedDynamicState3ConservativeRasterizationMode$LAYOUT;
    }

    private static final long extendedDynamicState3ConservativeRasterizationMode$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ConservativeRasterizationMode
     * }
     */
    public static final long extendedDynamicState3ConservativeRasterizationMode$offset() {
        return extendedDynamicState3ConservativeRasterizationMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ConservativeRasterizationMode
     * }
     */
    public static int extendedDynamicState3ConservativeRasterizationMode(MemorySegment struct) {
        return struct.get(extendedDynamicState3ConservativeRasterizationMode$LAYOUT, extendedDynamicState3ConservativeRasterizationMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ConservativeRasterizationMode
     * }
     */
    public static void extendedDynamicState3ConservativeRasterizationMode(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ConservativeRasterizationMode$LAYOUT, extendedDynamicState3ConservativeRasterizationMode$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ExtraPrimitiveOverestimationSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ExtraPrimitiveOverestimationSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize
     * }
     */
    public static final OfInt extendedDynamicState3ExtraPrimitiveOverestimationSize$layout() {
        return extendedDynamicState3ExtraPrimitiveOverestimationSize$LAYOUT;
    }

    private static final long extendedDynamicState3ExtraPrimitiveOverestimationSize$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize
     * }
     */
    public static final long extendedDynamicState3ExtraPrimitiveOverestimationSize$offset() {
        return extendedDynamicState3ExtraPrimitiveOverestimationSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize
     * }
     */
    public static int extendedDynamicState3ExtraPrimitiveOverestimationSize(MemorySegment struct) {
        return struct.get(extendedDynamicState3ExtraPrimitiveOverestimationSize$LAYOUT, extendedDynamicState3ExtraPrimitiveOverestimationSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize
     * }
     */
    public static void extendedDynamicState3ExtraPrimitiveOverestimationSize(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ExtraPrimitiveOverestimationSize$LAYOUT, extendedDynamicState3ExtraPrimitiveOverestimationSize$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3DepthClipEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3DepthClipEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipEnable
     * }
     */
    public static final OfInt extendedDynamicState3DepthClipEnable$layout() {
        return extendedDynamicState3DepthClipEnable$LAYOUT;
    }

    private static final long extendedDynamicState3DepthClipEnable$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipEnable
     * }
     */
    public static final long extendedDynamicState3DepthClipEnable$offset() {
        return extendedDynamicState3DepthClipEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipEnable
     * }
     */
    public static int extendedDynamicState3DepthClipEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3DepthClipEnable$LAYOUT, extendedDynamicState3DepthClipEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipEnable
     * }
     */
    public static void extendedDynamicState3DepthClipEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3DepthClipEnable$LAYOUT, extendedDynamicState3DepthClipEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3SampleLocationsEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3SampleLocationsEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleLocationsEnable
     * }
     */
    public static final OfInt extendedDynamicState3SampleLocationsEnable$layout() {
        return extendedDynamicState3SampleLocationsEnable$LAYOUT;
    }

    private static final long extendedDynamicState3SampleLocationsEnable$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleLocationsEnable
     * }
     */
    public static final long extendedDynamicState3SampleLocationsEnable$offset() {
        return extendedDynamicState3SampleLocationsEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleLocationsEnable
     * }
     */
    public static int extendedDynamicState3SampleLocationsEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3SampleLocationsEnable$LAYOUT, extendedDynamicState3SampleLocationsEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3SampleLocationsEnable
     * }
     */
    public static void extendedDynamicState3SampleLocationsEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3SampleLocationsEnable$LAYOUT, extendedDynamicState3SampleLocationsEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ColorBlendAdvanced$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ColorBlendAdvanced"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendAdvanced
     * }
     */
    public static final OfInt extendedDynamicState3ColorBlendAdvanced$layout() {
        return extendedDynamicState3ColorBlendAdvanced$LAYOUT;
    }

    private static final long extendedDynamicState3ColorBlendAdvanced$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendAdvanced
     * }
     */
    public static final long extendedDynamicState3ColorBlendAdvanced$offset() {
        return extendedDynamicState3ColorBlendAdvanced$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendAdvanced
     * }
     */
    public static int extendedDynamicState3ColorBlendAdvanced(MemorySegment struct) {
        return struct.get(extendedDynamicState3ColorBlendAdvanced$LAYOUT, extendedDynamicState3ColorBlendAdvanced$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ColorBlendAdvanced
     * }
     */
    public static void extendedDynamicState3ColorBlendAdvanced(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ColorBlendAdvanced$LAYOUT, extendedDynamicState3ColorBlendAdvanced$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ProvokingVertexMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ProvokingVertexMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ProvokingVertexMode
     * }
     */
    public static final OfInt extendedDynamicState3ProvokingVertexMode$layout() {
        return extendedDynamicState3ProvokingVertexMode$LAYOUT;
    }

    private static final long extendedDynamicState3ProvokingVertexMode$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ProvokingVertexMode
     * }
     */
    public static final long extendedDynamicState3ProvokingVertexMode$offset() {
        return extendedDynamicState3ProvokingVertexMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ProvokingVertexMode
     * }
     */
    public static int extendedDynamicState3ProvokingVertexMode(MemorySegment struct) {
        return struct.get(extendedDynamicState3ProvokingVertexMode$LAYOUT, extendedDynamicState3ProvokingVertexMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ProvokingVertexMode
     * }
     */
    public static void extendedDynamicState3ProvokingVertexMode(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ProvokingVertexMode$LAYOUT, extendedDynamicState3ProvokingVertexMode$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3LineRasterizationMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3LineRasterizationMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineRasterizationMode
     * }
     */
    public static final OfInt extendedDynamicState3LineRasterizationMode$layout() {
        return extendedDynamicState3LineRasterizationMode$LAYOUT;
    }

    private static final long extendedDynamicState3LineRasterizationMode$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineRasterizationMode
     * }
     */
    public static final long extendedDynamicState3LineRasterizationMode$offset() {
        return extendedDynamicState3LineRasterizationMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineRasterizationMode
     * }
     */
    public static int extendedDynamicState3LineRasterizationMode(MemorySegment struct) {
        return struct.get(extendedDynamicState3LineRasterizationMode$LAYOUT, extendedDynamicState3LineRasterizationMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineRasterizationMode
     * }
     */
    public static void extendedDynamicState3LineRasterizationMode(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3LineRasterizationMode$LAYOUT, extendedDynamicState3LineRasterizationMode$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3LineStippleEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3LineStippleEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineStippleEnable
     * }
     */
    public static final OfInt extendedDynamicState3LineStippleEnable$layout() {
        return extendedDynamicState3LineStippleEnable$LAYOUT;
    }

    private static final long extendedDynamicState3LineStippleEnable$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineStippleEnable
     * }
     */
    public static final long extendedDynamicState3LineStippleEnable$offset() {
        return extendedDynamicState3LineStippleEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineStippleEnable
     * }
     */
    public static int extendedDynamicState3LineStippleEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3LineStippleEnable$LAYOUT, extendedDynamicState3LineStippleEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3LineStippleEnable
     * }
     */
    public static void extendedDynamicState3LineStippleEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3LineStippleEnable$LAYOUT, extendedDynamicState3LineStippleEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3DepthClipNegativeOneToOne$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3DepthClipNegativeOneToOne"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipNegativeOneToOne
     * }
     */
    public static final OfInt extendedDynamicState3DepthClipNegativeOneToOne$layout() {
        return extendedDynamicState3DepthClipNegativeOneToOne$LAYOUT;
    }

    private static final long extendedDynamicState3DepthClipNegativeOneToOne$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipNegativeOneToOne
     * }
     */
    public static final long extendedDynamicState3DepthClipNegativeOneToOne$offset() {
        return extendedDynamicState3DepthClipNegativeOneToOne$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipNegativeOneToOne
     * }
     */
    public static int extendedDynamicState3DepthClipNegativeOneToOne(MemorySegment struct) {
        return struct.get(extendedDynamicState3DepthClipNegativeOneToOne$LAYOUT, extendedDynamicState3DepthClipNegativeOneToOne$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3DepthClipNegativeOneToOne
     * }
     */
    public static void extendedDynamicState3DepthClipNegativeOneToOne(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3DepthClipNegativeOneToOne$LAYOUT, extendedDynamicState3DepthClipNegativeOneToOne$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ViewportWScalingEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ViewportWScalingEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportWScalingEnable
     * }
     */
    public static final OfInt extendedDynamicState3ViewportWScalingEnable$layout() {
        return extendedDynamicState3ViewportWScalingEnable$LAYOUT;
    }

    private static final long extendedDynamicState3ViewportWScalingEnable$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportWScalingEnable
     * }
     */
    public static final long extendedDynamicState3ViewportWScalingEnable$offset() {
        return extendedDynamicState3ViewportWScalingEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportWScalingEnable
     * }
     */
    public static int extendedDynamicState3ViewportWScalingEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3ViewportWScalingEnable$LAYOUT, extendedDynamicState3ViewportWScalingEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportWScalingEnable
     * }
     */
    public static void extendedDynamicState3ViewportWScalingEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ViewportWScalingEnable$LAYOUT, extendedDynamicState3ViewportWScalingEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ViewportSwizzle$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ViewportSwizzle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportSwizzle
     * }
     */
    public static final OfInt extendedDynamicState3ViewportSwizzle$layout() {
        return extendedDynamicState3ViewportSwizzle$LAYOUT;
    }

    private static final long extendedDynamicState3ViewportSwizzle$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportSwizzle
     * }
     */
    public static final long extendedDynamicState3ViewportSwizzle$offset() {
        return extendedDynamicState3ViewportSwizzle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportSwizzle
     * }
     */
    public static int extendedDynamicState3ViewportSwizzle(MemorySegment struct) {
        return struct.get(extendedDynamicState3ViewportSwizzle$LAYOUT, extendedDynamicState3ViewportSwizzle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ViewportSwizzle
     * }
     */
    public static void extendedDynamicState3ViewportSwizzle(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ViewportSwizzle$LAYOUT, extendedDynamicState3ViewportSwizzle$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3CoverageToColorEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3CoverageToColorEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorEnable
     * }
     */
    public static final OfInt extendedDynamicState3CoverageToColorEnable$layout() {
        return extendedDynamicState3CoverageToColorEnable$LAYOUT;
    }

    private static final long extendedDynamicState3CoverageToColorEnable$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorEnable
     * }
     */
    public static final long extendedDynamicState3CoverageToColorEnable$offset() {
        return extendedDynamicState3CoverageToColorEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorEnable
     * }
     */
    public static int extendedDynamicState3CoverageToColorEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3CoverageToColorEnable$LAYOUT, extendedDynamicState3CoverageToColorEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorEnable
     * }
     */
    public static void extendedDynamicState3CoverageToColorEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3CoverageToColorEnable$LAYOUT, extendedDynamicState3CoverageToColorEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3CoverageToColorLocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3CoverageToColorLocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorLocation
     * }
     */
    public static final OfInt extendedDynamicState3CoverageToColorLocation$layout() {
        return extendedDynamicState3CoverageToColorLocation$LAYOUT;
    }

    private static final long extendedDynamicState3CoverageToColorLocation$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorLocation
     * }
     */
    public static final long extendedDynamicState3CoverageToColorLocation$offset() {
        return extendedDynamicState3CoverageToColorLocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorLocation
     * }
     */
    public static int extendedDynamicState3CoverageToColorLocation(MemorySegment struct) {
        return struct.get(extendedDynamicState3CoverageToColorLocation$LAYOUT, extendedDynamicState3CoverageToColorLocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageToColorLocation
     * }
     */
    public static void extendedDynamicState3CoverageToColorLocation(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3CoverageToColorLocation$LAYOUT, extendedDynamicState3CoverageToColorLocation$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3CoverageModulationMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3CoverageModulationMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationMode
     * }
     */
    public static final OfInt extendedDynamicState3CoverageModulationMode$layout() {
        return extendedDynamicState3CoverageModulationMode$LAYOUT;
    }

    private static final long extendedDynamicState3CoverageModulationMode$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationMode
     * }
     */
    public static final long extendedDynamicState3CoverageModulationMode$offset() {
        return extendedDynamicState3CoverageModulationMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationMode
     * }
     */
    public static int extendedDynamicState3CoverageModulationMode(MemorySegment struct) {
        return struct.get(extendedDynamicState3CoverageModulationMode$LAYOUT, extendedDynamicState3CoverageModulationMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationMode
     * }
     */
    public static void extendedDynamicState3CoverageModulationMode(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3CoverageModulationMode$LAYOUT, extendedDynamicState3CoverageModulationMode$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3CoverageModulationTableEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3CoverageModulationTableEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTableEnable
     * }
     */
    public static final OfInt extendedDynamicState3CoverageModulationTableEnable$layout() {
        return extendedDynamicState3CoverageModulationTableEnable$LAYOUT;
    }

    private static final long extendedDynamicState3CoverageModulationTableEnable$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTableEnable
     * }
     */
    public static final long extendedDynamicState3CoverageModulationTableEnable$offset() {
        return extendedDynamicState3CoverageModulationTableEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTableEnable
     * }
     */
    public static int extendedDynamicState3CoverageModulationTableEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3CoverageModulationTableEnable$LAYOUT, extendedDynamicState3CoverageModulationTableEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTableEnable
     * }
     */
    public static void extendedDynamicState3CoverageModulationTableEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3CoverageModulationTableEnable$LAYOUT, extendedDynamicState3CoverageModulationTableEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3CoverageModulationTable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3CoverageModulationTable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTable
     * }
     */
    public static final OfInt extendedDynamicState3CoverageModulationTable$layout() {
        return extendedDynamicState3CoverageModulationTable$LAYOUT;
    }

    private static final long extendedDynamicState3CoverageModulationTable$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTable
     * }
     */
    public static final long extendedDynamicState3CoverageModulationTable$offset() {
        return extendedDynamicState3CoverageModulationTable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTable
     * }
     */
    public static int extendedDynamicState3CoverageModulationTable(MemorySegment struct) {
        return struct.get(extendedDynamicState3CoverageModulationTable$LAYOUT, extendedDynamicState3CoverageModulationTable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageModulationTable
     * }
     */
    public static void extendedDynamicState3CoverageModulationTable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3CoverageModulationTable$LAYOUT, extendedDynamicState3CoverageModulationTable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3CoverageReductionMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3CoverageReductionMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageReductionMode
     * }
     */
    public static final OfInt extendedDynamicState3CoverageReductionMode$layout() {
        return extendedDynamicState3CoverageReductionMode$LAYOUT;
    }

    private static final long extendedDynamicState3CoverageReductionMode$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageReductionMode
     * }
     */
    public static final long extendedDynamicState3CoverageReductionMode$offset() {
        return extendedDynamicState3CoverageReductionMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageReductionMode
     * }
     */
    public static int extendedDynamicState3CoverageReductionMode(MemorySegment struct) {
        return struct.get(extendedDynamicState3CoverageReductionMode$LAYOUT, extendedDynamicState3CoverageReductionMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3CoverageReductionMode
     * }
     */
    public static void extendedDynamicState3CoverageReductionMode(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3CoverageReductionMode$LAYOUT, extendedDynamicState3CoverageReductionMode$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3RepresentativeFragmentTestEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3RepresentativeFragmentTestEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable
     * }
     */
    public static final OfInt extendedDynamicState3RepresentativeFragmentTestEnable$layout() {
        return extendedDynamicState3RepresentativeFragmentTestEnable$LAYOUT;
    }

    private static final long extendedDynamicState3RepresentativeFragmentTestEnable$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable
     * }
     */
    public static final long extendedDynamicState3RepresentativeFragmentTestEnable$offset() {
        return extendedDynamicState3RepresentativeFragmentTestEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable
     * }
     */
    public static int extendedDynamicState3RepresentativeFragmentTestEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3RepresentativeFragmentTestEnable$LAYOUT, extendedDynamicState3RepresentativeFragmentTestEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable
     * }
     */
    public static void extendedDynamicState3RepresentativeFragmentTestEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3RepresentativeFragmentTestEnable$LAYOUT, extendedDynamicState3RepresentativeFragmentTestEnable$OFFSET, fieldValue);
    }

    private static final OfInt extendedDynamicState3ShadingRateImageEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("extendedDynamicState3ShadingRateImageEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ShadingRateImageEnable
     * }
     */
    public static final OfInt extendedDynamicState3ShadingRateImageEnable$layout() {
        return extendedDynamicState3ShadingRateImageEnable$LAYOUT;
    }

    private static final long extendedDynamicState3ShadingRateImageEnable$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ShadingRateImageEnable
     * }
     */
    public static final long extendedDynamicState3ShadingRateImageEnable$offset() {
        return extendedDynamicState3ShadingRateImageEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ShadingRateImageEnable
     * }
     */
    public static int extendedDynamicState3ShadingRateImageEnable(MemorySegment struct) {
        return struct.get(extendedDynamicState3ShadingRateImageEnable$LAYOUT, extendedDynamicState3ShadingRateImageEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 extendedDynamicState3ShadingRateImageEnable
     * }
     */
    public static void extendedDynamicState3ShadingRateImageEnable(MemorySegment struct, int fieldValue) {
        struct.set(extendedDynamicState3ShadingRateImageEnable$LAYOUT, extendedDynamicState3ShadingRateImageEnable$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

