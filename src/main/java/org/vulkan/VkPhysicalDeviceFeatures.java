// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceFeatures {
 *     VkBool32 robustBufferAccess;
 *     VkBool32 fullDrawIndexUint32;
 *     VkBool32 imageCubeArray;
 *     VkBool32 independentBlend;
 *     VkBool32 geometryShader;
 *     VkBool32 tessellationShader;
 *     VkBool32 sampleRateShading;
 *     VkBool32 dualSrcBlend;
 *     VkBool32 logicOp;
 *     VkBool32 multiDrawIndirect;
 *     VkBool32 drawIndirectFirstInstance;
 *     VkBool32 depthClamp;
 *     VkBool32 depthBiasClamp;
 *     VkBool32 fillModeNonSolid;
 *     VkBool32 depthBounds;
 *     VkBool32 wideLines;
 *     VkBool32 largePoints;
 *     VkBool32 alphaToOne;
 *     VkBool32 multiViewport;
 *     VkBool32 samplerAnisotropy;
 *     VkBool32 textureCompressionETC2;
 *     VkBool32 textureCompressionASTC_LDR;
 *     VkBool32 textureCompressionBC;
 *     VkBool32 occlusionQueryPrecise;
 *     VkBool32 pipelineStatisticsQuery;
 *     VkBool32 vertexPipelineStoresAndAtomics;
 *     VkBool32 fragmentStoresAndAtomics;
 *     VkBool32 shaderTessellationAndGeometryPointSize;
 *     VkBool32 shaderImageGatherExtended;
 *     VkBool32 shaderStorageImageExtendedFormats;
 *     VkBool32 shaderStorageImageMultisample;
 *     VkBool32 shaderStorageImageReadWithoutFormat;
 *     VkBool32 shaderStorageImageWriteWithoutFormat;
 *     VkBool32 shaderUniformBufferArrayDynamicIndexing;
 *     VkBool32 shaderSampledImageArrayDynamicIndexing;
 *     VkBool32 shaderStorageBufferArrayDynamicIndexing;
 *     VkBool32 shaderStorageImageArrayDynamicIndexing;
 *     VkBool32 shaderClipDistance;
 *     VkBool32 shaderCullDistance;
 *     VkBool32 shaderFloat64;
 *     VkBool32 shaderInt64;
 *     VkBool32 shaderInt16;
 *     VkBool32 shaderResourceResidency;
 *     VkBool32 shaderResourceMinLod;
 *     VkBool32 sparseBinding;
 *     VkBool32 sparseResidencyBuffer;
 *     VkBool32 sparseResidencyImage2D;
 *     VkBool32 sparseResidencyImage3D;
 *     VkBool32 sparseResidency2Samples;
 *     VkBool32 sparseResidency4Samples;
 *     VkBool32 sparseResidency8Samples;
 *     VkBool32 sparseResidency16Samples;
 *     VkBool32 sparseResidencyAliased;
 *     VkBool32 variableMultisampleRate;
 *     VkBool32 inheritedQueries;
 * }
 * }
 */
public class VkPhysicalDeviceFeatures {

    VkPhysicalDeviceFeatures() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("robustBufferAccess"),
        vulkan_h.C_INT.withName("fullDrawIndexUint32"),
        vulkan_h.C_INT.withName("imageCubeArray"),
        vulkan_h.C_INT.withName("independentBlend"),
        vulkan_h.C_INT.withName("geometryShader"),
        vulkan_h.C_INT.withName("tessellationShader"),
        vulkan_h.C_INT.withName("sampleRateShading"),
        vulkan_h.C_INT.withName("dualSrcBlend"),
        vulkan_h.C_INT.withName("logicOp"),
        vulkan_h.C_INT.withName("multiDrawIndirect"),
        vulkan_h.C_INT.withName("drawIndirectFirstInstance"),
        vulkan_h.C_INT.withName("depthClamp"),
        vulkan_h.C_INT.withName("depthBiasClamp"),
        vulkan_h.C_INT.withName("fillModeNonSolid"),
        vulkan_h.C_INT.withName("depthBounds"),
        vulkan_h.C_INT.withName("wideLines"),
        vulkan_h.C_INT.withName("largePoints"),
        vulkan_h.C_INT.withName("alphaToOne"),
        vulkan_h.C_INT.withName("multiViewport"),
        vulkan_h.C_INT.withName("samplerAnisotropy"),
        vulkan_h.C_INT.withName("textureCompressionETC2"),
        vulkan_h.C_INT.withName("textureCompressionASTC_LDR"),
        vulkan_h.C_INT.withName("textureCompressionBC"),
        vulkan_h.C_INT.withName("occlusionQueryPrecise"),
        vulkan_h.C_INT.withName("pipelineStatisticsQuery"),
        vulkan_h.C_INT.withName("vertexPipelineStoresAndAtomics"),
        vulkan_h.C_INT.withName("fragmentStoresAndAtomics"),
        vulkan_h.C_INT.withName("shaderTessellationAndGeometryPointSize"),
        vulkan_h.C_INT.withName("shaderImageGatherExtended"),
        vulkan_h.C_INT.withName("shaderStorageImageExtendedFormats"),
        vulkan_h.C_INT.withName("shaderStorageImageMultisample"),
        vulkan_h.C_INT.withName("shaderStorageImageReadWithoutFormat"),
        vulkan_h.C_INT.withName("shaderStorageImageWriteWithoutFormat"),
        vulkan_h.C_INT.withName("shaderUniformBufferArrayDynamicIndexing"),
        vulkan_h.C_INT.withName("shaderSampledImageArrayDynamicIndexing"),
        vulkan_h.C_INT.withName("shaderStorageBufferArrayDynamicIndexing"),
        vulkan_h.C_INT.withName("shaderStorageImageArrayDynamicIndexing"),
        vulkan_h.C_INT.withName("shaderClipDistance"),
        vulkan_h.C_INT.withName("shaderCullDistance"),
        vulkan_h.C_INT.withName("shaderFloat64"),
        vulkan_h.C_INT.withName("shaderInt64"),
        vulkan_h.C_INT.withName("shaderInt16"),
        vulkan_h.C_INT.withName("shaderResourceResidency"),
        vulkan_h.C_INT.withName("shaderResourceMinLod"),
        vulkan_h.C_INT.withName("sparseBinding"),
        vulkan_h.C_INT.withName("sparseResidencyBuffer"),
        vulkan_h.C_INT.withName("sparseResidencyImage2D"),
        vulkan_h.C_INT.withName("sparseResidencyImage3D"),
        vulkan_h.C_INT.withName("sparseResidency2Samples"),
        vulkan_h.C_INT.withName("sparseResidency4Samples"),
        vulkan_h.C_INT.withName("sparseResidency8Samples"),
        vulkan_h.C_INT.withName("sparseResidency16Samples"),
        vulkan_h.C_INT.withName("sparseResidencyAliased"),
        vulkan_h.C_INT.withName("variableMultisampleRate"),
        vulkan_h.C_INT.withName("inheritedQueries")
    ).withName("VkPhysicalDeviceFeatures");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt robustBufferAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("robustBufferAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccess
     * }
     */
    public static final OfInt robustBufferAccess$layout() {
        return robustBufferAccess$LAYOUT;
    }

    private static final long robustBufferAccess$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccess
     * }
     */
    public static final long robustBufferAccess$offset() {
        return robustBufferAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccess
     * }
     */
    public static int robustBufferAccess(MemorySegment struct) {
        return struct.get(robustBufferAccess$LAYOUT, robustBufferAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 robustBufferAccess
     * }
     */
    public static void robustBufferAccess(MemorySegment struct, int fieldValue) {
        struct.set(robustBufferAccess$LAYOUT, robustBufferAccess$OFFSET, fieldValue);
    }

    private static final OfInt fullDrawIndexUint32$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fullDrawIndexUint32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 fullDrawIndexUint32
     * }
     */
    public static final OfInt fullDrawIndexUint32$layout() {
        return fullDrawIndexUint32$LAYOUT;
    }

    private static final long fullDrawIndexUint32$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 fullDrawIndexUint32
     * }
     */
    public static final long fullDrawIndexUint32$offset() {
        return fullDrawIndexUint32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 fullDrawIndexUint32
     * }
     */
    public static int fullDrawIndexUint32(MemorySegment struct) {
        return struct.get(fullDrawIndexUint32$LAYOUT, fullDrawIndexUint32$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 fullDrawIndexUint32
     * }
     */
    public static void fullDrawIndexUint32(MemorySegment struct, int fieldValue) {
        struct.set(fullDrawIndexUint32$LAYOUT, fullDrawIndexUint32$OFFSET, fieldValue);
    }

    private static final OfInt imageCubeArray$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageCubeArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 imageCubeArray
     * }
     */
    public static final OfInt imageCubeArray$layout() {
        return imageCubeArray$LAYOUT;
    }

    private static final long imageCubeArray$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 imageCubeArray
     * }
     */
    public static final long imageCubeArray$offset() {
        return imageCubeArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 imageCubeArray
     * }
     */
    public static int imageCubeArray(MemorySegment struct) {
        return struct.get(imageCubeArray$LAYOUT, imageCubeArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 imageCubeArray
     * }
     */
    public static void imageCubeArray(MemorySegment struct, int fieldValue) {
        struct.set(imageCubeArray$LAYOUT, imageCubeArray$OFFSET, fieldValue);
    }

    private static final OfInt independentBlend$LAYOUT = (OfInt)$LAYOUT.select(groupElement("independentBlend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 independentBlend
     * }
     */
    public static final OfInt independentBlend$layout() {
        return independentBlend$LAYOUT;
    }

    private static final long independentBlend$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 independentBlend
     * }
     */
    public static final long independentBlend$offset() {
        return independentBlend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 independentBlend
     * }
     */
    public static int independentBlend(MemorySegment struct) {
        return struct.get(independentBlend$LAYOUT, independentBlend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 independentBlend
     * }
     */
    public static void independentBlend(MemorySegment struct, int fieldValue) {
        struct.set(independentBlend$LAYOUT, independentBlend$OFFSET, fieldValue);
    }

    private static final OfInt geometryShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("geometryShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 geometryShader
     * }
     */
    public static final OfInt geometryShader$layout() {
        return geometryShader$LAYOUT;
    }

    private static final long geometryShader$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 geometryShader
     * }
     */
    public static final long geometryShader$offset() {
        return geometryShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 geometryShader
     * }
     */
    public static int geometryShader(MemorySegment struct) {
        return struct.get(geometryShader$LAYOUT, geometryShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 geometryShader
     * }
     */
    public static void geometryShader(MemorySegment struct, int fieldValue) {
        struct.set(geometryShader$LAYOUT, geometryShader$OFFSET, fieldValue);
    }

    private static final OfInt tessellationShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tessellationShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 tessellationShader
     * }
     */
    public static final OfInt tessellationShader$layout() {
        return tessellationShader$LAYOUT;
    }

    private static final long tessellationShader$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 tessellationShader
     * }
     */
    public static final long tessellationShader$offset() {
        return tessellationShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 tessellationShader
     * }
     */
    public static int tessellationShader(MemorySegment struct) {
        return struct.get(tessellationShader$LAYOUT, tessellationShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 tessellationShader
     * }
     */
    public static void tessellationShader(MemorySegment struct, int fieldValue) {
        struct.set(tessellationShader$LAYOUT, tessellationShader$OFFSET, fieldValue);
    }

    private static final OfInt sampleRateShading$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampleRateShading"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sampleRateShading
     * }
     */
    public static final OfInt sampleRateShading$layout() {
        return sampleRateShading$LAYOUT;
    }

    private static final long sampleRateShading$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sampleRateShading
     * }
     */
    public static final long sampleRateShading$offset() {
        return sampleRateShading$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sampleRateShading
     * }
     */
    public static int sampleRateShading(MemorySegment struct) {
        return struct.get(sampleRateShading$LAYOUT, sampleRateShading$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sampleRateShading
     * }
     */
    public static void sampleRateShading(MemorySegment struct, int fieldValue) {
        struct.set(sampleRateShading$LAYOUT, sampleRateShading$OFFSET, fieldValue);
    }

    private static final OfInt dualSrcBlend$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dualSrcBlend"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 dualSrcBlend
     * }
     */
    public static final OfInt dualSrcBlend$layout() {
        return dualSrcBlend$LAYOUT;
    }

    private static final long dualSrcBlend$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 dualSrcBlend
     * }
     */
    public static final long dualSrcBlend$offset() {
        return dualSrcBlend$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 dualSrcBlend
     * }
     */
    public static int dualSrcBlend(MemorySegment struct) {
        return struct.get(dualSrcBlend$LAYOUT, dualSrcBlend$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 dualSrcBlend
     * }
     */
    public static void dualSrcBlend(MemorySegment struct, int fieldValue) {
        struct.set(dualSrcBlend$LAYOUT, dualSrcBlend$OFFSET, fieldValue);
    }

    private static final OfInt logicOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("logicOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 logicOp
     * }
     */
    public static final OfInt logicOp$layout() {
        return logicOp$LAYOUT;
    }

    private static final long logicOp$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 logicOp
     * }
     */
    public static final long logicOp$offset() {
        return logicOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 logicOp
     * }
     */
    public static int logicOp(MemorySegment struct) {
        return struct.get(logicOp$LAYOUT, logicOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 logicOp
     * }
     */
    public static void logicOp(MemorySegment struct, int fieldValue) {
        struct.set(logicOp$LAYOUT, logicOp$OFFSET, fieldValue);
    }

    private static final OfInt multiDrawIndirect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiDrawIndirect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 multiDrawIndirect
     * }
     */
    public static final OfInt multiDrawIndirect$layout() {
        return multiDrawIndirect$LAYOUT;
    }

    private static final long multiDrawIndirect$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 multiDrawIndirect
     * }
     */
    public static final long multiDrawIndirect$offset() {
        return multiDrawIndirect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 multiDrawIndirect
     * }
     */
    public static int multiDrawIndirect(MemorySegment struct) {
        return struct.get(multiDrawIndirect$LAYOUT, multiDrawIndirect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 multiDrawIndirect
     * }
     */
    public static void multiDrawIndirect(MemorySegment struct, int fieldValue) {
        struct.set(multiDrawIndirect$LAYOUT, multiDrawIndirect$OFFSET, fieldValue);
    }

    private static final OfInt drawIndirectFirstInstance$LAYOUT = (OfInt)$LAYOUT.select(groupElement("drawIndirectFirstInstance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectFirstInstance
     * }
     */
    public static final OfInt drawIndirectFirstInstance$layout() {
        return drawIndirectFirstInstance$LAYOUT;
    }

    private static final long drawIndirectFirstInstance$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectFirstInstance
     * }
     */
    public static final long drawIndirectFirstInstance$offset() {
        return drawIndirectFirstInstance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectFirstInstance
     * }
     */
    public static int drawIndirectFirstInstance(MemorySegment struct) {
        return struct.get(drawIndirectFirstInstance$LAYOUT, drawIndirectFirstInstance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectFirstInstance
     * }
     */
    public static void drawIndirectFirstInstance(MemorySegment struct, int fieldValue) {
        struct.set(drawIndirectFirstInstance$LAYOUT, drawIndirectFirstInstance$OFFSET, fieldValue);
    }

    private static final OfInt depthClamp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthClamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthClamp
     * }
     */
    public static final OfInt depthClamp$layout() {
        return depthClamp$LAYOUT;
    }

    private static final long depthClamp$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthClamp
     * }
     */
    public static final long depthClamp$offset() {
        return depthClamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthClamp
     * }
     */
    public static int depthClamp(MemorySegment struct) {
        return struct.get(depthClamp$LAYOUT, depthClamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthClamp
     * }
     */
    public static void depthClamp(MemorySegment struct, int fieldValue) {
        struct.set(depthClamp$LAYOUT, depthClamp$OFFSET, fieldValue);
    }

    private static final OfInt depthBiasClamp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthBiasClamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasClamp
     * }
     */
    public static final OfInt depthBiasClamp$layout() {
        return depthBiasClamp$LAYOUT;
    }

    private static final long depthBiasClamp$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasClamp
     * }
     */
    public static final long depthBiasClamp$offset() {
        return depthBiasClamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasClamp
     * }
     */
    public static int depthBiasClamp(MemorySegment struct) {
        return struct.get(depthBiasClamp$LAYOUT, depthBiasClamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasClamp
     * }
     */
    public static void depthBiasClamp(MemorySegment struct, int fieldValue) {
        struct.set(depthBiasClamp$LAYOUT, depthBiasClamp$OFFSET, fieldValue);
    }

    private static final OfInt fillModeNonSolid$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fillModeNonSolid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 fillModeNonSolid
     * }
     */
    public static final OfInt fillModeNonSolid$layout() {
        return fillModeNonSolid$LAYOUT;
    }

    private static final long fillModeNonSolid$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 fillModeNonSolid
     * }
     */
    public static final long fillModeNonSolid$offset() {
        return fillModeNonSolid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 fillModeNonSolid
     * }
     */
    public static int fillModeNonSolid(MemorySegment struct) {
        return struct.get(fillModeNonSolid$LAYOUT, fillModeNonSolid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 fillModeNonSolid
     * }
     */
    public static void fillModeNonSolid(MemorySegment struct, int fieldValue) {
        struct.set(fillModeNonSolid$LAYOUT, fillModeNonSolid$OFFSET, fieldValue);
    }

    private static final OfInt depthBounds$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthBounds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthBounds
     * }
     */
    public static final OfInt depthBounds$layout() {
        return depthBounds$LAYOUT;
    }

    private static final long depthBounds$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthBounds
     * }
     */
    public static final long depthBounds$offset() {
        return depthBounds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthBounds
     * }
     */
    public static int depthBounds(MemorySegment struct) {
        return struct.get(depthBounds$LAYOUT, depthBounds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthBounds
     * }
     */
    public static void depthBounds(MemorySegment struct, int fieldValue) {
        struct.set(depthBounds$LAYOUT, depthBounds$OFFSET, fieldValue);
    }

    private static final OfInt wideLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wideLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 wideLines
     * }
     */
    public static final OfInt wideLines$layout() {
        return wideLines$LAYOUT;
    }

    private static final long wideLines$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 wideLines
     * }
     */
    public static final long wideLines$offset() {
        return wideLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 wideLines
     * }
     */
    public static int wideLines(MemorySegment struct) {
        return struct.get(wideLines$LAYOUT, wideLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 wideLines
     * }
     */
    public static void wideLines(MemorySegment struct, int fieldValue) {
        struct.set(wideLines$LAYOUT, wideLines$OFFSET, fieldValue);
    }

    private static final OfInt largePoints$LAYOUT = (OfInt)$LAYOUT.select(groupElement("largePoints"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 largePoints
     * }
     */
    public static final OfInt largePoints$layout() {
        return largePoints$LAYOUT;
    }

    private static final long largePoints$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 largePoints
     * }
     */
    public static final long largePoints$offset() {
        return largePoints$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 largePoints
     * }
     */
    public static int largePoints(MemorySegment struct) {
        return struct.get(largePoints$LAYOUT, largePoints$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 largePoints
     * }
     */
    public static void largePoints(MemorySegment struct, int fieldValue) {
        struct.set(largePoints$LAYOUT, largePoints$OFFSET, fieldValue);
    }

    private static final OfInt alphaToOne$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alphaToOne"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 alphaToOne
     * }
     */
    public static final OfInt alphaToOne$layout() {
        return alphaToOne$LAYOUT;
    }

    private static final long alphaToOne$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 alphaToOne
     * }
     */
    public static final long alphaToOne$offset() {
        return alphaToOne$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 alphaToOne
     * }
     */
    public static int alphaToOne(MemorySegment struct) {
        return struct.get(alphaToOne$LAYOUT, alphaToOne$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 alphaToOne
     * }
     */
    public static void alphaToOne(MemorySegment struct, int fieldValue) {
        struct.set(alphaToOne$LAYOUT, alphaToOne$OFFSET, fieldValue);
    }

    private static final OfInt multiViewport$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiViewport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 multiViewport
     * }
     */
    public static final OfInt multiViewport$layout() {
        return multiViewport$LAYOUT;
    }

    private static final long multiViewport$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 multiViewport
     * }
     */
    public static final long multiViewport$offset() {
        return multiViewport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 multiViewport
     * }
     */
    public static int multiViewport(MemorySegment struct) {
        return struct.get(multiViewport$LAYOUT, multiViewport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 multiViewport
     * }
     */
    public static void multiViewport(MemorySegment struct, int fieldValue) {
        struct.set(multiViewport$LAYOUT, multiViewport$OFFSET, fieldValue);
    }

    private static final OfInt samplerAnisotropy$LAYOUT = (OfInt)$LAYOUT.select(groupElement("samplerAnisotropy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 samplerAnisotropy
     * }
     */
    public static final OfInt samplerAnisotropy$layout() {
        return samplerAnisotropy$LAYOUT;
    }

    private static final long samplerAnisotropy$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 samplerAnisotropy
     * }
     */
    public static final long samplerAnisotropy$offset() {
        return samplerAnisotropy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 samplerAnisotropy
     * }
     */
    public static int samplerAnisotropy(MemorySegment struct) {
        return struct.get(samplerAnisotropy$LAYOUT, samplerAnisotropy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 samplerAnisotropy
     * }
     */
    public static void samplerAnisotropy(MemorySegment struct, int fieldValue) {
        struct.set(samplerAnisotropy$LAYOUT, samplerAnisotropy$OFFSET, fieldValue);
    }

    private static final OfInt textureCompressionETC2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("textureCompressionETC2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionETC2
     * }
     */
    public static final OfInt textureCompressionETC2$layout() {
        return textureCompressionETC2$LAYOUT;
    }

    private static final long textureCompressionETC2$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionETC2
     * }
     */
    public static final long textureCompressionETC2$offset() {
        return textureCompressionETC2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionETC2
     * }
     */
    public static int textureCompressionETC2(MemorySegment struct) {
        return struct.get(textureCompressionETC2$LAYOUT, textureCompressionETC2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionETC2
     * }
     */
    public static void textureCompressionETC2(MemorySegment struct, int fieldValue) {
        struct.set(textureCompressionETC2$LAYOUT, textureCompressionETC2$OFFSET, fieldValue);
    }

    private static final OfInt textureCompressionASTC_LDR$LAYOUT = (OfInt)$LAYOUT.select(groupElement("textureCompressionASTC_LDR"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_LDR
     * }
     */
    public static final OfInt textureCompressionASTC_LDR$layout() {
        return textureCompressionASTC_LDR$LAYOUT;
    }

    private static final long textureCompressionASTC_LDR$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_LDR
     * }
     */
    public static final long textureCompressionASTC_LDR$offset() {
        return textureCompressionASTC_LDR$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_LDR
     * }
     */
    public static int textureCompressionASTC_LDR(MemorySegment struct) {
        return struct.get(textureCompressionASTC_LDR$LAYOUT, textureCompressionASTC_LDR$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_LDR
     * }
     */
    public static void textureCompressionASTC_LDR(MemorySegment struct, int fieldValue) {
        struct.set(textureCompressionASTC_LDR$LAYOUT, textureCompressionASTC_LDR$OFFSET, fieldValue);
    }

    private static final OfInt textureCompressionBC$LAYOUT = (OfInt)$LAYOUT.select(groupElement("textureCompressionBC"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionBC
     * }
     */
    public static final OfInt textureCompressionBC$layout() {
        return textureCompressionBC$LAYOUT;
    }

    private static final long textureCompressionBC$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionBC
     * }
     */
    public static final long textureCompressionBC$offset() {
        return textureCompressionBC$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionBC
     * }
     */
    public static int textureCompressionBC(MemorySegment struct) {
        return struct.get(textureCompressionBC$LAYOUT, textureCompressionBC$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionBC
     * }
     */
    public static void textureCompressionBC(MemorySegment struct, int fieldValue) {
        struct.set(textureCompressionBC$LAYOUT, textureCompressionBC$OFFSET, fieldValue);
    }

    private static final OfInt occlusionQueryPrecise$LAYOUT = (OfInt)$LAYOUT.select(groupElement("occlusionQueryPrecise"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryPrecise
     * }
     */
    public static final OfInt occlusionQueryPrecise$layout() {
        return occlusionQueryPrecise$LAYOUT;
    }

    private static final long occlusionQueryPrecise$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryPrecise
     * }
     */
    public static final long occlusionQueryPrecise$offset() {
        return occlusionQueryPrecise$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryPrecise
     * }
     */
    public static int occlusionQueryPrecise(MemorySegment struct) {
        return struct.get(occlusionQueryPrecise$LAYOUT, occlusionQueryPrecise$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 occlusionQueryPrecise
     * }
     */
    public static void occlusionQueryPrecise(MemorySegment struct, int fieldValue) {
        struct.set(occlusionQueryPrecise$LAYOUT, occlusionQueryPrecise$OFFSET, fieldValue);
    }

    private static final OfInt pipelineStatisticsQuery$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pipelineStatisticsQuery"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 pipelineStatisticsQuery
     * }
     */
    public static final OfInt pipelineStatisticsQuery$layout() {
        return pipelineStatisticsQuery$LAYOUT;
    }

    private static final long pipelineStatisticsQuery$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 pipelineStatisticsQuery
     * }
     */
    public static final long pipelineStatisticsQuery$offset() {
        return pipelineStatisticsQuery$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 pipelineStatisticsQuery
     * }
     */
    public static int pipelineStatisticsQuery(MemorySegment struct) {
        return struct.get(pipelineStatisticsQuery$LAYOUT, pipelineStatisticsQuery$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 pipelineStatisticsQuery
     * }
     */
    public static void pipelineStatisticsQuery(MemorySegment struct, int fieldValue) {
        struct.set(pipelineStatisticsQuery$LAYOUT, pipelineStatisticsQuery$OFFSET, fieldValue);
    }

    private static final OfInt vertexPipelineStoresAndAtomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vertexPipelineStoresAndAtomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 vertexPipelineStoresAndAtomics
     * }
     */
    public static final OfInt vertexPipelineStoresAndAtomics$layout() {
        return vertexPipelineStoresAndAtomics$LAYOUT;
    }

    private static final long vertexPipelineStoresAndAtomics$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 vertexPipelineStoresAndAtomics
     * }
     */
    public static final long vertexPipelineStoresAndAtomics$offset() {
        return vertexPipelineStoresAndAtomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 vertexPipelineStoresAndAtomics
     * }
     */
    public static int vertexPipelineStoresAndAtomics(MemorySegment struct) {
        return struct.get(vertexPipelineStoresAndAtomics$LAYOUT, vertexPipelineStoresAndAtomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 vertexPipelineStoresAndAtomics
     * }
     */
    public static void vertexPipelineStoresAndAtomics(MemorySegment struct, int fieldValue) {
        struct.set(vertexPipelineStoresAndAtomics$LAYOUT, vertexPipelineStoresAndAtomics$OFFSET, fieldValue);
    }

    private static final OfInt fragmentStoresAndAtomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("fragmentStoresAndAtomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 fragmentStoresAndAtomics
     * }
     */
    public static final OfInt fragmentStoresAndAtomics$layout() {
        return fragmentStoresAndAtomics$LAYOUT;
    }

    private static final long fragmentStoresAndAtomics$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 fragmentStoresAndAtomics
     * }
     */
    public static final long fragmentStoresAndAtomics$offset() {
        return fragmentStoresAndAtomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 fragmentStoresAndAtomics
     * }
     */
    public static int fragmentStoresAndAtomics(MemorySegment struct) {
        return struct.get(fragmentStoresAndAtomics$LAYOUT, fragmentStoresAndAtomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 fragmentStoresAndAtomics
     * }
     */
    public static void fragmentStoresAndAtomics(MemorySegment struct, int fieldValue) {
        struct.set(fragmentStoresAndAtomics$LAYOUT, fragmentStoresAndAtomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderTessellationAndGeometryPointSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderTessellationAndGeometryPointSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderTessellationAndGeometryPointSize
     * }
     */
    public static final OfInt shaderTessellationAndGeometryPointSize$layout() {
        return shaderTessellationAndGeometryPointSize$LAYOUT;
    }

    private static final long shaderTessellationAndGeometryPointSize$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderTessellationAndGeometryPointSize
     * }
     */
    public static final long shaderTessellationAndGeometryPointSize$offset() {
        return shaderTessellationAndGeometryPointSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderTessellationAndGeometryPointSize
     * }
     */
    public static int shaderTessellationAndGeometryPointSize(MemorySegment struct) {
        return struct.get(shaderTessellationAndGeometryPointSize$LAYOUT, shaderTessellationAndGeometryPointSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderTessellationAndGeometryPointSize
     * }
     */
    public static void shaderTessellationAndGeometryPointSize(MemorySegment struct, int fieldValue) {
        struct.set(shaderTessellationAndGeometryPointSize$LAYOUT, shaderTessellationAndGeometryPointSize$OFFSET, fieldValue);
    }

    private static final OfInt shaderImageGatherExtended$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderImageGatherExtended"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageGatherExtended
     * }
     */
    public static final OfInt shaderImageGatherExtended$layout() {
        return shaderImageGatherExtended$LAYOUT;
    }

    private static final long shaderImageGatherExtended$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageGatherExtended
     * }
     */
    public static final long shaderImageGatherExtended$offset() {
        return shaderImageGatherExtended$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageGatherExtended
     * }
     */
    public static int shaderImageGatherExtended(MemorySegment struct) {
        return struct.get(shaderImageGatherExtended$LAYOUT, shaderImageGatherExtended$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageGatherExtended
     * }
     */
    public static void shaderImageGatherExtended(MemorySegment struct, int fieldValue) {
        struct.set(shaderImageGatherExtended$LAYOUT, shaderImageGatherExtended$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageImageExtendedFormats$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageImageExtendedFormats"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageExtendedFormats
     * }
     */
    public static final OfInt shaderStorageImageExtendedFormats$layout() {
        return shaderStorageImageExtendedFormats$LAYOUT;
    }

    private static final long shaderStorageImageExtendedFormats$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageExtendedFormats
     * }
     */
    public static final long shaderStorageImageExtendedFormats$offset() {
        return shaderStorageImageExtendedFormats$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageExtendedFormats
     * }
     */
    public static int shaderStorageImageExtendedFormats(MemorySegment struct) {
        return struct.get(shaderStorageImageExtendedFormats$LAYOUT, shaderStorageImageExtendedFormats$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageExtendedFormats
     * }
     */
    public static void shaderStorageImageExtendedFormats(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageImageExtendedFormats$LAYOUT, shaderStorageImageExtendedFormats$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageImageMultisample$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageImageMultisample"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageMultisample
     * }
     */
    public static final OfInt shaderStorageImageMultisample$layout() {
        return shaderStorageImageMultisample$LAYOUT;
    }

    private static final long shaderStorageImageMultisample$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageMultisample
     * }
     */
    public static final long shaderStorageImageMultisample$offset() {
        return shaderStorageImageMultisample$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageMultisample
     * }
     */
    public static int shaderStorageImageMultisample(MemorySegment struct) {
        return struct.get(shaderStorageImageMultisample$LAYOUT, shaderStorageImageMultisample$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageMultisample
     * }
     */
    public static void shaderStorageImageMultisample(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageImageMultisample$LAYOUT, shaderStorageImageMultisample$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageImageReadWithoutFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageImageReadWithoutFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageReadWithoutFormat
     * }
     */
    public static final OfInt shaderStorageImageReadWithoutFormat$layout() {
        return shaderStorageImageReadWithoutFormat$LAYOUT;
    }

    private static final long shaderStorageImageReadWithoutFormat$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageReadWithoutFormat
     * }
     */
    public static final long shaderStorageImageReadWithoutFormat$offset() {
        return shaderStorageImageReadWithoutFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageReadWithoutFormat
     * }
     */
    public static int shaderStorageImageReadWithoutFormat(MemorySegment struct) {
        return struct.get(shaderStorageImageReadWithoutFormat$LAYOUT, shaderStorageImageReadWithoutFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageReadWithoutFormat
     * }
     */
    public static void shaderStorageImageReadWithoutFormat(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageImageReadWithoutFormat$LAYOUT, shaderStorageImageReadWithoutFormat$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageImageWriteWithoutFormat$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageImageWriteWithoutFormat"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageWriteWithoutFormat
     * }
     */
    public static final OfInt shaderStorageImageWriteWithoutFormat$layout() {
        return shaderStorageImageWriteWithoutFormat$LAYOUT;
    }

    private static final long shaderStorageImageWriteWithoutFormat$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageWriteWithoutFormat
     * }
     */
    public static final long shaderStorageImageWriteWithoutFormat$offset() {
        return shaderStorageImageWriteWithoutFormat$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageWriteWithoutFormat
     * }
     */
    public static int shaderStorageImageWriteWithoutFormat(MemorySegment struct) {
        return struct.get(shaderStorageImageWriteWithoutFormat$LAYOUT, shaderStorageImageWriteWithoutFormat$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageWriteWithoutFormat
     * }
     */
    public static void shaderStorageImageWriteWithoutFormat(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageImageWriteWithoutFormat$LAYOUT, shaderStorageImageWriteWithoutFormat$OFFSET, fieldValue);
    }

    private static final OfInt shaderUniformBufferArrayDynamicIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderUniformBufferArrayDynamicIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayDynamicIndexing
     * }
     */
    public static final OfInt shaderUniformBufferArrayDynamicIndexing$layout() {
        return shaderUniformBufferArrayDynamicIndexing$LAYOUT;
    }

    private static final long shaderUniformBufferArrayDynamicIndexing$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayDynamicIndexing
     * }
     */
    public static final long shaderUniformBufferArrayDynamicIndexing$offset() {
        return shaderUniformBufferArrayDynamicIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayDynamicIndexing
     * }
     */
    public static int shaderUniformBufferArrayDynamicIndexing(MemorySegment struct) {
        return struct.get(shaderUniformBufferArrayDynamicIndexing$LAYOUT, shaderUniformBufferArrayDynamicIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayDynamicIndexing
     * }
     */
    public static void shaderUniformBufferArrayDynamicIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderUniformBufferArrayDynamicIndexing$LAYOUT, shaderUniformBufferArrayDynamicIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderSampledImageArrayDynamicIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSampledImageArrayDynamicIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayDynamicIndexing
     * }
     */
    public static final OfInt shaderSampledImageArrayDynamicIndexing$layout() {
        return shaderSampledImageArrayDynamicIndexing$LAYOUT;
    }

    private static final long shaderSampledImageArrayDynamicIndexing$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayDynamicIndexing
     * }
     */
    public static final long shaderSampledImageArrayDynamicIndexing$offset() {
        return shaderSampledImageArrayDynamicIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayDynamicIndexing
     * }
     */
    public static int shaderSampledImageArrayDynamicIndexing(MemorySegment struct) {
        return struct.get(shaderSampledImageArrayDynamicIndexing$LAYOUT, shaderSampledImageArrayDynamicIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayDynamicIndexing
     * }
     */
    public static void shaderSampledImageArrayDynamicIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderSampledImageArrayDynamicIndexing$LAYOUT, shaderSampledImageArrayDynamicIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageBufferArrayDynamicIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageBufferArrayDynamicIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayDynamicIndexing
     * }
     */
    public static final OfInt shaderStorageBufferArrayDynamicIndexing$layout() {
        return shaderStorageBufferArrayDynamicIndexing$LAYOUT;
    }

    private static final long shaderStorageBufferArrayDynamicIndexing$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayDynamicIndexing
     * }
     */
    public static final long shaderStorageBufferArrayDynamicIndexing$offset() {
        return shaderStorageBufferArrayDynamicIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayDynamicIndexing
     * }
     */
    public static int shaderStorageBufferArrayDynamicIndexing(MemorySegment struct) {
        return struct.get(shaderStorageBufferArrayDynamicIndexing$LAYOUT, shaderStorageBufferArrayDynamicIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayDynamicIndexing
     * }
     */
    public static void shaderStorageBufferArrayDynamicIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageBufferArrayDynamicIndexing$LAYOUT, shaderStorageBufferArrayDynamicIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageImageArrayDynamicIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageImageArrayDynamicIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayDynamicIndexing
     * }
     */
    public static final OfInt shaderStorageImageArrayDynamicIndexing$layout() {
        return shaderStorageImageArrayDynamicIndexing$LAYOUT;
    }

    private static final long shaderStorageImageArrayDynamicIndexing$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayDynamicIndexing
     * }
     */
    public static final long shaderStorageImageArrayDynamicIndexing$offset() {
        return shaderStorageImageArrayDynamicIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayDynamicIndexing
     * }
     */
    public static int shaderStorageImageArrayDynamicIndexing(MemorySegment struct) {
        return struct.get(shaderStorageImageArrayDynamicIndexing$LAYOUT, shaderStorageImageArrayDynamicIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayDynamicIndexing
     * }
     */
    public static void shaderStorageImageArrayDynamicIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageImageArrayDynamicIndexing$LAYOUT, shaderStorageImageArrayDynamicIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderClipDistance$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderClipDistance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderClipDistance
     * }
     */
    public static final OfInt shaderClipDistance$layout() {
        return shaderClipDistance$LAYOUT;
    }

    private static final long shaderClipDistance$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderClipDistance
     * }
     */
    public static final long shaderClipDistance$offset() {
        return shaderClipDistance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderClipDistance
     * }
     */
    public static int shaderClipDistance(MemorySegment struct) {
        return struct.get(shaderClipDistance$LAYOUT, shaderClipDistance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderClipDistance
     * }
     */
    public static void shaderClipDistance(MemorySegment struct, int fieldValue) {
        struct.set(shaderClipDistance$LAYOUT, shaderClipDistance$OFFSET, fieldValue);
    }

    private static final OfInt shaderCullDistance$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderCullDistance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderCullDistance
     * }
     */
    public static final OfInt shaderCullDistance$layout() {
        return shaderCullDistance$LAYOUT;
    }

    private static final long shaderCullDistance$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderCullDistance
     * }
     */
    public static final long shaderCullDistance$offset() {
        return shaderCullDistance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderCullDistance
     * }
     */
    public static int shaderCullDistance(MemorySegment struct) {
        return struct.get(shaderCullDistance$LAYOUT, shaderCullDistance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderCullDistance
     * }
     */
    public static void shaderCullDistance(MemorySegment struct, int fieldValue) {
        struct.set(shaderCullDistance$LAYOUT, shaderCullDistance$OFFSET, fieldValue);
    }

    private static final OfInt shaderFloat64$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderFloat64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat64
     * }
     */
    public static final OfInt shaderFloat64$layout() {
        return shaderFloat64$LAYOUT;
    }

    private static final long shaderFloat64$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat64
     * }
     */
    public static final long shaderFloat64$offset() {
        return shaderFloat64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat64
     * }
     */
    public static int shaderFloat64(MemorySegment struct) {
        return struct.get(shaderFloat64$LAYOUT, shaderFloat64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat64
     * }
     */
    public static void shaderFloat64(MemorySegment struct, int fieldValue) {
        struct.set(shaderFloat64$LAYOUT, shaderFloat64$OFFSET, fieldValue);
    }

    private static final OfInt shaderInt64$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderInt64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt64
     * }
     */
    public static final OfInt shaderInt64$layout() {
        return shaderInt64$LAYOUT;
    }

    private static final long shaderInt64$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt64
     * }
     */
    public static final long shaderInt64$offset() {
        return shaderInt64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt64
     * }
     */
    public static int shaderInt64(MemorySegment struct) {
        return struct.get(shaderInt64$LAYOUT, shaderInt64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt64
     * }
     */
    public static void shaderInt64(MemorySegment struct, int fieldValue) {
        struct.set(shaderInt64$LAYOUT, shaderInt64$OFFSET, fieldValue);
    }

    private static final OfInt shaderInt16$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderInt16"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt16
     * }
     */
    public static final OfInt shaderInt16$layout() {
        return shaderInt16$LAYOUT;
    }

    private static final long shaderInt16$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt16
     * }
     */
    public static final long shaderInt16$offset() {
        return shaderInt16$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt16
     * }
     */
    public static int shaderInt16(MemorySegment struct) {
        return struct.get(shaderInt16$LAYOUT, shaderInt16$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt16
     * }
     */
    public static void shaderInt16(MemorySegment struct, int fieldValue) {
        struct.set(shaderInt16$LAYOUT, shaderInt16$OFFSET, fieldValue);
    }

    private static final OfInt shaderResourceResidency$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderResourceResidency"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceResidency
     * }
     */
    public static final OfInt shaderResourceResidency$layout() {
        return shaderResourceResidency$LAYOUT;
    }

    private static final long shaderResourceResidency$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceResidency
     * }
     */
    public static final long shaderResourceResidency$offset() {
        return shaderResourceResidency$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceResidency
     * }
     */
    public static int shaderResourceResidency(MemorySegment struct) {
        return struct.get(shaderResourceResidency$LAYOUT, shaderResourceResidency$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceResidency
     * }
     */
    public static void shaderResourceResidency(MemorySegment struct, int fieldValue) {
        struct.set(shaderResourceResidency$LAYOUT, shaderResourceResidency$OFFSET, fieldValue);
    }

    private static final OfInt shaderResourceMinLod$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderResourceMinLod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceMinLod
     * }
     */
    public static final OfInt shaderResourceMinLod$layout() {
        return shaderResourceMinLod$LAYOUT;
    }

    private static final long shaderResourceMinLod$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceMinLod
     * }
     */
    public static final long shaderResourceMinLod$offset() {
        return shaderResourceMinLod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceMinLod
     * }
     */
    public static int shaderResourceMinLod(MemorySegment struct) {
        return struct.get(shaderResourceMinLod$LAYOUT, shaderResourceMinLod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderResourceMinLod
     * }
     */
    public static void shaderResourceMinLod(MemorySegment struct, int fieldValue) {
        struct.set(shaderResourceMinLod$LAYOUT, shaderResourceMinLod$OFFSET, fieldValue);
    }

    private static final OfInt sparseBinding$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseBinding"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseBinding
     * }
     */
    public static final OfInt sparseBinding$layout() {
        return sparseBinding$LAYOUT;
    }

    private static final long sparseBinding$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseBinding
     * }
     */
    public static final long sparseBinding$offset() {
        return sparseBinding$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseBinding
     * }
     */
    public static int sparseBinding(MemorySegment struct) {
        return struct.get(sparseBinding$LAYOUT, sparseBinding$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseBinding
     * }
     */
    public static void sparseBinding(MemorySegment struct, int fieldValue) {
        struct.set(sparseBinding$LAYOUT, sparseBinding$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidencyBuffer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidencyBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyBuffer
     * }
     */
    public static final OfInt sparseResidencyBuffer$layout() {
        return sparseResidencyBuffer$LAYOUT;
    }

    private static final long sparseResidencyBuffer$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyBuffer
     * }
     */
    public static final long sparseResidencyBuffer$offset() {
        return sparseResidencyBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyBuffer
     * }
     */
    public static int sparseResidencyBuffer(MemorySegment struct) {
        return struct.get(sparseResidencyBuffer$LAYOUT, sparseResidencyBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyBuffer
     * }
     */
    public static void sparseResidencyBuffer(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidencyBuffer$LAYOUT, sparseResidencyBuffer$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidencyImage2D$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidencyImage2D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage2D
     * }
     */
    public static final OfInt sparseResidencyImage2D$layout() {
        return sparseResidencyImage2D$LAYOUT;
    }

    private static final long sparseResidencyImage2D$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage2D
     * }
     */
    public static final long sparseResidencyImage2D$offset() {
        return sparseResidencyImage2D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage2D
     * }
     */
    public static int sparseResidencyImage2D(MemorySegment struct) {
        return struct.get(sparseResidencyImage2D$LAYOUT, sparseResidencyImage2D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage2D
     * }
     */
    public static void sparseResidencyImage2D(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidencyImage2D$LAYOUT, sparseResidencyImage2D$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidencyImage3D$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidencyImage3D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage3D
     * }
     */
    public static final OfInt sparseResidencyImage3D$layout() {
        return sparseResidencyImage3D$LAYOUT;
    }

    private static final long sparseResidencyImage3D$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage3D
     * }
     */
    public static final long sparseResidencyImage3D$offset() {
        return sparseResidencyImage3D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage3D
     * }
     */
    public static int sparseResidencyImage3D(MemorySegment struct) {
        return struct.get(sparseResidencyImage3D$LAYOUT, sparseResidencyImage3D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyImage3D
     * }
     */
    public static void sparseResidencyImage3D(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidencyImage3D$LAYOUT, sparseResidencyImage3D$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidency2Samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidency2Samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency2Samples
     * }
     */
    public static final OfInt sparseResidency2Samples$layout() {
        return sparseResidency2Samples$LAYOUT;
    }

    private static final long sparseResidency2Samples$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency2Samples
     * }
     */
    public static final long sparseResidency2Samples$offset() {
        return sparseResidency2Samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency2Samples
     * }
     */
    public static int sparseResidency2Samples(MemorySegment struct) {
        return struct.get(sparseResidency2Samples$LAYOUT, sparseResidency2Samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency2Samples
     * }
     */
    public static void sparseResidency2Samples(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidency2Samples$LAYOUT, sparseResidency2Samples$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidency4Samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidency4Samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency4Samples
     * }
     */
    public static final OfInt sparseResidency4Samples$layout() {
        return sparseResidency4Samples$LAYOUT;
    }

    private static final long sparseResidency4Samples$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency4Samples
     * }
     */
    public static final long sparseResidency4Samples$offset() {
        return sparseResidency4Samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency4Samples
     * }
     */
    public static int sparseResidency4Samples(MemorySegment struct) {
        return struct.get(sparseResidency4Samples$LAYOUT, sparseResidency4Samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency4Samples
     * }
     */
    public static void sparseResidency4Samples(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidency4Samples$LAYOUT, sparseResidency4Samples$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidency8Samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidency8Samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency8Samples
     * }
     */
    public static final OfInt sparseResidency8Samples$layout() {
        return sparseResidency8Samples$LAYOUT;
    }

    private static final long sparseResidency8Samples$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency8Samples
     * }
     */
    public static final long sparseResidency8Samples$offset() {
        return sparseResidency8Samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency8Samples
     * }
     */
    public static int sparseResidency8Samples(MemorySegment struct) {
        return struct.get(sparseResidency8Samples$LAYOUT, sparseResidency8Samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency8Samples
     * }
     */
    public static void sparseResidency8Samples(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidency8Samples$LAYOUT, sparseResidency8Samples$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidency16Samples$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidency16Samples"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency16Samples
     * }
     */
    public static final OfInt sparseResidency16Samples$layout() {
        return sparseResidency16Samples$LAYOUT;
    }

    private static final long sparseResidency16Samples$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency16Samples
     * }
     */
    public static final long sparseResidency16Samples$offset() {
        return sparseResidency16Samples$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency16Samples
     * }
     */
    public static int sparseResidency16Samples(MemorySegment struct) {
        return struct.get(sparseResidency16Samples$LAYOUT, sparseResidency16Samples$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidency16Samples
     * }
     */
    public static void sparseResidency16Samples(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidency16Samples$LAYOUT, sparseResidency16Samples$OFFSET, fieldValue);
    }

    private static final OfInt sparseResidencyAliased$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseResidencyAliased"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyAliased
     * }
     */
    public static final OfInt sparseResidencyAliased$layout() {
        return sparseResidencyAliased$LAYOUT;
    }

    private static final long sparseResidencyAliased$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyAliased
     * }
     */
    public static final long sparseResidencyAliased$offset() {
        return sparseResidencyAliased$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyAliased
     * }
     */
    public static int sparseResidencyAliased(MemorySegment struct) {
        return struct.get(sparseResidencyAliased$LAYOUT, sparseResidencyAliased$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseResidencyAliased
     * }
     */
    public static void sparseResidencyAliased(MemorySegment struct, int fieldValue) {
        struct.set(sparseResidencyAliased$LAYOUT, sparseResidencyAliased$OFFSET, fieldValue);
    }

    private static final OfInt variableMultisampleRate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("variableMultisampleRate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 variableMultisampleRate
     * }
     */
    public static final OfInt variableMultisampleRate$layout() {
        return variableMultisampleRate$LAYOUT;
    }

    private static final long variableMultisampleRate$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 variableMultisampleRate
     * }
     */
    public static final long variableMultisampleRate$offset() {
        return variableMultisampleRate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 variableMultisampleRate
     * }
     */
    public static int variableMultisampleRate(MemorySegment struct) {
        return struct.get(variableMultisampleRate$LAYOUT, variableMultisampleRate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 variableMultisampleRate
     * }
     */
    public static void variableMultisampleRate(MemorySegment struct, int fieldValue) {
        struct.set(variableMultisampleRate$LAYOUT, variableMultisampleRate$OFFSET, fieldValue);
    }

    private static final OfInt inheritedQueries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inheritedQueries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 inheritedQueries
     * }
     */
    public static final OfInt inheritedQueries$layout() {
        return inheritedQueries$LAYOUT;
    }

    private static final long inheritedQueries$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 inheritedQueries
     * }
     */
    public static final long inheritedQueries$offset() {
        return inheritedQueries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 inheritedQueries
     * }
     */
    public static int inheritedQueries(MemorySegment struct) {
        return struct.get(inheritedQueries$LAYOUT, inheritedQueries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 inheritedQueries
     * }
     */
    public static void inheritedQueries(MemorySegment struct, int fieldValue) {
        struct.set(inheritedQueries$LAYOUT, inheritedQueries$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

