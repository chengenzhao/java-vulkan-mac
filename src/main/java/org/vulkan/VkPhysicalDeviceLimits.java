// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceLimits {
 *     uint32_t maxImageDimension1D;
 *     uint32_t maxImageDimension2D;
 *     uint32_t maxImageDimension3D;
 *     uint32_t maxImageDimensionCube;
 *     uint32_t maxImageArrayLayers;
 *     uint32_t maxTexelBufferElements;
 *     uint32_t maxUniformBufferRange;
 *     uint32_t maxStorageBufferRange;
 *     uint32_t maxPushConstantsSize;
 *     uint32_t maxMemoryAllocationCount;
 *     uint32_t maxSamplerAllocationCount;
 *     VkDeviceSize bufferImageGranularity;
 *     VkDeviceSize sparseAddressSpaceSize;
 *     uint32_t maxBoundDescriptorSets;
 *     uint32_t maxPerStageDescriptorSamplers;
 *     uint32_t maxPerStageDescriptorUniformBuffers;
 *     uint32_t maxPerStageDescriptorStorageBuffers;
 *     uint32_t maxPerStageDescriptorSampledImages;
 *     uint32_t maxPerStageDescriptorStorageImages;
 *     uint32_t maxPerStageDescriptorInputAttachments;
 *     uint32_t maxPerStageResources;
 *     uint32_t maxDescriptorSetSamplers;
 *     uint32_t maxDescriptorSetUniformBuffers;
 *     uint32_t maxDescriptorSetUniformBuffersDynamic;
 *     uint32_t maxDescriptorSetStorageBuffers;
 *     uint32_t maxDescriptorSetStorageBuffersDynamic;
 *     uint32_t maxDescriptorSetSampledImages;
 *     uint32_t maxDescriptorSetStorageImages;
 *     uint32_t maxDescriptorSetInputAttachments;
 *     uint32_t maxVertexInputAttributes;
 *     uint32_t maxVertexInputBindings;
 *     uint32_t maxVertexInputAttributeOffset;
 *     uint32_t maxVertexInputBindingStride;
 *     uint32_t maxVertexOutputComponents;
 *     uint32_t maxTessellationGenerationLevel;
 *     uint32_t maxTessellationPatchSize;
 *     uint32_t maxTessellationControlPerVertexInputComponents;
 *     uint32_t maxTessellationControlPerVertexOutputComponents;
 *     uint32_t maxTessellationControlPerPatchOutputComponents;
 *     uint32_t maxTessellationControlTotalOutputComponents;
 *     uint32_t maxTessellationEvaluationInputComponents;
 *     uint32_t maxTessellationEvaluationOutputComponents;
 *     uint32_t maxGeometryShaderInvocations;
 *     uint32_t maxGeometryInputComponents;
 *     uint32_t maxGeometryOutputComponents;
 *     uint32_t maxGeometryOutputVertices;
 *     uint32_t maxGeometryTotalOutputComponents;
 *     uint32_t maxFragmentInputComponents;
 *     uint32_t maxFragmentOutputAttachments;
 *     uint32_t maxFragmentDualSrcAttachments;
 *     uint32_t maxFragmentCombinedOutputResources;
 *     uint32_t maxComputeSharedMemorySize;
 *     uint32_t maxComputeWorkGroupCount[3];
 *     uint32_t maxComputeWorkGroupInvocations;
 *     uint32_t maxComputeWorkGroupSize[3];
 *     uint32_t subPixelPrecisionBits;
 *     uint32_t subTexelPrecisionBits;
 *     uint32_t mipmapPrecisionBits;
 *     uint32_t maxDrawIndexedIndexValue;
 *     uint32_t maxDrawIndirectCount;
 *     float maxSamplerLodBias;
 *     float maxSamplerAnisotropy;
 *     uint32_t maxViewports;
 *     uint32_t maxViewportDimensions[2];
 *     float viewportBoundsRange[2];
 *     uint32_t viewportSubPixelBits;
 *     size_t minMemoryMapAlignment;
 *     VkDeviceSize minTexelBufferOffsetAlignment;
 *     VkDeviceSize minUniformBufferOffsetAlignment;
 *     VkDeviceSize minStorageBufferOffsetAlignment;
 *     int32_t minTexelOffset;
 *     uint32_t maxTexelOffset;
 *     int32_t minTexelGatherOffset;
 *     uint32_t maxTexelGatherOffset;
 *     float minInterpolationOffset;
 *     float maxInterpolationOffset;
 *     uint32_t subPixelInterpolationOffsetBits;
 *     uint32_t maxFramebufferWidth;
 *     uint32_t maxFramebufferHeight;
 *     uint32_t maxFramebufferLayers;
 *     VkSampleCountFlags framebufferColorSampleCounts;
 *     VkSampleCountFlags framebufferDepthSampleCounts;
 *     VkSampleCountFlags framebufferStencilSampleCounts;
 *     VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
 *     uint32_t maxColorAttachments;
 *     VkSampleCountFlags sampledImageColorSampleCounts;
 *     VkSampleCountFlags sampledImageIntegerSampleCounts;
 *     VkSampleCountFlags sampledImageDepthSampleCounts;
 *     VkSampleCountFlags sampledImageStencilSampleCounts;
 *     VkSampleCountFlags storageImageSampleCounts;
 *     uint32_t maxSampleMaskWords;
 *     VkBool32 timestampComputeAndGraphics;
 *     float timestampPeriod;
 *     uint32_t maxClipDistances;
 *     uint32_t maxCullDistances;
 *     uint32_t maxCombinedClipAndCullDistances;
 *     uint32_t discreteQueuePriorities;
 *     float pointSizeRange[2];
 *     float lineWidthRange[2];
 *     float pointSizeGranularity;
 *     float lineWidthGranularity;
 *     VkBool32 strictLines;
 *     VkBool32 standardSampleLocations;
 *     VkDeviceSize optimalBufferCopyOffsetAlignment;
 *     VkDeviceSize optimalBufferCopyRowPitchAlignment;
 *     VkDeviceSize nonCoherentAtomSize;
 * }
 * }
 */
public class VkPhysicalDeviceLimits {

    VkPhysicalDeviceLimits() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("maxImageDimension1D"),
        vulkan_h.C_INT.withName("maxImageDimension2D"),
        vulkan_h.C_INT.withName("maxImageDimension3D"),
        vulkan_h.C_INT.withName("maxImageDimensionCube"),
        vulkan_h.C_INT.withName("maxImageArrayLayers"),
        vulkan_h.C_INT.withName("maxTexelBufferElements"),
        vulkan_h.C_INT.withName("maxUniformBufferRange"),
        vulkan_h.C_INT.withName("maxStorageBufferRange"),
        vulkan_h.C_INT.withName("maxPushConstantsSize"),
        vulkan_h.C_INT.withName("maxMemoryAllocationCount"),
        vulkan_h.C_INT.withName("maxSamplerAllocationCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("bufferImageGranularity"),
        vulkan_h.C_LONG_LONG.withName("sparseAddressSpaceSize"),
        vulkan_h.C_INT.withName("maxBoundDescriptorSets"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorSamplers"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorUniformBuffers"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorStorageBuffers"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorSampledImages"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorStorageImages"),
        vulkan_h.C_INT.withName("maxPerStageDescriptorInputAttachments"),
        vulkan_h.C_INT.withName("maxPerStageResources"),
        vulkan_h.C_INT.withName("maxDescriptorSetSamplers"),
        vulkan_h.C_INT.withName("maxDescriptorSetUniformBuffers"),
        vulkan_h.C_INT.withName("maxDescriptorSetUniformBuffersDynamic"),
        vulkan_h.C_INT.withName("maxDescriptorSetStorageBuffers"),
        vulkan_h.C_INT.withName("maxDescriptorSetStorageBuffersDynamic"),
        vulkan_h.C_INT.withName("maxDescriptorSetSampledImages"),
        vulkan_h.C_INT.withName("maxDescriptorSetStorageImages"),
        vulkan_h.C_INT.withName("maxDescriptorSetInputAttachments"),
        vulkan_h.C_INT.withName("maxVertexInputAttributes"),
        vulkan_h.C_INT.withName("maxVertexInputBindings"),
        vulkan_h.C_INT.withName("maxVertexInputAttributeOffset"),
        vulkan_h.C_INT.withName("maxVertexInputBindingStride"),
        vulkan_h.C_INT.withName("maxVertexOutputComponents"),
        vulkan_h.C_INT.withName("maxTessellationGenerationLevel"),
        vulkan_h.C_INT.withName("maxTessellationPatchSize"),
        vulkan_h.C_INT.withName("maxTessellationControlPerVertexInputComponents"),
        vulkan_h.C_INT.withName("maxTessellationControlPerVertexOutputComponents"),
        vulkan_h.C_INT.withName("maxTessellationControlPerPatchOutputComponents"),
        vulkan_h.C_INT.withName("maxTessellationControlTotalOutputComponents"),
        vulkan_h.C_INT.withName("maxTessellationEvaluationInputComponents"),
        vulkan_h.C_INT.withName("maxTessellationEvaluationOutputComponents"),
        vulkan_h.C_INT.withName("maxGeometryShaderInvocations"),
        vulkan_h.C_INT.withName("maxGeometryInputComponents"),
        vulkan_h.C_INT.withName("maxGeometryOutputComponents"),
        vulkan_h.C_INT.withName("maxGeometryOutputVertices"),
        vulkan_h.C_INT.withName("maxGeometryTotalOutputComponents"),
        vulkan_h.C_INT.withName("maxFragmentInputComponents"),
        vulkan_h.C_INT.withName("maxFragmentOutputAttachments"),
        vulkan_h.C_INT.withName("maxFragmentDualSrcAttachments"),
        vulkan_h.C_INT.withName("maxFragmentCombinedOutputResources"),
        vulkan_h.C_INT.withName("maxComputeSharedMemorySize"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("maxComputeWorkGroupCount"),
        vulkan_h.C_INT.withName("maxComputeWorkGroupInvocations"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("maxComputeWorkGroupSize"),
        vulkan_h.C_INT.withName("subPixelPrecisionBits"),
        vulkan_h.C_INT.withName("subTexelPrecisionBits"),
        vulkan_h.C_INT.withName("mipmapPrecisionBits"),
        vulkan_h.C_INT.withName("maxDrawIndexedIndexValue"),
        vulkan_h.C_INT.withName("maxDrawIndirectCount"),
        vulkan_h.C_FLOAT.withName("maxSamplerLodBias"),
        vulkan_h.C_FLOAT.withName("maxSamplerAnisotropy"),
        vulkan_h.C_INT.withName("maxViewports"),
        MemoryLayout.sequenceLayout(2, vulkan_h.C_INT).withName("maxViewportDimensions"),
        MemoryLayout.sequenceLayout(2, vulkan_h.C_FLOAT).withName("viewportBoundsRange"),
        vulkan_h.C_INT.withName("viewportSubPixelBits"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG.withName("minMemoryMapAlignment"),
        vulkan_h.C_LONG_LONG.withName("minTexelBufferOffsetAlignment"),
        vulkan_h.C_LONG_LONG.withName("minUniformBufferOffsetAlignment"),
        vulkan_h.C_LONG_LONG.withName("minStorageBufferOffsetAlignment"),
        vulkan_h.C_INT.withName("minTexelOffset"),
        vulkan_h.C_INT.withName("maxTexelOffset"),
        vulkan_h.C_INT.withName("minTexelGatherOffset"),
        vulkan_h.C_INT.withName("maxTexelGatherOffset"),
        vulkan_h.C_FLOAT.withName("minInterpolationOffset"),
        vulkan_h.C_FLOAT.withName("maxInterpolationOffset"),
        vulkan_h.C_INT.withName("subPixelInterpolationOffsetBits"),
        vulkan_h.C_INT.withName("maxFramebufferWidth"),
        vulkan_h.C_INT.withName("maxFramebufferHeight"),
        vulkan_h.C_INT.withName("maxFramebufferLayers"),
        vulkan_h.C_INT.withName("framebufferColorSampleCounts"),
        vulkan_h.C_INT.withName("framebufferDepthSampleCounts"),
        vulkan_h.C_INT.withName("framebufferStencilSampleCounts"),
        vulkan_h.C_INT.withName("framebufferNoAttachmentsSampleCounts"),
        vulkan_h.C_INT.withName("maxColorAttachments"),
        vulkan_h.C_INT.withName("sampledImageColorSampleCounts"),
        vulkan_h.C_INT.withName("sampledImageIntegerSampleCounts"),
        vulkan_h.C_INT.withName("sampledImageDepthSampleCounts"),
        vulkan_h.C_INT.withName("sampledImageStencilSampleCounts"),
        vulkan_h.C_INT.withName("storageImageSampleCounts"),
        vulkan_h.C_INT.withName("maxSampleMaskWords"),
        vulkan_h.C_INT.withName("timestampComputeAndGraphics"),
        vulkan_h.C_FLOAT.withName("timestampPeriod"),
        vulkan_h.C_INT.withName("maxClipDistances"),
        vulkan_h.C_INT.withName("maxCullDistances"),
        vulkan_h.C_INT.withName("maxCombinedClipAndCullDistances"),
        vulkan_h.C_INT.withName("discreteQueuePriorities"),
        MemoryLayout.sequenceLayout(2, vulkan_h.C_FLOAT).withName("pointSizeRange"),
        MemoryLayout.sequenceLayout(2, vulkan_h.C_FLOAT).withName("lineWidthRange"),
        vulkan_h.C_FLOAT.withName("pointSizeGranularity"),
        vulkan_h.C_FLOAT.withName("lineWidthGranularity"),
        vulkan_h.C_INT.withName("strictLines"),
        vulkan_h.C_INT.withName("standardSampleLocations"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("optimalBufferCopyOffsetAlignment"),
        vulkan_h.C_LONG_LONG.withName("optimalBufferCopyRowPitchAlignment"),
        vulkan_h.C_LONG_LONG.withName("nonCoherentAtomSize")
    ).withName("VkPhysicalDeviceLimits");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt maxImageDimension1D$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxImageDimension1D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension1D
     * }
     */
    public static final OfInt maxImageDimension1D$layout() {
        return maxImageDimension1D$LAYOUT;
    }

    private static final long maxImageDimension1D$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension1D
     * }
     */
    public static final long maxImageDimension1D$offset() {
        return maxImageDimension1D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension1D
     * }
     */
    public static int maxImageDimension1D(MemorySegment struct) {
        return struct.get(maxImageDimension1D$LAYOUT, maxImageDimension1D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension1D
     * }
     */
    public static void maxImageDimension1D(MemorySegment struct, int fieldValue) {
        struct.set(maxImageDimension1D$LAYOUT, maxImageDimension1D$OFFSET, fieldValue);
    }

    private static final OfInt maxImageDimension2D$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxImageDimension2D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension2D
     * }
     */
    public static final OfInt maxImageDimension2D$layout() {
        return maxImageDimension2D$LAYOUT;
    }

    private static final long maxImageDimension2D$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension2D
     * }
     */
    public static final long maxImageDimension2D$offset() {
        return maxImageDimension2D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension2D
     * }
     */
    public static int maxImageDimension2D(MemorySegment struct) {
        return struct.get(maxImageDimension2D$LAYOUT, maxImageDimension2D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension2D
     * }
     */
    public static void maxImageDimension2D(MemorySegment struct, int fieldValue) {
        struct.set(maxImageDimension2D$LAYOUT, maxImageDimension2D$OFFSET, fieldValue);
    }

    private static final OfInt maxImageDimension3D$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxImageDimension3D"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension3D
     * }
     */
    public static final OfInt maxImageDimension3D$layout() {
        return maxImageDimension3D$LAYOUT;
    }

    private static final long maxImageDimension3D$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension3D
     * }
     */
    public static final long maxImageDimension3D$offset() {
        return maxImageDimension3D$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension3D
     * }
     */
    public static int maxImageDimension3D(MemorySegment struct) {
        return struct.get(maxImageDimension3D$LAYOUT, maxImageDimension3D$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimension3D
     * }
     */
    public static void maxImageDimension3D(MemorySegment struct, int fieldValue) {
        struct.set(maxImageDimension3D$LAYOUT, maxImageDimension3D$OFFSET, fieldValue);
    }

    private static final OfInt maxImageDimensionCube$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxImageDimensionCube"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimensionCube
     * }
     */
    public static final OfInt maxImageDimensionCube$layout() {
        return maxImageDimensionCube$LAYOUT;
    }

    private static final long maxImageDimensionCube$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimensionCube
     * }
     */
    public static final long maxImageDimensionCube$offset() {
        return maxImageDimensionCube$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimensionCube
     * }
     */
    public static int maxImageDimensionCube(MemorySegment struct) {
        return struct.get(maxImageDimensionCube$LAYOUT, maxImageDimensionCube$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxImageDimensionCube
     * }
     */
    public static void maxImageDimensionCube(MemorySegment struct, int fieldValue) {
        struct.set(maxImageDimensionCube$LAYOUT, maxImageDimensionCube$OFFSET, fieldValue);
    }

    private static final OfInt maxImageArrayLayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxImageArrayLayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxImageArrayLayers
     * }
     */
    public static final OfInt maxImageArrayLayers$layout() {
        return maxImageArrayLayers$LAYOUT;
    }

    private static final long maxImageArrayLayers$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxImageArrayLayers
     * }
     */
    public static final long maxImageArrayLayers$offset() {
        return maxImageArrayLayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxImageArrayLayers
     * }
     */
    public static int maxImageArrayLayers(MemorySegment struct) {
        return struct.get(maxImageArrayLayers$LAYOUT, maxImageArrayLayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxImageArrayLayers
     * }
     */
    public static void maxImageArrayLayers(MemorySegment struct, int fieldValue) {
        struct.set(maxImageArrayLayers$LAYOUT, maxImageArrayLayers$OFFSET, fieldValue);
    }

    private static final OfInt maxTexelBufferElements$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTexelBufferElements"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTexelBufferElements
     * }
     */
    public static final OfInt maxTexelBufferElements$layout() {
        return maxTexelBufferElements$LAYOUT;
    }

    private static final long maxTexelBufferElements$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTexelBufferElements
     * }
     */
    public static final long maxTexelBufferElements$offset() {
        return maxTexelBufferElements$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTexelBufferElements
     * }
     */
    public static int maxTexelBufferElements(MemorySegment struct) {
        return struct.get(maxTexelBufferElements$LAYOUT, maxTexelBufferElements$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTexelBufferElements
     * }
     */
    public static void maxTexelBufferElements(MemorySegment struct, int fieldValue) {
        struct.set(maxTexelBufferElements$LAYOUT, maxTexelBufferElements$OFFSET, fieldValue);
    }

    private static final OfInt maxUniformBufferRange$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxUniformBufferRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxUniformBufferRange
     * }
     */
    public static final OfInt maxUniformBufferRange$layout() {
        return maxUniformBufferRange$LAYOUT;
    }

    private static final long maxUniformBufferRange$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxUniformBufferRange
     * }
     */
    public static final long maxUniformBufferRange$offset() {
        return maxUniformBufferRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxUniformBufferRange
     * }
     */
    public static int maxUniformBufferRange(MemorySegment struct) {
        return struct.get(maxUniformBufferRange$LAYOUT, maxUniformBufferRange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxUniformBufferRange
     * }
     */
    public static void maxUniformBufferRange(MemorySegment struct, int fieldValue) {
        struct.set(maxUniformBufferRange$LAYOUT, maxUniformBufferRange$OFFSET, fieldValue);
    }

    private static final OfInt maxStorageBufferRange$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxStorageBufferRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxStorageBufferRange
     * }
     */
    public static final OfInt maxStorageBufferRange$layout() {
        return maxStorageBufferRange$LAYOUT;
    }

    private static final long maxStorageBufferRange$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxStorageBufferRange
     * }
     */
    public static final long maxStorageBufferRange$offset() {
        return maxStorageBufferRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxStorageBufferRange
     * }
     */
    public static int maxStorageBufferRange(MemorySegment struct) {
        return struct.get(maxStorageBufferRange$LAYOUT, maxStorageBufferRange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxStorageBufferRange
     * }
     */
    public static void maxStorageBufferRange(MemorySegment struct, int fieldValue) {
        struct.set(maxStorageBufferRange$LAYOUT, maxStorageBufferRange$OFFSET, fieldValue);
    }

    private static final OfInt maxPushConstantsSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPushConstantsSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantsSize
     * }
     */
    public static final OfInt maxPushConstantsSize$layout() {
        return maxPushConstantsSize$LAYOUT;
    }

    private static final long maxPushConstantsSize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantsSize
     * }
     */
    public static final long maxPushConstantsSize$offset() {
        return maxPushConstantsSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantsSize
     * }
     */
    public static int maxPushConstantsSize(MemorySegment struct) {
        return struct.get(maxPushConstantsSize$LAYOUT, maxPushConstantsSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPushConstantsSize
     * }
     */
    public static void maxPushConstantsSize(MemorySegment struct, int fieldValue) {
        struct.set(maxPushConstantsSize$LAYOUT, maxPushConstantsSize$OFFSET, fieldValue);
    }

    private static final OfInt maxMemoryAllocationCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMemoryAllocationCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMemoryAllocationCount
     * }
     */
    public static final OfInt maxMemoryAllocationCount$layout() {
        return maxMemoryAllocationCount$LAYOUT;
    }

    private static final long maxMemoryAllocationCount$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMemoryAllocationCount
     * }
     */
    public static final long maxMemoryAllocationCount$offset() {
        return maxMemoryAllocationCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMemoryAllocationCount
     * }
     */
    public static int maxMemoryAllocationCount(MemorySegment struct) {
        return struct.get(maxMemoryAllocationCount$LAYOUT, maxMemoryAllocationCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMemoryAllocationCount
     * }
     */
    public static void maxMemoryAllocationCount(MemorySegment struct, int fieldValue) {
        struct.set(maxMemoryAllocationCount$LAYOUT, maxMemoryAllocationCount$OFFSET, fieldValue);
    }

    private static final OfInt maxSamplerAllocationCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxSamplerAllocationCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerAllocationCount
     * }
     */
    public static final OfInt maxSamplerAllocationCount$layout() {
        return maxSamplerAllocationCount$LAYOUT;
    }

    private static final long maxSamplerAllocationCount$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerAllocationCount
     * }
     */
    public static final long maxSamplerAllocationCount$offset() {
        return maxSamplerAllocationCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerAllocationCount
     * }
     */
    public static int maxSamplerAllocationCount(MemorySegment struct) {
        return struct.get(maxSamplerAllocationCount$LAYOUT, maxSamplerAllocationCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxSamplerAllocationCount
     * }
     */
    public static void maxSamplerAllocationCount(MemorySegment struct, int fieldValue) {
        struct.set(maxSamplerAllocationCount$LAYOUT, maxSamplerAllocationCount$OFFSET, fieldValue);
    }

    private static final OfLong bufferImageGranularity$LAYOUT = (OfLong)$LAYOUT.select(groupElement("bufferImageGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize bufferImageGranularity
     * }
     */
    public static final OfLong bufferImageGranularity$layout() {
        return bufferImageGranularity$LAYOUT;
    }

    private static final long bufferImageGranularity$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize bufferImageGranularity
     * }
     */
    public static final long bufferImageGranularity$offset() {
        return bufferImageGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize bufferImageGranularity
     * }
     */
    public static long bufferImageGranularity(MemorySegment struct) {
        return struct.get(bufferImageGranularity$LAYOUT, bufferImageGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize bufferImageGranularity
     * }
     */
    public static void bufferImageGranularity(MemorySegment struct, long fieldValue) {
        struct.set(bufferImageGranularity$LAYOUT, bufferImageGranularity$OFFSET, fieldValue);
    }

    private static final OfLong sparseAddressSpaceSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("sparseAddressSpaceSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize sparseAddressSpaceSize
     * }
     */
    public static final OfLong sparseAddressSpaceSize$layout() {
        return sparseAddressSpaceSize$LAYOUT;
    }

    private static final long sparseAddressSpaceSize$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize sparseAddressSpaceSize
     * }
     */
    public static final long sparseAddressSpaceSize$offset() {
        return sparseAddressSpaceSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize sparseAddressSpaceSize
     * }
     */
    public static long sparseAddressSpaceSize(MemorySegment struct) {
        return struct.get(sparseAddressSpaceSize$LAYOUT, sparseAddressSpaceSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize sparseAddressSpaceSize
     * }
     */
    public static void sparseAddressSpaceSize(MemorySegment struct, long fieldValue) {
        struct.set(sparseAddressSpaceSize$LAYOUT, sparseAddressSpaceSize$OFFSET, fieldValue);
    }

    private static final OfInt maxBoundDescriptorSets$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxBoundDescriptorSets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxBoundDescriptorSets
     * }
     */
    public static final OfInt maxBoundDescriptorSets$layout() {
        return maxBoundDescriptorSets$LAYOUT;
    }

    private static final long maxBoundDescriptorSets$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxBoundDescriptorSets
     * }
     */
    public static final long maxBoundDescriptorSets$offset() {
        return maxBoundDescriptorSets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxBoundDescriptorSets
     * }
     */
    public static int maxBoundDescriptorSets(MemorySegment struct) {
        return struct.get(maxBoundDescriptorSets$LAYOUT, maxBoundDescriptorSets$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxBoundDescriptorSets
     * }
     */
    public static void maxBoundDescriptorSets(MemorySegment struct, int fieldValue) {
        struct.set(maxBoundDescriptorSets$LAYOUT, maxBoundDescriptorSets$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorSamplers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorSamplers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSamplers
     * }
     */
    public static final OfInt maxPerStageDescriptorSamplers$layout() {
        return maxPerStageDescriptorSamplers$LAYOUT;
    }

    private static final long maxPerStageDescriptorSamplers$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSamplers
     * }
     */
    public static final long maxPerStageDescriptorSamplers$offset() {
        return maxPerStageDescriptorSamplers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSamplers
     * }
     */
    public static int maxPerStageDescriptorSamplers(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorSamplers$LAYOUT, maxPerStageDescriptorSamplers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSamplers
     * }
     */
    public static void maxPerStageDescriptorSamplers(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorSamplers$LAYOUT, maxPerStageDescriptorSamplers$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorUniformBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorUniformBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUniformBuffers
     * }
     */
    public static final OfInt maxPerStageDescriptorUniformBuffers$layout() {
        return maxPerStageDescriptorUniformBuffers$LAYOUT;
    }

    private static final long maxPerStageDescriptorUniformBuffers$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUniformBuffers
     * }
     */
    public static final long maxPerStageDescriptorUniformBuffers$offset() {
        return maxPerStageDescriptorUniformBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUniformBuffers
     * }
     */
    public static int maxPerStageDescriptorUniformBuffers(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorUniformBuffers$LAYOUT, maxPerStageDescriptorUniformBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorUniformBuffers
     * }
     */
    public static void maxPerStageDescriptorUniformBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorUniformBuffers$LAYOUT, maxPerStageDescriptorUniformBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorStorageBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorStorageBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageBuffers
     * }
     */
    public static final OfInt maxPerStageDescriptorStorageBuffers$layout() {
        return maxPerStageDescriptorStorageBuffers$LAYOUT;
    }

    private static final long maxPerStageDescriptorStorageBuffers$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageBuffers
     * }
     */
    public static final long maxPerStageDescriptorStorageBuffers$offset() {
        return maxPerStageDescriptorStorageBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageBuffers
     * }
     */
    public static int maxPerStageDescriptorStorageBuffers(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorStorageBuffers$LAYOUT, maxPerStageDescriptorStorageBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageBuffers
     * }
     */
    public static void maxPerStageDescriptorStorageBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorStorageBuffers$LAYOUT, maxPerStageDescriptorStorageBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorSampledImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorSampledImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSampledImages
     * }
     */
    public static final OfInt maxPerStageDescriptorSampledImages$layout() {
        return maxPerStageDescriptorSampledImages$LAYOUT;
    }

    private static final long maxPerStageDescriptorSampledImages$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSampledImages
     * }
     */
    public static final long maxPerStageDescriptorSampledImages$offset() {
        return maxPerStageDescriptorSampledImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSampledImages
     * }
     */
    public static int maxPerStageDescriptorSampledImages(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorSampledImages$LAYOUT, maxPerStageDescriptorSampledImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorSampledImages
     * }
     */
    public static void maxPerStageDescriptorSampledImages(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorSampledImages$LAYOUT, maxPerStageDescriptorSampledImages$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorStorageImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorStorageImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageImages
     * }
     */
    public static final OfInt maxPerStageDescriptorStorageImages$layout() {
        return maxPerStageDescriptorStorageImages$LAYOUT;
    }

    private static final long maxPerStageDescriptorStorageImages$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageImages
     * }
     */
    public static final long maxPerStageDescriptorStorageImages$offset() {
        return maxPerStageDescriptorStorageImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageImages
     * }
     */
    public static int maxPerStageDescriptorStorageImages(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorStorageImages$LAYOUT, maxPerStageDescriptorStorageImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorStorageImages
     * }
     */
    public static void maxPerStageDescriptorStorageImages(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorStorageImages$LAYOUT, maxPerStageDescriptorStorageImages$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageDescriptorInputAttachments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageDescriptorInputAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorInputAttachments
     * }
     */
    public static final OfInt maxPerStageDescriptorInputAttachments$layout() {
        return maxPerStageDescriptorInputAttachments$LAYOUT;
    }

    private static final long maxPerStageDescriptorInputAttachments$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorInputAttachments
     * }
     */
    public static final long maxPerStageDescriptorInputAttachments$offset() {
        return maxPerStageDescriptorInputAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorInputAttachments
     * }
     */
    public static int maxPerStageDescriptorInputAttachments(MemorySegment struct) {
        return struct.get(maxPerStageDescriptorInputAttachments$LAYOUT, maxPerStageDescriptorInputAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageDescriptorInputAttachments
     * }
     */
    public static void maxPerStageDescriptorInputAttachments(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageDescriptorInputAttachments$LAYOUT, maxPerStageDescriptorInputAttachments$OFFSET, fieldValue);
    }

    private static final OfInt maxPerStageResources$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPerStageResources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageResources
     * }
     */
    public static final OfInt maxPerStageResources$layout() {
        return maxPerStageResources$LAYOUT;
    }

    private static final long maxPerStageResources$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageResources
     * }
     */
    public static final long maxPerStageResources$offset() {
        return maxPerStageResources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageResources
     * }
     */
    public static int maxPerStageResources(MemorySegment struct) {
        return struct.get(maxPerStageResources$LAYOUT, maxPerStageResources$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPerStageResources
     * }
     */
    public static void maxPerStageResources(MemorySegment struct, int fieldValue) {
        struct.set(maxPerStageResources$LAYOUT, maxPerStageResources$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetSamplers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetSamplers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSamplers
     * }
     */
    public static final OfInt maxDescriptorSetSamplers$layout() {
        return maxDescriptorSetSamplers$LAYOUT;
    }

    private static final long maxDescriptorSetSamplers$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSamplers
     * }
     */
    public static final long maxDescriptorSetSamplers$offset() {
        return maxDescriptorSetSamplers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSamplers
     * }
     */
    public static int maxDescriptorSetSamplers(MemorySegment struct) {
        return struct.get(maxDescriptorSetSamplers$LAYOUT, maxDescriptorSetSamplers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSamplers
     * }
     */
    public static void maxDescriptorSetSamplers(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetSamplers$LAYOUT, maxDescriptorSetSamplers$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUniformBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUniformBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffers
     * }
     */
    public static final OfInt maxDescriptorSetUniformBuffers$layout() {
        return maxDescriptorSetUniformBuffers$LAYOUT;
    }

    private static final long maxDescriptorSetUniformBuffers$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffers
     * }
     */
    public static final long maxDescriptorSetUniformBuffers$offset() {
        return maxDescriptorSetUniformBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffers
     * }
     */
    public static int maxDescriptorSetUniformBuffers(MemorySegment struct) {
        return struct.get(maxDescriptorSetUniformBuffers$LAYOUT, maxDescriptorSetUniformBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffers
     * }
     */
    public static void maxDescriptorSetUniformBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUniformBuffers$LAYOUT, maxDescriptorSetUniformBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetUniformBuffersDynamic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetUniformBuffersDynamic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffersDynamic
     * }
     */
    public static final OfInt maxDescriptorSetUniformBuffersDynamic$layout() {
        return maxDescriptorSetUniformBuffersDynamic$LAYOUT;
    }

    private static final long maxDescriptorSetUniformBuffersDynamic$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffersDynamic
     * }
     */
    public static final long maxDescriptorSetUniformBuffersDynamic$offset() {
        return maxDescriptorSetUniformBuffersDynamic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffersDynamic
     * }
     */
    public static int maxDescriptorSetUniformBuffersDynamic(MemorySegment struct) {
        return struct.get(maxDescriptorSetUniformBuffersDynamic$LAYOUT, maxDescriptorSetUniformBuffersDynamic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetUniformBuffersDynamic
     * }
     */
    public static void maxDescriptorSetUniformBuffersDynamic(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetUniformBuffersDynamic$LAYOUT, maxDescriptorSetUniformBuffersDynamic$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetStorageBuffers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetStorageBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffers
     * }
     */
    public static final OfInt maxDescriptorSetStorageBuffers$layout() {
        return maxDescriptorSetStorageBuffers$LAYOUT;
    }

    private static final long maxDescriptorSetStorageBuffers$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffers
     * }
     */
    public static final long maxDescriptorSetStorageBuffers$offset() {
        return maxDescriptorSetStorageBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffers
     * }
     */
    public static int maxDescriptorSetStorageBuffers(MemorySegment struct) {
        return struct.get(maxDescriptorSetStorageBuffers$LAYOUT, maxDescriptorSetStorageBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffers
     * }
     */
    public static void maxDescriptorSetStorageBuffers(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetStorageBuffers$LAYOUT, maxDescriptorSetStorageBuffers$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetStorageBuffersDynamic$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetStorageBuffersDynamic"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffersDynamic
     * }
     */
    public static final OfInt maxDescriptorSetStorageBuffersDynamic$layout() {
        return maxDescriptorSetStorageBuffersDynamic$LAYOUT;
    }

    private static final long maxDescriptorSetStorageBuffersDynamic$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffersDynamic
     * }
     */
    public static final long maxDescriptorSetStorageBuffersDynamic$offset() {
        return maxDescriptorSetStorageBuffersDynamic$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffersDynamic
     * }
     */
    public static int maxDescriptorSetStorageBuffersDynamic(MemorySegment struct) {
        return struct.get(maxDescriptorSetStorageBuffersDynamic$LAYOUT, maxDescriptorSetStorageBuffersDynamic$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageBuffersDynamic
     * }
     */
    public static void maxDescriptorSetStorageBuffersDynamic(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetStorageBuffersDynamic$LAYOUT, maxDescriptorSetStorageBuffersDynamic$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetSampledImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetSampledImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSampledImages
     * }
     */
    public static final OfInt maxDescriptorSetSampledImages$layout() {
        return maxDescriptorSetSampledImages$LAYOUT;
    }

    private static final long maxDescriptorSetSampledImages$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSampledImages
     * }
     */
    public static final long maxDescriptorSetSampledImages$offset() {
        return maxDescriptorSetSampledImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSampledImages
     * }
     */
    public static int maxDescriptorSetSampledImages(MemorySegment struct) {
        return struct.get(maxDescriptorSetSampledImages$LAYOUT, maxDescriptorSetSampledImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetSampledImages
     * }
     */
    public static void maxDescriptorSetSampledImages(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetSampledImages$LAYOUT, maxDescriptorSetSampledImages$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetStorageImages$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetStorageImages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageImages
     * }
     */
    public static final OfInt maxDescriptorSetStorageImages$layout() {
        return maxDescriptorSetStorageImages$LAYOUT;
    }

    private static final long maxDescriptorSetStorageImages$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageImages
     * }
     */
    public static final long maxDescriptorSetStorageImages$offset() {
        return maxDescriptorSetStorageImages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageImages
     * }
     */
    public static int maxDescriptorSetStorageImages(MemorySegment struct) {
        return struct.get(maxDescriptorSetStorageImages$LAYOUT, maxDescriptorSetStorageImages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetStorageImages
     * }
     */
    public static void maxDescriptorSetStorageImages(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetStorageImages$LAYOUT, maxDescriptorSetStorageImages$OFFSET, fieldValue);
    }

    private static final OfInt maxDescriptorSetInputAttachments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDescriptorSetInputAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetInputAttachments
     * }
     */
    public static final OfInt maxDescriptorSetInputAttachments$layout() {
        return maxDescriptorSetInputAttachments$LAYOUT;
    }

    private static final long maxDescriptorSetInputAttachments$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetInputAttachments
     * }
     */
    public static final long maxDescriptorSetInputAttachments$offset() {
        return maxDescriptorSetInputAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetInputAttachments
     * }
     */
    public static int maxDescriptorSetInputAttachments(MemorySegment struct) {
        return struct.get(maxDescriptorSetInputAttachments$LAYOUT, maxDescriptorSetInputAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDescriptorSetInputAttachments
     * }
     */
    public static void maxDescriptorSetInputAttachments(MemorySegment struct, int fieldValue) {
        struct.set(maxDescriptorSetInputAttachments$LAYOUT, maxDescriptorSetInputAttachments$OFFSET, fieldValue);
    }

    private static final OfInt maxVertexInputAttributes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxVertexInputAttributes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributes
     * }
     */
    public static final OfInt maxVertexInputAttributes$layout() {
        return maxVertexInputAttributes$LAYOUT;
    }

    private static final long maxVertexInputAttributes$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributes
     * }
     */
    public static final long maxVertexInputAttributes$offset() {
        return maxVertexInputAttributes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributes
     * }
     */
    public static int maxVertexInputAttributes(MemorySegment struct) {
        return struct.get(maxVertexInputAttributes$LAYOUT, maxVertexInputAttributes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributes
     * }
     */
    public static void maxVertexInputAttributes(MemorySegment struct, int fieldValue) {
        struct.set(maxVertexInputAttributes$LAYOUT, maxVertexInputAttributes$OFFSET, fieldValue);
    }

    private static final OfInt maxVertexInputBindings$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxVertexInputBindings"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindings
     * }
     */
    public static final OfInt maxVertexInputBindings$layout() {
        return maxVertexInputBindings$LAYOUT;
    }

    private static final long maxVertexInputBindings$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindings
     * }
     */
    public static final long maxVertexInputBindings$offset() {
        return maxVertexInputBindings$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindings
     * }
     */
    public static int maxVertexInputBindings(MemorySegment struct) {
        return struct.get(maxVertexInputBindings$LAYOUT, maxVertexInputBindings$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindings
     * }
     */
    public static void maxVertexInputBindings(MemorySegment struct, int fieldValue) {
        struct.set(maxVertexInputBindings$LAYOUT, maxVertexInputBindings$OFFSET, fieldValue);
    }

    private static final OfInt maxVertexInputAttributeOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxVertexInputAttributeOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributeOffset
     * }
     */
    public static final OfInt maxVertexInputAttributeOffset$layout() {
        return maxVertexInputAttributeOffset$LAYOUT;
    }

    private static final long maxVertexInputAttributeOffset$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributeOffset
     * }
     */
    public static final long maxVertexInputAttributeOffset$offset() {
        return maxVertexInputAttributeOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributeOffset
     * }
     */
    public static int maxVertexInputAttributeOffset(MemorySegment struct) {
        return struct.get(maxVertexInputAttributeOffset$LAYOUT, maxVertexInputAttributeOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputAttributeOffset
     * }
     */
    public static void maxVertexInputAttributeOffset(MemorySegment struct, int fieldValue) {
        struct.set(maxVertexInputAttributeOffset$LAYOUT, maxVertexInputAttributeOffset$OFFSET, fieldValue);
    }

    private static final OfInt maxVertexInputBindingStride$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxVertexInputBindingStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindingStride
     * }
     */
    public static final OfInt maxVertexInputBindingStride$layout() {
        return maxVertexInputBindingStride$LAYOUT;
    }

    private static final long maxVertexInputBindingStride$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindingStride
     * }
     */
    public static final long maxVertexInputBindingStride$offset() {
        return maxVertexInputBindingStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindingStride
     * }
     */
    public static int maxVertexInputBindingStride(MemorySegment struct) {
        return struct.get(maxVertexInputBindingStride$LAYOUT, maxVertexInputBindingStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexInputBindingStride
     * }
     */
    public static void maxVertexInputBindingStride(MemorySegment struct, int fieldValue) {
        struct.set(maxVertexInputBindingStride$LAYOUT, maxVertexInputBindingStride$OFFSET, fieldValue);
    }

    private static final OfInt maxVertexOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxVertexOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxVertexOutputComponents
     * }
     */
    public static final OfInt maxVertexOutputComponents$layout() {
        return maxVertexOutputComponents$LAYOUT;
    }

    private static final long maxVertexOutputComponents$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxVertexOutputComponents
     * }
     */
    public static final long maxVertexOutputComponents$offset() {
        return maxVertexOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexOutputComponents
     * }
     */
    public static int maxVertexOutputComponents(MemorySegment struct) {
        return struct.get(maxVertexOutputComponents$LAYOUT, maxVertexOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxVertexOutputComponents
     * }
     */
    public static void maxVertexOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxVertexOutputComponents$LAYOUT, maxVertexOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationGenerationLevel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationGenerationLevel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationGenerationLevel
     * }
     */
    public static final OfInt maxTessellationGenerationLevel$layout() {
        return maxTessellationGenerationLevel$LAYOUT;
    }

    private static final long maxTessellationGenerationLevel$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationGenerationLevel
     * }
     */
    public static final long maxTessellationGenerationLevel$offset() {
        return maxTessellationGenerationLevel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationGenerationLevel
     * }
     */
    public static int maxTessellationGenerationLevel(MemorySegment struct) {
        return struct.get(maxTessellationGenerationLevel$LAYOUT, maxTessellationGenerationLevel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationGenerationLevel
     * }
     */
    public static void maxTessellationGenerationLevel(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationGenerationLevel$LAYOUT, maxTessellationGenerationLevel$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationPatchSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationPatchSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationPatchSize
     * }
     */
    public static final OfInt maxTessellationPatchSize$layout() {
        return maxTessellationPatchSize$LAYOUT;
    }

    private static final long maxTessellationPatchSize$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationPatchSize
     * }
     */
    public static final long maxTessellationPatchSize$offset() {
        return maxTessellationPatchSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationPatchSize
     * }
     */
    public static int maxTessellationPatchSize(MemorySegment struct) {
        return struct.get(maxTessellationPatchSize$LAYOUT, maxTessellationPatchSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationPatchSize
     * }
     */
    public static void maxTessellationPatchSize(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationPatchSize$LAYOUT, maxTessellationPatchSize$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationControlPerVertexInputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationControlPerVertexInputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexInputComponents
     * }
     */
    public static final OfInt maxTessellationControlPerVertexInputComponents$layout() {
        return maxTessellationControlPerVertexInputComponents$LAYOUT;
    }

    private static final long maxTessellationControlPerVertexInputComponents$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexInputComponents
     * }
     */
    public static final long maxTessellationControlPerVertexInputComponents$offset() {
        return maxTessellationControlPerVertexInputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexInputComponents
     * }
     */
    public static int maxTessellationControlPerVertexInputComponents(MemorySegment struct) {
        return struct.get(maxTessellationControlPerVertexInputComponents$LAYOUT, maxTessellationControlPerVertexInputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexInputComponents
     * }
     */
    public static void maxTessellationControlPerVertexInputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationControlPerVertexInputComponents$LAYOUT, maxTessellationControlPerVertexInputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationControlPerVertexOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationControlPerVertexOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexOutputComponents
     * }
     */
    public static final OfInt maxTessellationControlPerVertexOutputComponents$layout() {
        return maxTessellationControlPerVertexOutputComponents$LAYOUT;
    }

    private static final long maxTessellationControlPerVertexOutputComponents$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexOutputComponents
     * }
     */
    public static final long maxTessellationControlPerVertexOutputComponents$offset() {
        return maxTessellationControlPerVertexOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexOutputComponents
     * }
     */
    public static int maxTessellationControlPerVertexOutputComponents(MemorySegment struct) {
        return struct.get(maxTessellationControlPerVertexOutputComponents$LAYOUT, maxTessellationControlPerVertexOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerVertexOutputComponents
     * }
     */
    public static void maxTessellationControlPerVertexOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationControlPerVertexOutputComponents$LAYOUT, maxTessellationControlPerVertexOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationControlPerPatchOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationControlPerPatchOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerPatchOutputComponents
     * }
     */
    public static final OfInt maxTessellationControlPerPatchOutputComponents$layout() {
        return maxTessellationControlPerPatchOutputComponents$LAYOUT;
    }

    private static final long maxTessellationControlPerPatchOutputComponents$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerPatchOutputComponents
     * }
     */
    public static final long maxTessellationControlPerPatchOutputComponents$offset() {
        return maxTessellationControlPerPatchOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerPatchOutputComponents
     * }
     */
    public static int maxTessellationControlPerPatchOutputComponents(MemorySegment struct) {
        return struct.get(maxTessellationControlPerPatchOutputComponents$LAYOUT, maxTessellationControlPerPatchOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlPerPatchOutputComponents
     * }
     */
    public static void maxTessellationControlPerPatchOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationControlPerPatchOutputComponents$LAYOUT, maxTessellationControlPerPatchOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationControlTotalOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationControlTotalOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlTotalOutputComponents
     * }
     */
    public static final OfInt maxTessellationControlTotalOutputComponents$layout() {
        return maxTessellationControlTotalOutputComponents$LAYOUT;
    }

    private static final long maxTessellationControlTotalOutputComponents$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlTotalOutputComponents
     * }
     */
    public static final long maxTessellationControlTotalOutputComponents$offset() {
        return maxTessellationControlTotalOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlTotalOutputComponents
     * }
     */
    public static int maxTessellationControlTotalOutputComponents(MemorySegment struct) {
        return struct.get(maxTessellationControlTotalOutputComponents$LAYOUT, maxTessellationControlTotalOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationControlTotalOutputComponents
     * }
     */
    public static void maxTessellationControlTotalOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationControlTotalOutputComponents$LAYOUT, maxTessellationControlTotalOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationEvaluationInputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationEvaluationInputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationInputComponents
     * }
     */
    public static final OfInt maxTessellationEvaluationInputComponents$layout() {
        return maxTessellationEvaluationInputComponents$LAYOUT;
    }

    private static final long maxTessellationEvaluationInputComponents$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationInputComponents
     * }
     */
    public static final long maxTessellationEvaluationInputComponents$offset() {
        return maxTessellationEvaluationInputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationInputComponents
     * }
     */
    public static int maxTessellationEvaluationInputComponents(MemorySegment struct) {
        return struct.get(maxTessellationEvaluationInputComponents$LAYOUT, maxTessellationEvaluationInputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationInputComponents
     * }
     */
    public static void maxTessellationEvaluationInputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationEvaluationInputComponents$LAYOUT, maxTessellationEvaluationInputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxTessellationEvaluationOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTessellationEvaluationOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationOutputComponents
     * }
     */
    public static final OfInt maxTessellationEvaluationOutputComponents$layout() {
        return maxTessellationEvaluationOutputComponents$LAYOUT;
    }

    private static final long maxTessellationEvaluationOutputComponents$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationOutputComponents
     * }
     */
    public static final long maxTessellationEvaluationOutputComponents$offset() {
        return maxTessellationEvaluationOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationOutputComponents
     * }
     */
    public static int maxTessellationEvaluationOutputComponents(MemorySegment struct) {
        return struct.get(maxTessellationEvaluationOutputComponents$LAYOUT, maxTessellationEvaluationOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTessellationEvaluationOutputComponents
     * }
     */
    public static void maxTessellationEvaluationOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxTessellationEvaluationOutputComponents$LAYOUT, maxTessellationEvaluationOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxGeometryShaderInvocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxGeometryShaderInvocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryShaderInvocations
     * }
     */
    public static final OfInt maxGeometryShaderInvocations$layout() {
        return maxGeometryShaderInvocations$LAYOUT;
    }

    private static final long maxGeometryShaderInvocations$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryShaderInvocations
     * }
     */
    public static final long maxGeometryShaderInvocations$offset() {
        return maxGeometryShaderInvocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryShaderInvocations
     * }
     */
    public static int maxGeometryShaderInvocations(MemorySegment struct) {
        return struct.get(maxGeometryShaderInvocations$LAYOUT, maxGeometryShaderInvocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryShaderInvocations
     * }
     */
    public static void maxGeometryShaderInvocations(MemorySegment struct, int fieldValue) {
        struct.set(maxGeometryShaderInvocations$LAYOUT, maxGeometryShaderInvocations$OFFSET, fieldValue);
    }

    private static final OfInt maxGeometryInputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxGeometryInputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryInputComponents
     * }
     */
    public static final OfInt maxGeometryInputComponents$layout() {
        return maxGeometryInputComponents$LAYOUT;
    }

    private static final long maxGeometryInputComponents$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryInputComponents
     * }
     */
    public static final long maxGeometryInputComponents$offset() {
        return maxGeometryInputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryInputComponents
     * }
     */
    public static int maxGeometryInputComponents(MemorySegment struct) {
        return struct.get(maxGeometryInputComponents$LAYOUT, maxGeometryInputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryInputComponents
     * }
     */
    public static void maxGeometryInputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxGeometryInputComponents$LAYOUT, maxGeometryInputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxGeometryOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxGeometryOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputComponents
     * }
     */
    public static final OfInt maxGeometryOutputComponents$layout() {
        return maxGeometryOutputComponents$LAYOUT;
    }

    private static final long maxGeometryOutputComponents$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputComponents
     * }
     */
    public static final long maxGeometryOutputComponents$offset() {
        return maxGeometryOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputComponents
     * }
     */
    public static int maxGeometryOutputComponents(MemorySegment struct) {
        return struct.get(maxGeometryOutputComponents$LAYOUT, maxGeometryOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputComponents
     * }
     */
    public static void maxGeometryOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxGeometryOutputComponents$LAYOUT, maxGeometryOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxGeometryOutputVertices$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxGeometryOutputVertices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputVertices
     * }
     */
    public static final OfInt maxGeometryOutputVertices$layout() {
        return maxGeometryOutputVertices$LAYOUT;
    }

    private static final long maxGeometryOutputVertices$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputVertices
     * }
     */
    public static final long maxGeometryOutputVertices$offset() {
        return maxGeometryOutputVertices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputVertices
     * }
     */
    public static int maxGeometryOutputVertices(MemorySegment struct) {
        return struct.get(maxGeometryOutputVertices$LAYOUT, maxGeometryOutputVertices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryOutputVertices
     * }
     */
    public static void maxGeometryOutputVertices(MemorySegment struct, int fieldValue) {
        struct.set(maxGeometryOutputVertices$LAYOUT, maxGeometryOutputVertices$OFFSET, fieldValue);
    }

    private static final OfInt maxGeometryTotalOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxGeometryTotalOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryTotalOutputComponents
     * }
     */
    public static final OfInt maxGeometryTotalOutputComponents$layout() {
        return maxGeometryTotalOutputComponents$LAYOUT;
    }

    private static final long maxGeometryTotalOutputComponents$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryTotalOutputComponents
     * }
     */
    public static final long maxGeometryTotalOutputComponents$offset() {
        return maxGeometryTotalOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryTotalOutputComponents
     * }
     */
    public static int maxGeometryTotalOutputComponents(MemorySegment struct) {
        return struct.get(maxGeometryTotalOutputComponents$LAYOUT, maxGeometryTotalOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxGeometryTotalOutputComponents
     * }
     */
    public static void maxGeometryTotalOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxGeometryTotalOutputComponents$LAYOUT, maxGeometryTotalOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxFragmentInputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxFragmentInputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentInputComponents
     * }
     */
    public static final OfInt maxFragmentInputComponents$layout() {
        return maxFragmentInputComponents$LAYOUT;
    }

    private static final long maxFragmentInputComponents$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentInputComponents
     * }
     */
    public static final long maxFragmentInputComponents$offset() {
        return maxFragmentInputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentInputComponents
     * }
     */
    public static int maxFragmentInputComponents(MemorySegment struct) {
        return struct.get(maxFragmentInputComponents$LAYOUT, maxFragmentInputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentInputComponents
     * }
     */
    public static void maxFragmentInputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxFragmentInputComponents$LAYOUT, maxFragmentInputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxFragmentOutputAttachments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxFragmentOutputAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentOutputAttachments
     * }
     */
    public static final OfInt maxFragmentOutputAttachments$layout() {
        return maxFragmentOutputAttachments$LAYOUT;
    }

    private static final long maxFragmentOutputAttachments$OFFSET = 204;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentOutputAttachments
     * }
     */
    public static final long maxFragmentOutputAttachments$offset() {
        return maxFragmentOutputAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentOutputAttachments
     * }
     */
    public static int maxFragmentOutputAttachments(MemorySegment struct) {
        return struct.get(maxFragmentOutputAttachments$LAYOUT, maxFragmentOutputAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentOutputAttachments
     * }
     */
    public static void maxFragmentOutputAttachments(MemorySegment struct, int fieldValue) {
        struct.set(maxFragmentOutputAttachments$LAYOUT, maxFragmentOutputAttachments$OFFSET, fieldValue);
    }

    private static final OfInt maxFragmentDualSrcAttachments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxFragmentDualSrcAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentDualSrcAttachments
     * }
     */
    public static final OfInt maxFragmentDualSrcAttachments$layout() {
        return maxFragmentDualSrcAttachments$LAYOUT;
    }

    private static final long maxFragmentDualSrcAttachments$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentDualSrcAttachments
     * }
     */
    public static final long maxFragmentDualSrcAttachments$offset() {
        return maxFragmentDualSrcAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentDualSrcAttachments
     * }
     */
    public static int maxFragmentDualSrcAttachments(MemorySegment struct) {
        return struct.get(maxFragmentDualSrcAttachments$LAYOUT, maxFragmentDualSrcAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentDualSrcAttachments
     * }
     */
    public static void maxFragmentDualSrcAttachments(MemorySegment struct, int fieldValue) {
        struct.set(maxFragmentDualSrcAttachments$LAYOUT, maxFragmentDualSrcAttachments$OFFSET, fieldValue);
    }

    private static final OfInt maxFragmentCombinedOutputResources$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxFragmentCombinedOutputResources"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentCombinedOutputResources
     * }
     */
    public static final OfInt maxFragmentCombinedOutputResources$layout() {
        return maxFragmentCombinedOutputResources$LAYOUT;
    }

    private static final long maxFragmentCombinedOutputResources$OFFSET = 212;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentCombinedOutputResources
     * }
     */
    public static final long maxFragmentCombinedOutputResources$offset() {
        return maxFragmentCombinedOutputResources$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentCombinedOutputResources
     * }
     */
    public static int maxFragmentCombinedOutputResources(MemorySegment struct) {
        return struct.get(maxFragmentCombinedOutputResources$LAYOUT, maxFragmentCombinedOutputResources$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxFragmentCombinedOutputResources
     * }
     */
    public static void maxFragmentCombinedOutputResources(MemorySegment struct, int fieldValue) {
        struct.set(maxFragmentCombinedOutputResources$LAYOUT, maxFragmentCombinedOutputResources$OFFSET, fieldValue);
    }

    private static final OfInt maxComputeSharedMemorySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxComputeSharedMemorySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxComputeSharedMemorySize
     * }
     */
    public static final OfInt maxComputeSharedMemorySize$layout() {
        return maxComputeSharedMemorySize$LAYOUT;
    }

    private static final long maxComputeSharedMemorySize$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxComputeSharedMemorySize
     * }
     */
    public static final long maxComputeSharedMemorySize$offset() {
        return maxComputeSharedMemorySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeSharedMemorySize
     * }
     */
    public static int maxComputeSharedMemorySize(MemorySegment struct) {
        return struct.get(maxComputeSharedMemorySize$LAYOUT, maxComputeSharedMemorySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeSharedMemorySize
     * }
     */
    public static void maxComputeSharedMemorySize(MemorySegment struct, int fieldValue) {
        struct.set(maxComputeSharedMemorySize$LAYOUT, maxComputeSharedMemorySize$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxComputeWorkGroupCount$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxComputeWorkGroupCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupCount[3]
     * }
     */
    public static final SequenceLayout maxComputeWorkGroupCount$layout() {
        return maxComputeWorkGroupCount$LAYOUT;
    }

    private static final long maxComputeWorkGroupCount$OFFSET = 220;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupCount[3]
     * }
     */
    public static final long maxComputeWorkGroupCount$offset() {
        return maxComputeWorkGroupCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupCount[3]
     * }
     */
    public static MemorySegment maxComputeWorkGroupCount(MemorySegment struct) {
        return struct.asSlice(maxComputeWorkGroupCount$OFFSET, maxComputeWorkGroupCount$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupCount[3]
     * }
     */
    public static void maxComputeWorkGroupCount(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxComputeWorkGroupCount$OFFSET, maxComputeWorkGroupCount$LAYOUT.byteSize());
    }

    private static long[] maxComputeWorkGroupCount$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupCount[3]
     * }
     */
    public static long[] maxComputeWorkGroupCount$dimensions() {
        return maxComputeWorkGroupCount$DIMS;
    }
    private static final VarHandle maxComputeWorkGroupCount$ELEM_HANDLE = maxComputeWorkGroupCount$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupCount[3]
     * }
     */
    public static int maxComputeWorkGroupCount(MemorySegment struct, long index0) {
        return (int)maxComputeWorkGroupCount$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupCount[3]
     * }
     */
    public static void maxComputeWorkGroupCount(MemorySegment struct, long index0, int fieldValue) {
        maxComputeWorkGroupCount$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxComputeWorkGroupInvocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxComputeWorkGroupInvocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupInvocations
     * }
     */
    public static final OfInt maxComputeWorkGroupInvocations$layout() {
        return maxComputeWorkGroupInvocations$LAYOUT;
    }

    private static final long maxComputeWorkGroupInvocations$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupInvocations
     * }
     */
    public static final long maxComputeWorkGroupInvocations$offset() {
        return maxComputeWorkGroupInvocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupInvocations
     * }
     */
    public static int maxComputeWorkGroupInvocations(MemorySegment struct) {
        return struct.get(maxComputeWorkGroupInvocations$LAYOUT, maxComputeWorkGroupInvocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupInvocations
     * }
     */
    public static void maxComputeWorkGroupInvocations(MemorySegment struct, int fieldValue) {
        struct.set(maxComputeWorkGroupInvocations$LAYOUT, maxComputeWorkGroupInvocations$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxComputeWorkGroupSize$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxComputeWorkGroupSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupSize[3]
     * }
     */
    public static final SequenceLayout maxComputeWorkGroupSize$layout() {
        return maxComputeWorkGroupSize$LAYOUT;
    }

    private static final long maxComputeWorkGroupSize$OFFSET = 236;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupSize[3]
     * }
     */
    public static final long maxComputeWorkGroupSize$offset() {
        return maxComputeWorkGroupSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupSize[3]
     * }
     */
    public static MemorySegment maxComputeWorkGroupSize(MemorySegment struct) {
        return struct.asSlice(maxComputeWorkGroupSize$OFFSET, maxComputeWorkGroupSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupSize[3]
     * }
     */
    public static void maxComputeWorkGroupSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxComputeWorkGroupSize$OFFSET, maxComputeWorkGroupSize$LAYOUT.byteSize());
    }

    private static long[] maxComputeWorkGroupSize$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupSize[3]
     * }
     */
    public static long[] maxComputeWorkGroupSize$dimensions() {
        return maxComputeWorkGroupSize$DIMS;
    }
    private static final VarHandle maxComputeWorkGroupSize$ELEM_HANDLE = maxComputeWorkGroupSize$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupSize[3]
     * }
     */
    public static int maxComputeWorkGroupSize(MemorySegment struct, long index0) {
        return (int)maxComputeWorkGroupSize$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t maxComputeWorkGroupSize[3]
     * }
     */
    public static void maxComputeWorkGroupSize(MemorySegment struct, long index0, int fieldValue) {
        maxComputeWorkGroupSize$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt subPixelPrecisionBits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subPixelPrecisionBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t subPixelPrecisionBits
     * }
     */
    public static final OfInt subPixelPrecisionBits$layout() {
        return subPixelPrecisionBits$LAYOUT;
    }

    private static final long subPixelPrecisionBits$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t subPixelPrecisionBits
     * }
     */
    public static final long subPixelPrecisionBits$offset() {
        return subPixelPrecisionBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t subPixelPrecisionBits
     * }
     */
    public static int subPixelPrecisionBits(MemorySegment struct) {
        return struct.get(subPixelPrecisionBits$LAYOUT, subPixelPrecisionBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t subPixelPrecisionBits
     * }
     */
    public static void subPixelPrecisionBits(MemorySegment struct, int fieldValue) {
        struct.set(subPixelPrecisionBits$LAYOUT, subPixelPrecisionBits$OFFSET, fieldValue);
    }

    private static final OfInt subTexelPrecisionBits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subTexelPrecisionBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t subTexelPrecisionBits
     * }
     */
    public static final OfInt subTexelPrecisionBits$layout() {
        return subTexelPrecisionBits$LAYOUT;
    }

    private static final long subTexelPrecisionBits$OFFSET = 252;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t subTexelPrecisionBits
     * }
     */
    public static final long subTexelPrecisionBits$offset() {
        return subTexelPrecisionBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t subTexelPrecisionBits
     * }
     */
    public static int subTexelPrecisionBits(MemorySegment struct) {
        return struct.get(subTexelPrecisionBits$LAYOUT, subTexelPrecisionBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t subTexelPrecisionBits
     * }
     */
    public static void subTexelPrecisionBits(MemorySegment struct, int fieldValue) {
        struct.set(subTexelPrecisionBits$LAYOUT, subTexelPrecisionBits$OFFSET, fieldValue);
    }

    private static final OfInt mipmapPrecisionBits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mipmapPrecisionBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t mipmapPrecisionBits
     * }
     */
    public static final OfInt mipmapPrecisionBits$layout() {
        return mipmapPrecisionBits$LAYOUT;
    }

    private static final long mipmapPrecisionBits$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t mipmapPrecisionBits
     * }
     */
    public static final long mipmapPrecisionBits$offset() {
        return mipmapPrecisionBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t mipmapPrecisionBits
     * }
     */
    public static int mipmapPrecisionBits(MemorySegment struct) {
        return struct.get(mipmapPrecisionBits$LAYOUT, mipmapPrecisionBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t mipmapPrecisionBits
     * }
     */
    public static void mipmapPrecisionBits(MemorySegment struct, int fieldValue) {
        struct.set(mipmapPrecisionBits$LAYOUT, mipmapPrecisionBits$OFFSET, fieldValue);
    }

    private static final OfInt maxDrawIndexedIndexValue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDrawIndexedIndexValue"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndexedIndexValue
     * }
     */
    public static final OfInt maxDrawIndexedIndexValue$layout() {
        return maxDrawIndexedIndexValue$LAYOUT;
    }

    private static final long maxDrawIndexedIndexValue$OFFSET = 260;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndexedIndexValue
     * }
     */
    public static final long maxDrawIndexedIndexValue$offset() {
        return maxDrawIndexedIndexValue$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndexedIndexValue
     * }
     */
    public static int maxDrawIndexedIndexValue(MemorySegment struct) {
        return struct.get(maxDrawIndexedIndexValue$LAYOUT, maxDrawIndexedIndexValue$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndexedIndexValue
     * }
     */
    public static void maxDrawIndexedIndexValue(MemorySegment struct, int fieldValue) {
        struct.set(maxDrawIndexedIndexValue$LAYOUT, maxDrawIndexedIndexValue$OFFSET, fieldValue);
    }

    private static final OfInt maxDrawIndirectCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDrawIndirectCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndirectCount
     * }
     */
    public static final OfInt maxDrawIndirectCount$layout() {
        return maxDrawIndirectCount$LAYOUT;
    }

    private static final long maxDrawIndirectCount$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndirectCount
     * }
     */
    public static final long maxDrawIndirectCount$offset() {
        return maxDrawIndirectCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndirectCount
     * }
     */
    public static int maxDrawIndirectCount(MemorySegment struct) {
        return struct.get(maxDrawIndirectCount$LAYOUT, maxDrawIndirectCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDrawIndirectCount
     * }
     */
    public static void maxDrawIndirectCount(MemorySegment struct, int fieldValue) {
        struct.set(maxDrawIndirectCount$LAYOUT, maxDrawIndirectCount$OFFSET, fieldValue);
    }

    private static final OfFloat maxSamplerLodBias$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxSamplerLodBias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxSamplerLodBias
     * }
     */
    public static final OfFloat maxSamplerLodBias$layout() {
        return maxSamplerLodBias$LAYOUT;
    }

    private static final long maxSamplerLodBias$OFFSET = 268;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxSamplerLodBias
     * }
     */
    public static final long maxSamplerLodBias$offset() {
        return maxSamplerLodBias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxSamplerLodBias
     * }
     */
    public static float maxSamplerLodBias(MemorySegment struct) {
        return struct.get(maxSamplerLodBias$LAYOUT, maxSamplerLodBias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxSamplerLodBias
     * }
     */
    public static void maxSamplerLodBias(MemorySegment struct, float fieldValue) {
        struct.set(maxSamplerLodBias$LAYOUT, maxSamplerLodBias$OFFSET, fieldValue);
    }

    private static final OfFloat maxSamplerAnisotropy$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxSamplerAnisotropy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxSamplerAnisotropy
     * }
     */
    public static final OfFloat maxSamplerAnisotropy$layout() {
        return maxSamplerAnisotropy$LAYOUT;
    }

    private static final long maxSamplerAnisotropy$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxSamplerAnisotropy
     * }
     */
    public static final long maxSamplerAnisotropy$offset() {
        return maxSamplerAnisotropy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxSamplerAnisotropy
     * }
     */
    public static float maxSamplerAnisotropy(MemorySegment struct) {
        return struct.get(maxSamplerAnisotropy$LAYOUT, maxSamplerAnisotropy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxSamplerAnisotropy
     * }
     */
    public static void maxSamplerAnisotropy(MemorySegment struct, float fieldValue) {
        struct.set(maxSamplerAnisotropy$LAYOUT, maxSamplerAnisotropy$OFFSET, fieldValue);
    }

    private static final OfInt maxViewports$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxViewports"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxViewports
     * }
     */
    public static final OfInt maxViewports$layout() {
        return maxViewports$LAYOUT;
    }

    private static final long maxViewports$OFFSET = 276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxViewports
     * }
     */
    public static final long maxViewports$offset() {
        return maxViewports$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxViewports
     * }
     */
    public static int maxViewports(MemorySegment struct) {
        return struct.get(maxViewports$LAYOUT, maxViewports$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxViewports
     * }
     */
    public static void maxViewports(MemorySegment struct, int fieldValue) {
        struct.set(maxViewports$LAYOUT, maxViewports$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxViewportDimensions$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxViewportDimensions"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxViewportDimensions[2]
     * }
     */
    public static final SequenceLayout maxViewportDimensions$layout() {
        return maxViewportDimensions$LAYOUT;
    }

    private static final long maxViewportDimensions$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxViewportDimensions[2]
     * }
     */
    public static final long maxViewportDimensions$offset() {
        return maxViewportDimensions$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxViewportDimensions[2]
     * }
     */
    public static MemorySegment maxViewportDimensions(MemorySegment struct) {
        return struct.asSlice(maxViewportDimensions$OFFSET, maxViewportDimensions$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxViewportDimensions[2]
     * }
     */
    public static void maxViewportDimensions(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxViewportDimensions$OFFSET, maxViewportDimensions$LAYOUT.byteSize());
    }

    private static long[] maxViewportDimensions$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t maxViewportDimensions[2]
     * }
     */
    public static long[] maxViewportDimensions$dimensions() {
        return maxViewportDimensions$DIMS;
    }
    private static final VarHandle maxViewportDimensions$ELEM_HANDLE = maxViewportDimensions$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t maxViewportDimensions[2]
     * }
     */
    public static int maxViewportDimensions(MemorySegment struct, long index0) {
        return (int)maxViewportDimensions$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t maxViewportDimensions[2]
     * }
     */
    public static void maxViewportDimensions(MemorySegment struct, long index0, int fieldValue) {
        maxViewportDimensions$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout viewportBoundsRange$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("viewportBoundsRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float viewportBoundsRange[2]
     * }
     */
    public static final SequenceLayout viewportBoundsRange$layout() {
        return viewportBoundsRange$LAYOUT;
    }

    private static final long viewportBoundsRange$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float viewportBoundsRange[2]
     * }
     */
    public static final long viewportBoundsRange$offset() {
        return viewportBoundsRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float viewportBoundsRange[2]
     * }
     */
    public static MemorySegment viewportBoundsRange(MemorySegment struct) {
        return struct.asSlice(viewportBoundsRange$OFFSET, viewportBoundsRange$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float viewportBoundsRange[2]
     * }
     */
    public static void viewportBoundsRange(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, viewportBoundsRange$OFFSET, viewportBoundsRange$LAYOUT.byteSize());
    }

    private static long[] viewportBoundsRange$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float viewportBoundsRange[2]
     * }
     */
    public static long[] viewportBoundsRange$dimensions() {
        return viewportBoundsRange$DIMS;
    }
    private static final VarHandle viewportBoundsRange$ELEM_HANDLE = viewportBoundsRange$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float viewportBoundsRange[2]
     * }
     */
    public static float viewportBoundsRange(MemorySegment struct, long index0) {
        return (float)viewportBoundsRange$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float viewportBoundsRange[2]
     * }
     */
    public static void viewportBoundsRange(MemorySegment struct, long index0, float fieldValue) {
        viewportBoundsRange$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt viewportSubPixelBits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("viewportSubPixelBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t viewportSubPixelBits
     * }
     */
    public static final OfInt viewportSubPixelBits$layout() {
        return viewportSubPixelBits$LAYOUT;
    }

    private static final long viewportSubPixelBits$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t viewportSubPixelBits
     * }
     */
    public static final long viewportSubPixelBits$offset() {
        return viewportSubPixelBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t viewportSubPixelBits
     * }
     */
    public static int viewportSubPixelBits(MemorySegment struct) {
        return struct.get(viewportSubPixelBits$LAYOUT, viewportSubPixelBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t viewportSubPixelBits
     * }
     */
    public static void viewportSubPixelBits(MemorySegment struct, int fieldValue) {
        struct.set(viewportSubPixelBits$LAYOUT, viewportSubPixelBits$OFFSET, fieldValue);
    }

    private static final OfLong minMemoryMapAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minMemoryMapAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t minMemoryMapAlignment
     * }
     */
    public static final OfLong minMemoryMapAlignment$layout() {
        return minMemoryMapAlignment$LAYOUT;
    }

    private static final long minMemoryMapAlignment$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t minMemoryMapAlignment
     * }
     */
    public static final long minMemoryMapAlignment$offset() {
        return minMemoryMapAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t minMemoryMapAlignment
     * }
     */
    public static long minMemoryMapAlignment(MemorySegment struct) {
        return struct.get(minMemoryMapAlignment$LAYOUT, minMemoryMapAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t minMemoryMapAlignment
     * }
     */
    public static void minMemoryMapAlignment(MemorySegment struct, long fieldValue) {
        struct.set(minMemoryMapAlignment$LAYOUT, minMemoryMapAlignment$OFFSET, fieldValue);
    }

    private static final OfLong minTexelBufferOffsetAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minTexelBufferOffsetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize minTexelBufferOffsetAlignment
     * }
     */
    public static final OfLong minTexelBufferOffsetAlignment$layout() {
        return minTexelBufferOffsetAlignment$LAYOUT;
    }

    private static final long minTexelBufferOffsetAlignment$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize minTexelBufferOffsetAlignment
     * }
     */
    public static final long minTexelBufferOffsetAlignment$offset() {
        return minTexelBufferOffsetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize minTexelBufferOffsetAlignment
     * }
     */
    public static long minTexelBufferOffsetAlignment(MemorySegment struct) {
        return struct.get(minTexelBufferOffsetAlignment$LAYOUT, minTexelBufferOffsetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize minTexelBufferOffsetAlignment
     * }
     */
    public static void minTexelBufferOffsetAlignment(MemorySegment struct, long fieldValue) {
        struct.set(minTexelBufferOffsetAlignment$LAYOUT, minTexelBufferOffsetAlignment$OFFSET, fieldValue);
    }

    private static final OfLong minUniformBufferOffsetAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minUniformBufferOffsetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize minUniformBufferOffsetAlignment
     * }
     */
    public static final OfLong minUniformBufferOffsetAlignment$layout() {
        return minUniformBufferOffsetAlignment$LAYOUT;
    }

    private static final long minUniformBufferOffsetAlignment$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize minUniformBufferOffsetAlignment
     * }
     */
    public static final long minUniformBufferOffsetAlignment$offset() {
        return minUniformBufferOffsetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize minUniformBufferOffsetAlignment
     * }
     */
    public static long minUniformBufferOffsetAlignment(MemorySegment struct) {
        return struct.get(minUniformBufferOffsetAlignment$LAYOUT, minUniformBufferOffsetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize minUniformBufferOffsetAlignment
     * }
     */
    public static void minUniformBufferOffsetAlignment(MemorySegment struct, long fieldValue) {
        struct.set(minUniformBufferOffsetAlignment$LAYOUT, minUniformBufferOffsetAlignment$OFFSET, fieldValue);
    }

    private static final OfLong minStorageBufferOffsetAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minStorageBufferOffsetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize minStorageBufferOffsetAlignment
     * }
     */
    public static final OfLong minStorageBufferOffsetAlignment$layout() {
        return minStorageBufferOffsetAlignment$LAYOUT;
    }

    private static final long minStorageBufferOffsetAlignment$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize minStorageBufferOffsetAlignment
     * }
     */
    public static final long minStorageBufferOffsetAlignment$offset() {
        return minStorageBufferOffsetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize minStorageBufferOffsetAlignment
     * }
     */
    public static long minStorageBufferOffsetAlignment(MemorySegment struct) {
        return struct.get(minStorageBufferOffsetAlignment$LAYOUT, minStorageBufferOffsetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize minStorageBufferOffsetAlignment
     * }
     */
    public static void minStorageBufferOffsetAlignment(MemorySegment struct, long fieldValue) {
        struct.set(minStorageBufferOffsetAlignment$LAYOUT, minStorageBufferOffsetAlignment$OFFSET, fieldValue);
    }

    private static final OfInt minTexelOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minTexelOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t minTexelOffset
     * }
     */
    public static final OfInt minTexelOffset$layout() {
        return minTexelOffset$LAYOUT;
    }

    private static final long minTexelOffset$OFFSET = 336;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t minTexelOffset
     * }
     */
    public static final long minTexelOffset$offset() {
        return minTexelOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t minTexelOffset
     * }
     */
    public static int minTexelOffset(MemorySegment struct) {
        return struct.get(minTexelOffset$LAYOUT, minTexelOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t minTexelOffset
     * }
     */
    public static void minTexelOffset(MemorySegment struct, int fieldValue) {
        struct.set(minTexelOffset$LAYOUT, minTexelOffset$OFFSET, fieldValue);
    }

    private static final OfInt maxTexelOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTexelOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTexelOffset
     * }
     */
    public static final OfInt maxTexelOffset$layout() {
        return maxTexelOffset$LAYOUT;
    }

    private static final long maxTexelOffset$OFFSET = 340;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTexelOffset
     * }
     */
    public static final long maxTexelOffset$offset() {
        return maxTexelOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTexelOffset
     * }
     */
    public static int maxTexelOffset(MemorySegment struct) {
        return struct.get(maxTexelOffset$LAYOUT, maxTexelOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTexelOffset
     * }
     */
    public static void maxTexelOffset(MemorySegment struct, int fieldValue) {
        struct.set(maxTexelOffset$LAYOUT, maxTexelOffset$OFFSET, fieldValue);
    }

    private static final OfInt minTexelGatherOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minTexelGatherOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t minTexelGatherOffset
     * }
     */
    public static final OfInt minTexelGatherOffset$layout() {
        return minTexelGatherOffset$LAYOUT;
    }

    private static final long minTexelGatherOffset$OFFSET = 344;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t minTexelGatherOffset
     * }
     */
    public static final long minTexelGatherOffset$offset() {
        return minTexelGatherOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t minTexelGatherOffset
     * }
     */
    public static int minTexelGatherOffset(MemorySegment struct) {
        return struct.get(minTexelGatherOffset$LAYOUT, minTexelGatherOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t minTexelGatherOffset
     * }
     */
    public static void minTexelGatherOffset(MemorySegment struct, int fieldValue) {
        struct.set(minTexelGatherOffset$LAYOUT, minTexelGatherOffset$OFFSET, fieldValue);
    }

    private static final OfInt maxTexelGatherOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTexelGatherOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTexelGatherOffset
     * }
     */
    public static final OfInt maxTexelGatherOffset$layout() {
        return maxTexelGatherOffset$LAYOUT;
    }

    private static final long maxTexelGatherOffset$OFFSET = 348;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTexelGatherOffset
     * }
     */
    public static final long maxTexelGatherOffset$offset() {
        return maxTexelGatherOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTexelGatherOffset
     * }
     */
    public static int maxTexelGatherOffset(MemorySegment struct) {
        return struct.get(maxTexelGatherOffset$LAYOUT, maxTexelGatherOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTexelGatherOffset
     * }
     */
    public static void maxTexelGatherOffset(MemorySegment struct, int fieldValue) {
        struct.set(maxTexelGatherOffset$LAYOUT, maxTexelGatherOffset$OFFSET, fieldValue);
    }

    private static final OfFloat minInterpolationOffset$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minInterpolationOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minInterpolationOffset
     * }
     */
    public static final OfFloat minInterpolationOffset$layout() {
        return minInterpolationOffset$LAYOUT;
    }

    private static final long minInterpolationOffset$OFFSET = 352;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minInterpolationOffset
     * }
     */
    public static final long minInterpolationOffset$offset() {
        return minInterpolationOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minInterpolationOffset
     * }
     */
    public static float minInterpolationOffset(MemorySegment struct) {
        return struct.get(minInterpolationOffset$LAYOUT, minInterpolationOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minInterpolationOffset
     * }
     */
    public static void minInterpolationOffset(MemorySegment struct, float fieldValue) {
        struct.set(minInterpolationOffset$LAYOUT, minInterpolationOffset$OFFSET, fieldValue);
    }

    private static final OfFloat maxInterpolationOffset$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxInterpolationOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxInterpolationOffset
     * }
     */
    public static final OfFloat maxInterpolationOffset$layout() {
        return maxInterpolationOffset$LAYOUT;
    }

    private static final long maxInterpolationOffset$OFFSET = 356;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxInterpolationOffset
     * }
     */
    public static final long maxInterpolationOffset$offset() {
        return maxInterpolationOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxInterpolationOffset
     * }
     */
    public static float maxInterpolationOffset(MemorySegment struct) {
        return struct.get(maxInterpolationOffset$LAYOUT, maxInterpolationOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxInterpolationOffset
     * }
     */
    public static void maxInterpolationOffset(MemorySegment struct, float fieldValue) {
        struct.set(maxInterpolationOffset$LAYOUT, maxInterpolationOffset$OFFSET, fieldValue);
    }

    private static final OfInt subPixelInterpolationOffsetBits$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subPixelInterpolationOffsetBits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t subPixelInterpolationOffsetBits
     * }
     */
    public static final OfInt subPixelInterpolationOffsetBits$layout() {
        return subPixelInterpolationOffsetBits$LAYOUT;
    }

    private static final long subPixelInterpolationOffsetBits$OFFSET = 360;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t subPixelInterpolationOffsetBits
     * }
     */
    public static final long subPixelInterpolationOffsetBits$offset() {
        return subPixelInterpolationOffsetBits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t subPixelInterpolationOffsetBits
     * }
     */
    public static int subPixelInterpolationOffsetBits(MemorySegment struct) {
        return struct.get(subPixelInterpolationOffsetBits$LAYOUT, subPixelInterpolationOffsetBits$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t subPixelInterpolationOffsetBits
     * }
     */
    public static void subPixelInterpolationOffsetBits(MemorySegment struct, int fieldValue) {
        struct.set(subPixelInterpolationOffsetBits$LAYOUT, subPixelInterpolationOffsetBits$OFFSET, fieldValue);
    }

    private static final OfInt maxFramebufferWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxFramebufferWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferWidth
     * }
     */
    public static final OfInt maxFramebufferWidth$layout() {
        return maxFramebufferWidth$LAYOUT;
    }

    private static final long maxFramebufferWidth$OFFSET = 364;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferWidth
     * }
     */
    public static final long maxFramebufferWidth$offset() {
        return maxFramebufferWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferWidth
     * }
     */
    public static int maxFramebufferWidth(MemorySegment struct) {
        return struct.get(maxFramebufferWidth$LAYOUT, maxFramebufferWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferWidth
     * }
     */
    public static void maxFramebufferWidth(MemorySegment struct, int fieldValue) {
        struct.set(maxFramebufferWidth$LAYOUT, maxFramebufferWidth$OFFSET, fieldValue);
    }

    private static final OfInt maxFramebufferHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxFramebufferHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferHeight
     * }
     */
    public static final OfInt maxFramebufferHeight$layout() {
        return maxFramebufferHeight$LAYOUT;
    }

    private static final long maxFramebufferHeight$OFFSET = 368;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferHeight
     * }
     */
    public static final long maxFramebufferHeight$offset() {
        return maxFramebufferHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferHeight
     * }
     */
    public static int maxFramebufferHeight(MemorySegment struct) {
        return struct.get(maxFramebufferHeight$LAYOUT, maxFramebufferHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferHeight
     * }
     */
    public static void maxFramebufferHeight(MemorySegment struct, int fieldValue) {
        struct.set(maxFramebufferHeight$LAYOUT, maxFramebufferHeight$OFFSET, fieldValue);
    }

    private static final OfInt maxFramebufferLayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxFramebufferLayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferLayers
     * }
     */
    public static final OfInt maxFramebufferLayers$layout() {
        return maxFramebufferLayers$LAYOUT;
    }

    private static final long maxFramebufferLayers$OFFSET = 372;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferLayers
     * }
     */
    public static final long maxFramebufferLayers$offset() {
        return maxFramebufferLayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferLayers
     * }
     */
    public static int maxFramebufferLayers(MemorySegment struct) {
        return struct.get(maxFramebufferLayers$LAYOUT, maxFramebufferLayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxFramebufferLayers
     * }
     */
    public static void maxFramebufferLayers(MemorySegment struct, int fieldValue) {
        struct.set(maxFramebufferLayers$LAYOUT, maxFramebufferLayers$OFFSET, fieldValue);
    }

    private static final OfInt framebufferColorSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("framebufferColorSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferColorSampleCounts
     * }
     */
    public static final OfInt framebufferColorSampleCounts$layout() {
        return framebufferColorSampleCounts$LAYOUT;
    }

    private static final long framebufferColorSampleCounts$OFFSET = 376;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferColorSampleCounts
     * }
     */
    public static final long framebufferColorSampleCounts$offset() {
        return framebufferColorSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferColorSampleCounts
     * }
     */
    public static int framebufferColorSampleCounts(MemorySegment struct) {
        return struct.get(framebufferColorSampleCounts$LAYOUT, framebufferColorSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferColorSampleCounts
     * }
     */
    public static void framebufferColorSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(framebufferColorSampleCounts$LAYOUT, framebufferColorSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt framebufferDepthSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("framebufferDepthSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferDepthSampleCounts
     * }
     */
    public static final OfInt framebufferDepthSampleCounts$layout() {
        return framebufferDepthSampleCounts$LAYOUT;
    }

    private static final long framebufferDepthSampleCounts$OFFSET = 380;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferDepthSampleCounts
     * }
     */
    public static final long framebufferDepthSampleCounts$offset() {
        return framebufferDepthSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferDepthSampleCounts
     * }
     */
    public static int framebufferDepthSampleCounts(MemorySegment struct) {
        return struct.get(framebufferDepthSampleCounts$LAYOUT, framebufferDepthSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferDepthSampleCounts
     * }
     */
    public static void framebufferDepthSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(framebufferDepthSampleCounts$LAYOUT, framebufferDepthSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt framebufferStencilSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("framebufferStencilSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferStencilSampleCounts
     * }
     */
    public static final OfInt framebufferStencilSampleCounts$layout() {
        return framebufferStencilSampleCounts$LAYOUT;
    }

    private static final long framebufferStencilSampleCounts$OFFSET = 384;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferStencilSampleCounts
     * }
     */
    public static final long framebufferStencilSampleCounts$offset() {
        return framebufferStencilSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferStencilSampleCounts
     * }
     */
    public static int framebufferStencilSampleCounts(MemorySegment struct) {
        return struct.get(framebufferStencilSampleCounts$LAYOUT, framebufferStencilSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferStencilSampleCounts
     * }
     */
    public static void framebufferStencilSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(framebufferStencilSampleCounts$LAYOUT, framebufferStencilSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt framebufferNoAttachmentsSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("framebufferNoAttachmentsSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferNoAttachmentsSampleCounts
     * }
     */
    public static final OfInt framebufferNoAttachmentsSampleCounts$layout() {
        return framebufferNoAttachmentsSampleCounts$LAYOUT;
    }

    private static final long framebufferNoAttachmentsSampleCounts$OFFSET = 388;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferNoAttachmentsSampleCounts
     * }
     */
    public static final long framebufferNoAttachmentsSampleCounts$offset() {
        return framebufferNoAttachmentsSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferNoAttachmentsSampleCounts
     * }
     */
    public static int framebufferNoAttachmentsSampleCounts(MemorySegment struct) {
        return struct.get(framebufferNoAttachmentsSampleCounts$LAYOUT, framebufferNoAttachmentsSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags framebufferNoAttachmentsSampleCounts
     * }
     */
    public static void framebufferNoAttachmentsSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(framebufferNoAttachmentsSampleCounts$LAYOUT, framebufferNoAttachmentsSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt maxColorAttachments$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxColorAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxColorAttachments
     * }
     */
    public static final OfInt maxColorAttachments$layout() {
        return maxColorAttachments$LAYOUT;
    }

    private static final long maxColorAttachments$OFFSET = 392;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxColorAttachments
     * }
     */
    public static final long maxColorAttachments$offset() {
        return maxColorAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxColorAttachments
     * }
     */
    public static int maxColorAttachments(MemorySegment struct) {
        return struct.get(maxColorAttachments$LAYOUT, maxColorAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxColorAttachments
     * }
     */
    public static void maxColorAttachments(MemorySegment struct, int fieldValue) {
        struct.set(maxColorAttachments$LAYOUT, maxColorAttachments$OFFSET, fieldValue);
    }

    private static final OfInt sampledImageColorSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampledImageColorSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageColorSampleCounts
     * }
     */
    public static final OfInt sampledImageColorSampleCounts$layout() {
        return sampledImageColorSampleCounts$LAYOUT;
    }

    private static final long sampledImageColorSampleCounts$OFFSET = 396;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageColorSampleCounts
     * }
     */
    public static final long sampledImageColorSampleCounts$offset() {
        return sampledImageColorSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageColorSampleCounts
     * }
     */
    public static int sampledImageColorSampleCounts(MemorySegment struct) {
        return struct.get(sampledImageColorSampleCounts$LAYOUT, sampledImageColorSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageColorSampleCounts
     * }
     */
    public static void sampledImageColorSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(sampledImageColorSampleCounts$LAYOUT, sampledImageColorSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt sampledImageIntegerSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampledImageIntegerSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageIntegerSampleCounts
     * }
     */
    public static final OfInt sampledImageIntegerSampleCounts$layout() {
        return sampledImageIntegerSampleCounts$LAYOUT;
    }

    private static final long sampledImageIntegerSampleCounts$OFFSET = 400;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageIntegerSampleCounts
     * }
     */
    public static final long sampledImageIntegerSampleCounts$offset() {
        return sampledImageIntegerSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageIntegerSampleCounts
     * }
     */
    public static int sampledImageIntegerSampleCounts(MemorySegment struct) {
        return struct.get(sampledImageIntegerSampleCounts$LAYOUT, sampledImageIntegerSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageIntegerSampleCounts
     * }
     */
    public static void sampledImageIntegerSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(sampledImageIntegerSampleCounts$LAYOUT, sampledImageIntegerSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt sampledImageDepthSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampledImageDepthSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageDepthSampleCounts
     * }
     */
    public static final OfInt sampledImageDepthSampleCounts$layout() {
        return sampledImageDepthSampleCounts$LAYOUT;
    }

    private static final long sampledImageDepthSampleCounts$OFFSET = 404;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageDepthSampleCounts
     * }
     */
    public static final long sampledImageDepthSampleCounts$offset() {
        return sampledImageDepthSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageDepthSampleCounts
     * }
     */
    public static int sampledImageDepthSampleCounts(MemorySegment struct) {
        return struct.get(sampledImageDepthSampleCounts$LAYOUT, sampledImageDepthSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageDepthSampleCounts
     * }
     */
    public static void sampledImageDepthSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(sampledImageDepthSampleCounts$LAYOUT, sampledImageDepthSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt sampledImageStencilSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampledImageStencilSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageStencilSampleCounts
     * }
     */
    public static final OfInt sampledImageStencilSampleCounts$layout() {
        return sampledImageStencilSampleCounts$LAYOUT;
    }

    private static final long sampledImageStencilSampleCounts$OFFSET = 408;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageStencilSampleCounts
     * }
     */
    public static final long sampledImageStencilSampleCounts$offset() {
        return sampledImageStencilSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageStencilSampleCounts
     * }
     */
    public static int sampledImageStencilSampleCounts(MemorySegment struct) {
        return struct.get(sampledImageStencilSampleCounts$LAYOUT, sampledImageStencilSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags sampledImageStencilSampleCounts
     * }
     */
    public static void sampledImageStencilSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(sampledImageStencilSampleCounts$LAYOUT, sampledImageStencilSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt storageImageSampleCounts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storageImageSampleCounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlags storageImageSampleCounts
     * }
     */
    public static final OfInt storageImageSampleCounts$layout() {
        return storageImageSampleCounts$LAYOUT;
    }

    private static final long storageImageSampleCounts$OFFSET = 412;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlags storageImageSampleCounts
     * }
     */
    public static final long storageImageSampleCounts$offset() {
        return storageImageSampleCounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags storageImageSampleCounts
     * }
     */
    public static int storageImageSampleCounts(MemorySegment struct) {
        return struct.get(storageImageSampleCounts$LAYOUT, storageImageSampleCounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlags storageImageSampleCounts
     * }
     */
    public static void storageImageSampleCounts(MemorySegment struct, int fieldValue) {
        struct.set(storageImageSampleCounts$LAYOUT, storageImageSampleCounts$OFFSET, fieldValue);
    }

    private static final OfInt maxSampleMaskWords$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxSampleMaskWords"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxSampleMaskWords
     * }
     */
    public static final OfInt maxSampleMaskWords$layout() {
        return maxSampleMaskWords$LAYOUT;
    }

    private static final long maxSampleMaskWords$OFFSET = 416;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxSampleMaskWords
     * }
     */
    public static final long maxSampleMaskWords$offset() {
        return maxSampleMaskWords$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxSampleMaskWords
     * }
     */
    public static int maxSampleMaskWords(MemorySegment struct) {
        return struct.get(maxSampleMaskWords$LAYOUT, maxSampleMaskWords$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxSampleMaskWords
     * }
     */
    public static void maxSampleMaskWords(MemorySegment struct, int fieldValue) {
        struct.set(maxSampleMaskWords$LAYOUT, maxSampleMaskWords$OFFSET, fieldValue);
    }

    private static final OfInt timestampComputeAndGraphics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timestampComputeAndGraphics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 timestampComputeAndGraphics
     * }
     */
    public static final OfInt timestampComputeAndGraphics$layout() {
        return timestampComputeAndGraphics$LAYOUT;
    }

    private static final long timestampComputeAndGraphics$OFFSET = 420;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 timestampComputeAndGraphics
     * }
     */
    public static final long timestampComputeAndGraphics$offset() {
        return timestampComputeAndGraphics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 timestampComputeAndGraphics
     * }
     */
    public static int timestampComputeAndGraphics(MemorySegment struct) {
        return struct.get(timestampComputeAndGraphics$LAYOUT, timestampComputeAndGraphics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 timestampComputeAndGraphics
     * }
     */
    public static void timestampComputeAndGraphics(MemorySegment struct, int fieldValue) {
        struct.set(timestampComputeAndGraphics$LAYOUT, timestampComputeAndGraphics$OFFSET, fieldValue);
    }

    private static final OfFloat timestampPeriod$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("timestampPeriod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float timestampPeriod
     * }
     */
    public static final OfFloat timestampPeriod$layout() {
        return timestampPeriod$LAYOUT;
    }

    private static final long timestampPeriod$OFFSET = 424;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float timestampPeriod
     * }
     */
    public static final long timestampPeriod$offset() {
        return timestampPeriod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float timestampPeriod
     * }
     */
    public static float timestampPeriod(MemorySegment struct) {
        return struct.get(timestampPeriod$LAYOUT, timestampPeriod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float timestampPeriod
     * }
     */
    public static void timestampPeriod(MemorySegment struct, float fieldValue) {
        struct.set(timestampPeriod$LAYOUT, timestampPeriod$OFFSET, fieldValue);
    }

    private static final OfInt maxClipDistances$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxClipDistances"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxClipDistances
     * }
     */
    public static final OfInt maxClipDistances$layout() {
        return maxClipDistances$LAYOUT;
    }

    private static final long maxClipDistances$OFFSET = 428;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxClipDistances
     * }
     */
    public static final long maxClipDistances$offset() {
        return maxClipDistances$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxClipDistances
     * }
     */
    public static int maxClipDistances(MemorySegment struct) {
        return struct.get(maxClipDistances$LAYOUT, maxClipDistances$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxClipDistances
     * }
     */
    public static void maxClipDistances(MemorySegment struct, int fieldValue) {
        struct.set(maxClipDistances$LAYOUT, maxClipDistances$OFFSET, fieldValue);
    }

    private static final OfInt maxCullDistances$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxCullDistances"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxCullDistances
     * }
     */
    public static final OfInt maxCullDistances$layout() {
        return maxCullDistances$LAYOUT;
    }

    private static final long maxCullDistances$OFFSET = 432;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxCullDistances
     * }
     */
    public static final long maxCullDistances$offset() {
        return maxCullDistances$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxCullDistances
     * }
     */
    public static int maxCullDistances(MemorySegment struct) {
        return struct.get(maxCullDistances$LAYOUT, maxCullDistances$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxCullDistances
     * }
     */
    public static void maxCullDistances(MemorySegment struct, int fieldValue) {
        struct.set(maxCullDistances$LAYOUT, maxCullDistances$OFFSET, fieldValue);
    }

    private static final OfInt maxCombinedClipAndCullDistances$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxCombinedClipAndCullDistances"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxCombinedClipAndCullDistances
     * }
     */
    public static final OfInt maxCombinedClipAndCullDistances$layout() {
        return maxCombinedClipAndCullDistances$LAYOUT;
    }

    private static final long maxCombinedClipAndCullDistances$OFFSET = 436;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxCombinedClipAndCullDistances
     * }
     */
    public static final long maxCombinedClipAndCullDistances$offset() {
        return maxCombinedClipAndCullDistances$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxCombinedClipAndCullDistances
     * }
     */
    public static int maxCombinedClipAndCullDistances(MemorySegment struct) {
        return struct.get(maxCombinedClipAndCullDistances$LAYOUT, maxCombinedClipAndCullDistances$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxCombinedClipAndCullDistances
     * }
     */
    public static void maxCombinedClipAndCullDistances(MemorySegment struct, int fieldValue) {
        struct.set(maxCombinedClipAndCullDistances$LAYOUT, maxCombinedClipAndCullDistances$OFFSET, fieldValue);
    }

    private static final OfInt discreteQueuePriorities$LAYOUT = (OfInt)$LAYOUT.select(groupElement("discreteQueuePriorities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t discreteQueuePriorities
     * }
     */
    public static final OfInt discreteQueuePriorities$layout() {
        return discreteQueuePriorities$LAYOUT;
    }

    private static final long discreteQueuePriorities$OFFSET = 440;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t discreteQueuePriorities
     * }
     */
    public static final long discreteQueuePriorities$offset() {
        return discreteQueuePriorities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t discreteQueuePriorities
     * }
     */
    public static int discreteQueuePriorities(MemorySegment struct) {
        return struct.get(discreteQueuePriorities$LAYOUT, discreteQueuePriorities$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t discreteQueuePriorities
     * }
     */
    public static void discreteQueuePriorities(MemorySegment struct, int fieldValue) {
        struct.set(discreteQueuePriorities$LAYOUT, discreteQueuePriorities$OFFSET, fieldValue);
    }

    private static final SequenceLayout pointSizeRange$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pointSizeRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float pointSizeRange[2]
     * }
     */
    public static final SequenceLayout pointSizeRange$layout() {
        return pointSizeRange$LAYOUT;
    }

    private static final long pointSizeRange$OFFSET = 444;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float pointSizeRange[2]
     * }
     */
    public static final long pointSizeRange$offset() {
        return pointSizeRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float pointSizeRange[2]
     * }
     */
    public static MemorySegment pointSizeRange(MemorySegment struct) {
        return struct.asSlice(pointSizeRange$OFFSET, pointSizeRange$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float pointSizeRange[2]
     * }
     */
    public static void pointSizeRange(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pointSizeRange$OFFSET, pointSizeRange$LAYOUT.byteSize());
    }

    private static long[] pointSizeRange$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float pointSizeRange[2]
     * }
     */
    public static long[] pointSizeRange$dimensions() {
        return pointSizeRange$DIMS;
    }
    private static final VarHandle pointSizeRange$ELEM_HANDLE = pointSizeRange$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float pointSizeRange[2]
     * }
     */
    public static float pointSizeRange(MemorySegment struct, long index0) {
        return (float)pointSizeRange$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float pointSizeRange[2]
     * }
     */
    public static void pointSizeRange(MemorySegment struct, long index0, float fieldValue) {
        pointSizeRange$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout lineWidthRange$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("lineWidthRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float lineWidthRange[2]
     * }
     */
    public static final SequenceLayout lineWidthRange$layout() {
        return lineWidthRange$LAYOUT;
    }

    private static final long lineWidthRange$OFFSET = 452;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float lineWidthRange[2]
     * }
     */
    public static final long lineWidthRange$offset() {
        return lineWidthRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float lineWidthRange[2]
     * }
     */
    public static MemorySegment lineWidthRange(MemorySegment struct) {
        return struct.asSlice(lineWidthRange$OFFSET, lineWidthRange$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float lineWidthRange[2]
     * }
     */
    public static void lineWidthRange(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, lineWidthRange$OFFSET, lineWidthRange$LAYOUT.byteSize());
    }

    private static long[] lineWidthRange$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * float lineWidthRange[2]
     * }
     */
    public static long[] lineWidthRange$dimensions() {
        return lineWidthRange$DIMS;
    }
    private static final VarHandle lineWidthRange$ELEM_HANDLE = lineWidthRange$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * float lineWidthRange[2]
     * }
     */
    public static float lineWidthRange(MemorySegment struct, long index0) {
        return (float)lineWidthRange$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * float lineWidthRange[2]
     * }
     */
    public static void lineWidthRange(MemorySegment struct, long index0, float fieldValue) {
        lineWidthRange$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfFloat pointSizeGranularity$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("pointSizeGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float pointSizeGranularity
     * }
     */
    public static final OfFloat pointSizeGranularity$layout() {
        return pointSizeGranularity$LAYOUT;
    }

    private static final long pointSizeGranularity$OFFSET = 460;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float pointSizeGranularity
     * }
     */
    public static final long pointSizeGranularity$offset() {
        return pointSizeGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float pointSizeGranularity
     * }
     */
    public static float pointSizeGranularity(MemorySegment struct) {
        return struct.get(pointSizeGranularity$LAYOUT, pointSizeGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float pointSizeGranularity
     * }
     */
    public static void pointSizeGranularity(MemorySegment struct, float fieldValue) {
        struct.set(pointSizeGranularity$LAYOUT, pointSizeGranularity$OFFSET, fieldValue);
    }

    private static final OfFloat lineWidthGranularity$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("lineWidthGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float lineWidthGranularity
     * }
     */
    public static final OfFloat lineWidthGranularity$layout() {
        return lineWidthGranularity$LAYOUT;
    }

    private static final long lineWidthGranularity$OFFSET = 464;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float lineWidthGranularity
     * }
     */
    public static final long lineWidthGranularity$offset() {
        return lineWidthGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float lineWidthGranularity
     * }
     */
    public static float lineWidthGranularity(MemorySegment struct) {
        return struct.get(lineWidthGranularity$LAYOUT, lineWidthGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float lineWidthGranularity
     * }
     */
    public static void lineWidthGranularity(MemorySegment struct, float fieldValue) {
        struct.set(lineWidthGranularity$LAYOUT, lineWidthGranularity$OFFSET, fieldValue);
    }

    private static final OfInt strictLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("strictLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 strictLines
     * }
     */
    public static final OfInt strictLines$layout() {
        return strictLines$LAYOUT;
    }

    private static final long strictLines$OFFSET = 468;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 strictLines
     * }
     */
    public static final long strictLines$offset() {
        return strictLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 strictLines
     * }
     */
    public static int strictLines(MemorySegment struct) {
        return struct.get(strictLines$LAYOUT, strictLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 strictLines
     * }
     */
    public static void strictLines(MemorySegment struct, int fieldValue) {
        struct.set(strictLines$LAYOUT, strictLines$OFFSET, fieldValue);
    }

    private static final OfInt standardSampleLocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("standardSampleLocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 standardSampleLocations
     * }
     */
    public static final OfInt standardSampleLocations$layout() {
        return standardSampleLocations$LAYOUT;
    }

    private static final long standardSampleLocations$OFFSET = 472;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 standardSampleLocations
     * }
     */
    public static final long standardSampleLocations$offset() {
        return standardSampleLocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 standardSampleLocations
     * }
     */
    public static int standardSampleLocations(MemorySegment struct) {
        return struct.get(standardSampleLocations$LAYOUT, standardSampleLocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 standardSampleLocations
     * }
     */
    public static void standardSampleLocations(MemorySegment struct, int fieldValue) {
        struct.set(standardSampleLocations$LAYOUT, standardSampleLocations$OFFSET, fieldValue);
    }

    private static final OfLong optimalBufferCopyOffsetAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("optimalBufferCopyOffsetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyOffsetAlignment
     * }
     */
    public static final OfLong optimalBufferCopyOffsetAlignment$layout() {
        return optimalBufferCopyOffsetAlignment$LAYOUT;
    }

    private static final long optimalBufferCopyOffsetAlignment$OFFSET = 480;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyOffsetAlignment
     * }
     */
    public static final long optimalBufferCopyOffsetAlignment$offset() {
        return optimalBufferCopyOffsetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyOffsetAlignment
     * }
     */
    public static long optimalBufferCopyOffsetAlignment(MemorySegment struct) {
        return struct.get(optimalBufferCopyOffsetAlignment$LAYOUT, optimalBufferCopyOffsetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyOffsetAlignment
     * }
     */
    public static void optimalBufferCopyOffsetAlignment(MemorySegment struct, long fieldValue) {
        struct.set(optimalBufferCopyOffsetAlignment$LAYOUT, optimalBufferCopyOffsetAlignment$OFFSET, fieldValue);
    }

    private static final OfLong optimalBufferCopyRowPitchAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("optimalBufferCopyRowPitchAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyRowPitchAlignment
     * }
     */
    public static final OfLong optimalBufferCopyRowPitchAlignment$layout() {
        return optimalBufferCopyRowPitchAlignment$LAYOUT;
    }

    private static final long optimalBufferCopyRowPitchAlignment$OFFSET = 488;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyRowPitchAlignment
     * }
     */
    public static final long optimalBufferCopyRowPitchAlignment$offset() {
        return optimalBufferCopyRowPitchAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyRowPitchAlignment
     * }
     */
    public static long optimalBufferCopyRowPitchAlignment(MemorySegment struct) {
        return struct.get(optimalBufferCopyRowPitchAlignment$LAYOUT, optimalBufferCopyRowPitchAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize optimalBufferCopyRowPitchAlignment
     * }
     */
    public static void optimalBufferCopyRowPitchAlignment(MemorySegment struct, long fieldValue) {
        struct.set(optimalBufferCopyRowPitchAlignment$LAYOUT, optimalBufferCopyRowPitchAlignment$OFFSET, fieldValue);
    }

    private static final OfLong nonCoherentAtomSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("nonCoherentAtomSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize nonCoherentAtomSize
     * }
     */
    public static final OfLong nonCoherentAtomSize$layout() {
        return nonCoherentAtomSize$LAYOUT;
    }

    private static final long nonCoherentAtomSize$OFFSET = 496;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize nonCoherentAtomSize
     * }
     */
    public static final long nonCoherentAtomSize$offset() {
        return nonCoherentAtomSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize nonCoherentAtomSize
     * }
     */
    public static long nonCoherentAtomSize(MemorySegment struct) {
        return struct.get(nonCoherentAtomSize$LAYOUT, nonCoherentAtomSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize nonCoherentAtomSize
     * }
     */
    public static void nonCoherentAtomSize(MemorySegment struct, long fieldValue) {
        struct.set(nonCoherentAtomSize$LAYOUT, nonCoherentAtomSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

