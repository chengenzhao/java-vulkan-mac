// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceLineRasterizationFeaturesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 rectangularLines;
 *     VkBool32 bresenhamLines;
 *     VkBool32 smoothLines;
 *     VkBool32 stippledRectangularLines;
 *     VkBool32 stippledBresenhamLines;
 *     VkBool32 stippledSmoothLines;
 * }
 * }
 */
public class VkPhysicalDeviceLineRasterizationFeaturesKHR {

    VkPhysicalDeviceLineRasterizationFeaturesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("rectangularLines"),
        vulkan_h.C_INT.withName("bresenhamLines"),
        vulkan_h.C_INT.withName("smoothLines"),
        vulkan_h.C_INT.withName("stippledRectangularLines"),
        vulkan_h.C_INT.withName("stippledBresenhamLines"),
        vulkan_h.C_INT.withName("stippledSmoothLines")
    ).withName("VkPhysicalDeviceLineRasterizationFeaturesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt rectangularLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rectangularLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 rectangularLines
     * }
     */
    public static final OfInt rectangularLines$layout() {
        return rectangularLines$LAYOUT;
    }

    private static final long rectangularLines$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 rectangularLines
     * }
     */
    public static final long rectangularLines$offset() {
        return rectangularLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 rectangularLines
     * }
     */
    public static int rectangularLines(MemorySegment struct) {
        return struct.get(rectangularLines$LAYOUT, rectangularLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 rectangularLines
     * }
     */
    public static void rectangularLines(MemorySegment struct, int fieldValue) {
        struct.set(rectangularLines$LAYOUT, rectangularLines$OFFSET, fieldValue);
    }

    private static final OfInt bresenhamLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bresenhamLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 bresenhamLines
     * }
     */
    public static final OfInt bresenhamLines$layout() {
        return bresenhamLines$LAYOUT;
    }

    private static final long bresenhamLines$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 bresenhamLines
     * }
     */
    public static final long bresenhamLines$offset() {
        return bresenhamLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 bresenhamLines
     * }
     */
    public static int bresenhamLines(MemorySegment struct) {
        return struct.get(bresenhamLines$LAYOUT, bresenhamLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 bresenhamLines
     * }
     */
    public static void bresenhamLines(MemorySegment struct, int fieldValue) {
        struct.set(bresenhamLines$LAYOUT, bresenhamLines$OFFSET, fieldValue);
    }

    private static final OfInt smoothLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("smoothLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 smoothLines
     * }
     */
    public static final OfInt smoothLines$layout() {
        return smoothLines$LAYOUT;
    }

    private static final long smoothLines$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 smoothLines
     * }
     */
    public static final long smoothLines$offset() {
        return smoothLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 smoothLines
     * }
     */
    public static int smoothLines(MemorySegment struct) {
        return struct.get(smoothLines$LAYOUT, smoothLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 smoothLines
     * }
     */
    public static void smoothLines(MemorySegment struct, int fieldValue) {
        struct.set(smoothLines$LAYOUT, smoothLines$OFFSET, fieldValue);
    }

    private static final OfInt stippledRectangularLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stippledRectangularLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 stippledRectangularLines
     * }
     */
    public static final OfInt stippledRectangularLines$layout() {
        return stippledRectangularLines$LAYOUT;
    }

    private static final long stippledRectangularLines$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 stippledRectangularLines
     * }
     */
    public static final long stippledRectangularLines$offset() {
        return stippledRectangularLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 stippledRectangularLines
     * }
     */
    public static int stippledRectangularLines(MemorySegment struct) {
        return struct.get(stippledRectangularLines$LAYOUT, stippledRectangularLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 stippledRectangularLines
     * }
     */
    public static void stippledRectangularLines(MemorySegment struct, int fieldValue) {
        struct.set(stippledRectangularLines$LAYOUT, stippledRectangularLines$OFFSET, fieldValue);
    }

    private static final OfInt stippledBresenhamLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stippledBresenhamLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 stippledBresenhamLines
     * }
     */
    public static final OfInt stippledBresenhamLines$layout() {
        return stippledBresenhamLines$LAYOUT;
    }

    private static final long stippledBresenhamLines$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 stippledBresenhamLines
     * }
     */
    public static final long stippledBresenhamLines$offset() {
        return stippledBresenhamLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 stippledBresenhamLines
     * }
     */
    public static int stippledBresenhamLines(MemorySegment struct) {
        return struct.get(stippledBresenhamLines$LAYOUT, stippledBresenhamLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 stippledBresenhamLines
     * }
     */
    public static void stippledBresenhamLines(MemorySegment struct, int fieldValue) {
        struct.set(stippledBresenhamLines$LAYOUT, stippledBresenhamLines$OFFSET, fieldValue);
    }

    private static final OfInt stippledSmoothLines$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stippledSmoothLines"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 stippledSmoothLines
     * }
     */
    public static final OfInt stippledSmoothLines$layout() {
        return stippledSmoothLines$LAYOUT;
    }

    private static final long stippledSmoothLines$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 stippledSmoothLines
     * }
     */
    public static final long stippledSmoothLines$offset() {
        return stippledSmoothLines$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 stippledSmoothLines
     * }
     */
    public static int stippledSmoothLines(MemorySegment struct) {
        return struct.get(stippledSmoothLines$LAYOUT, stippledSmoothLines$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 stippledSmoothLines
     * }
     */
    public static void stippledSmoothLines(MemorySegment struct, int fieldValue) {
        struct.set(stippledSmoothLines$LAYOUT, stippledSmoothLines$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

