// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceMaintenance5PropertiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting;
 *     VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting;
 *     VkBool32 depthStencilSwizzleOneSupport;
 *     VkBool32 polygonModePointSize;
 *     VkBool32 nonStrictSinglePixelWideLinesUseParallelogram;
 *     VkBool32 nonStrictWideLinesUseParallelogram;
 * }
 * }
 */
public class VkPhysicalDeviceMaintenance5PropertiesKHR {

    VkPhysicalDeviceMaintenance5PropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("earlyFragmentMultisampleCoverageAfterSampleCounting"),
        vulkan_h.C_INT.withName("earlyFragmentSampleMaskTestBeforeSampleCounting"),
        vulkan_h.C_INT.withName("depthStencilSwizzleOneSupport"),
        vulkan_h.C_INT.withName("polygonModePointSize"),
        vulkan_h.C_INT.withName("nonStrictSinglePixelWideLinesUseParallelogram"),
        vulkan_h.C_INT.withName("nonStrictWideLinesUseParallelogram")
    ).withName("VkPhysicalDeviceMaintenance5PropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt earlyFragmentMultisampleCoverageAfterSampleCounting$LAYOUT = (OfInt)$LAYOUT.select(groupElement("earlyFragmentMultisampleCoverageAfterSampleCounting"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting
     * }
     */
    public static final OfInt earlyFragmentMultisampleCoverageAfterSampleCounting$layout() {
        return earlyFragmentMultisampleCoverageAfterSampleCounting$LAYOUT;
    }

    private static final long earlyFragmentMultisampleCoverageAfterSampleCounting$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting
     * }
     */
    public static final long earlyFragmentMultisampleCoverageAfterSampleCounting$offset() {
        return earlyFragmentMultisampleCoverageAfterSampleCounting$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting
     * }
     */
    public static int earlyFragmentMultisampleCoverageAfterSampleCounting(MemorySegment struct) {
        return struct.get(earlyFragmentMultisampleCoverageAfterSampleCounting$LAYOUT, earlyFragmentMultisampleCoverageAfterSampleCounting$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentMultisampleCoverageAfterSampleCounting
     * }
     */
    public static void earlyFragmentMultisampleCoverageAfterSampleCounting(MemorySegment struct, int fieldValue) {
        struct.set(earlyFragmentMultisampleCoverageAfterSampleCounting$LAYOUT, earlyFragmentMultisampleCoverageAfterSampleCounting$OFFSET, fieldValue);
    }

    private static final OfInt earlyFragmentSampleMaskTestBeforeSampleCounting$LAYOUT = (OfInt)$LAYOUT.select(groupElement("earlyFragmentSampleMaskTestBeforeSampleCounting"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting
     * }
     */
    public static final OfInt earlyFragmentSampleMaskTestBeforeSampleCounting$layout() {
        return earlyFragmentSampleMaskTestBeforeSampleCounting$LAYOUT;
    }

    private static final long earlyFragmentSampleMaskTestBeforeSampleCounting$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting
     * }
     */
    public static final long earlyFragmentSampleMaskTestBeforeSampleCounting$offset() {
        return earlyFragmentSampleMaskTestBeforeSampleCounting$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting
     * }
     */
    public static int earlyFragmentSampleMaskTestBeforeSampleCounting(MemorySegment struct) {
        return struct.get(earlyFragmentSampleMaskTestBeforeSampleCounting$LAYOUT, earlyFragmentSampleMaskTestBeforeSampleCounting$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 earlyFragmentSampleMaskTestBeforeSampleCounting
     * }
     */
    public static void earlyFragmentSampleMaskTestBeforeSampleCounting(MemorySegment struct, int fieldValue) {
        struct.set(earlyFragmentSampleMaskTestBeforeSampleCounting$LAYOUT, earlyFragmentSampleMaskTestBeforeSampleCounting$OFFSET, fieldValue);
    }

    private static final OfInt depthStencilSwizzleOneSupport$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthStencilSwizzleOneSupport"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthStencilSwizzleOneSupport
     * }
     */
    public static final OfInt depthStencilSwizzleOneSupport$layout() {
        return depthStencilSwizzleOneSupport$LAYOUT;
    }

    private static final long depthStencilSwizzleOneSupport$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthStencilSwizzleOneSupport
     * }
     */
    public static final long depthStencilSwizzleOneSupport$offset() {
        return depthStencilSwizzleOneSupport$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthStencilSwizzleOneSupport
     * }
     */
    public static int depthStencilSwizzleOneSupport(MemorySegment struct) {
        return struct.get(depthStencilSwizzleOneSupport$LAYOUT, depthStencilSwizzleOneSupport$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthStencilSwizzleOneSupport
     * }
     */
    public static void depthStencilSwizzleOneSupport(MemorySegment struct, int fieldValue) {
        struct.set(depthStencilSwizzleOneSupport$LAYOUT, depthStencilSwizzleOneSupport$OFFSET, fieldValue);
    }

    private static final OfInt polygonModePointSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("polygonModePointSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 polygonModePointSize
     * }
     */
    public static final OfInt polygonModePointSize$layout() {
        return polygonModePointSize$LAYOUT;
    }

    private static final long polygonModePointSize$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 polygonModePointSize
     * }
     */
    public static final long polygonModePointSize$offset() {
        return polygonModePointSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 polygonModePointSize
     * }
     */
    public static int polygonModePointSize(MemorySegment struct) {
        return struct.get(polygonModePointSize$LAYOUT, polygonModePointSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 polygonModePointSize
     * }
     */
    public static void polygonModePointSize(MemorySegment struct, int fieldValue) {
        struct.set(polygonModePointSize$LAYOUT, polygonModePointSize$OFFSET, fieldValue);
    }

    private static final OfInt nonStrictSinglePixelWideLinesUseParallelogram$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nonStrictSinglePixelWideLinesUseParallelogram"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictSinglePixelWideLinesUseParallelogram
     * }
     */
    public static final OfInt nonStrictSinglePixelWideLinesUseParallelogram$layout() {
        return nonStrictSinglePixelWideLinesUseParallelogram$LAYOUT;
    }

    private static final long nonStrictSinglePixelWideLinesUseParallelogram$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictSinglePixelWideLinesUseParallelogram
     * }
     */
    public static final long nonStrictSinglePixelWideLinesUseParallelogram$offset() {
        return nonStrictSinglePixelWideLinesUseParallelogram$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictSinglePixelWideLinesUseParallelogram
     * }
     */
    public static int nonStrictSinglePixelWideLinesUseParallelogram(MemorySegment struct) {
        return struct.get(nonStrictSinglePixelWideLinesUseParallelogram$LAYOUT, nonStrictSinglePixelWideLinesUseParallelogram$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictSinglePixelWideLinesUseParallelogram
     * }
     */
    public static void nonStrictSinglePixelWideLinesUseParallelogram(MemorySegment struct, int fieldValue) {
        struct.set(nonStrictSinglePixelWideLinesUseParallelogram$LAYOUT, nonStrictSinglePixelWideLinesUseParallelogram$OFFSET, fieldValue);
    }

    private static final OfInt nonStrictWideLinesUseParallelogram$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nonStrictWideLinesUseParallelogram"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictWideLinesUseParallelogram
     * }
     */
    public static final OfInt nonStrictWideLinesUseParallelogram$layout() {
        return nonStrictWideLinesUseParallelogram$LAYOUT;
    }

    private static final long nonStrictWideLinesUseParallelogram$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictWideLinesUseParallelogram
     * }
     */
    public static final long nonStrictWideLinesUseParallelogram$offset() {
        return nonStrictWideLinesUseParallelogram$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictWideLinesUseParallelogram
     * }
     */
    public static int nonStrictWideLinesUseParallelogram(MemorySegment struct) {
        return struct.get(nonStrictWideLinesUseParallelogram$LAYOUT, nonStrictWideLinesUseParallelogram$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 nonStrictWideLinesUseParallelogram
     * }
     */
    public static void nonStrictWideLinesUseParallelogram(MemorySegment struct, int fieldValue) {
        struct.set(nonStrictWideLinesUseParallelogram$LAYOUT, nonStrictWideLinesUseParallelogram$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

