// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceMeshShaderFeaturesEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 taskShader;
 *     VkBool32 meshShader;
 *     VkBool32 multiviewMeshShader;
 *     VkBool32 primitiveFragmentShadingRateMeshShader;
 *     VkBool32 meshShaderQueries;
 * }
 * }
 */
public class VkPhysicalDeviceMeshShaderFeaturesEXT {

    VkPhysicalDeviceMeshShaderFeaturesEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("taskShader"),
        vulkan_h.C_INT.withName("meshShader"),
        vulkan_h.C_INT.withName("multiviewMeshShader"),
        vulkan_h.C_INT.withName("primitiveFragmentShadingRateMeshShader"),
        vulkan_h.C_INT.withName("meshShaderQueries"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceMeshShaderFeaturesEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt taskShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("taskShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 taskShader
     * }
     */
    public static final OfInt taskShader$layout() {
        return taskShader$LAYOUT;
    }

    private static final long taskShader$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 taskShader
     * }
     */
    public static final long taskShader$offset() {
        return taskShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 taskShader
     * }
     */
    public static int taskShader(MemorySegment struct) {
        return struct.get(taskShader$LAYOUT, taskShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 taskShader
     * }
     */
    public static void taskShader(MemorySegment struct, int fieldValue) {
        struct.set(taskShader$LAYOUT, taskShader$OFFSET, fieldValue);
    }

    private static final OfInt meshShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("meshShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 meshShader
     * }
     */
    public static final OfInt meshShader$layout() {
        return meshShader$LAYOUT;
    }

    private static final long meshShader$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 meshShader
     * }
     */
    public static final long meshShader$offset() {
        return meshShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 meshShader
     * }
     */
    public static int meshShader(MemorySegment struct) {
        return struct.get(meshShader$LAYOUT, meshShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 meshShader
     * }
     */
    public static void meshShader(MemorySegment struct, int fieldValue) {
        struct.set(meshShader$LAYOUT, meshShader$OFFSET, fieldValue);
    }

    private static final OfInt multiviewMeshShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiviewMeshShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 multiviewMeshShader
     * }
     */
    public static final OfInt multiviewMeshShader$layout() {
        return multiviewMeshShader$LAYOUT;
    }

    private static final long multiviewMeshShader$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 multiviewMeshShader
     * }
     */
    public static final long multiviewMeshShader$offset() {
        return multiviewMeshShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 multiviewMeshShader
     * }
     */
    public static int multiviewMeshShader(MemorySegment struct) {
        return struct.get(multiviewMeshShader$LAYOUT, multiviewMeshShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 multiviewMeshShader
     * }
     */
    public static void multiviewMeshShader(MemorySegment struct, int fieldValue) {
        struct.set(multiviewMeshShader$LAYOUT, multiviewMeshShader$OFFSET, fieldValue);
    }

    private static final OfInt primitiveFragmentShadingRateMeshShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("primitiveFragmentShadingRateMeshShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 primitiveFragmentShadingRateMeshShader
     * }
     */
    public static final OfInt primitiveFragmentShadingRateMeshShader$layout() {
        return primitiveFragmentShadingRateMeshShader$LAYOUT;
    }

    private static final long primitiveFragmentShadingRateMeshShader$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 primitiveFragmentShadingRateMeshShader
     * }
     */
    public static final long primitiveFragmentShadingRateMeshShader$offset() {
        return primitiveFragmentShadingRateMeshShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 primitiveFragmentShadingRateMeshShader
     * }
     */
    public static int primitiveFragmentShadingRateMeshShader(MemorySegment struct) {
        return struct.get(primitiveFragmentShadingRateMeshShader$LAYOUT, primitiveFragmentShadingRateMeshShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 primitiveFragmentShadingRateMeshShader
     * }
     */
    public static void primitiveFragmentShadingRateMeshShader(MemorySegment struct, int fieldValue) {
        struct.set(primitiveFragmentShadingRateMeshShader$LAYOUT, primitiveFragmentShadingRateMeshShader$OFFSET, fieldValue);
    }

    private static final OfInt meshShaderQueries$LAYOUT = (OfInt)$LAYOUT.select(groupElement("meshShaderQueries"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 meshShaderQueries
     * }
     */
    public static final OfInt meshShaderQueries$layout() {
        return meshShaderQueries$LAYOUT;
    }

    private static final long meshShaderQueries$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 meshShaderQueries
     * }
     */
    public static final long meshShaderQueries$offset() {
        return meshShaderQueries$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 meshShaderQueries
     * }
     */
    public static int meshShaderQueries(MemorySegment struct) {
        return struct.get(meshShaderQueries$LAYOUT, meshShaderQueries$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 meshShaderQueries
     * }
     */
    public static void meshShaderQueries(MemorySegment struct, int fieldValue) {
        struct.set(meshShaderQueries$LAYOUT, meshShaderQueries$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

