// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceMeshShaderPropertiesEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint32_t maxTaskWorkGroupTotalCount;
 *     uint32_t maxTaskWorkGroupCount[3];
 *     uint32_t maxTaskWorkGroupInvocations;
 *     uint32_t maxTaskWorkGroupSize[3];
 *     uint32_t maxTaskPayloadSize;
 *     uint32_t maxTaskSharedMemorySize;
 *     uint32_t maxTaskPayloadAndSharedMemorySize;
 *     uint32_t maxMeshWorkGroupTotalCount;
 *     uint32_t maxMeshWorkGroupCount[3];
 *     uint32_t maxMeshWorkGroupInvocations;
 *     uint32_t maxMeshWorkGroupSize[3];
 *     uint32_t maxMeshSharedMemorySize;
 *     uint32_t maxMeshPayloadAndSharedMemorySize;
 *     uint32_t maxMeshOutputMemorySize;
 *     uint32_t maxMeshPayloadAndOutputMemorySize;
 *     uint32_t maxMeshOutputComponents;
 *     uint32_t maxMeshOutputVertices;
 *     uint32_t maxMeshOutputPrimitives;
 *     uint32_t maxMeshOutputLayers;
 *     uint32_t maxMeshMultiviewViewCount;
 *     uint32_t meshOutputPerVertexGranularity;
 *     uint32_t meshOutputPerPrimitiveGranularity;
 *     uint32_t maxPreferredTaskWorkGroupInvocations;
 *     uint32_t maxPreferredMeshWorkGroupInvocations;
 *     VkBool32 prefersLocalInvocationVertexOutput;
 *     VkBool32 prefersLocalInvocationPrimitiveOutput;
 *     VkBool32 prefersCompactVertexOutput;
 *     VkBool32 prefersCompactPrimitiveOutput;
 * }
 * }
 */
public class VkPhysicalDeviceMeshShaderPropertiesEXT {

    VkPhysicalDeviceMeshShaderPropertiesEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("maxTaskWorkGroupTotalCount"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("maxTaskWorkGroupCount"),
        vulkan_h.C_INT.withName("maxTaskWorkGroupInvocations"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("maxTaskWorkGroupSize"),
        vulkan_h.C_INT.withName("maxTaskPayloadSize"),
        vulkan_h.C_INT.withName("maxTaskSharedMemorySize"),
        vulkan_h.C_INT.withName("maxTaskPayloadAndSharedMemorySize"),
        vulkan_h.C_INT.withName("maxMeshWorkGroupTotalCount"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("maxMeshWorkGroupCount"),
        vulkan_h.C_INT.withName("maxMeshWorkGroupInvocations"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("maxMeshWorkGroupSize"),
        vulkan_h.C_INT.withName("maxMeshSharedMemorySize"),
        vulkan_h.C_INT.withName("maxMeshPayloadAndSharedMemorySize"),
        vulkan_h.C_INT.withName("maxMeshOutputMemorySize"),
        vulkan_h.C_INT.withName("maxMeshPayloadAndOutputMemorySize"),
        vulkan_h.C_INT.withName("maxMeshOutputComponents"),
        vulkan_h.C_INT.withName("maxMeshOutputVertices"),
        vulkan_h.C_INT.withName("maxMeshOutputPrimitives"),
        vulkan_h.C_INT.withName("maxMeshOutputLayers"),
        vulkan_h.C_INT.withName("maxMeshMultiviewViewCount"),
        vulkan_h.C_INT.withName("meshOutputPerVertexGranularity"),
        vulkan_h.C_INT.withName("meshOutputPerPrimitiveGranularity"),
        vulkan_h.C_INT.withName("maxPreferredTaskWorkGroupInvocations"),
        vulkan_h.C_INT.withName("maxPreferredMeshWorkGroupInvocations"),
        vulkan_h.C_INT.withName("prefersLocalInvocationVertexOutput"),
        vulkan_h.C_INT.withName("prefersLocalInvocationPrimitiveOutput"),
        vulkan_h.C_INT.withName("prefersCompactVertexOutput"),
        vulkan_h.C_INT.withName("prefersCompactPrimitiveOutput")
    ).withName("VkPhysicalDeviceMeshShaderPropertiesEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt maxTaskWorkGroupTotalCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTaskWorkGroupTotalCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupTotalCount
     * }
     */
    public static final OfInt maxTaskWorkGroupTotalCount$layout() {
        return maxTaskWorkGroupTotalCount$LAYOUT;
    }

    private static final long maxTaskWorkGroupTotalCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupTotalCount
     * }
     */
    public static final long maxTaskWorkGroupTotalCount$offset() {
        return maxTaskWorkGroupTotalCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupTotalCount
     * }
     */
    public static int maxTaskWorkGroupTotalCount(MemorySegment struct) {
        return struct.get(maxTaskWorkGroupTotalCount$LAYOUT, maxTaskWorkGroupTotalCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupTotalCount
     * }
     */
    public static void maxTaskWorkGroupTotalCount(MemorySegment struct, int fieldValue) {
        struct.set(maxTaskWorkGroupTotalCount$LAYOUT, maxTaskWorkGroupTotalCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxTaskWorkGroupCount$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTaskWorkGroupCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupCount[3]
     * }
     */
    public static final SequenceLayout maxTaskWorkGroupCount$layout() {
        return maxTaskWorkGroupCount$LAYOUT;
    }

    private static final long maxTaskWorkGroupCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupCount[3]
     * }
     */
    public static final long maxTaskWorkGroupCount$offset() {
        return maxTaskWorkGroupCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupCount[3]
     * }
     */
    public static MemorySegment maxTaskWorkGroupCount(MemorySegment struct) {
        return struct.asSlice(maxTaskWorkGroupCount$OFFSET, maxTaskWorkGroupCount$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupCount[3]
     * }
     */
    public static void maxTaskWorkGroupCount(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTaskWorkGroupCount$OFFSET, maxTaskWorkGroupCount$LAYOUT.byteSize());
    }

    private static long[] maxTaskWorkGroupCount$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupCount[3]
     * }
     */
    public static long[] maxTaskWorkGroupCount$dimensions() {
        return maxTaskWorkGroupCount$DIMS;
    }
    private static final VarHandle maxTaskWorkGroupCount$ELEM_HANDLE = maxTaskWorkGroupCount$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupCount[3]
     * }
     */
    public static int maxTaskWorkGroupCount(MemorySegment struct, long index0) {
        return (int)maxTaskWorkGroupCount$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupCount[3]
     * }
     */
    public static void maxTaskWorkGroupCount(MemorySegment struct, long index0, int fieldValue) {
        maxTaskWorkGroupCount$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxTaskWorkGroupInvocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTaskWorkGroupInvocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupInvocations
     * }
     */
    public static final OfInt maxTaskWorkGroupInvocations$layout() {
        return maxTaskWorkGroupInvocations$LAYOUT;
    }

    private static final long maxTaskWorkGroupInvocations$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupInvocations
     * }
     */
    public static final long maxTaskWorkGroupInvocations$offset() {
        return maxTaskWorkGroupInvocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupInvocations
     * }
     */
    public static int maxTaskWorkGroupInvocations(MemorySegment struct) {
        return struct.get(maxTaskWorkGroupInvocations$LAYOUT, maxTaskWorkGroupInvocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupInvocations
     * }
     */
    public static void maxTaskWorkGroupInvocations(MemorySegment struct, int fieldValue) {
        struct.set(maxTaskWorkGroupInvocations$LAYOUT, maxTaskWorkGroupInvocations$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxTaskWorkGroupSize$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxTaskWorkGroupSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupSize[3]
     * }
     */
    public static final SequenceLayout maxTaskWorkGroupSize$layout() {
        return maxTaskWorkGroupSize$LAYOUT;
    }

    private static final long maxTaskWorkGroupSize$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupSize[3]
     * }
     */
    public static final long maxTaskWorkGroupSize$offset() {
        return maxTaskWorkGroupSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupSize[3]
     * }
     */
    public static MemorySegment maxTaskWorkGroupSize(MemorySegment struct) {
        return struct.asSlice(maxTaskWorkGroupSize$OFFSET, maxTaskWorkGroupSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupSize[3]
     * }
     */
    public static void maxTaskWorkGroupSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxTaskWorkGroupSize$OFFSET, maxTaskWorkGroupSize$LAYOUT.byteSize());
    }

    private static long[] maxTaskWorkGroupSize$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupSize[3]
     * }
     */
    public static long[] maxTaskWorkGroupSize$dimensions() {
        return maxTaskWorkGroupSize$DIMS;
    }
    private static final VarHandle maxTaskWorkGroupSize$ELEM_HANDLE = maxTaskWorkGroupSize$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupSize[3]
     * }
     */
    public static int maxTaskWorkGroupSize(MemorySegment struct, long index0) {
        return (int)maxTaskWorkGroupSize$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskWorkGroupSize[3]
     * }
     */
    public static void maxTaskWorkGroupSize(MemorySegment struct, long index0, int fieldValue) {
        maxTaskWorkGroupSize$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxTaskPayloadSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTaskPayloadSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadSize
     * }
     */
    public static final OfInt maxTaskPayloadSize$layout() {
        return maxTaskPayloadSize$LAYOUT;
    }

    private static final long maxTaskPayloadSize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadSize
     * }
     */
    public static final long maxTaskPayloadSize$offset() {
        return maxTaskPayloadSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadSize
     * }
     */
    public static int maxTaskPayloadSize(MemorySegment struct) {
        return struct.get(maxTaskPayloadSize$LAYOUT, maxTaskPayloadSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadSize
     * }
     */
    public static void maxTaskPayloadSize(MemorySegment struct, int fieldValue) {
        struct.set(maxTaskPayloadSize$LAYOUT, maxTaskPayloadSize$OFFSET, fieldValue);
    }

    private static final OfInt maxTaskSharedMemorySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTaskSharedMemorySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTaskSharedMemorySize
     * }
     */
    public static final OfInt maxTaskSharedMemorySize$layout() {
        return maxTaskSharedMemorySize$LAYOUT;
    }

    private static final long maxTaskSharedMemorySize$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTaskSharedMemorySize
     * }
     */
    public static final long maxTaskSharedMemorySize$offset() {
        return maxTaskSharedMemorySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskSharedMemorySize
     * }
     */
    public static int maxTaskSharedMemorySize(MemorySegment struct) {
        return struct.get(maxTaskSharedMemorySize$LAYOUT, maxTaskSharedMemorySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskSharedMemorySize
     * }
     */
    public static void maxTaskSharedMemorySize(MemorySegment struct, int fieldValue) {
        struct.set(maxTaskSharedMemorySize$LAYOUT, maxTaskSharedMemorySize$OFFSET, fieldValue);
    }

    private static final OfInt maxTaskPayloadAndSharedMemorySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxTaskPayloadAndSharedMemorySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadAndSharedMemorySize
     * }
     */
    public static final OfInt maxTaskPayloadAndSharedMemorySize$layout() {
        return maxTaskPayloadAndSharedMemorySize$LAYOUT;
    }

    private static final long maxTaskPayloadAndSharedMemorySize$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadAndSharedMemorySize
     * }
     */
    public static final long maxTaskPayloadAndSharedMemorySize$offset() {
        return maxTaskPayloadAndSharedMemorySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadAndSharedMemorySize
     * }
     */
    public static int maxTaskPayloadAndSharedMemorySize(MemorySegment struct) {
        return struct.get(maxTaskPayloadAndSharedMemorySize$LAYOUT, maxTaskPayloadAndSharedMemorySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxTaskPayloadAndSharedMemorySize
     * }
     */
    public static void maxTaskPayloadAndSharedMemorySize(MemorySegment struct, int fieldValue) {
        struct.set(maxTaskPayloadAndSharedMemorySize$LAYOUT, maxTaskPayloadAndSharedMemorySize$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshWorkGroupTotalCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshWorkGroupTotalCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupTotalCount
     * }
     */
    public static final OfInt maxMeshWorkGroupTotalCount$layout() {
        return maxMeshWorkGroupTotalCount$LAYOUT;
    }

    private static final long maxMeshWorkGroupTotalCount$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupTotalCount
     * }
     */
    public static final long maxMeshWorkGroupTotalCount$offset() {
        return maxMeshWorkGroupTotalCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupTotalCount
     * }
     */
    public static int maxMeshWorkGroupTotalCount(MemorySegment struct) {
        return struct.get(maxMeshWorkGroupTotalCount$LAYOUT, maxMeshWorkGroupTotalCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupTotalCount
     * }
     */
    public static void maxMeshWorkGroupTotalCount(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshWorkGroupTotalCount$LAYOUT, maxMeshWorkGroupTotalCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxMeshWorkGroupCount$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxMeshWorkGroupCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupCount[3]
     * }
     */
    public static final SequenceLayout maxMeshWorkGroupCount$layout() {
        return maxMeshWorkGroupCount$LAYOUT;
    }

    private static final long maxMeshWorkGroupCount$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupCount[3]
     * }
     */
    public static final long maxMeshWorkGroupCount$offset() {
        return maxMeshWorkGroupCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupCount[3]
     * }
     */
    public static MemorySegment maxMeshWorkGroupCount(MemorySegment struct) {
        return struct.asSlice(maxMeshWorkGroupCount$OFFSET, maxMeshWorkGroupCount$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupCount[3]
     * }
     */
    public static void maxMeshWorkGroupCount(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxMeshWorkGroupCount$OFFSET, maxMeshWorkGroupCount$LAYOUT.byteSize());
    }

    private static long[] maxMeshWorkGroupCount$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupCount[3]
     * }
     */
    public static long[] maxMeshWorkGroupCount$dimensions() {
        return maxMeshWorkGroupCount$DIMS;
    }
    private static final VarHandle maxMeshWorkGroupCount$ELEM_HANDLE = maxMeshWorkGroupCount$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupCount[3]
     * }
     */
    public static int maxMeshWorkGroupCount(MemorySegment struct, long index0) {
        return (int)maxMeshWorkGroupCount$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupCount[3]
     * }
     */
    public static void maxMeshWorkGroupCount(MemorySegment struct, long index0, int fieldValue) {
        maxMeshWorkGroupCount$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxMeshWorkGroupInvocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshWorkGroupInvocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupInvocations
     * }
     */
    public static final OfInt maxMeshWorkGroupInvocations$layout() {
        return maxMeshWorkGroupInvocations$LAYOUT;
    }

    private static final long maxMeshWorkGroupInvocations$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupInvocations
     * }
     */
    public static final long maxMeshWorkGroupInvocations$offset() {
        return maxMeshWorkGroupInvocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupInvocations
     * }
     */
    public static int maxMeshWorkGroupInvocations(MemorySegment struct) {
        return struct.get(maxMeshWorkGroupInvocations$LAYOUT, maxMeshWorkGroupInvocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupInvocations
     * }
     */
    public static void maxMeshWorkGroupInvocations(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshWorkGroupInvocations$LAYOUT, maxMeshWorkGroupInvocations$OFFSET, fieldValue);
    }

    private static final SequenceLayout maxMeshWorkGroupSize$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("maxMeshWorkGroupSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupSize[3]
     * }
     */
    public static final SequenceLayout maxMeshWorkGroupSize$layout() {
        return maxMeshWorkGroupSize$LAYOUT;
    }

    private static final long maxMeshWorkGroupSize$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupSize[3]
     * }
     */
    public static final long maxMeshWorkGroupSize$offset() {
        return maxMeshWorkGroupSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupSize[3]
     * }
     */
    public static MemorySegment maxMeshWorkGroupSize(MemorySegment struct) {
        return struct.asSlice(maxMeshWorkGroupSize$OFFSET, maxMeshWorkGroupSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupSize[3]
     * }
     */
    public static void maxMeshWorkGroupSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxMeshWorkGroupSize$OFFSET, maxMeshWorkGroupSize$LAYOUT.byteSize());
    }

    private static long[] maxMeshWorkGroupSize$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupSize[3]
     * }
     */
    public static long[] maxMeshWorkGroupSize$dimensions() {
        return maxMeshWorkGroupSize$DIMS;
    }
    private static final VarHandle maxMeshWorkGroupSize$ELEM_HANDLE = maxMeshWorkGroupSize$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupSize[3]
     * }
     */
    public static int maxMeshWorkGroupSize(MemorySegment struct, long index0) {
        return (int)maxMeshWorkGroupSize$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshWorkGroupSize[3]
     * }
     */
    public static void maxMeshWorkGroupSize(MemorySegment struct, long index0, int fieldValue) {
        maxMeshWorkGroupSize$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt maxMeshSharedMemorySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshSharedMemorySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshSharedMemorySize
     * }
     */
    public static final OfInt maxMeshSharedMemorySize$layout() {
        return maxMeshSharedMemorySize$LAYOUT;
    }

    private static final long maxMeshSharedMemorySize$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshSharedMemorySize
     * }
     */
    public static final long maxMeshSharedMemorySize$offset() {
        return maxMeshSharedMemorySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshSharedMemorySize
     * }
     */
    public static int maxMeshSharedMemorySize(MemorySegment struct) {
        return struct.get(maxMeshSharedMemorySize$LAYOUT, maxMeshSharedMemorySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshSharedMemorySize
     * }
     */
    public static void maxMeshSharedMemorySize(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshSharedMemorySize$LAYOUT, maxMeshSharedMemorySize$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshPayloadAndSharedMemorySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshPayloadAndSharedMemorySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndSharedMemorySize
     * }
     */
    public static final OfInt maxMeshPayloadAndSharedMemorySize$layout() {
        return maxMeshPayloadAndSharedMemorySize$LAYOUT;
    }

    private static final long maxMeshPayloadAndSharedMemorySize$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndSharedMemorySize
     * }
     */
    public static final long maxMeshPayloadAndSharedMemorySize$offset() {
        return maxMeshPayloadAndSharedMemorySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndSharedMemorySize
     * }
     */
    public static int maxMeshPayloadAndSharedMemorySize(MemorySegment struct) {
        return struct.get(maxMeshPayloadAndSharedMemorySize$LAYOUT, maxMeshPayloadAndSharedMemorySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndSharedMemorySize
     * }
     */
    public static void maxMeshPayloadAndSharedMemorySize(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshPayloadAndSharedMemorySize$LAYOUT, maxMeshPayloadAndSharedMemorySize$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshOutputMemorySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshOutputMemorySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputMemorySize
     * }
     */
    public static final OfInt maxMeshOutputMemorySize$layout() {
        return maxMeshOutputMemorySize$LAYOUT;
    }

    private static final long maxMeshOutputMemorySize$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputMemorySize
     * }
     */
    public static final long maxMeshOutputMemorySize$offset() {
        return maxMeshOutputMemorySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputMemorySize
     * }
     */
    public static int maxMeshOutputMemorySize(MemorySegment struct) {
        return struct.get(maxMeshOutputMemorySize$LAYOUT, maxMeshOutputMemorySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputMemorySize
     * }
     */
    public static void maxMeshOutputMemorySize(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshOutputMemorySize$LAYOUT, maxMeshOutputMemorySize$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshPayloadAndOutputMemorySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshPayloadAndOutputMemorySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndOutputMemorySize
     * }
     */
    public static final OfInt maxMeshPayloadAndOutputMemorySize$layout() {
        return maxMeshPayloadAndOutputMemorySize$LAYOUT;
    }

    private static final long maxMeshPayloadAndOutputMemorySize$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndOutputMemorySize
     * }
     */
    public static final long maxMeshPayloadAndOutputMemorySize$offset() {
        return maxMeshPayloadAndOutputMemorySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndOutputMemorySize
     * }
     */
    public static int maxMeshPayloadAndOutputMemorySize(MemorySegment struct) {
        return struct.get(maxMeshPayloadAndOutputMemorySize$LAYOUT, maxMeshPayloadAndOutputMemorySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshPayloadAndOutputMemorySize
     * }
     */
    public static void maxMeshPayloadAndOutputMemorySize(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshPayloadAndOutputMemorySize$LAYOUT, maxMeshPayloadAndOutputMemorySize$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshOutputComponents$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshOutputComponents"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputComponents
     * }
     */
    public static final OfInt maxMeshOutputComponents$layout() {
        return maxMeshOutputComponents$LAYOUT;
    }

    private static final long maxMeshOutputComponents$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputComponents
     * }
     */
    public static final long maxMeshOutputComponents$offset() {
        return maxMeshOutputComponents$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputComponents
     * }
     */
    public static int maxMeshOutputComponents(MemorySegment struct) {
        return struct.get(maxMeshOutputComponents$LAYOUT, maxMeshOutputComponents$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputComponents
     * }
     */
    public static void maxMeshOutputComponents(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshOutputComponents$LAYOUT, maxMeshOutputComponents$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshOutputVertices$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshOutputVertices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputVertices
     * }
     */
    public static final OfInt maxMeshOutputVertices$layout() {
        return maxMeshOutputVertices$LAYOUT;
    }

    private static final long maxMeshOutputVertices$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputVertices
     * }
     */
    public static final long maxMeshOutputVertices$offset() {
        return maxMeshOutputVertices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputVertices
     * }
     */
    public static int maxMeshOutputVertices(MemorySegment struct) {
        return struct.get(maxMeshOutputVertices$LAYOUT, maxMeshOutputVertices$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputVertices
     * }
     */
    public static void maxMeshOutputVertices(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshOutputVertices$LAYOUT, maxMeshOutputVertices$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshOutputPrimitives$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshOutputPrimitives"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputPrimitives
     * }
     */
    public static final OfInt maxMeshOutputPrimitives$layout() {
        return maxMeshOutputPrimitives$LAYOUT;
    }

    private static final long maxMeshOutputPrimitives$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputPrimitives
     * }
     */
    public static final long maxMeshOutputPrimitives$offset() {
        return maxMeshOutputPrimitives$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputPrimitives
     * }
     */
    public static int maxMeshOutputPrimitives(MemorySegment struct) {
        return struct.get(maxMeshOutputPrimitives$LAYOUT, maxMeshOutputPrimitives$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputPrimitives
     * }
     */
    public static void maxMeshOutputPrimitives(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshOutputPrimitives$LAYOUT, maxMeshOutputPrimitives$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshOutputLayers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshOutputLayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputLayers
     * }
     */
    public static final OfInt maxMeshOutputLayers$layout() {
        return maxMeshOutputLayers$LAYOUT;
    }

    private static final long maxMeshOutputLayers$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputLayers
     * }
     */
    public static final long maxMeshOutputLayers$offset() {
        return maxMeshOutputLayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputLayers
     * }
     */
    public static int maxMeshOutputLayers(MemorySegment struct) {
        return struct.get(maxMeshOutputLayers$LAYOUT, maxMeshOutputLayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshOutputLayers
     * }
     */
    public static void maxMeshOutputLayers(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshOutputLayers$LAYOUT, maxMeshOutputLayers$OFFSET, fieldValue);
    }

    private static final OfInt maxMeshMultiviewViewCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxMeshMultiviewViewCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxMeshMultiviewViewCount
     * }
     */
    public static final OfInt maxMeshMultiviewViewCount$layout() {
        return maxMeshMultiviewViewCount$LAYOUT;
    }

    private static final long maxMeshMultiviewViewCount$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxMeshMultiviewViewCount
     * }
     */
    public static final long maxMeshMultiviewViewCount$offset() {
        return maxMeshMultiviewViewCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshMultiviewViewCount
     * }
     */
    public static int maxMeshMultiviewViewCount(MemorySegment struct) {
        return struct.get(maxMeshMultiviewViewCount$LAYOUT, maxMeshMultiviewViewCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxMeshMultiviewViewCount
     * }
     */
    public static void maxMeshMultiviewViewCount(MemorySegment struct, int fieldValue) {
        struct.set(maxMeshMultiviewViewCount$LAYOUT, maxMeshMultiviewViewCount$OFFSET, fieldValue);
    }

    private static final OfInt meshOutputPerVertexGranularity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("meshOutputPerVertexGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerVertexGranularity
     * }
     */
    public static final OfInt meshOutputPerVertexGranularity$layout() {
        return meshOutputPerVertexGranularity$LAYOUT;
    }

    private static final long meshOutputPerVertexGranularity$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerVertexGranularity
     * }
     */
    public static final long meshOutputPerVertexGranularity$offset() {
        return meshOutputPerVertexGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerVertexGranularity
     * }
     */
    public static int meshOutputPerVertexGranularity(MemorySegment struct) {
        return struct.get(meshOutputPerVertexGranularity$LAYOUT, meshOutputPerVertexGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerVertexGranularity
     * }
     */
    public static void meshOutputPerVertexGranularity(MemorySegment struct, int fieldValue) {
        struct.set(meshOutputPerVertexGranularity$LAYOUT, meshOutputPerVertexGranularity$OFFSET, fieldValue);
    }

    private static final OfInt meshOutputPerPrimitiveGranularity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("meshOutputPerPrimitiveGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerPrimitiveGranularity
     * }
     */
    public static final OfInt meshOutputPerPrimitiveGranularity$layout() {
        return meshOutputPerPrimitiveGranularity$LAYOUT;
    }

    private static final long meshOutputPerPrimitiveGranularity$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerPrimitiveGranularity
     * }
     */
    public static final long meshOutputPerPrimitiveGranularity$offset() {
        return meshOutputPerPrimitiveGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerPrimitiveGranularity
     * }
     */
    public static int meshOutputPerPrimitiveGranularity(MemorySegment struct) {
        return struct.get(meshOutputPerPrimitiveGranularity$LAYOUT, meshOutputPerPrimitiveGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t meshOutputPerPrimitiveGranularity
     * }
     */
    public static void meshOutputPerPrimitiveGranularity(MemorySegment struct, int fieldValue) {
        struct.set(meshOutputPerPrimitiveGranularity$LAYOUT, meshOutputPerPrimitiveGranularity$OFFSET, fieldValue);
    }

    private static final OfInt maxPreferredTaskWorkGroupInvocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPreferredTaskWorkGroupInvocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredTaskWorkGroupInvocations
     * }
     */
    public static final OfInt maxPreferredTaskWorkGroupInvocations$layout() {
        return maxPreferredTaskWorkGroupInvocations$LAYOUT;
    }

    private static final long maxPreferredTaskWorkGroupInvocations$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredTaskWorkGroupInvocations
     * }
     */
    public static final long maxPreferredTaskWorkGroupInvocations$offset() {
        return maxPreferredTaskWorkGroupInvocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredTaskWorkGroupInvocations
     * }
     */
    public static int maxPreferredTaskWorkGroupInvocations(MemorySegment struct) {
        return struct.get(maxPreferredTaskWorkGroupInvocations$LAYOUT, maxPreferredTaskWorkGroupInvocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredTaskWorkGroupInvocations
     * }
     */
    public static void maxPreferredTaskWorkGroupInvocations(MemorySegment struct, int fieldValue) {
        struct.set(maxPreferredTaskWorkGroupInvocations$LAYOUT, maxPreferredTaskWorkGroupInvocations$OFFSET, fieldValue);
    }

    private static final OfInt maxPreferredMeshWorkGroupInvocations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxPreferredMeshWorkGroupInvocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredMeshWorkGroupInvocations
     * }
     */
    public static final OfInt maxPreferredMeshWorkGroupInvocations$layout() {
        return maxPreferredMeshWorkGroupInvocations$LAYOUT;
    }

    private static final long maxPreferredMeshWorkGroupInvocations$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredMeshWorkGroupInvocations
     * }
     */
    public static final long maxPreferredMeshWorkGroupInvocations$offset() {
        return maxPreferredMeshWorkGroupInvocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredMeshWorkGroupInvocations
     * }
     */
    public static int maxPreferredMeshWorkGroupInvocations(MemorySegment struct) {
        return struct.get(maxPreferredMeshWorkGroupInvocations$LAYOUT, maxPreferredMeshWorkGroupInvocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxPreferredMeshWorkGroupInvocations
     * }
     */
    public static void maxPreferredMeshWorkGroupInvocations(MemorySegment struct, int fieldValue) {
        struct.set(maxPreferredMeshWorkGroupInvocations$LAYOUT, maxPreferredMeshWorkGroupInvocations$OFFSET, fieldValue);
    }

    private static final OfInt prefersLocalInvocationVertexOutput$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prefersLocalInvocationVertexOutput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationVertexOutput
     * }
     */
    public static final OfInt prefersLocalInvocationVertexOutput$layout() {
        return prefersLocalInvocationVertexOutput$LAYOUT;
    }

    private static final long prefersLocalInvocationVertexOutput$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationVertexOutput
     * }
     */
    public static final long prefersLocalInvocationVertexOutput$offset() {
        return prefersLocalInvocationVertexOutput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationVertexOutput
     * }
     */
    public static int prefersLocalInvocationVertexOutput(MemorySegment struct) {
        return struct.get(prefersLocalInvocationVertexOutput$LAYOUT, prefersLocalInvocationVertexOutput$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationVertexOutput
     * }
     */
    public static void prefersLocalInvocationVertexOutput(MemorySegment struct, int fieldValue) {
        struct.set(prefersLocalInvocationVertexOutput$LAYOUT, prefersLocalInvocationVertexOutput$OFFSET, fieldValue);
    }

    private static final OfInt prefersLocalInvocationPrimitiveOutput$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prefersLocalInvocationPrimitiveOutput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationPrimitiveOutput
     * }
     */
    public static final OfInt prefersLocalInvocationPrimitiveOutput$layout() {
        return prefersLocalInvocationPrimitiveOutput$LAYOUT;
    }

    private static final long prefersLocalInvocationPrimitiveOutput$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationPrimitiveOutput
     * }
     */
    public static final long prefersLocalInvocationPrimitiveOutput$offset() {
        return prefersLocalInvocationPrimitiveOutput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationPrimitiveOutput
     * }
     */
    public static int prefersLocalInvocationPrimitiveOutput(MemorySegment struct) {
        return struct.get(prefersLocalInvocationPrimitiveOutput$LAYOUT, prefersLocalInvocationPrimitiveOutput$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 prefersLocalInvocationPrimitiveOutput
     * }
     */
    public static void prefersLocalInvocationPrimitiveOutput(MemorySegment struct, int fieldValue) {
        struct.set(prefersLocalInvocationPrimitiveOutput$LAYOUT, prefersLocalInvocationPrimitiveOutput$OFFSET, fieldValue);
    }

    private static final OfInt prefersCompactVertexOutput$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prefersCompactVertexOutput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactVertexOutput
     * }
     */
    public static final OfInt prefersCompactVertexOutput$layout() {
        return prefersCompactVertexOutput$LAYOUT;
    }

    private static final long prefersCompactVertexOutput$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactVertexOutput
     * }
     */
    public static final long prefersCompactVertexOutput$offset() {
        return prefersCompactVertexOutput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactVertexOutput
     * }
     */
    public static int prefersCompactVertexOutput(MemorySegment struct) {
        return struct.get(prefersCompactVertexOutput$LAYOUT, prefersCompactVertexOutput$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactVertexOutput
     * }
     */
    public static void prefersCompactVertexOutput(MemorySegment struct, int fieldValue) {
        struct.set(prefersCompactVertexOutput$LAYOUT, prefersCompactVertexOutput$OFFSET, fieldValue);
    }

    private static final OfInt prefersCompactPrimitiveOutput$LAYOUT = (OfInt)$LAYOUT.select(groupElement("prefersCompactPrimitiveOutput"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactPrimitiveOutput
     * }
     */
    public static final OfInt prefersCompactPrimitiveOutput$layout() {
        return prefersCompactPrimitiveOutput$LAYOUT;
    }

    private static final long prefersCompactPrimitiveOutput$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactPrimitiveOutput
     * }
     */
    public static final long prefersCompactPrimitiveOutput$offset() {
        return prefersCompactPrimitiveOutput$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactPrimitiveOutput
     * }
     */
    public static int prefersCompactPrimitiveOutput(MemorySegment struct) {
        return struct.get(prefersCompactPrimitiveOutput$LAYOUT, prefersCompactPrimitiveOutput$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 prefersCompactPrimitiveOutput
     * }
     */
    public static void prefersCompactPrimitiveOutput(MemorySegment struct, int fieldValue) {
        struct.set(prefersCompactPrimitiveOutput$LAYOUT, prefersCompactPrimitiveOutput$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

