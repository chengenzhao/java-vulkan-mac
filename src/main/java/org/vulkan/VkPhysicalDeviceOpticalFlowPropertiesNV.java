// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceOpticalFlowPropertiesNV {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
 *     VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
 *     VkBool32 hintSupported;
 *     VkBool32 costSupported;
 *     VkBool32 bidirectionalFlowSupported;
 *     VkBool32 globalFlowSupported;
 *     uint32_t minWidth;
 *     uint32_t minHeight;
 *     uint32_t maxWidth;
 *     uint32_t maxHeight;
 *     uint32_t maxNumRegionsOfInterest;
 * }
 * }
 */
public class VkPhysicalDeviceOpticalFlowPropertiesNV {

    VkPhysicalDeviceOpticalFlowPropertiesNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("supportedOutputGridSizes"),
        vulkan_h.C_INT.withName("supportedHintGridSizes"),
        vulkan_h.C_INT.withName("hintSupported"),
        vulkan_h.C_INT.withName("costSupported"),
        vulkan_h.C_INT.withName("bidirectionalFlowSupported"),
        vulkan_h.C_INT.withName("globalFlowSupported"),
        vulkan_h.C_INT.withName("minWidth"),
        vulkan_h.C_INT.withName("minHeight"),
        vulkan_h.C_INT.withName("maxWidth"),
        vulkan_h.C_INT.withName("maxHeight"),
        vulkan_h.C_INT.withName("maxNumRegionsOfInterest"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceOpticalFlowPropertiesNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt supportedOutputGridSizes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("supportedOutputGridSizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes
     * }
     */
    public static final OfInt supportedOutputGridSizes$layout() {
        return supportedOutputGridSizes$LAYOUT;
    }

    private static final long supportedOutputGridSizes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes
     * }
     */
    public static final long supportedOutputGridSizes$offset() {
        return supportedOutputGridSizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes
     * }
     */
    public static int supportedOutputGridSizes(MemorySegment struct) {
        return struct.get(supportedOutputGridSizes$LAYOUT, supportedOutputGridSizes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes
     * }
     */
    public static void supportedOutputGridSizes(MemorySegment struct, int fieldValue) {
        struct.set(supportedOutputGridSizes$LAYOUT, supportedOutputGridSizes$OFFSET, fieldValue);
    }

    private static final OfInt supportedHintGridSizes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("supportedHintGridSizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes
     * }
     */
    public static final OfInt supportedHintGridSizes$layout() {
        return supportedHintGridSizes$LAYOUT;
    }

    private static final long supportedHintGridSizes$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes
     * }
     */
    public static final long supportedHintGridSizes$offset() {
        return supportedHintGridSizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes
     * }
     */
    public static int supportedHintGridSizes(MemorySegment struct) {
        return struct.get(supportedHintGridSizes$LAYOUT, supportedHintGridSizes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes
     * }
     */
    public static void supportedHintGridSizes(MemorySegment struct, int fieldValue) {
        struct.set(supportedHintGridSizes$LAYOUT, supportedHintGridSizes$OFFSET, fieldValue);
    }

    private static final OfInt hintSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hintSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 hintSupported
     * }
     */
    public static final OfInt hintSupported$layout() {
        return hintSupported$LAYOUT;
    }

    private static final long hintSupported$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 hintSupported
     * }
     */
    public static final long hintSupported$offset() {
        return hintSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 hintSupported
     * }
     */
    public static int hintSupported(MemorySegment struct) {
        return struct.get(hintSupported$LAYOUT, hintSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 hintSupported
     * }
     */
    public static void hintSupported(MemorySegment struct, int fieldValue) {
        struct.set(hintSupported$LAYOUT, hintSupported$OFFSET, fieldValue);
    }

    private static final OfInt costSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("costSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 costSupported
     * }
     */
    public static final OfInt costSupported$layout() {
        return costSupported$LAYOUT;
    }

    private static final long costSupported$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 costSupported
     * }
     */
    public static final long costSupported$offset() {
        return costSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 costSupported
     * }
     */
    public static int costSupported(MemorySegment struct) {
        return struct.get(costSupported$LAYOUT, costSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 costSupported
     * }
     */
    public static void costSupported(MemorySegment struct, int fieldValue) {
        struct.set(costSupported$LAYOUT, costSupported$OFFSET, fieldValue);
    }

    private static final OfInt bidirectionalFlowSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bidirectionalFlowSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 bidirectionalFlowSupported
     * }
     */
    public static final OfInt bidirectionalFlowSupported$layout() {
        return bidirectionalFlowSupported$LAYOUT;
    }

    private static final long bidirectionalFlowSupported$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 bidirectionalFlowSupported
     * }
     */
    public static final long bidirectionalFlowSupported$offset() {
        return bidirectionalFlowSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 bidirectionalFlowSupported
     * }
     */
    public static int bidirectionalFlowSupported(MemorySegment struct) {
        return struct.get(bidirectionalFlowSupported$LAYOUT, bidirectionalFlowSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 bidirectionalFlowSupported
     * }
     */
    public static void bidirectionalFlowSupported(MemorySegment struct, int fieldValue) {
        struct.set(bidirectionalFlowSupported$LAYOUT, bidirectionalFlowSupported$OFFSET, fieldValue);
    }

    private static final OfInt globalFlowSupported$LAYOUT = (OfInt)$LAYOUT.select(groupElement("globalFlowSupported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 globalFlowSupported
     * }
     */
    public static final OfInt globalFlowSupported$layout() {
        return globalFlowSupported$LAYOUT;
    }

    private static final long globalFlowSupported$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 globalFlowSupported
     * }
     */
    public static final long globalFlowSupported$offset() {
        return globalFlowSupported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 globalFlowSupported
     * }
     */
    public static int globalFlowSupported(MemorySegment struct) {
        return struct.get(globalFlowSupported$LAYOUT, globalFlowSupported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 globalFlowSupported
     * }
     */
    public static void globalFlowSupported(MemorySegment struct, int fieldValue) {
        struct.set(globalFlowSupported$LAYOUT, globalFlowSupported$OFFSET, fieldValue);
    }

    private static final OfInt minWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t minWidth
     * }
     */
    public static final OfInt minWidth$layout() {
        return minWidth$LAYOUT;
    }

    private static final long minWidth$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t minWidth
     * }
     */
    public static final long minWidth$offset() {
        return minWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t minWidth
     * }
     */
    public static int minWidth(MemorySegment struct) {
        return struct.get(minWidth$LAYOUT, minWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t minWidth
     * }
     */
    public static void minWidth(MemorySegment struct, int fieldValue) {
        struct.set(minWidth$LAYOUT, minWidth$OFFSET, fieldValue);
    }

    private static final OfInt minHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t minHeight
     * }
     */
    public static final OfInt minHeight$layout() {
        return minHeight$LAYOUT;
    }

    private static final long minHeight$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t minHeight
     * }
     */
    public static final long minHeight$offset() {
        return minHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t minHeight
     * }
     */
    public static int minHeight(MemorySegment struct) {
        return struct.get(minHeight$LAYOUT, minHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t minHeight
     * }
     */
    public static void minHeight(MemorySegment struct, int fieldValue) {
        struct.set(minHeight$LAYOUT, minHeight$OFFSET, fieldValue);
    }

    private static final OfInt maxWidth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxWidth
     * }
     */
    public static final OfInt maxWidth$layout() {
        return maxWidth$LAYOUT;
    }

    private static final long maxWidth$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxWidth
     * }
     */
    public static final long maxWidth$offset() {
        return maxWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxWidth
     * }
     */
    public static int maxWidth(MemorySegment struct) {
        return struct.get(maxWidth$LAYOUT, maxWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxWidth
     * }
     */
    public static void maxWidth(MemorySegment struct, int fieldValue) {
        struct.set(maxWidth$LAYOUT, maxWidth$OFFSET, fieldValue);
    }

    private static final OfInt maxHeight$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxHeight"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxHeight
     * }
     */
    public static final OfInt maxHeight$layout() {
        return maxHeight$LAYOUT;
    }

    private static final long maxHeight$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxHeight
     * }
     */
    public static final long maxHeight$offset() {
        return maxHeight$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxHeight
     * }
     */
    public static int maxHeight(MemorySegment struct) {
        return struct.get(maxHeight$LAYOUT, maxHeight$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxHeight
     * }
     */
    public static void maxHeight(MemorySegment struct, int fieldValue) {
        struct.set(maxHeight$LAYOUT, maxHeight$OFFSET, fieldValue);
    }

    private static final OfInt maxNumRegionsOfInterest$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxNumRegionsOfInterest"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxNumRegionsOfInterest
     * }
     */
    public static final OfInt maxNumRegionsOfInterest$layout() {
        return maxNumRegionsOfInterest$LAYOUT;
    }

    private static final long maxNumRegionsOfInterest$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxNumRegionsOfInterest
     * }
     */
    public static final long maxNumRegionsOfInterest$offset() {
        return maxNumRegionsOfInterest$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxNumRegionsOfInterest
     * }
     */
    public static int maxNumRegionsOfInterest(MemorySegment struct) {
        return struct.get(maxNumRegionsOfInterest$LAYOUT, maxNumRegionsOfInterest$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxNumRegionsOfInterest
     * }
     */
    public static void maxNumRegionsOfInterest(MemorySegment struct, int fieldValue) {
        struct.set(maxNumRegionsOfInterest$LAYOUT, maxNumRegionsOfInterest$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

