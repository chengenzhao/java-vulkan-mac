// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceProperties {
 *     uint32_t apiVersion;
 *     uint32_t driverVersion;
 *     uint32_t vendorID;
 *     uint32_t deviceID;
 *     VkPhysicalDeviceType deviceType;
 *     char deviceName[256];
 *     uint8_t pipelineCacheUUID[16];
 *     VkPhysicalDeviceLimits limits;
 *     VkPhysicalDeviceSparseProperties sparseProperties;
 * }
 * }
 */
public class VkPhysicalDeviceProperties {

    VkPhysicalDeviceProperties() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("apiVersion"),
        vulkan_h.C_INT.withName("driverVersion"),
        vulkan_h.C_INT.withName("vendorID"),
        vulkan_h.C_INT.withName("deviceID"),
        vulkan_h.C_INT.withName("deviceType"),
        MemoryLayout.sequenceLayout(256, vulkan_h.C_CHAR).withName("deviceName"),
        MemoryLayout.sequenceLayout(16, vulkan_h.C_CHAR).withName("pipelineCacheUUID"),
        MemoryLayout.paddingLayout(4),
        VkPhysicalDeviceLimits.layout().withName("limits"),
        VkPhysicalDeviceSparseProperties.layout().withName("sparseProperties"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceProperties");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt apiVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("apiVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static final OfInt apiVersion$layout() {
        return apiVersion$LAYOUT;
    }

    private static final long apiVersion$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static final long apiVersion$offset() {
        return apiVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static int apiVersion(MemorySegment struct) {
        return struct.get(apiVersion$LAYOUT, apiVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t apiVersion
     * }
     */
    public static void apiVersion(MemorySegment struct, int fieldValue) {
        struct.set(apiVersion$LAYOUT, apiVersion$OFFSET, fieldValue);
    }

    private static final OfInt driverVersion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("driverVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static final OfInt driverVersion$layout() {
        return driverVersion$LAYOUT;
    }

    private static final long driverVersion$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static final long driverVersion$offset() {
        return driverVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static int driverVersion(MemorySegment struct) {
        return struct.get(driverVersion$LAYOUT, driverVersion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t driverVersion
     * }
     */
    public static void driverVersion(MemorySegment struct, int fieldValue) {
        struct.set(driverVersion$LAYOUT, driverVersion$OFFSET, fieldValue);
    }

    private static final OfInt vendorID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vendorID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static final OfInt vendorID$layout() {
        return vendorID$LAYOUT;
    }

    private static final long vendorID$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static final long vendorID$offset() {
        return vendorID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static int vendorID(MemorySegment struct) {
        return struct.get(vendorID$LAYOUT, vendorID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vendorID
     * }
     */
    public static void vendorID(MemorySegment struct, int fieldValue) {
        struct.set(vendorID$LAYOUT, vendorID$OFFSET, fieldValue);
    }

    private static final OfInt deviceID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deviceID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static final OfInt deviceID$layout() {
        return deviceID$LAYOUT;
    }

    private static final long deviceID$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static final long deviceID$offset() {
        return deviceID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static int deviceID(MemorySegment struct) {
        return struct.get(deviceID$LAYOUT, deviceID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t deviceID
     * }
     */
    public static void deviceID(MemorySegment struct, int fieldValue) {
        struct.set(deviceID$LAYOUT, deviceID$OFFSET, fieldValue);
    }

    private static final OfInt deviceType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("deviceType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceType deviceType
     * }
     */
    public static final OfInt deviceType$layout() {
        return deviceType$LAYOUT;
    }

    private static final long deviceType$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceType deviceType
     * }
     */
    public static final long deviceType$offset() {
        return deviceType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceType deviceType
     * }
     */
    public static int deviceType(MemorySegment struct) {
        return struct.get(deviceType$LAYOUT, deviceType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceType deviceType
     * }
     */
    public static void deviceType(MemorySegment struct, int fieldValue) {
        struct.set(deviceType$LAYOUT, deviceType$OFFSET, fieldValue);
    }

    private static final SequenceLayout deviceName$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("deviceName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char deviceName[256]
     * }
     */
    public static final SequenceLayout deviceName$layout() {
        return deviceName$LAYOUT;
    }

    private static final long deviceName$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char deviceName[256]
     * }
     */
    public static final long deviceName$offset() {
        return deviceName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char deviceName[256]
     * }
     */
    public static MemorySegment deviceName(MemorySegment struct) {
        return struct.asSlice(deviceName$OFFSET, deviceName$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char deviceName[256]
     * }
     */
    public static void deviceName(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, deviceName$OFFSET, deviceName$LAYOUT.byteSize());
    }

    private static long[] deviceName$DIMS = { 256 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char deviceName[256]
     * }
     */
    public static long[] deviceName$dimensions() {
        return deviceName$DIMS;
    }
    private static final VarHandle deviceName$ELEM_HANDLE = deviceName$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char deviceName[256]
     * }
     */
    public static byte deviceName(MemorySegment struct, long index0) {
        return (byte)deviceName$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char deviceName[256]
     * }
     */
    public static void deviceName(MemorySegment struct, long index0, byte fieldValue) {
        deviceName$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final SequenceLayout pipelineCacheUUID$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("pipelineCacheUUID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static final SequenceLayout pipelineCacheUUID$layout() {
        return pipelineCacheUUID$LAYOUT;
    }

    private static final long pipelineCacheUUID$OFFSET = 276;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static final long pipelineCacheUUID$offset() {
        return pipelineCacheUUID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static MemorySegment pipelineCacheUUID(MemorySegment struct) {
        return struct.asSlice(pipelineCacheUUID$OFFSET, pipelineCacheUUID$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static void pipelineCacheUUID(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pipelineCacheUUID$OFFSET, pipelineCacheUUID$LAYOUT.byteSize());
    }

    private static long[] pipelineCacheUUID$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static long[] pipelineCacheUUID$dimensions() {
        return pipelineCacheUUID$DIMS;
    }
    private static final VarHandle pipelineCacheUUID$ELEM_HANDLE = pipelineCacheUUID$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static byte pipelineCacheUUID(MemorySegment struct, long index0) {
        return (byte)pipelineCacheUUID$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint8_t pipelineCacheUUID[16]
     * }
     */
    public static void pipelineCacheUUID(MemorySegment struct, long index0, byte fieldValue) {
        pipelineCacheUUID$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout limits$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("limits"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceLimits limits
     * }
     */
    public static final GroupLayout limits$layout() {
        return limits$LAYOUT;
    }

    private static final long limits$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceLimits limits
     * }
     */
    public static final long limits$offset() {
        return limits$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceLimits limits
     * }
     */
    public static MemorySegment limits(MemorySegment struct) {
        return struct.asSlice(limits$OFFSET, limits$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceLimits limits
     * }
     */
    public static void limits(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, limits$OFFSET, limits$LAYOUT.byteSize());
    }

    private static final GroupLayout sparseProperties$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sparseProperties"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceSparseProperties sparseProperties
     * }
     */
    public static final GroupLayout sparseProperties$layout() {
        return sparseProperties$LAYOUT;
    }

    private static final long sparseProperties$OFFSET = 800;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceSparseProperties sparseProperties
     * }
     */
    public static final long sparseProperties$offset() {
        return sparseProperties$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceSparseProperties sparseProperties
     * }
     */
    public static MemorySegment sparseProperties(MemorySegment struct) {
        return struct.asSlice(sparseProperties$OFFSET, sparseProperties$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPhysicalDeviceSparseProperties sparseProperties
     * }
     */
    public static void sparseProperties(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sparseProperties$OFFSET, sparseProperties$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

