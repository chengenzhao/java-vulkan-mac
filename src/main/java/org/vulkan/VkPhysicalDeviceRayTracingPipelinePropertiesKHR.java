// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint32_t shaderGroupHandleSize;
 *     uint32_t maxRayRecursionDepth;
 *     uint32_t maxShaderGroupStride;
 *     uint32_t shaderGroupBaseAlignment;
 *     uint32_t shaderGroupHandleCaptureReplaySize;
 *     uint32_t maxRayDispatchInvocationCount;
 *     uint32_t shaderGroupHandleAlignment;
 *     uint32_t maxRayHitAttributeSize;
 * }
 * }
 */
public class VkPhysicalDeviceRayTracingPipelinePropertiesKHR {

    VkPhysicalDeviceRayTracingPipelinePropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("shaderGroupHandleSize"),
        vulkan_h.C_INT.withName("maxRayRecursionDepth"),
        vulkan_h.C_INT.withName("maxShaderGroupStride"),
        vulkan_h.C_INT.withName("shaderGroupBaseAlignment"),
        vulkan_h.C_INT.withName("shaderGroupHandleCaptureReplaySize"),
        vulkan_h.C_INT.withName("maxRayDispatchInvocationCount"),
        vulkan_h.C_INT.withName("shaderGroupHandleAlignment"),
        vulkan_h.C_INT.withName("maxRayHitAttributeSize")
    ).withName("VkPhysicalDeviceRayTracingPipelinePropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt shaderGroupHandleSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderGroupHandleSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleSize
     * }
     */
    public static final OfInt shaderGroupHandleSize$layout() {
        return shaderGroupHandleSize$LAYOUT;
    }

    private static final long shaderGroupHandleSize$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleSize
     * }
     */
    public static final long shaderGroupHandleSize$offset() {
        return shaderGroupHandleSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleSize
     * }
     */
    public static int shaderGroupHandleSize(MemorySegment struct) {
        return struct.get(shaderGroupHandleSize$LAYOUT, shaderGroupHandleSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleSize
     * }
     */
    public static void shaderGroupHandleSize(MemorySegment struct, int fieldValue) {
        struct.set(shaderGroupHandleSize$LAYOUT, shaderGroupHandleSize$OFFSET, fieldValue);
    }

    private static final OfInt maxRayRecursionDepth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxRayRecursionDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxRayRecursionDepth
     * }
     */
    public static final OfInt maxRayRecursionDepth$layout() {
        return maxRayRecursionDepth$LAYOUT;
    }

    private static final long maxRayRecursionDepth$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxRayRecursionDepth
     * }
     */
    public static final long maxRayRecursionDepth$offset() {
        return maxRayRecursionDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxRayRecursionDepth
     * }
     */
    public static int maxRayRecursionDepth(MemorySegment struct) {
        return struct.get(maxRayRecursionDepth$LAYOUT, maxRayRecursionDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxRayRecursionDepth
     * }
     */
    public static void maxRayRecursionDepth(MemorySegment struct, int fieldValue) {
        struct.set(maxRayRecursionDepth$LAYOUT, maxRayRecursionDepth$OFFSET, fieldValue);
    }

    private static final OfInt maxShaderGroupStride$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxShaderGroupStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxShaderGroupStride
     * }
     */
    public static final OfInt maxShaderGroupStride$layout() {
        return maxShaderGroupStride$LAYOUT;
    }

    private static final long maxShaderGroupStride$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxShaderGroupStride
     * }
     */
    public static final long maxShaderGroupStride$offset() {
        return maxShaderGroupStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxShaderGroupStride
     * }
     */
    public static int maxShaderGroupStride(MemorySegment struct) {
        return struct.get(maxShaderGroupStride$LAYOUT, maxShaderGroupStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxShaderGroupStride
     * }
     */
    public static void maxShaderGroupStride(MemorySegment struct, int fieldValue) {
        struct.set(maxShaderGroupStride$LAYOUT, maxShaderGroupStride$OFFSET, fieldValue);
    }

    private static final OfInt shaderGroupBaseAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderGroupBaseAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupBaseAlignment
     * }
     */
    public static final OfInt shaderGroupBaseAlignment$layout() {
        return shaderGroupBaseAlignment$LAYOUT;
    }

    private static final long shaderGroupBaseAlignment$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupBaseAlignment
     * }
     */
    public static final long shaderGroupBaseAlignment$offset() {
        return shaderGroupBaseAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupBaseAlignment
     * }
     */
    public static int shaderGroupBaseAlignment(MemorySegment struct) {
        return struct.get(shaderGroupBaseAlignment$LAYOUT, shaderGroupBaseAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupBaseAlignment
     * }
     */
    public static void shaderGroupBaseAlignment(MemorySegment struct, int fieldValue) {
        struct.set(shaderGroupBaseAlignment$LAYOUT, shaderGroupBaseAlignment$OFFSET, fieldValue);
    }

    private static final OfInt shaderGroupHandleCaptureReplaySize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderGroupHandleCaptureReplaySize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleCaptureReplaySize
     * }
     */
    public static final OfInt shaderGroupHandleCaptureReplaySize$layout() {
        return shaderGroupHandleCaptureReplaySize$LAYOUT;
    }

    private static final long shaderGroupHandleCaptureReplaySize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleCaptureReplaySize
     * }
     */
    public static final long shaderGroupHandleCaptureReplaySize$offset() {
        return shaderGroupHandleCaptureReplaySize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleCaptureReplaySize
     * }
     */
    public static int shaderGroupHandleCaptureReplaySize(MemorySegment struct) {
        return struct.get(shaderGroupHandleCaptureReplaySize$LAYOUT, shaderGroupHandleCaptureReplaySize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleCaptureReplaySize
     * }
     */
    public static void shaderGroupHandleCaptureReplaySize(MemorySegment struct, int fieldValue) {
        struct.set(shaderGroupHandleCaptureReplaySize$LAYOUT, shaderGroupHandleCaptureReplaySize$OFFSET, fieldValue);
    }

    private static final OfInt maxRayDispatchInvocationCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxRayDispatchInvocationCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxRayDispatchInvocationCount
     * }
     */
    public static final OfInt maxRayDispatchInvocationCount$layout() {
        return maxRayDispatchInvocationCount$LAYOUT;
    }

    private static final long maxRayDispatchInvocationCount$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxRayDispatchInvocationCount
     * }
     */
    public static final long maxRayDispatchInvocationCount$offset() {
        return maxRayDispatchInvocationCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxRayDispatchInvocationCount
     * }
     */
    public static int maxRayDispatchInvocationCount(MemorySegment struct) {
        return struct.get(maxRayDispatchInvocationCount$LAYOUT, maxRayDispatchInvocationCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxRayDispatchInvocationCount
     * }
     */
    public static void maxRayDispatchInvocationCount(MemorySegment struct, int fieldValue) {
        struct.set(maxRayDispatchInvocationCount$LAYOUT, maxRayDispatchInvocationCount$OFFSET, fieldValue);
    }

    private static final OfInt shaderGroupHandleAlignment$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderGroupHandleAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleAlignment
     * }
     */
    public static final OfInt shaderGroupHandleAlignment$layout() {
        return shaderGroupHandleAlignment$LAYOUT;
    }

    private static final long shaderGroupHandleAlignment$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleAlignment
     * }
     */
    public static final long shaderGroupHandleAlignment$offset() {
        return shaderGroupHandleAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleAlignment
     * }
     */
    public static int shaderGroupHandleAlignment(MemorySegment struct) {
        return struct.get(shaderGroupHandleAlignment$LAYOUT, shaderGroupHandleAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t shaderGroupHandleAlignment
     * }
     */
    public static void shaderGroupHandleAlignment(MemorySegment struct, int fieldValue) {
        struct.set(shaderGroupHandleAlignment$LAYOUT, shaderGroupHandleAlignment$OFFSET, fieldValue);
    }

    private static final OfInt maxRayHitAttributeSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxRayHitAttributeSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxRayHitAttributeSize
     * }
     */
    public static final OfInt maxRayHitAttributeSize$layout() {
        return maxRayHitAttributeSize$LAYOUT;
    }

    private static final long maxRayHitAttributeSize$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxRayHitAttributeSize
     * }
     */
    public static final long maxRayHitAttributeSize$offset() {
        return maxRayHitAttributeSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxRayHitAttributeSize
     * }
     */
    public static int maxRayHitAttributeSize(MemorySegment struct) {
        return struct.get(maxRayHitAttributeSize$LAYOUT, maxRayHitAttributeSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxRayHitAttributeSize
     * }
     */
    public static void maxRayHitAttributeSize(MemorySegment struct, int fieldValue) {
        struct.set(maxRayHitAttributeSize$LAYOUT, maxRayHitAttributeSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

