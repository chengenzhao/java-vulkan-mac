// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 shaderBufferFloat16Atomics;
 *     VkBool32 shaderBufferFloat16AtomicAdd;
 *     VkBool32 shaderBufferFloat16AtomicMinMax;
 *     VkBool32 shaderBufferFloat32AtomicMinMax;
 *     VkBool32 shaderBufferFloat64AtomicMinMax;
 *     VkBool32 shaderSharedFloat16Atomics;
 *     VkBool32 shaderSharedFloat16AtomicAdd;
 *     VkBool32 shaderSharedFloat16AtomicMinMax;
 *     VkBool32 shaderSharedFloat32AtomicMinMax;
 *     VkBool32 shaderSharedFloat64AtomicMinMax;
 *     VkBool32 shaderImageFloat32AtomicMinMax;
 *     VkBool32 sparseImageFloat32AtomicMinMax;
 * }
 * }
 */
public class VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT {

    VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("shaderBufferFloat16Atomics"),
        vulkan_h.C_INT.withName("shaderBufferFloat16AtomicAdd"),
        vulkan_h.C_INT.withName("shaderBufferFloat16AtomicMinMax"),
        vulkan_h.C_INT.withName("shaderBufferFloat32AtomicMinMax"),
        vulkan_h.C_INT.withName("shaderBufferFloat64AtomicMinMax"),
        vulkan_h.C_INT.withName("shaderSharedFloat16Atomics"),
        vulkan_h.C_INT.withName("shaderSharedFloat16AtomicAdd"),
        vulkan_h.C_INT.withName("shaderSharedFloat16AtomicMinMax"),
        vulkan_h.C_INT.withName("shaderSharedFloat32AtomicMinMax"),
        vulkan_h.C_INT.withName("shaderSharedFloat64AtomicMinMax"),
        vulkan_h.C_INT.withName("shaderImageFloat32AtomicMinMax"),
        vulkan_h.C_INT.withName("sparseImageFloat32AtomicMinMax")
    ).withName("VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat16Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat16Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16Atomics
     * }
     */
    public static final OfInt shaderBufferFloat16Atomics$layout() {
        return shaderBufferFloat16Atomics$LAYOUT;
    }

    private static final long shaderBufferFloat16Atomics$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16Atomics
     * }
     */
    public static final long shaderBufferFloat16Atomics$offset() {
        return shaderBufferFloat16Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16Atomics
     * }
     */
    public static int shaderBufferFloat16Atomics(MemorySegment struct) {
        return struct.get(shaderBufferFloat16Atomics$LAYOUT, shaderBufferFloat16Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16Atomics
     * }
     */
    public static void shaderBufferFloat16Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat16Atomics$LAYOUT, shaderBufferFloat16Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat16AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat16AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicAdd
     * }
     */
    public static final OfInt shaderBufferFloat16AtomicAdd$layout() {
        return shaderBufferFloat16AtomicAdd$LAYOUT;
    }

    private static final long shaderBufferFloat16AtomicAdd$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicAdd
     * }
     */
    public static final long shaderBufferFloat16AtomicAdd$offset() {
        return shaderBufferFloat16AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicAdd
     * }
     */
    public static int shaderBufferFloat16AtomicAdd(MemorySegment struct) {
        return struct.get(shaderBufferFloat16AtomicAdd$LAYOUT, shaderBufferFloat16AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicAdd
     * }
     */
    public static void shaderBufferFloat16AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat16AtomicAdd$LAYOUT, shaderBufferFloat16AtomicAdd$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat16AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat16AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicMinMax
     * }
     */
    public static final OfInt shaderBufferFloat16AtomicMinMax$layout() {
        return shaderBufferFloat16AtomicMinMax$LAYOUT;
    }

    private static final long shaderBufferFloat16AtomicMinMax$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicMinMax
     * }
     */
    public static final long shaderBufferFloat16AtomicMinMax$offset() {
        return shaderBufferFloat16AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicMinMax
     * }
     */
    public static int shaderBufferFloat16AtomicMinMax(MemorySegment struct) {
        return struct.get(shaderBufferFloat16AtomicMinMax$LAYOUT, shaderBufferFloat16AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat16AtomicMinMax
     * }
     */
    public static void shaderBufferFloat16AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat16AtomicMinMax$LAYOUT, shaderBufferFloat16AtomicMinMax$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat32AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat32AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicMinMax
     * }
     */
    public static final OfInt shaderBufferFloat32AtomicMinMax$layout() {
        return shaderBufferFloat32AtomicMinMax$LAYOUT;
    }

    private static final long shaderBufferFloat32AtomicMinMax$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicMinMax
     * }
     */
    public static final long shaderBufferFloat32AtomicMinMax$offset() {
        return shaderBufferFloat32AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicMinMax
     * }
     */
    public static int shaderBufferFloat32AtomicMinMax(MemorySegment struct) {
        return struct.get(shaderBufferFloat32AtomicMinMax$LAYOUT, shaderBufferFloat32AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicMinMax
     * }
     */
    public static void shaderBufferFloat32AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat32AtomicMinMax$LAYOUT, shaderBufferFloat32AtomicMinMax$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat64AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat64AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicMinMax
     * }
     */
    public static final OfInt shaderBufferFloat64AtomicMinMax$layout() {
        return shaderBufferFloat64AtomicMinMax$LAYOUT;
    }

    private static final long shaderBufferFloat64AtomicMinMax$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicMinMax
     * }
     */
    public static final long shaderBufferFloat64AtomicMinMax$offset() {
        return shaderBufferFloat64AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicMinMax
     * }
     */
    public static int shaderBufferFloat64AtomicMinMax(MemorySegment struct) {
        return struct.get(shaderBufferFloat64AtomicMinMax$LAYOUT, shaderBufferFloat64AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicMinMax
     * }
     */
    public static void shaderBufferFloat64AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat64AtomicMinMax$LAYOUT, shaderBufferFloat64AtomicMinMax$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat16Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat16Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16Atomics
     * }
     */
    public static final OfInt shaderSharedFloat16Atomics$layout() {
        return shaderSharedFloat16Atomics$LAYOUT;
    }

    private static final long shaderSharedFloat16Atomics$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16Atomics
     * }
     */
    public static final long shaderSharedFloat16Atomics$offset() {
        return shaderSharedFloat16Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16Atomics
     * }
     */
    public static int shaderSharedFloat16Atomics(MemorySegment struct) {
        return struct.get(shaderSharedFloat16Atomics$LAYOUT, shaderSharedFloat16Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16Atomics
     * }
     */
    public static void shaderSharedFloat16Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat16Atomics$LAYOUT, shaderSharedFloat16Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat16AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat16AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicAdd
     * }
     */
    public static final OfInt shaderSharedFloat16AtomicAdd$layout() {
        return shaderSharedFloat16AtomicAdd$LAYOUT;
    }

    private static final long shaderSharedFloat16AtomicAdd$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicAdd
     * }
     */
    public static final long shaderSharedFloat16AtomicAdd$offset() {
        return shaderSharedFloat16AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicAdd
     * }
     */
    public static int shaderSharedFloat16AtomicAdd(MemorySegment struct) {
        return struct.get(shaderSharedFloat16AtomicAdd$LAYOUT, shaderSharedFloat16AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicAdd
     * }
     */
    public static void shaderSharedFloat16AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat16AtomicAdd$LAYOUT, shaderSharedFloat16AtomicAdd$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat16AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat16AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicMinMax
     * }
     */
    public static final OfInt shaderSharedFloat16AtomicMinMax$layout() {
        return shaderSharedFloat16AtomicMinMax$LAYOUT;
    }

    private static final long shaderSharedFloat16AtomicMinMax$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicMinMax
     * }
     */
    public static final long shaderSharedFloat16AtomicMinMax$offset() {
        return shaderSharedFloat16AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicMinMax
     * }
     */
    public static int shaderSharedFloat16AtomicMinMax(MemorySegment struct) {
        return struct.get(shaderSharedFloat16AtomicMinMax$LAYOUT, shaderSharedFloat16AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat16AtomicMinMax
     * }
     */
    public static void shaderSharedFloat16AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat16AtomicMinMax$LAYOUT, shaderSharedFloat16AtomicMinMax$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat32AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat32AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicMinMax
     * }
     */
    public static final OfInt shaderSharedFloat32AtomicMinMax$layout() {
        return shaderSharedFloat32AtomicMinMax$LAYOUT;
    }

    private static final long shaderSharedFloat32AtomicMinMax$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicMinMax
     * }
     */
    public static final long shaderSharedFloat32AtomicMinMax$offset() {
        return shaderSharedFloat32AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicMinMax
     * }
     */
    public static int shaderSharedFloat32AtomicMinMax(MemorySegment struct) {
        return struct.get(shaderSharedFloat32AtomicMinMax$LAYOUT, shaderSharedFloat32AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicMinMax
     * }
     */
    public static void shaderSharedFloat32AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat32AtomicMinMax$LAYOUT, shaderSharedFloat32AtomicMinMax$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat64AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat64AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicMinMax
     * }
     */
    public static final OfInt shaderSharedFloat64AtomicMinMax$layout() {
        return shaderSharedFloat64AtomicMinMax$LAYOUT;
    }

    private static final long shaderSharedFloat64AtomicMinMax$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicMinMax
     * }
     */
    public static final long shaderSharedFloat64AtomicMinMax$offset() {
        return shaderSharedFloat64AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicMinMax
     * }
     */
    public static int shaderSharedFloat64AtomicMinMax(MemorySegment struct) {
        return struct.get(shaderSharedFloat64AtomicMinMax$LAYOUT, shaderSharedFloat64AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicMinMax
     * }
     */
    public static void shaderSharedFloat64AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat64AtomicMinMax$LAYOUT, shaderSharedFloat64AtomicMinMax$OFFSET, fieldValue);
    }

    private static final OfInt shaderImageFloat32AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderImageFloat32AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicMinMax
     * }
     */
    public static final OfInt shaderImageFloat32AtomicMinMax$layout() {
        return shaderImageFloat32AtomicMinMax$LAYOUT;
    }

    private static final long shaderImageFloat32AtomicMinMax$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicMinMax
     * }
     */
    public static final long shaderImageFloat32AtomicMinMax$offset() {
        return shaderImageFloat32AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicMinMax
     * }
     */
    public static int shaderImageFloat32AtomicMinMax(MemorySegment struct) {
        return struct.get(shaderImageFloat32AtomicMinMax$LAYOUT, shaderImageFloat32AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicMinMax
     * }
     */
    public static void shaderImageFloat32AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(shaderImageFloat32AtomicMinMax$LAYOUT, shaderImageFloat32AtomicMinMax$OFFSET, fieldValue);
    }

    private static final OfInt sparseImageFloat32AtomicMinMax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseImageFloat32AtomicMinMax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicMinMax
     * }
     */
    public static final OfInt sparseImageFloat32AtomicMinMax$layout() {
        return sparseImageFloat32AtomicMinMax$LAYOUT;
    }

    private static final long sparseImageFloat32AtomicMinMax$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicMinMax
     * }
     */
    public static final long sparseImageFloat32AtomicMinMax$offset() {
        return sparseImageFloat32AtomicMinMax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicMinMax
     * }
     */
    public static int sparseImageFloat32AtomicMinMax(MemorySegment struct) {
        return struct.get(sparseImageFloat32AtomicMinMax$LAYOUT, sparseImageFloat32AtomicMinMax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicMinMax
     * }
     */
    public static void sparseImageFloat32AtomicMinMax(MemorySegment struct, int fieldValue) {
        struct.set(sparseImageFloat32AtomicMinMax$LAYOUT, sparseImageFloat32AtomicMinMax$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

