// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 shaderBufferFloat32Atomics;
 *     VkBool32 shaderBufferFloat32AtomicAdd;
 *     VkBool32 shaderBufferFloat64Atomics;
 *     VkBool32 shaderBufferFloat64AtomicAdd;
 *     VkBool32 shaderSharedFloat32Atomics;
 *     VkBool32 shaderSharedFloat32AtomicAdd;
 *     VkBool32 shaderSharedFloat64Atomics;
 *     VkBool32 shaderSharedFloat64AtomicAdd;
 *     VkBool32 shaderImageFloat32Atomics;
 *     VkBool32 shaderImageFloat32AtomicAdd;
 *     VkBool32 sparseImageFloat32Atomics;
 *     VkBool32 sparseImageFloat32AtomicAdd;
 * }
 * }
 */
public class VkPhysicalDeviceShaderAtomicFloatFeaturesEXT {

    VkPhysicalDeviceShaderAtomicFloatFeaturesEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("shaderBufferFloat32Atomics"),
        vulkan_h.C_INT.withName("shaderBufferFloat32AtomicAdd"),
        vulkan_h.C_INT.withName("shaderBufferFloat64Atomics"),
        vulkan_h.C_INT.withName("shaderBufferFloat64AtomicAdd"),
        vulkan_h.C_INT.withName("shaderSharedFloat32Atomics"),
        vulkan_h.C_INT.withName("shaderSharedFloat32AtomicAdd"),
        vulkan_h.C_INT.withName("shaderSharedFloat64Atomics"),
        vulkan_h.C_INT.withName("shaderSharedFloat64AtomicAdd"),
        vulkan_h.C_INT.withName("shaderImageFloat32Atomics"),
        vulkan_h.C_INT.withName("shaderImageFloat32AtomicAdd"),
        vulkan_h.C_INT.withName("sparseImageFloat32Atomics"),
        vulkan_h.C_INT.withName("sparseImageFloat32AtomicAdd")
    ).withName("VkPhysicalDeviceShaderAtomicFloatFeaturesEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat32Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat32Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32Atomics
     * }
     */
    public static final OfInt shaderBufferFloat32Atomics$layout() {
        return shaderBufferFloat32Atomics$LAYOUT;
    }

    private static final long shaderBufferFloat32Atomics$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32Atomics
     * }
     */
    public static final long shaderBufferFloat32Atomics$offset() {
        return shaderBufferFloat32Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32Atomics
     * }
     */
    public static int shaderBufferFloat32Atomics(MemorySegment struct) {
        return struct.get(shaderBufferFloat32Atomics$LAYOUT, shaderBufferFloat32Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32Atomics
     * }
     */
    public static void shaderBufferFloat32Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat32Atomics$LAYOUT, shaderBufferFloat32Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat32AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat32AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicAdd
     * }
     */
    public static final OfInt shaderBufferFloat32AtomicAdd$layout() {
        return shaderBufferFloat32AtomicAdd$LAYOUT;
    }

    private static final long shaderBufferFloat32AtomicAdd$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicAdd
     * }
     */
    public static final long shaderBufferFloat32AtomicAdd$offset() {
        return shaderBufferFloat32AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicAdd
     * }
     */
    public static int shaderBufferFloat32AtomicAdd(MemorySegment struct) {
        return struct.get(shaderBufferFloat32AtomicAdd$LAYOUT, shaderBufferFloat32AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat32AtomicAdd
     * }
     */
    public static void shaderBufferFloat32AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat32AtomicAdd$LAYOUT, shaderBufferFloat32AtomicAdd$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat64Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat64Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64Atomics
     * }
     */
    public static final OfInt shaderBufferFloat64Atomics$layout() {
        return shaderBufferFloat64Atomics$LAYOUT;
    }

    private static final long shaderBufferFloat64Atomics$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64Atomics
     * }
     */
    public static final long shaderBufferFloat64Atomics$offset() {
        return shaderBufferFloat64Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64Atomics
     * }
     */
    public static int shaderBufferFloat64Atomics(MemorySegment struct) {
        return struct.get(shaderBufferFloat64Atomics$LAYOUT, shaderBufferFloat64Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64Atomics
     * }
     */
    public static void shaderBufferFloat64Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat64Atomics$LAYOUT, shaderBufferFloat64Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferFloat64AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferFloat64AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicAdd
     * }
     */
    public static final OfInt shaderBufferFloat64AtomicAdd$layout() {
        return shaderBufferFloat64AtomicAdd$LAYOUT;
    }

    private static final long shaderBufferFloat64AtomicAdd$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicAdd
     * }
     */
    public static final long shaderBufferFloat64AtomicAdd$offset() {
        return shaderBufferFloat64AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicAdd
     * }
     */
    public static int shaderBufferFloat64AtomicAdd(MemorySegment struct) {
        return struct.get(shaderBufferFloat64AtomicAdd$LAYOUT, shaderBufferFloat64AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferFloat64AtomicAdd
     * }
     */
    public static void shaderBufferFloat64AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferFloat64AtomicAdd$LAYOUT, shaderBufferFloat64AtomicAdd$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat32Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat32Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32Atomics
     * }
     */
    public static final OfInt shaderSharedFloat32Atomics$layout() {
        return shaderSharedFloat32Atomics$LAYOUT;
    }

    private static final long shaderSharedFloat32Atomics$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32Atomics
     * }
     */
    public static final long shaderSharedFloat32Atomics$offset() {
        return shaderSharedFloat32Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32Atomics
     * }
     */
    public static int shaderSharedFloat32Atomics(MemorySegment struct) {
        return struct.get(shaderSharedFloat32Atomics$LAYOUT, shaderSharedFloat32Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32Atomics
     * }
     */
    public static void shaderSharedFloat32Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat32Atomics$LAYOUT, shaderSharedFloat32Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat32AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat32AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicAdd
     * }
     */
    public static final OfInt shaderSharedFloat32AtomicAdd$layout() {
        return shaderSharedFloat32AtomicAdd$LAYOUT;
    }

    private static final long shaderSharedFloat32AtomicAdd$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicAdd
     * }
     */
    public static final long shaderSharedFloat32AtomicAdd$offset() {
        return shaderSharedFloat32AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicAdd
     * }
     */
    public static int shaderSharedFloat32AtomicAdd(MemorySegment struct) {
        return struct.get(shaderSharedFloat32AtomicAdd$LAYOUT, shaderSharedFloat32AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat32AtomicAdd
     * }
     */
    public static void shaderSharedFloat32AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat32AtomicAdd$LAYOUT, shaderSharedFloat32AtomicAdd$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat64Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat64Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64Atomics
     * }
     */
    public static final OfInt shaderSharedFloat64Atomics$layout() {
        return shaderSharedFloat64Atomics$LAYOUT;
    }

    private static final long shaderSharedFloat64Atomics$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64Atomics
     * }
     */
    public static final long shaderSharedFloat64Atomics$offset() {
        return shaderSharedFloat64Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64Atomics
     * }
     */
    public static int shaderSharedFloat64Atomics(MemorySegment struct) {
        return struct.get(shaderSharedFloat64Atomics$LAYOUT, shaderSharedFloat64Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64Atomics
     * }
     */
    public static void shaderSharedFloat64Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat64Atomics$LAYOUT, shaderSharedFloat64Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedFloat64AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedFloat64AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicAdd
     * }
     */
    public static final OfInt shaderSharedFloat64AtomicAdd$layout() {
        return shaderSharedFloat64AtomicAdd$LAYOUT;
    }

    private static final long shaderSharedFloat64AtomicAdd$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicAdd
     * }
     */
    public static final long shaderSharedFloat64AtomicAdd$offset() {
        return shaderSharedFloat64AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicAdd
     * }
     */
    public static int shaderSharedFloat64AtomicAdd(MemorySegment struct) {
        return struct.get(shaderSharedFloat64AtomicAdd$LAYOUT, shaderSharedFloat64AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedFloat64AtomicAdd
     * }
     */
    public static void shaderSharedFloat64AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedFloat64AtomicAdd$LAYOUT, shaderSharedFloat64AtomicAdd$OFFSET, fieldValue);
    }

    private static final OfInt shaderImageFloat32Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderImageFloat32Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32Atomics
     * }
     */
    public static final OfInt shaderImageFloat32Atomics$layout() {
        return shaderImageFloat32Atomics$LAYOUT;
    }

    private static final long shaderImageFloat32Atomics$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32Atomics
     * }
     */
    public static final long shaderImageFloat32Atomics$offset() {
        return shaderImageFloat32Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32Atomics
     * }
     */
    public static int shaderImageFloat32Atomics(MemorySegment struct) {
        return struct.get(shaderImageFloat32Atomics$LAYOUT, shaderImageFloat32Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32Atomics
     * }
     */
    public static void shaderImageFloat32Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderImageFloat32Atomics$LAYOUT, shaderImageFloat32Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderImageFloat32AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderImageFloat32AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicAdd
     * }
     */
    public static final OfInt shaderImageFloat32AtomicAdd$layout() {
        return shaderImageFloat32AtomicAdd$LAYOUT;
    }

    private static final long shaderImageFloat32AtomicAdd$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicAdd
     * }
     */
    public static final long shaderImageFloat32AtomicAdd$offset() {
        return shaderImageFloat32AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicAdd
     * }
     */
    public static int shaderImageFloat32AtomicAdd(MemorySegment struct) {
        return struct.get(shaderImageFloat32AtomicAdd$LAYOUT, shaderImageFloat32AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderImageFloat32AtomicAdd
     * }
     */
    public static void shaderImageFloat32AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(shaderImageFloat32AtomicAdd$LAYOUT, shaderImageFloat32AtomicAdd$OFFSET, fieldValue);
    }

    private static final OfInt sparseImageFloat32Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseImageFloat32Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32Atomics
     * }
     */
    public static final OfInt sparseImageFloat32Atomics$layout() {
        return sparseImageFloat32Atomics$LAYOUT;
    }

    private static final long sparseImageFloat32Atomics$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32Atomics
     * }
     */
    public static final long sparseImageFloat32Atomics$offset() {
        return sparseImageFloat32Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32Atomics
     * }
     */
    public static int sparseImageFloat32Atomics(MemorySegment struct) {
        return struct.get(sparseImageFloat32Atomics$LAYOUT, sparseImageFloat32Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32Atomics
     * }
     */
    public static void sparseImageFloat32Atomics(MemorySegment struct, int fieldValue) {
        struct.set(sparseImageFloat32Atomics$LAYOUT, sparseImageFloat32Atomics$OFFSET, fieldValue);
    }

    private static final OfInt sparseImageFloat32AtomicAdd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sparseImageFloat32AtomicAdd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicAdd
     * }
     */
    public static final OfInt sparseImageFloat32AtomicAdd$layout() {
        return sparseImageFloat32AtomicAdd$LAYOUT;
    }

    private static final long sparseImageFloat32AtomicAdd$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicAdd
     * }
     */
    public static final long sparseImageFloat32AtomicAdd$offset() {
        return sparseImageFloat32AtomicAdd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicAdd
     * }
     */
    public static int sparseImageFloat32AtomicAdd(MemorySegment struct) {
        return struct.get(sparseImageFloat32AtomicAdd$LAYOUT, sparseImageFloat32AtomicAdd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 sparseImageFloat32AtomicAdd
     * }
     */
    public static void sparseImageFloat32AtomicAdd(MemorySegment struct, int fieldValue) {
        struct.set(sparseImageFloat32AtomicAdd$LAYOUT, sparseImageFloat32AtomicAdd$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

