// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceShaderCorePropertiesAMD {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint32_t shaderEngineCount;
 *     uint32_t shaderArraysPerEngineCount;
 *     uint32_t computeUnitsPerShaderArray;
 *     uint32_t simdPerComputeUnit;
 *     uint32_t wavefrontsPerSimd;
 *     uint32_t wavefrontSize;
 *     uint32_t sgprsPerSimd;
 *     uint32_t minSgprAllocation;
 *     uint32_t maxSgprAllocation;
 *     uint32_t sgprAllocationGranularity;
 *     uint32_t vgprsPerSimd;
 *     uint32_t minVgprAllocation;
 *     uint32_t maxVgprAllocation;
 *     uint32_t vgprAllocationGranularity;
 * }
 * }
 */
public class VkPhysicalDeviceShaderCorePropertiesAMD {

    VkPhysicalDeviceShaderCorePropertiesAMD() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("shaderEngineCount"),
        vulkan_h.C_INT.withName("shaderArraysPerEngineCount"),
        vulkan_h.C_INT.withName("computeUnitsPerShaderArray"),
        vulkan_h.C_INT.withName("simdPerComputeUnit"),
        vulkan_h.C_INT.withName("wavefrontsPerSimd"),
        vulkan_h.C_INT.withName("wavefrontSize"),
        vulkan_h.C_INT.withName("sgprsPerSimd"),
        vulkan_h.C_INT.withName("minSgprAllocation"),
        vulkan_h.C_INT.withName("maxSgprAllocation"),
        vulkan_h.C_INT.withName("sgprAllocationGranularity"),
        vulkan_h.C_INT.withName("vgprsPerSimd"),
        vulkan_h.C_INT.withName("minVgprAllocation"),
        vulkan_h.C_INT.withName("maxVgprAllocation"),
        vulkan_h.C_INT.withName("vgprAllocationGranularity")
    ).withName("VkPhysicalDeviceShaderCorePropertiesAMD");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt shaderEngineCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderEngineCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t shaderEngineCount
     * }
     */
    public static final OfInt shaderEngineCount$layout() {
        return shaderEngineCount$LAYOUT;
    }

    private static final long shaderEngineCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t shaderEngineCount
     * }
     */
    public static final long shaderEngineCount$offset() {
        return shaderEngineCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t shaderEngineCount
     * }
     */
    public static int shaderEngineCount(MemorySegment struct) {
        return struct.get(shaderEngineCount$LAYOUT, shaderEngineCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t shaderEngineCount
     * }
     */
    public static void shaderEngineCount(MemorySegment struct, int fieldValue) {
        struct.set(shaderEngineCount$LAYOUT, shaderEngineCount$OFFSET, fieldValue);
    }

    private static final OfInt shaderArraysPerEngineCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderArraysPerEngineCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t shaderArraysPerEngineCount
     * }
     */
    public static final OfInt shaderArraysPerEngineCount$layout() {
        return shaderArraysPerEngineCount$LAYOUT;
    }

    private static final long shaderArraysPerEngineCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t shaderArraysPerEngineCount
     * }
     */
    public static final long shaderArraysPerEngineCount$offset() {
        return shaderArraysPerEngineCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t shaderArraysPerEngineCount
     * }
     */
    public static int shaderArraysPerEngineCount(MemorySegment struct) {
        return struct.get(shaderArraysPerEngineCount$LAYOUT, shaderArraysPerEngineCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t shaderArraysPerEngineCount
     * }
     */
    public static void shaderArraysPerEngineCount(MemorySegment struct, int fieldValue) {
        struct.set(shaderArraysPerEngineCount$LAYOUT, shaderArraysPerEngineCount$OFFSET, fieldValue);
    }

    private static final OfInt computeUnitsPerShaderArray$LAYOUT = (OfInt)$LAYOUT.select(groupElement("computeUnitsPerShaderArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t computeUnitsPerShaderArray
     * }
     */
    public static final OfInt computeUnitsPerShaderArray$layout() {
        return computeUnitsPerShaderArray$LAYOUT;
    }

    private static final long computeUnitsPerShaderArray$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t computeUnitsPerShaderArray
     * }
     */
    public static final long computeUnitsPerShaderArray$offset() {
        return computeUnitsPerShaderArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t computeUnitsPerShaderArray
     * }
     */
    public static int computeUnitsPerShaderArray(MemorySegment struct) {
        return struct.get(computeUnitsPerShaderArray$LAYOUT, computeUnitsPerShaderArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t computeUnitsPerShaderArray
     * }
     */
    public static void computeUnitsPerShaderArray(MemorySegment struct, int fieldValue) {
        struct.set(computeUnitsPerShaderArray$LAYOUT, computeUnitsPerShaderArray$OFFSET, fieldValue);
    }

    private static final OfInt simdPerComputeUnit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("simdPerComputeUnit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t simdPerComputeUnit
     * }
     */
    public static final OfInt simdPerComputeUnit$layout() {
        return simdPerComputeUnit$LAYOUT;
    }

    private static final long simdPerComputeUnit$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t simdPerComputeUnit
     * }
     */
    public static final long simdPerComputeUnit$offset() {
        return simdPerComputeUnit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t simdPerComputeUnit
     * }
     */
    public static int simdPerComputeUnit(MemorySegment struct) {
        return struct.get(simdPerComputeUnit$LAYOUT, simdPerComputeUnit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t simdPerComputeUnit
     * }
     */
    public static void simdPerComputeUnit(MemorySegment struct, int fieldValue) {
        struct.set(simdPerComputeUnit$LAYOUT, simdPerComputeUnit$OFFSET, fieldValue);
    }

    private static final OfInt wavefrontsPerSimd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wavefrontsPerSimd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t wavefrontsPerSimd
     * }
     */
    public static final OfInt wavefrontsPerSimd$layout() {
        return wavefrontsPerSimd$LAYOUT;
    }

    private static final long wavefrontsPerSimd$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t wavefrontsPerSimd
     * }
     */
    public static final long wavefrontsPerSimd$offset() {
        return wavefrontsPerSimd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t wavefrontsPerSimd
     * }
     */
    public static int wavefrontsPerSimd(MemorySegment struct) {
        return struct.get(wavefrontsPerSimd$LAYOUT, wavefrontsPerSimd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t wavefrontsPerSimd
     * }
     */
    public static void wavefrontsPerSimd(MemorySegment struct, int fieldValue) {
        struct.set(wavefrontsPerSimd$LAYOUT, wavefrontsPerSimd$OFFSET, fieldValue);
    }

    private static final OfInt wavefrontSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wavefrontSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t wavefrontSize
     * }
     */
    public static final OfInt wavefrontSize$layout() {
        return wavefrontSize$LAYOUT;
    }

    private static final long wavefrontSize$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t wavefrontSize
     * }
     */
    public static final long wavefrontSize$offset() {
        return wavefrontSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t wavefrontSize
     * }
     */
    public static int wavefrontSize(MemorySegment struct) {
        return struct.get(wavefrontSize$LAYOUT, wavefrontSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t wavefrontSize
     * }
     */
    public static void wavefrontSize(MemorySegment struct, int fieldValue) {
        struct.set(wavefrontSize$LAYOUT, wavefrontSize$OFFSET, fieldValue);
    }

    private static final OfInt sgprsPerSimd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sgprsPerSimd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t sgprsPerSimd
     * }
     */
    public static final OfInt sgprsPerSimd$layout() {
        return sgprsPerSimd$LAYOUT;
    }

    private static final long sgprsPerSimd$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t sgprsPerSimd
     * }
     */
    public static final long sgprsPerSimd$offset() {
        return sgprsPerSimd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t sgprsPerSimd
     * }
     */
    public static int sgprsPerSimd(MemorySegment struct) {
        return struct.get(sgprsPerSimd$LAYOUT, sgprsPerSimd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t sgprsPerSimd
     * }
     */
    public static void sgprsPerSimd(MemorySegment struct, int fieldValue) {
        struct.set(sgprsPerSimd$LAYOUT, sgprsPerSimd$OFFSET, fieldValue);
    }

    private static final OfInt minSgprAllocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minSgprAllocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t minSgprAllocation
     * }
     */
    public static final OfInt minSgprAllocation$layout() {
        return minSgprAllocation$LAYOUT;
    }

    private static final long minSgprAllocation$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t minSgprAllocation
     * }
     */
    public static final long minSgprAllocation$offset() {
        return minSgprAllocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t minSgprAllocation
     * }
     */
    public static int minSgprAllocation(MemorySegment struct) {
        return struct.get(minSgprAllocation$LAYOUT, minSgprAllocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t minSgprAllocation
     * }
     */
    public static void minSgprAllocation(MemorySegment struct, int fieldValue) {
        struct.set(minSgprAllocation$LAYOUT, minSgprAllocation$OFFSET, fieldValue);
    }

    private static final OfInt maxSgprAllocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxSgprAllocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxSgprAllocation
     * }
     */
    public static final OfInt maxSgprAllocation$layout() {
        return maxSgprAllocation$LAYOUT;
    }

    private static final long maxSgprAllocation$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxSgprAllocation
     * }
     */
    public static final long maxSgprAllocation$offset() {
        return maxSgprAllocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxSgprAllocation
     * }
     */
    public static int maxSgprAllocation(MemorySegment struct) {
        return struct.get(maxSgprAllocation$LAYOUT, maxSgprAllocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxSgprAllocation
     * }
     */
    public static void maxSgprAllocation(MemorySegment struct, int fieldValue) {
        struct.set(maxSgprAllocation$LAYOUT, maxSgprAllocation$OFFSET, fieldValue);
    }

    private static final OfInt sgprAllocationGranularity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sgprAllocationGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t sgprAllocationGranularity
     * }
     */
    public static final OfInt sgprAllocationGranularity$layout() {
        return sgprAllocationGranularity$LAYOUT;
    }

    private static final long sgprAllocationGranularity$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t sgprAllocationGranularity
     * }
     */
    public static final long sgprAllocationGranularity$offset() {
        return sgprAllocationGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t sgprAllocationGranularity
     * }
     */
    public static int sgprAllocationGranularity(MemorySegment struct) {
        return struct.get(sgprAllocationGranularity$LAYOUT, sgprAllocationGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t sgprAllocationGranularity
     * }
     */
    public static void sgprAllocationGranularity(MemorySegment struct, int fieldValue) {
        struct.set(sgprAllocationGranularity$LAYOUT, sgprAllocationGranularity$OFFSET, fieldValue);
    }

    private static final OfInt vgprsPerSimd$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vgprsPerSimd"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vgprsPerSimd
     * }
     */
    public static final OfInt vgprsPerSimd$layout() {
        return vgprsPerSimd$LAYOUT;
    }

    private static final long vgprsPerSimd$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vgprsPerSimd
     * }
     */
    public static final long vgprsPerSimd$offset() {
        return vgprsPerSimd$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vgprsPerSimd
     * }
     */
    public static int vgprsPerSimd(MemorySegment struct) {
        return struct.get(vgprsPerSimd$LAYOUT, vgprsPerSimd$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vgprsPerSimd
     * }
     */
    public static void vgprsPerSimd(MemorySegment struct, int fieldValue) {
        struct.set(vgprsPerSimd$LAYOUT, vgprsPerSimd$OFFSET, fieldValue);
    }

    private static final OfInt minVgprAllocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minVgprAllocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t minVgprAllocation
     * }
     */
    public static final OfInt minVgprAllocation$layout() {
        return minVgprAllocation$LAYOUT;
    }

    private static final long minVgprAllocation$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t minVgprAllocation
     * }
     */
    public static final long minVgprAllocation$offset() {
        return minVgprAllocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t minVgprAllocation
     * }
     */
    public static int minVgprAllocation(MemorySegment struct) {
        return struct.get(minVgprAllocation$LAYOUT, minVgprAllocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t minVgprAllocation
     * }
     */
    public static void minVgprAllocation(MemorySegment struct, int fieldValue) {
        struct.set(minVgprAllocation$LAYOUT, minVgprAllocation$OFFSET, fieldValue);
    }

    private static final OfInt maxVgprAllocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxVgprAllocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxVgprAllocation
     * }
     */
    public static final OfInt maxVgprAllocation$layout() {
        return maxVgprAllocation$LAYOUT;
    }

    private static final long maxVgprAllocation$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxVgprAllocation
     * }
     */
    public static final long maxVgprAllocation$offset() {
        return maxVgprAllocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxVgprAllocation
     * }
     */
    public static int maxVgprAllocation(MemorySegment struct) {
        return struct.get(maxVgprAllocation$LAYOUT, maxVgprAllocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxVgprAllocation
     * }
     */
    public static void maxVgprAllocation(MemorySegment struct, int fieldValue) {
        struct.set(maxVgprAllocation$LAYOUT, maxVgprAllocation$OFFSET, fieldValue);
    }

    private static final OfInt vgprAllocationGranularity$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vgprAllocationGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t vgprAllocationGranularity
     * }
     */
    public static final OfInt vgprAllocationGranularity$layout() {
        return vgprAllocationGranularity$LAYOUT;
    }

    private static final long vgprAllocationGranularity$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t vgprAllocationGranularity
     * }
     */
    public static final long vgprAllocationGranularity$offset() {
        return vgprAllocationGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t vgprAllocationGranularity
     * }
     */
    public static int vgprAllocationGranularity(MemorySegment struct) {
        return struct.get(vgprAllocationGranularity$LAYOUT, vgprAllocationGranularity$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t vgprAllocationGranularity
     * }
     */
    public static void vgprAllocationGranularity(MemorySegment struct, int fieldValue) {
        struct.set(vgprAllocationGranularity$LAYOUT, vgprAllocationGranularity$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

