// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceVulkan11Features {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 storageBuffer16BitAccess;
 *     VkBool32 uniformAndStorageBuffer16BitAccess;
 *     VkBool32 storagePushConstant16;
 *     VkBool32 storageInputOutput16;
 *     VkBool32 multiview;
 *     VkBool32 multiviewGeometryShader;
 *     VkBool32 multiviewTessellationShader;
 *     VkBool32 variablePointersStorageBuffer;
 *     VkBool32 variablePointers;
 *     VkBool32 protectedMemory;
 *     VkBool32 samplerYcbcrConversion;
 *     VkBool32 shaderDrawParameters;
 * }
 * }
 */
public class VkPhysicalDeviceVulkan11Features {

    VkPhysicalDeviceVulkan11Features() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("storageBuffer16BitAccess"),
        vulkan_h.C_INT.withName("uniformAndStorageBuffer16BitAccess"),
        vulkan_h.C_INT.withName("storagePushConstant16"),
        vulkan_h.C_INT.withName("storageInputOutput16"),
        vulkan_h.C_INT.withName("multiview"),
        vulkan_h.C_INT.withName("multiviewGeometryShader"),
        vulkan_h.C_INT.withName("multiviewTessellationShader"),
        vulkan_h.C_INT.withName("variablePointersStorageBuffer"),
        vulkan_h.C_INT.withName("variablePointers"),
        vulkan_h.C_INT.withName("protectedMemory"),
        vulkan_h.C_INT.withName("samplerYcbcrConversion"),
        vulkan_h.C_INT.withName("shaderDrawParameters")
    ).withName("VkPhysicalDeviceVulkan11Features");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt storageBuffer16BitAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storageBuffer16BitAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer16BitAccess
     * }
     */
    public static final OfInt storageBuffer16BitAccess$layout() {
        return storageBuffer16BitAccess$LAYOUT;
    }

    private static final long storageBuffer16BitAccess$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer16BitAccess
     * }
     */
    public static final long storageBuffer16BitAccess$offset() {
        return storageBuffer16BitAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer16BitAccess
     * }
     */
    public static int storageBuffer16BitAccess(MemorySegment struct) {
        return struct.get(storageBuffer16BitAccess$LAYOUT, storageBuffer16BitAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer16BitAccess
     * }
     */
    public static void storageBuffer16BitAccess(MemorySegment struct, int fieldValue) {
        struct.set(storageBuffer16BitAccess$LAYOUT, storageBuffer16BitAccess$OFFSET, fieldValue);
    }

    private static final OfInt uniformAndStorageBuffer16BitAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uniformAndStorageBuffer16BitAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer16BitAccess
     * }
     */
    public static final OfInt uniformAndStorageBuffer16BitAccess$layout() {
        return uniformAndStorageBuffer16BitAccess$LAYOUT;
    }

    private static final long uniformAndStorageBuffer16BitAccess$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer16BitAccess
     * }
     */
    public static final long uniformAndStorageBuffer16BitAccess$offset() {
        return uniformAndStorageBuffer16BitAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer16BitAccess
     * }
     */
    public static int uniformAndStorageBuffer16BitAccess(MemorySegment struct) {
        return struct.get(uniformAndStorageBuffer16BitAccess$LAYOUT, uniformAndStorageBuffer16BitAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer16BitAccess
     * }
     */
    public static void uniformAndStorageBuffer16BitAccess(MemorySegment struct, int fieldValue) {
        struct.set(uniformAndStorageBuffer16BitAccess$LAYOUT, uniformAndStorageBuffer16BitAccess$OFFSET, fieldValue);
    }

    private static final OfInt storagePushConstant16$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storagePushConstant16"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant16
     * }
     */
    public static final OfInt storagePushConstant16$layout() {
        return storagePushConstant16$LAYOUT;
    }

    private static final long storagePushConstant16$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant16
     * }
     */
    public static final long storagePushConstant16$offset() {
        return storagePushConstant16$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant16
     * }
     */
    public static int storagePushConstant16(MemorySegment struct) {
        return struct.get(storagePushConstant16$LAYOUT, storagePushConstant16$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant16
     * }
     */
    public static void storagePushConstant16(MemorySegment struct, int fieldValue) {
        struct.set(storagePushConstant16$LAYOUT, storagePushConstant16$OFFSET, fieldValue);
    }

    private static final OfInt storageInputOutput16$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storageInputOutput16"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 storageInputOutput16
     * }
     */
    public static final OfInt storageInputOutput16$layout() {
        return storageInputOutput16$LAYOUT;
    }

    private static final long storageInputOutput16$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 storageInputOutput16
     * }
     */
    public static final long storageInputOutput16$offset() {
        return storageInputOutput16$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 storageInputOutput16
     * }
     */
    public static int storageInputOutput16(MemorySegment struct) {
        return struct.get(storageInputOutput16$LAYOUT, storageInputOutput16$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 storageInputOutput16
     * }
     */
    public static void storageInputOutput16(MemorySegment struct, int fieldValue) {
        struct.set(storageInputOutput16$LAYOUT, storageInputOutput16$OFFSET, fieldValue);
    }

    private static final OfInt multiview$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiview"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 multiview
     * }
     */
    public static final OfInt multiview$layout() {
        return multiview$LAYOUT;
    }

    private static final long multiview$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 multiview
     * }
     */
    public static final long multiview$offset() {
        return multiview$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 multiview
     * }
     */
    public static int multiview(MemorySegment struct) {
        return struct.get(multiview$LAYOUT, multiview$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 multiview
     * }
     */
    public static void multiview(MemorySegment struct, int fieldValue) {
        struct.set(multiview$LAYOUT, multiview$OFFSET, fieldValue);
    }

    private static final OfInt multiviewGeometryShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiviewGeometryShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 multiviewGeometryShader
     * }
     */
    public static final OfInt multiviewGeometryShader$layout() {
        return multiviewGeometryShader$LAYOUT;
    }

    private static final long multiviewGeometryShader$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 multiviewGeometryShader
     * }
     */
    public static final long multiviewGeometryShader$offset() {
        return multiviewGeometryShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 multiviewGeometryShader
     * }
     */
    public static int multiviewGeometryShader(MemorySegment struct) {
        return struct.get(multiviewGeometryShader$LAYOUT, multiviewGeometryShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 multiviewGeometryShader
     * }
     */
    public static void multiviewGeometryShader(MemorySegment struct, int fieldValue) {
        struct.set(multiviewGeometryShader$LAYOUT, multiviewGeometryShader$OFFSET, fieldValue);
    }

    private static final OfInt multiviewTessellationShader$LAYOUT = (OfInt)$LAYOUT.select(groupElement("multiviewTessellationShader"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 multiviewTessellationShader
     * }
     */
    public static final OfInt multiviewTessellationShader$layout() {
        return multiviewTessellationShader$LAYOUT;
    }

    private static final long multiviewTessellationShader$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 multiviewTessellationShader
     * }
     */
    public static final long multiviewTessellationShader$offset() {
        return multiviewTessellationShader$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 multiviewTessellationShader
     * }
     */
    public static int multiviewTessellationShader(MemorySegment struct) {
        return struct.get(multiviewTessellationShader$LAYOUT, multiviewTessellationShader$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 multiviewTessellationShader
     * }
     */
    public static void multiviewTessellationShader(MemorySegment struct, int fieldValue) {
        struct.set(multiviewTessellationShader$LAYOUT, multiviewTessellationShader$OFFSET, fieldValue);
    }

    private static final OfInt variablePointersStorageBuffer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("variablePointersStorageBuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 variablePointersStorageBuffer
     * }
     */
    public static final OfInt variablePointersStorageBuffer$layout() {
        return variablePointersStorageBuffer$LAYOUT;
    }

    private static final long variablePointersStorageBuffer$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 variablePointersStorageBuffer
     * }
     */
    public static final long variablePointersStorageBuffer$offset() {
        return variablePointersStorageBuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 variablePointersStorageBuffer
     * }
     */
    public static int variablePointersStorageBuffer(MemorySegment struct) {
        return struct.get(variablePointersStorageBuffer$LAYOUT, variablePointersStorageBuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 variablePointersStorageBuffer
     * }
     */
    public static void variablePointersStorageBuffer(MemorySegment struct, int fieldValue) {
        struct.set(variablePointersStorageBuffer$LAYOUT, variablePointersStorageBuffer$OFFSET, fieldValue);
    }

    private static final OfInt variablePointers$LAYOUT = (OfInt)$LAYOUT.select(groupElement("variablePointers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 variablePointers
     * }
     */
    public static final OfInt variablePointers$layout() {
        return variablePointers$LAYOUT;
    }

    private static final long variablePointers$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 variablePointers
     * }
     */
    public static final long variablePointers$offset() {
        return variablePointers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 variablePointers
     * }
     */
    public static int variablePointers(MemorySegment struct) {
        return struct.get(variablePointers$LAYOUT, variablePointers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 variablePointers
     * }
     */
    public static void variablePointers(MemorySegment struct, int fieldValue) {
        struct.set(variablePointers$LAYOUT, variablePointers$OFFSET, fieldValue);
    }

    private static final OfInt protectedMemory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("protectedMemory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 protectedMemory
     * }
     */
    public static final OfInt protectedMemory$layout() {
        return protectedMemory$LAYOUT;
    }

    private static final long protectedMemory$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 protectedMemory
     * }
     */
    public static final long protectedMemory$offset() {
        return protectedMemory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 protectedMemory
     * }
     */
    public static int protectedMemory(MemorySegment struct) {
        return struct.get(protectedMemory$LAYOUT, protectedMemory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 protectedMemory
     * }
     */
    public static void protectedMemory(MemorySegment struct, int fieldValue) {
        struct.set(protectedMemory$LAYOUT, protectedMemory$OFFSET, fieldValue);
    }

    private static final OfInt samplerYcbcrConversion$LAYOUT = (OfInt)$LAYOUT.select(groupElement("samplerYcbcrConversion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 samplerYcbcrConversion
     * }
     */
    public static final OfInt samplerYcbcrConversion$layout() {
        return samplerYcbcrConversion$LAYOUT;
    }

    private static final long samplerYcbcrConversion$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 samplerYcbcrConversion
     * }
     */
    public static final long samplerYcbcrConversion$offset() {
        return samplerYcbcrConversion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 samplerYcbcrConversion
     * }
     */
    public static int samplerYcbcrConversion(MemorySegment struct) {
        return struct.get(samplerYcbcrConversion$LAYOUT, samplerYcbcrConversion$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 samplerYcbcrConversion
     * }
     */
    public static void samplerYcbcrConversion(MemorySegment struct, int fieldValue) {
        struct.set(samplerYcbcrConversion$LAYOUT, samplerYcbcrConversion$OFFSET, fieldValue);
    }

    private static final OfInt shaderDrawParameters$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderDrawParameters"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderDrawParameters
     * }
     */
    public static final OfInt shaderDrawParameters$layout() {
        return shaderDrawParameters$LAYOUT;
    }

    private static final long shaderDrawParameters$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderDrawParameters
     * }
     */
    public static final long shaderDrawParameters$offset() {
        return shaderDrawParameters$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderDrawParameters
     * }
     */
    public static int shaderDrawParameters(MemorySegment struct) {
        return struct.get(shaderDrawParameters$LAYOUT, shaderDrawParameters$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderDrawParameters
     * }
     */
    public static void shaderDrawParameters(MemorySegment struct, int fieldValue) {
        struct.set(shaderDrawParameters$LAYOUT, shaderDrawParameters$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

