// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceVulkan12Features {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 samplerMirrorClampToEdge;
 *     VkBool32 drawIndirectCount;
 *     VkBool32 storageBuffer8BitAccess;
 *     VkBool32 uniformAndStorageBuffer8BitAccess;
 *     VkBool32 storagePushConstant8;
 *     VkBool32 shaderBufferInt64Atomics;
 *     VkBool32 shaderSharedInt64Atomics;
 *     VkBool32 shaderFloat16;
 *     VkBool32 shaderInt8;
 *     VkBool32 descriptorIndexing;
 *     VkBool32 shaderInputAttachmentArrayDynamicIndexing;
 *     VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
 *     VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
 *     VkBool32 shaderUniformBufferArrayNonUniformIndexing;
 *     VkBool32 shaderSampledImageArrayNonUniformIndexing;
 *     VkBool32 shaderStorageBufferArrayNonUniformIndexing;
 *     VkBool32 shaderStorageImageArrayNonUniformIndexing;
 *     VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
 *     VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
 *     VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
 *     VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingSampledImageUpdateAfterBind;
 *     VkBool32 descriptorBindingStorageImageUpdateAfterBind;
 *     VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
 *     VkBool32 descriptorBindingUpdateUnusedWhilePending;
 *     VkBool32 descriptorBindingPartiallyBound;
 *     VkBool32 descriptorBindingVariableDescriptorCount;
 *     VkBool32 runtimeDescriptorArray;
 *     VkBool32 samplerFilterMinmax;
 *     VkBool32 scalarBlockLayout;
 *     VkBool32 imagelessFramebuffer;
 *     VkBool32 uniformBufferStandardLayout;
 *     VkBool32 shaderSubgroupExtendedTypes;
 *     VkBool32 separateDepthStencilLayouts;
 *     VkBool32 hostQueryReset;
 *     VkBool32 timelineSemaphore;
 *     VkBool32 bufferDeviceAddress;
 *     VkBool32 bufferDeviceAddressCaptureReplay;
 *     VkBool32 bufferDeviceAddressMultiDevice;
 *     VkBool32 vulkanMemoryModel;
 *     VkBool32 vulkanMemoryModelDeviceScope;
 *     VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
 *     VkBool32 shaderOutputViewportIndex;
 *     VkBool32 shaderOutputLayer;
 *     VkBool32 subgroupBroadcastDynamicId;
 * }
 * }
 */
public class VkPhysicalDeviceVulkan12Features {

    VkPhysicalDeviceVulkan12Features() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("samplerMirrorClampToEdge"),
        vulkan_h.C_INT.withName("drawIndirectCount"),
        vulkan_h.C_INT.withName("storageBuffer8BitAccess"),
        vulkan_h.C_INT.withName("uniformAndStorageBuffer8BitAccess"),
        vulkan_h.C_INT.withName("storagePushConstant8"),
        vulkan_h.C_INT.withName("shaderBufferInt64Atomics"),
        vulkan_h.C_INT.withName("shaderSharedInt64Atomics"),
        vulkan_h.C_INT.withName("shaderFloat16"),
        vulkan_h.C_INT.withName("shaderInt8"),
        vulkan_h.C_INT.withName("descriptorIndexing"),
        vulkan_h.C_INT.withName("shaderInputAttachmentArrayDynamicIndexing"),
        vulkan_h.C_INT.withName("shaderUniformTexelBufferArrayDynamicIndexing"),
        vulkan_h.C_INT.withName("shaderStorageTexelBufferArrayDynamicIndexing"),
        vulkan_h.C_INT.withName("shaderUniformBufferArrayNonUniformIndexing"),
        vulkan_h.C_INT.withName("shaderSampledImageArrayNonUniformIndexing"),
        vulkan_h.C_INT.withName("shaderStorageBufferArrayNonUniformIndexing"),
        vulkan_h.C_INT.withName("shaderStorageImageArrayNonUniformIndexing"),
        vulkan_h.C_INT.withName("shaderInputAttachmentArrayNonUniformIndexing"),
        vulkan_h.C_INT.withName("shaderUniformTexelBufferArrayNonUniformIndexing"),
        vulkan_h.C_INT.withName("shaderStorageTexelBufferArrayNonUniformIndexing"),
        vulkan_h.C_INT.withName("descriptorBindingUniformBufferUpdateAfterBind"),
        vulkan_h.C_INT.withName("descriptorBindingSampledImageUpdateAfterBind"),
        vulkan_h.C_INT.withName("descriptorBindingStorageImageUpdateAfterBind"),
        vulkan_h.C_INT.withName("descriptorBindingStorageBufferUpdateAfterBind"),
        vulkan_h.C_INT.withName("descriptorBindingUniformTexelBufferUpdateAfterBind"),
        vulkan_h.C_INT.withName("descriptorBindingStorageTexelBufferUpdateAfterBind"),
        vulkan_h.C_INT.withName("descriptorBindingUpdateUnusedWhilePending"),
        vulkan_h.C_INT.withName("descriptorBindingPartiallyBound"),
        vulkan_h.C_INT.withName("descriptorBindingVariableDescriptorCount"),
        vulkan_h.C_INT.withName("runtimeDescriptorArray"),
        vulkan_h.C_INT.withName("samplerFilterMinmax"),
        vulkan_h.C_INT.withName("scalarBlockLayout"),
        vulkan_h.C_INT.withName("imagelessFramebuffer"),
        vulkan_h.C_INT.withName("uniformBufferStandardLayout"),
        vulkan_h.C_INT.withName("shaderSubgroupExtendedTypes"),
        vulkan_h.C_INT.withName("separateDepthStencilLayouts"),
        vulkan_h.C_INT.withName("hostQueryReset"),
        vulkan_h.C_INT.withName("timelineSemaphore"),
        vulkan_h.C_INT.withName("bufferDeviceAddress"),
        vulkan_h.C_INT.withName("bufferDeviceAddressCaptureReplay"),
        vulkan_h.C_INT.withName("bufferDeviceAddressMultiDevice"),
        vulkan_h.C_INT.withName("vulkanMemoryModel"),
        vulkan_h.C_INT.withName("vulkanMemoryModelDeviceScope"),
        vulkan_h.C_INT.withName("vulkanMemoryModelAvailabilityVisibilityChains"),
        vulkan_h.C_INT.withName("shaderOutputViewportIndex"),
        vulkan_h.C_INT.withName("shaderOutputLayer"),
        vulkan_h.C_INT.withName("subgroupBroadcastDynamicId"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceVulkan12Features");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt samplerMirrorClampToEdge$LAYOUT = (OfInt)$LAYOUT.select(groupElement("samplerMirrorClampToEdge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 samplerMirrorClampToEdge
     * }
     */
    public static final OfInt samplerMirrorClampToEdge$layout() {
        return samplerMirrorClampToEdge$LAYOUT;
    }

    private static final long samplerMirrorClampToEdge$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 samplerMirrorClampToEdge
     * }
     */
    public static final long samplerMirrorClampToEdge$offset() {
        return samplerMirrorClampToEdge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 samplerMirrorClampToEdge
     * }
     */
    public static int samplerMirrorClampToEdge(MemorySegment struct) {
        return struct.get(samplerMirrorClampToEdge$LAYOUT, samplerMirrorClampToEdge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 samplerMirrorClampToEdge
     * }
     */
    public static void samplerMirrorClampToEdge(MemorySegment struct, int fieldValue) {
        struct.set(samplerMirrorClampToEdge$LAYOUT, samplerMirrorClampToEdge$OFFSET, fieldValue);
    }

    private static final OfInt drawIndirectCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("drawIndirectCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectCount
     * }
     */
    public static final OfInt drawIndirectCount$layout() {
        return drawIndirectCount$LAYOUT;
    }

    private static final long drawIndirectCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectCount
     * }
     */
    public static final long drawIndirectCount$offset() {
        return drawIndirectCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectCount
     * }
     */
    public static int drawIndirectCount(MemorySegment struct) {
        return struct.get(drawIndirectCount$LAYOUT, drawIndirectCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 drawIndirectCount
     * }
     */
    public static void drawIndirectCount(MemorySegment struct, int fieldValue) {
        struct.set(drawIndirectCount$LAYOUT, drawIndirectCount$OFFSET, fieldValue);
    }

    private static final OfInt storageBuffer8BitAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storageBuffer8BitAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer8BitAccess
     * }
     */
    public static final OfInt storageBuffer8BitAccess$layout() {
        return storageBuffer8BitAccess$LAYOUT;
    }

    private static final long storageBuffer8BitAccess$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer8BitAccess
     * }
     */
    public static final long storageBuffer8BitAccess$offset() {
        return storageBuffer8BitAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer8BitAccess
     * }
     */
    public static int storageBuffer8BitAccess(MemorySegment struct) {
        return struct.get(storageBuffer8BitAccess$LAYOUT, storageBuffer8BitAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 storageBuffer8BitAccess
     * }
     */
    public static void storageBuffer8BitAccess(MemorySegment struct, int fieldValue) {
        struct.set(storageBuffer8BitAccess$LAYOUT, storageBuffer8BitAccess$OFFSET, fieldValue);
    }

    private static final OfInt uniformAndStorageBuffer8BitAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uniformAndStorageBuffer8BitAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer8BitAccess
     * }
     */
    public static final OfInt uniformAndStorageBuffer8BitAccess$layout() {
        return uniformAndStorageBuffer8BitAccess$LAYOUT;
    }

    private static final long uniformAndStorageBuffer8BitAccess$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer8BitAccess
     * }
     */
    public static final long uniformAndStorageBuffer8BitAccess$offset() {
        return uniformAndStorageBuffer8BitAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer8BitAccess
     * }
     */
    public static int uniformAndStorageBuffer8BitAccess(MemorySegment struct) {
        return struct.get(uniformAndStorageBuffer8BitAccess$LAYOUT, uniformAndStorageBuffer8BitAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 uniformAndStorageBuffer8BitAccess
     * }
     */
    public static void uniformAndStorageBuffer8BitAccess(MemorySegment struct, int fieldValue) {
        struct.set(uniformAndStorageBuffer8BitAccess$LAYOUT, uniformAndStorageBuffer8BitAccess$OFFSET, fieldValue);
    }

    private static final OfInt storagePushConstant8$LAYOUT = (OfInt)$LAYOUT.select(groupElement("storagePushConstant8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant8
     * }
     */
    public static final OfInt storagePushConstant8$layout() {
        return storagePushConstant8$LAYOUT;
    }

    private static final long storagePushConstant8$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant8
     * }
     */
    public static final long storagePushConstant8$offset() {
        return storagePushConstant8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant8
     * }
     */
    public static int storagePushConstant8(MemorySegment struct) {
        return struct.get(storagePushConstant8$LAYOUT, storagePushConstant8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 storagePushConstant8
     * }
     */
    public static void storagePushConstant8(MemorySegment struct, int fieldValue) {
        struct.set(storagePushConstant8$LAYOUT, storagePushConstant8$OFFSET, fieldValue);
    }

    private static final OfInt shaderBufferInt64Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderBufferInt64Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferInt64Atomics
     * }
     */
    public static final OfInt shaderBufferInt64Atomics$layout() {
        return shaderBufferInt64Atomics$LAYOUT;
    }

    private static final long shaderBufferInt64Atomics$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferInt64Atomics
     * }
     */
    public static final long shaderBufferInt64Atomics$offset() {
        return shaderBufferInt64Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferInt64Atomics
     * }
     */
    public static int shaderBufferInt64Atomics(MemorySegment struct) {
        return struct.get(shaderBufferInt64Atomics$LAYOUT, shaderBufferInt64Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderBufferInt64Atomics
     * }
     */
    public static void shaderBufferInt64Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderBufferInt64Atomics$LAYOUT, shaderBufferInt64Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderSharedInt64Atomics$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSharedInt64Atomics"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedInt64Atomics
     * }
     */
    public static final OfInt shaderSharedInt64Atomics$layout() {
        return shaderSharedInt64Atomics$LAYOUT;
    }

    private static final long shaderSharedInt64Atomics$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedInt64Atomics
     * }
     */
    public static final long shaderSharedInt64Atomics$offset() {
        return shaderSharedInt64Atomics$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedInt64Atomics
     * }
     */
    public static int shaderSharedInt64Atomics(MemorySegment struct) {
        return struct.get(shaderSharedInt64Atomics$LAYOUT, shaderSharedInt64Atomics$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSharedInt64Atomics
     * }
     */
    public static void shaderSharedInt64Atomics(MemorySegment struct, int fieldValue) {
        struct.set(shaderSharedInt64Atomics$LAYOUT, shaderSharedInt64Atomics$OFFSET, fieldValue);
    }

    private static final OfInt shaderFloat16$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderFloat16"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat16
     * }
     */
    public static final OfInt shaderFloat16$layout() {
        return shaderFloat16$LAYOUT;
    }

    private static final long shaderFloat16$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat16
     * }
     */
    public static final long shaderFloat16$offset() {
        return shaderFloat16$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat16
     * }
     */
    public static int shaderFloat16(MemorySegment struct) {
        return struct.get(shaderFloat16$LAYOUT, shaderFloat16$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderFloat16
     * }
     */
    public static void shaderFloat16(MemorySegment struct, int fieldValue) {
        struct.set(shaderFloat16$LAYOUT, shaderFloat16$OFFSET, fieldValue);
    }

    private static final OfInt shaderInt8$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderInt8"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt8
     * }
     */
    public static final OfInt shaderInt8$layout() {
        return shaderInt8$LAYOUT;
    }

    private static final long shaderInt8$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt8
     * }
     */
    public static final long shaderInt8$offset() {
        return shaderInt8$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt8
     * }
     */
    public static int shaderInt8(MemorySegment struct) {
        return struct.get(shaderInt8$LAYOUT, shaderInt8$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInt8
     * }
     */
    public static void shaderInt8(MemorySegment struct, int fieldValue) {
        struct.set(shaderInt8$LAYOUT, shaderInt8$OFFSET, fieldValue);
    }

    private static final OfInt descriptorIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorIndexing
     * }
     */
    public static final OfInt descriptorIndexing$layout() {
        return descriptorIndexing$LAYOUT;
    }

    private static final long descriptorIndexing$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorIndexing
     * }
     */
    public static final long descriptorIndexing$offset() {
        return descriptorIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorIndexing
     * }
     */
    public static int descriptorIndexing(MemorySegment struct) {
        return struct.get(descriptorIndexing$LAYOUT, descriptorIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorIndexing
     * }
     */
    public static void descriptorIndexing(MemorySegment struct, int fieldValue) {
        struct.set(descriptorIndexing$LAYOUT, descriptorIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderInputAttachmentArrayDynamicIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderInputAttachmentArrayDynamicIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayDynamicIndexing
     * }
     */
    public static final OfInt shaderInputAttachmentArrayDynamicIndexing$layout() {
        return shaderInputAttachmentArrayDynamicIndexing$LAYOUT;
    }

    private static final long shaderInputAttachmentArrayDynamicIndexing$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayDynamicIndexing
     * }
     */
    public static final long shaderInputAttachmentArrayDynamicIndexing$offset() {
        return shaderInputAttachmentArrayDynamicIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayDynamicIndexing
     * }
     */
    public static int shaderInputAttachmentArrayDynamicIndexing(MemorySegment struct) {
        return struct.get(shaderInputAttachmentArrayDynamicIndexing$LAYOUT, shaderInputAttachmentArrayDynamicIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayDynamicIndexing
     * }
     */
    public static void shaderInputAttachmentArrayDynamicIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderInputAttachmentArrayDynamicIndexing$LAYOUT, shaderInputAttachmentArrayDynamicIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderUniformTexelBufferArrayDynamicIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderUniformTexelBufferArrayDynamicIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayDynamicIndexing
     * }
     */
    public static final OfInt shaderUniformTexelBufferArrayDynamicIndexing$layout() {
        return shaderUniformTexelBufferArrayDynamicIndexing$LAYOUT;
    }

    private static final long shaderUniformTexelBufferArrayDynamicIndexing$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayDynamicIndexing
     * }
     */
    public static final long shaderUniformTexelBufferArrayDynamicIndexing$offset() {
        return shaderUniformTexelBufferArrayDynamicIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayDynamicIndexing
     * }
     */
    public static int shaderUniformTexelBufferArrayDynamicIndexing(MemorySegment struct) {
        return struct.get(shaderUniformTexelBufferArrayDynamicIndexing$LAYOUT, shaderUniformTexelBufferArrayDynamicIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayDynamicIndexing
     * }
     */
    public static void shaderUniformTexelBufferArrayDynamicIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderUniformTexelBufferArrayDynamicIndexing$LAYOUT, shaderUniformTexelBufferArrayDynamicIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageTexelBufferArrayDynamicIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageTexelBufferArrayDynamicIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayDynamicIndexing
     * }
     */
    public static final OfInt shaderStorageTexelBufferArrayDynamicIndexing$layout() {
        return shaderStorageTexelBufferArrayDynamicIndexing$LAYOUT;
    }

    private static final long shaderStorageTexelBufferArrayDynamicIndexing$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayDynamicIndexing
     * }
     */
    public static final long shaderStorageTexelBufferArrayDynamicIndexing$offset() {
        return shaderStorageTexelBufferArrayDynamicIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayDynamicIndexing
     * }
     */
    public static int shaderStorageTexelBufferArrayDynamicIndexing(MemorySegment struct) {
        return struct.get(shaderStorageTexelBufferArrayDynamicIndexing$LAYOUT, shaderStorageTexelBufferArrayDynamicIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayDynamicIndexing
     * }
     */
    public static void shaderStorageTexelBufferArrayDynamicIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageTexelBufferArrayDynamicIndexing$LAYOUT, shaderStorageTexelBufferArrayDynamicIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderUniformBufferArrayNonUniformIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderUniformBufferArrayNonUniformIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexing
     * }
     */
    public static final OfInt shaderUniformBufferArrayNonUniformIndexing$layout() {
        return shaderUniformBufferArrayNonUniformIndexing$LAYOUT;
    }

    private static final long shaderUniformBufferArrayNonUniformIndexing$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexing
     * }
     */
    public static final long shaderUniformBufferArrayNonUniformIndexing$offset() {
        return shaderUniformBufferArrayNonUniformIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexing
     * }
     */
    public static int shaderUniformBufferArrayNonUniformIndexing(MemorySegment struct) {
        return struct.get(shaderUniformBufferArrayNonUniformIndexing$LAYOUT, shaderUniformBufferArrayNonUniformIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformBufferArrayNonUniformIndexing
     * }
     */
    public static void shaderUniformBufferArrayNonUniformIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderUniformBufferArrayNonUniformIndexing$LAYOUT, shaderUniformBufferArrayNonUniformIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderSampledImageArrayNonUniformIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSampledImageArrayNonUniformIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexing
     * }
     */
    public static final OfInt shaderSampledImageArrayNonUniformIndexing$layout() {
        return shaderSampledImageArrayNonUniformIndexing$LAYOUT;
    }

    private static final long shaderSampledImageArrayNonUniformIndexing$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexing
     * }
     */
    public static final long shaderSampledImageArrayNonUniformIndexing$offset() {
        return shaderSampledImageArrayNonUniformIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexing
     * }
     */
    public static int shaderSampledImageArrayNonUniformIndexing(MemorySegment struct) {
        return struct.get(shaderSampledImageArrayNonUniformIndexing$LAYOUT, shaderSampledImageArrayNonUniformIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSampledImageArrayNonUniformIndexing
     * }
     */
    public static void shaderSampledImageArrayNonUniformIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderSampledImageArrayNonUniformIndexing$LAYOUT, shaderSampledImageArrayNonUniformIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageBufferArrayNonUniformIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageBufferArrayNonUniformIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexing
     * }
     */
    public static final OfInt shaderStorageBufferArrayNonUniformIndexing$layout() {
        return shaderStorageBufferArrayNonUniformIndexing$LAYOUT;
    }

    private static final long shaderStorageBufferArrayNonUniformIndexing$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexing
     * }
     */
    public static final long shaderStorageBufferArrayNonUniformIndexing$offset() {
        return shaderStorageBufferArrayNonUniformIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexing
     * }
     */
    public static int shaderStorageBufferArrayNonUniformIndexing(MemorySegment struct) {
        return struct.get(shaderStorageBufferArrayNonUniformIndexing$LAYOUT, shaderStorageBufferArrayNonUniformIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageBufferArrayNonUniformIndexing
     * }
     */
    public static void shaderStorageBufferArrayNonUniformIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageBufferArrayNonUniformIndexing$LAYOUT, shaderStorageBufferArrayNonUniformIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageImageArrayNonUniformIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageImageArrayNonUniformIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexing
     * }
     */
    public static final OfInt shaderStorageImageArrayNonUniformIndexing$layout() {
        return shaderStorageImageArrayNonUniformIndexing$LAYOUT;
    }

    private static final long shaderStorageImageArrayNonUniformIndexing$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexing
     * }
     */
    public static final long shaderStorageImageArrayNonUniformIndexing$offset() {
        return shaderStorageImageArrayNonUniformIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexing
     * }
     */
    public static int shaderStorageImageArrayNonUniformIndexing(MemorySegment struct) {
        return struct.get(shaderStorageImageArrayNonUniformIndexing$LAYOUT, shaderStorageImageArrayNonUniformIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageImageArrayNonUniformIndexing
     * }
     */
    public static void shaderStorageImageArrayNonUniformIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageImageArrayNonUniformIndexing$LAYOUT, shaderStorageImageArrayNonUniformIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderInputAttachmentArrayNonUniformIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderInputAttachmentArrayNonUniformIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexing
     * }
     */
    public static final OfInt shaderInputAttachmentArrayNonUniformIndexing$layout() {
        return shaderInputAttachmentArrayNonUniformIndexing$LAYOUT;
    }

    private static final long shaderInputAttachmentArrayNonUniformIndexing$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexing
     * }
     */
    public static final long shaderInputAttachmentArrayNonUniformIndexing$offset() {
        return shaderInputAttachmentArrayNonUniformIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexing
     * }
     */
    public static int shaderInputAttachmentArrayNonUniformIndexing(MemorySegment struct) {
        return struct.get(shaderInputAttachmentArrayNonUniformIndexing$LAYOUT, shaderInputAttachmentArrayNonUniformIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderInputAttachmentArrayNonUniformIndexing
     * }
     */
    public static void shaderInputAttachmentArrayNonUniformIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderInputAttachmentArrayNonUniformIndexing$LAYOUT, shaderInputAttachmentArrayNonUniformIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderUniformTexelBufferArrayNonUniformIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderUniformTexelBufferArrayNonUniformIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing
     * }
     */
    public static final OfInt shaderUniformTexelBufferArrayNonUniformIndexing$layout() {
        return shaderUniformTexelBufferArrayNonUniformIndexing$LAYOUT;
    }

    private static final long shaderUniformTexelBufferArrayNonUniformIndexing$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing
     * }
     */
    public static final long shaderUniformTexelBufferArrayNonUniformIndexing$offset() {
        return shaderUniformTexelBufferArrayNonUniformIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing
     * }
     */
    public static int shaderUniformTexelBufferArrayNonUniformIndexing(MemorySegment struct) {
        return struct.get(shaderUniformTexelBufferArrayNonUniformIndexing$LAYOUT, shaderUniformTexelBufferArrayNonUniformIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing
     * }
     */
    public static void shaderUniformTexelBufferArrayNonUniformIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderUniformTexelBufferArrayNonUniformIndexing$LAYOUT, shaderUniformTexelBufferArrayNonUniformIndexing$OFFSET, fieldValue);
    }

    private static final OfInt shaderStorageTexelBufferArrayNonUniformIndexing$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStorageTexelBufferArrayNonUniformIndexing"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing
     * }
     */
    public static final OfInt shaderStorageTexelBufferArrayNonUniformIndexing$layout() {
        return shaderStorageTexelBufferArrayNonUniformIndexing$LAYOUT;
    }

    private static final long shaderStorageTexelBufferArrayNonUniformIndexing$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing
     * }
     */
    public static final long shaderStorageTexelBufferArrayNonUniformIndexing$offset() {
        return shaderStorageTexelBufferArrayNonUniformIndexing$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing
     * }
     */
    public static int shaderStorageTexelBufferArrayNonUniformIndexing(MemorySegment struct) {
        return struct.get(shaderStorageTexelBufferArrayNonUniformIndexing$LAYOUT, shaderStorageTexelBufferArrayNonUniformIndexing$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing
     * }
     */
    public static void shaderStorageTexelBufferArrayNonUniformIndexing(MemorySegment struct, int fieldValue) {
        struct.set(shaderStorageTexelBufferArrayNonUniformIndexing$LAYOUT, shaderStorageTexelBufferArrayNonUniformIndexing$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingUniformBufferUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingUniformBufferUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformBufferUpdateAfterBind
     * }
     */
    public static final OfInt descriptorBindingUniformBufferUpdateAfterBind$layout() {
        return descriptorBindingUniformBufferUpdateAfterBind$LAYOUT;
    }

    private static final long descriptorBindingUniformBufferUpdateAfterBind$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformBufferUpdateAfterBind
     * }
     */
    public static final long descriptorBindingUniformBufferUpdateAfterBind$offset() {
        return descriptorBindingUniformBufferUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformBufferUpdateAfterBind
     * }
     */
    public static int descriptorBindingUniformBufferUpdateAfterBind(MemorySegment struct) {
        return struct.get(descriptorBindingUniformBufferUpdateAfterBind$LAYOUT, descriptorBindingUniformBufferUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformBufferUpdateAfterBind
     * }
     */
    public static void descriptorBindingUniformBufferUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingUniformBufferUpdateAfterBind$LAYOUT, descriptorBindingUniformBufferUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingSampledImageUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingSampledImageUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingSampledImageUpdateAfterBind
     * }
     */
    public static final OfInt descriptorBindingSampledImageUpdateAfterBind$layout() {
        return descriptorBindingSampledImageUpdateAfterBind$LAYOUT;
    }

    private static final long descriptorBindingSampledImageUpdateAfterBind$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingSampledImageUpdateAfterBind
     * }
     */
    public static final long descriptorBindingSampledImageUpdateAfterBind$offset() {
        return descriptorBindingSampledImageUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingSampledImageUpdateAfterBind
     * }
     */
    public static int descriptorBindingSampledImageUpdateAfterBind(MemorySegment struct) {
        return struct.get(descriptorBindingSampledImageUpdateAfterBind$LAYOUT, descriptorBindingSampledImageUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingSampledImageUpdateAfterBind
     * }
     */
    public static void descriptorBindingSampledImageUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingSampledImageUpdateAfterBind$LAYOUT, descriptorBindingSampledImageUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingStorageImageUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingStorageImageUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageImageUpdateAfterBind
     * }
     */
    public static final OfInt descriptorBindingStorageImageUpdateAfterBind$layout() {
        return descriptorBindingStorageImageUpdateAfterBind$LAYOUT;
    }

    private static final long descriptorBindingStorageImageUpdateAfterBind$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageImageUpdateAfterBind
     * }
     */
    public static final long descriptorBindingStorageImageUpdateAfterBind$offset() {
        return descriptorBindingStorageImageUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageImageUpdateAfterBind
     * }
     */
    public static int descriptorBindingStorageImageUpdateAfterBind(MemorySegment struct) {
        return struct.get(descriptorBindingStorageImageUpdateAfterBind$LAYOUT, descriptorBindingStorageImageUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageImageUpdateAfterBind
     * }
     */
    public static void descriptorBindingStorageImageUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingStorageImageUpdateAfterBind$LAYOUT, descriptorBindingStorageImageUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingStorageBufferUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingStorageBufferUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageBufferUpdateAfterBind
     * }
     */
    public static final OfInt descriptorBindingStorageBufferUpdateAfterBind$layout() {
        return descriptorBindingStorageBufferUpdateAfterBind$LAYOUT;
    }

    private static final long descriptorBindingStorageBufferUpdateAfterBind$OFFSET = 108;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageBufferUpdateAfterBind
     * }
     */
    public static final long descriptorBindingStorageBufferUpdateAfterBind$offset() {
        return descriptorBindingStorageBufferUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageBufferUpdateAfterBind
     * }
     */
    public static int descriptorBindingStorageBufferUpdateAfterBind(MemorySegment struct) {
        return struct.get(descriptorBindingStorageBufferUpdateAfterBind$LAYOUT, descriptorBindingStorageBufferUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageBufferUpdateAfterBind
     * }
     */
    public static void descriptorBindingStorageBufferUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingStorageBufferUpdateAfterBind$LAYOUT, descriptorBindingStorageBufferUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingUniformTexelBufferUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingUniformTexelBufferUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind
     * }
     */
    public static final OfInt descriptorBindingUniformTexelBufferUpdateAfterBind$layout() {
        return descriptorBindingUniformTexelBufferUpdateAfterBind$LAYOUT;
    }

    private static final long descriptorBindingUniformTexelBufferUpdateAfterBind$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind
     * }
     */
    public static final long descriptorBindingUniformTexelBufferUpdateAfterBind$offset() {
        return descriptorBindingUniformTexelBufferUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind
     * }
     */
    public static int descriptorBindingUniformTexelBufferUpdateAfterBind(MemorySegment struct) {
        return struct.get(descriptorBindingUniformTexelBufferUpdateAfterBind$LAYOUT, descriptorBindingUniformTexelBufferUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind
     * }
     */
    public static void descriptorBindingUniformTexelBufferUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingUniformTexelBufferUpdateAfterBind$LAYOUT, descriptorBindingUniformTexelBufferUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingStorageTexelBufferUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingStorageTexelBufferUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind
     * }
     */
    public static final OfInt descriptorBindingStorageTexelBufferUpdateAfterBind$layout() {
        return descriptorBindingStorageTexelBufferUpdateAfterBind$LAYOUT;
    }

    private static final long descriptorBindingStorageTexelBufferUpdateAfterBind$OFFSET = 116;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind
     * }
     */
    public static final long descriptorBindingStorageTexelBufferUpdateAfterBind$offset() {
        return descriptorBindingStorageTexelBufferUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind
     * }
     */
    public static int descriptorBindingStorageTexelBufferUpdateAfterBind(MemorySegment struct) {
        return struct.get(descriptorBindingStorageTexelBufferUpdateAfterBind$LAYOUT, descriptorBindingStorageTexelBufferUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind
     * }
     */
    public static void descriptorBindingStorageTexelBufferUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingStorageTexelBufferUpdateAfterBind$LAYOUT, descriptorBindingStorageTexelBufferUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingUpdateUnusedWhilePending$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingUpdateUnusedWhilePending"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUpdateUnusedWhilePending
     * }
     */
    public static final OfInt descriptorBindingUpdateUnusedWhilePending$layout() {
        return descriptorBindingUpdateUnusedWhilePending$LAYOUT;
    }

    private static final long descriptorBindingUpdateUnusedWhilePending$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUpdateUnusedWhilePending
     * }
     */
    public static final long descriptorBindingUpdateUnusedWhilePending$offset() {
        return descriptorBindingUpdateUnusedWhilePending$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUpdateUnusedWhilePending
     * }
     */
    public static int descriptorBindingUpdateUnusedWhilePending(MemorySegment struct) {
        return struct.get(descriptorBindingUpdateUnusedWhilePending$LAYOUT, descriptorBindingUpdateUnusedWhilePending$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingUpdateUnusedWhilePending
     * }
     */
    public static void descriptorBindingUpdateUnusedWhilePending(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingUpdateUnusedWhilePending$LAYOUT, descriptorBindingUpdateUnusedWhilePending$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingPartiallyBound$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingPartiallyBound"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingPartiallyBound
     * }
     */
    public static final OfInt descriptorBindingPartiallyBound$layout() {
        return descriptorBindingPartiallyBound$LAYOUT;
    }

    private static final long descriptorBindingPartiallyBound$OFFSET = 124;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingPartiallyBound
     * }
     */
    public static final long descriptorBindingPartiallyBound$offset() {
        return descriptorBindingPartiallyBound$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingPartiallyBound
     * }
     */
    public static int descriptorBindingPartiallyBound(MemorySegment struct) {
        return struct.get(descriptorBindingPartiallyBound$LAYOUT, descriptorBindingPartiallyBound$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingPartiallyBound
     * }
     */
    public static void descriptorBindingPartiallyBound(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingPartiallyBound$LAYOUT, descriptorBindingPartiallyBound$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingVariableDescriptorCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingVariableDescriptorCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingVariableDescriptorCount
     * }
     */
    public static final OfInt descriptorBindingVariableDescriptorCount$layout() {
        return descriptorBindingVariableDescriptorCount$LAYOUT;
    }

    private static final long descriptorBindingVariableDescriptorCount$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingVariableDescriptorCount
     * }
     */
    public static final long descriptorBindingVariableDescriptorCount$offset() {
        return descriptorBindingVariableDescriptorCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingVariableDescriptorCount
     * }
     */
    public static int descriptorBindingVariableDescriptorCount(MemorySegment struct) {
        return struct.get(descriptorBindingVariableDescriptorCount$LAYOUT, descriptorBindingVariableDescriptorCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingVariableDescriptorCount
     * }
     */
    public static void descriptorBindingVariableDescriptorCount(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingVariableDescriptorCount$LAYOUT, descriptorBindingVariableDescriptorCount$OFFSET, fieldValue);
    }

    private static final OfInt runtimeDescriptorArray$LAYOUT = (OfInt)$LAYOUT.select(groupElement("runtimeDescriptorArray"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 runtimeDescriptorArray
     * }
     */
    public static final OfInt runtimeDescriptorArray$layout() {
        return runtimeDescriptorArray$LAYOUT;
    }

    private static final long runtimeDescriptorArray$OFFSET = 132;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 runtimeDescriptorArray
     * }
     */
    public static final long runtimeDescriptorArray$offset() {
        return runtimeDescriptorArray$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 runtimeDescriptorArray
     * }
     */
    public static int runtimeDescriptorArray(MemorySegment struct) {
        return struct.get(runtimeDescriptorArray$LAYOUT, runtimeDescriptorArray$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 runtimeDescriptorArray
     * }
     */
    public static void runtimeDescriptorArray(MemorySegment struct, int fieldValue) {
        struct.set(runtimeDescriptorArray$LAYOUT, runtimeDescriptorArray$OFFSET, fieldValue);
    }

    private static final OfInt samplerFilterMinmax$LAYOUT = (OfInt)$LAYOUT.select(groupElement("samplerFilterMinmax"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 samplerFilterMinmax
     * }
     */
    public static final OfInt samplerFilterMinmax$layout() {
        return samplerFilterMinmax$LAYOUT;
    }

    private static final long samplerFilterMinmax$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 samplerFilterMinmax
     * }
     */
    public static final long samplerFilterMinmax$offset() {
        return samplerFilterMinmax$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 samplerFilterMinmax
     * }
     */
    public static int samplerFilterMinmax(MemorySegment struct) {
        return struct.get(samplerFilterMinmax$LAYOUT, samplerFilterMinmax$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 samplerFilterMinmax
     * }
     */
    public static void samplerFilterMinmax(MemorySegment struct, int fieldValue) {
        struct.set(samplerFilterMinmax$LAYOUT, samplerFilterMinmax$OFFSET, fieldValue);
    }

    private static final OfInt scalarBlockLayout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("scalarBlockLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 scalarBlockLayout
     * }
     */
    public static final OfInt scalarBlockLayout$layout() {
        return scalarBlockLayout$LAYOUT;
    }

    private static final long scalarBlockLayout$OFFSET = 140;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 scalarBlockLayout
     * }
     */
    public static final long scalarBlockLayout$offset() {
        return scalarBlockLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 scalarBlockLayout
     * }
     */
    public static int scalarBlockLayout(MemorySegment struct) {
        return struct.get(scalarBlockLayout$LAYOUT, scalarBlockLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 scalarBlockLayout
     * }
     */
    public static void scalarBlockLayout(MemorySegment struct, int fieldValue) {
        struct.set(scalarBlockLayout$LAYOUT, scalarBlockLayout$OFFSET, fieldValue);
    }

    private static final OfInt imagelessFramebuffer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imagelessFramebuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 imagelessFramebuffer
     * }
     */
    public static final OfInt imagelessFramebuffer$layout() {
        return imagelessFramebuffer$LAYOUT;
    }

    private static final long imagelessFramebuffer$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 imagelessFramebuffer
     * }
     */
    public static final long imagelessFramebuffer$offset() {
        return imagelessFramebuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 imagelessFramebuffer
     * }
     */
    public static int imagelessFramebuffer(MemorySegment struct) {
        return struct.get(imagelessFramebuffer$LAYOUT, imagelessFramebuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 imagelessFramebuffer
     * }
     */
    public static void imagelessFramebuffer(MemorySegment struct, int fieldValue) {
        struct.set(imagelessFramebuffer$LAYOUT, imagelessFramebuffer$OFFSET, fieldValue);
    }

    private static final OfInt uniformBufferStandardLayout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uniformBufferStandardLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 uniformBufferStandardLayout
     * }
     */
    public static final OfInt uniformBufferStandardLayout$layout() {
        return uniformBufferStandardLayout$LAYOUT;
    }

    private static final long uniformBufferStandardLayout$OFFSET = 148;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 uniformBufferStandardLayout
     * }
     */
    public static final long uniformBufferStandardLayout$offset() {
        return uniformBufferStandardLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 uniformBufferStandardLayout
     * }
     */
    public static int uniformBufferStandardLayout(MemorySegment struct) {
        return struct.get(uniformBufferStandardLayout$LAYOUT, uniformBufferStandardLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 uniformBufferStandardLayout
     * }
     */
    public static void uniformBufferStandardLayout(MemorySegment struct, int fieldValue) {
        struct.set(uniformBufferStandardLayout$LAYOUT, uniformBufferStandardLayout$OFFSET, fieldValue);
    }

    private static final OfInt shaderSubgroupExtendedTypes$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderSubgroupExtendedTypes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderSubgroupExtendedTypes
     * }
     */
    public static final OfInt shaderSubgroupExtendedTypes$layout() {
        return shaderSubgroupExtendedTypes$LAYOUT;
    }

    private static final long shaderSubgroupExtendedTypes$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderSubgroupExtendedTypes
     * }
     */
    public static final long shaderSubgroupExtendedTypes$offset() {
        return shaderSubgroupExtendedTypes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSubgroupExtendedTypes
     * }
     */
    public static int shaderSubgroupExtendedTypes(MemorySegment struct) {
        return struct.get(shaderSubgroupExtendedTypes$LAYOUT, shaderSubgroupExtendedTypes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderSubgroupExtendedTypes
     * }
     */
    public static void shaderSubgroupExtendedTypes(MemorySegment struct, int fieldValue) {
        struct.set(shaderSubgroupExtendedTypes$LAYOUT, shaderSubgroupExtendedTypes$OFFSET, fieldValue);
    }

    private static final OfInt separateDepthStencilLayouts$LAYOUT = (OfInt)$LAYOUT.select(groupElement("separateDepthStencilLayouts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 separateDepthStencilLayouts
     * }
     */
    public static final OfInt separateDepthStencilLayouts$layout() {
        return separateDepthStencilLayouts$LAYOUT;
    }

    private static final long separateDepthStencilLayouts$OFFSET = 156;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 separateDepthStencilLayouts
     * }
     */
    public static final long separateDepthStencilLayouts$offset() {
        return separateDepthStencilLayouts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 separateDepthStencilLayouts
     * }
     */
    public static int separateDepthStencilLayouts(MemorySegment struct) {
        return struct.get(separateDepthStencilLayouts$LAYOUT, separateDepthStencilLayouts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 separateDepthStencilLayouts
     * }
     */
    public static void separateDepthStencilLayouts(MemorySegment struct, int fieldValue) {
        struct.set(separateDepthStencilLayouts$LAYOUT, separateDepthStencilLayouts$OFFSET, fieldValue);
    }

    private static final OfInt hostQueryReset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("hostQueryReset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 hostQueryReset
     * }
     */
    public static final OfInt hostQueryReset$layout() {
        return hostQueryReset$LAYOUT;
    }

    private static final long hostQueryReset$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 hostQueryReset
     * }
     */
    public static final long hostQueryReset$offset() {
        return hostQueryReset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 hostQueryReset
     * }
     */
    public static int hostQueryReset(MemorySegment struct) {
        return struct.get(hostQueryReset$LAYOUT, hostQueryReset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 hostQueryReset
     * }
     */
    public static void hostQueryReset(MemorySegment struct, int fieldValue) {
        struct.set(hostQueryReset$LAYOUT, hostQueryReset$OFFSET, fieldValue);
    }

    private static final OfInt timelineSemaphore$LAYOUT = (OfInt)$LAYOUT.select(groupElement("timelineSemaphore"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 timelineSemaphore
     * }
     */
    public static final OfInt timelineSemaphore$layout() {
        return timelineSemaphore$LAYOUT;
    }

    private static final long timelineSemaphore$OFFSET = 164;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 timelineSemaphore
     * }
     */
    public static final long timelineSemaphore$offset() {
        return timelineSemaphore$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 timelineSemaphore
     * }
     */
    public static int timelineSemaphore(MemorySegment struct) {
        return struct.get(timelineSemaphore$LAYOUT, timelineSemaphore$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 timelineSemaphore
     * }
     */
    public static void timelineSemaphore(MemorySegment struct, int fieldValue) {
        struct.set(timelineSemaphore$LAYOUT, timelineSemaphore$OFFSET, fieldValue);
    }

    private static final OfInt bufferDeviceAddress$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferDeviceAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddress
     * }
     */
    public static final OfInt bufferDeviceAddress$layout() {
        return bufferDeviceAddress$LAYOUT;
    }

    private static final long bufferDeviceAddress$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddress
     * }
     */
    public static final long bufferDeviceAddress$offset() {
        return bufferDeviceAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddress
     * }
     */
    public static int bufferDeviceAddress(MemorySegment struct) {
        return struct.get(bufferDeviceAddress$LAYOUT, bufferDeviceAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddress
     * }
     */
    public static void bufferDeviceAddress(MemorySegment struct, int fieldValue) {
        struct.set(bufferDeviceAddress$LAYOUT, bufferDeviceAddress$OFFSET, fieldValue);
    }

    private static final OfInt bufferDeviceAddressCaptureReplay$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferDeviceAddressCaptureReplay"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressCaptureReplay
     * }
     */
    public static final OfInt bufferDeviceAddressCaptureReplay$layout() {
        return bufferDeviceAddressCaptureReplay$LAYOUT;
    }

    private static final long bufferDeviceAddressCaptureReplay$OFFSET = 172;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressCaptureReplay
     * }
     */
    public static final long bufferDeviceAddressCaptureReplay$offset() {
        return bufferDeviceAddressCaptureReplay$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressCaptureReplay
     * }
     */
    public static int bufferDeviceAddressCaptureReplay(MemorySegment struct) {
        return struct.get(bufferDeviceAddressCaptureReplay$LAYOUT, bufferDeviceAddressCaptureReplay$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressCaptureReplay
     * }
     */
    public static void bufferDeviceAddressCaptureReplay(MemorySegment struct, int fieldValue) {
        struct.set(bufferDeviceAddressCaptureReplay$LAYOUT, bufferDeviceAddressCaptureReplay$OFFSET, fieldValue);
    }

    private static final OfInt bufferDeviceAddressMultiDevice$LAYOUT = (OfInt)$LAYOUT.select(groupElement("bufferDeviceAddressMultiDevice"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressMultiDevice
     * }
     */
    public static final OfInt bufferDeviceAddressMultiDevice$layout() {
        return bufferDeviceAddressMultiDevice$LAYOUT;
    }

    private static final long bufferDeviceAddressMultiDevice$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressMultiDevice
     * }
     */
    public static final long bufferDeviceAddressMultiDevice$offset() {
        return bufferDeviceAddressMultiDevice$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressMultiDevice
     * }
     */
    public static int bufferDeviceAddressMultiDevice(MemorySegment struct) {
        return struct.get(bufferDeviceAddressMultiDevice$LAYOUT, bufferDeviceAddressMultiDevice$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 bufferDeviceAddressMultiDevice
     * }
     */
    public static void bufferDeviceAddressMultiDevice(MemorySegment struct, int fieldValue) {
        struct.set(bufferDeviceAddressMultiDevice$LAYOUT, bufferDeviceAddressMultiDevice$OFFSET, fieldValue);
    }

    private static final OfInt vulkanMemoryModel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vulkanMemoryModel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModel
     * }
     */
    public static final OfInt vulkanMemoryModel$layout() {
        return vulkanMemoryModel$LAYOUT;
    }

    private static final long vulkanMemoryModel$OFFSET = 180;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModel
     * }
     */
    public static final long vulkanMemoryModel$offset() {
        return vulkanMemoryModel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModel
     * }
     */
    public static int vulkanMemoryModel(MemorySegment struct) {
        return struct.get(vulkanMemoryModel$LAYOUT, vulkanMemoryModel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModel
     * }
     */
    public static void vulkanMemoryModel(MemorySegment struct, int fieldValue) {
        struct.set(vulkanMemoryModel$LAYOUT, vulkanMemoryModel$OFFSET, fieldValue);
    }

    private static final OfInt vulkanMemoryModelDeviceScope$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vulkanMemoryModelDeviceScope"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelDeviceScope
     * }
     */
    public static final OfInt vulkanMemoryModelDeviceScope$layout() {
        return vulkanMemoryModelDeviceScope$LAYOUT;
    }

    private static final long vulkanMemoryModelDeviceScope$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelDeviceScope
     * }
     */
    public static final long vulkanMemoryModelDeviceScope$offset() {
        return vulkanMemoryModelDeviceScope$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelDeviceScope
     * }
     */
    public static int vulkanMemoryModelDeviceScope(MemorySegment struct) {
        return struct.get(vulkanMemoryModelDeviceScope$LAYOUT, vulkanMemoryModelDeviceScope$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelDeviceScope
     * }
     */
    public static void vulkanMemoryModelDeviceScope(MemorySegment struct, int fieldValue) {
        struct.set(vulkanMemoryModelDeviceScope$LAYOUT, vulkanMemoryModelDeviceScope$OFFSET, fieldValue);
    }

    private static final OfInt vulkanMemoryModelAvailabilityVisibilityChains$LAYOUT = (OfInt)$LAYOUT.select(groupElement("vulkanMemoryModelAvailabilityVisibilityChains"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelAvailabilityVisibilityChains
     * }
     */
    public static final OfInt vulkanMemoryModelAvailabilityVisibilityChains$layout() {
        return vulkanMemoryModelAvailabilityVisibilityChains$LAYOUT;
    }

    private static final long vulkanMemoryModelAvailabilityVisibilityChains$OFFSET = 188;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelAvailabilityVisibilityChains
     * }
     */
    public static final long vulkanMemoryModelAvailabilityVisibilityChains$offset() {
        return vulkanMemoryModelAvailabilityVisibilityChains$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelAvailabilityVisibilityChains
     * }
     */
    public static int vulkanMemoryModelAvailabilityVisibilityChains(MemorySegment struct) {
        return struct.get(vulkanMemoryModelAvailabilityVisibilityChains$LAYOUT, vulkanMemoryModelAvailabilityVisibilityChains$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 vulkanMemoryModelAvailabilityVisibilityChains
     * }
     */
    public static void vulkanMemoryModelAvailabilityVisibilityChains(MemorySegment struct, int fieldValue) {
        struct.set(vulkanMemoryModelAvailabilityVisibilityChains$LAYOUT, vulkanMemoryModelAvailabilityVisibilityChains$OFFSET, fieldValue);
    }

    private static final OfInt shaderOutputViewportIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderOutputViewportIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputViewportIndex
     * }
     */
    public static final OfInt shaderOutputViewportIndex$layout() {
        return shaderOutputViewportIndex$LAYOUT;
    }

    private static final long shaderOutputViewportIndex$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputViewportIndex
     * }
     */
    public static final long shaderOutputViewportIndex$offset() {
        return shaderOutputViewportIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputViewportIndex
     * }
     */
    public static int shaderOutputViewportIndex(MemorySegment struct) {
        return struct.get(shaderOutputViewportIndex$LAYOUT, shaderOutputViewportIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputViewportIndex
     * }
     */
    public static void shaderOutputViewportIndex(MemorySegment struct, int fieldValue) {
        struct.set(shaderOutputViewportIndex$LAYOUT, shaderOutputViewportIndex$OFFSET, fieldValue);
    }

    private static final OfInt shaderOutputLayer$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderOutputLayer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputLayer
     * }
     */
    public static final OfInt shaderOutputLayer$layout() {
        return shaderOutputLayer$LAYOUT;
    }

    private static final long shaderOutputLayer$OFFSET = 196;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputLayer
     * }
     */
    public static final long shaderOutputLayer$offset() {
        return shaderOutputLayer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputLayer
     * }
     */
    public static int shaderOutputLayer(MemorySegment struct) {
        return struct.get(shaderOutputLayer$LAYOUT, shaderOutputLayer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderOutputLayer
     * }
     */
    public static void shaderOutputLayer(MemorySegment struct, int fieldValue) {
        struct.set(shaderOutputLayer$LAYOUT, shaderOutputLayer$OFFSET, fieldValue);
    }

    private static final OfInt subgroupBroadcastDynamicId$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subgroupBroadcastDynamicId"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 subgroupBroadcastDynamicId
     * }
     */
    public static final OfInt subgroupBroadcastDynamicId$layout() {
        return subgroupBroadcastDynamicId$LAYOUT;
    }

    private static final long subgroupBroadcastDynamicId$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 subgroupBroadcastDynamicId
     * }
     */
    public static final long subgroupBroadcastDynamicId$offset() {
        return subgroupBroadcastDynamicId$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 subgroupBroadcastDynamicId
     * }
     */
    public static int subgroupBroadcastDynamicId(MemorySegment struct) {
        return struct.get(subgroupBroadcastDynamicId$LAYOUT, subgroupBroadcastDynamicId$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 subgroupBroadcastDynamicId
     * }
     */
    public static void subgroupBroadcastDynamicId(MemorySegment struct, int fieldValue) {
        struct.set(subgroupBroadcastDynamicId$LAYOUT, subgroupBroadcastDynamicId$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

