// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceVulkan13Features {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 robustImageAccess;
 *     VkBool32 inlineUniformBlock;
 *     VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
 *     VkBool32 pipelineCreationCacheControl;
 *     VkBool32 privateData;
 *     VkBool32 shaderDemoteToHelperInvocation;
 *     VkBool32 shaderTerminateInvocation;
 *     VkBool32 subgroupSizeControl;
 *     VkBool32 computeFullSubgroups;
 *     VkBool32 synchronization2;
 *     VkBool32 textureCompressionASTC_HDR;
 *     VkBool32 shaderZeroInitializeWorkgroupMemory;
 *     VkBool32 dynamicRendering;
 *     VkBool32 shaderIntegerDotProduct;
 *     VkBool32 maintenance4;
 * }
 * }
 */
public class VkPhysicalDeviceVulkan13Features {

    VkPhysicalDeviceVulkan13Features() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("robustImageAccess"),
        vulkan_h.C_INT.withName("inlineUniformBlock"),
        vulkan_h.C_INT.withName("descriptorBindingInlineUniformBlockUpdateAfterBind"),
        vulkan_h.C_INT.withName("pipelineCreationCacheControl"),
        vulkan_h.C_INT.withName("privateData"),
        vulkan_h.C_INT.withName("shaderDemoteToHelperInvocation"),
        vulkan_h.C_INT.withName("shaderTerminateInvocation"),
        vulkan_h.C_INT.withName("subgroupSizeControl"),
        vulkan_h.C_INT.withName("computeFullSubgroups"),
        vulkan_h.C_INT.withName("synchronization2"),
        vulkan_h.C_INT.withName("textureCompressionASTC_HDR"),
        vulkan_h.C_INT.withName("shaderZeroInitializeWorkgroupMemory"),
        vulkan_h.C_INT.withName("dynamicRendering"),
        vulkan_h.C_INT.withName("shaderIntegerDotProduct"),
        vulkan_h.C_INT.withName("maintenance4"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPhysicalDeviceVulkan13Features");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt robustImageAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("robustImageAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 robustImageAccess
     * }
     */
    public static final OfInt robustImageAccess$layout() {
        return robustImageAccess$LAYOUT;
    }

    private static final long robustImageAccess$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 robustImageAccess
     * }
     */
    public static final long robustImageAccess$offset() {
        return robustImageAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 robustImageAccess
     * }
     */
    public static int robustImageAccess(MemorySegment struct) {
        return struct.get(robustImageAccess$LAYOUT, robustImageAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 robustImageAccess
     * }
     */
    public static void robustImageAccess(MemorySegment struct, int fieldValue) {
        struct.set(robustImageAccess$LAYOUT, robustImageAccess$OFFSET, fieldValue);
    }

    private static final OfInt inlineUniformBlock$LAYOUT = (OfInt)$LAYOUT.select(groupElement("inlineUniformBlock"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 inlineUniformBlock
     * }
     */
    public static final OfInt inlineUniformBlock$layout() {
        return inlineUniformBlock$LAYOUT;
    }

    private static final long inlineUniformBlock$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 inlineUniformBlock
     * }
     */
    public static final long inlineUniformBlock$offset() {
        return inlineUniformBlock$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 inlineUniformBlock
     * }
     */
    public static int inlineUniformBlock(MemorySegment struct) {
        return struct.get(inlineUniformBlock$LAYOUT, inlineUniformBlock$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 inlineUniformBlock
     * }
     */
    public static void inlineUniformBlock(MemorySegment struct, int fieldValue) {
        struct.set(inlineUniformBlock$LAYOUT, inlineUniformBlock$OFFSET, fieldValue);
    }

    private static final OfInt descriptorBindingInlineUniformBlockUpdateAfterBind$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorBindingInlineUniformBlockUpdateAfterBind"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind
     * }
     */
    public static final OfInt descriptorBindingInlineUniformBlockUpdateAfterBind$layout() {
        return descriptorBindingInlineUniformBlockUpdateAfterBind$LAYOUT;
    }

    private static final long descriptorBindingInlineUniformBlockUpdateAfterBind$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind
     * }
     */
    public static final long descriptorBindingInlineUniformBlockUpdateAfterBind$offset() {
        return descriptorBindingInlineUniformBlockUpdateAfterBind$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind
     * }
     */
    public static int descriptorBindingInlineUniformBlockUpdateAfterBind(MemorySegment struct) {
        return struct.get(descriptorBindingInlineUniformBlockUpdateAfterBind$LAYOUT, descriptorBindingInlineUniformBlockUpdateAfterBind$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind
     * }
     */
    public static void descriptorBindingInlineUniformBlockUpdateAfterBind(MemorySegment struct, int fieldValue) {
        struct.set(descriptorBindingInlineUniformBlockUpdateAfterBind$LAYOUT, descriptorBindingInlineUniformBlockUpdateAfterBind$OFFSET, fieldValue);
    }

    private static final OfInt pipelineCreationCacheControl$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pipelineCreationCacheControl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 pipelineCreationCacheControl
     * }
     */
    public static final OfInt pipelineCreationCacheControl$layout() {
        return pipelineCreationCacheControl$LAYOUT;
    }

    private static final long pipelineCreationCacheControl$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 pipelineCreationCacheControl
     * }
     */
    public static final long pipelineCreationCacheControl$offset() {
        return pipelineCreationCacheControl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 pipelineCreationCacheControl
     * }
     */
    public static int pipelineCreationCacheControl(MemorySegment struct) {
        return struct.get(pipelineCreationCacheControl$LAYOUT, pipelineCreationCacheControl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 pipelineCreationCacheControl
     * }
     */
    public static void pipelineCreationCacheControl(MemorySegment struct, int fieldValue) {
        struct.set(pipelineCreationCacheControl$LAYOUT, pipelineCreationCacheControl$OFFSET, fieldValue);
    }

    private static final OfInt privateData$LAYOUT = (OfInt)$LAYOUT.select(groupElement("privateData"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 privateData
     * }
     */
    public static final OfInt privateData$layout() {
        return privateData$LAYOUT;
    }

    private static final long privateData$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 privateData
     * }
     */
    public static final long privateData$offset() {
        return privateData$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 privateData
     * }
     */
    public static int privateData(MemorySegment struct) {
        return struct.get(privateData$LAYOUT, privateData$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 privateData
     * }
     */
    public static void privateData(MemorySegment struct, int fieldValue) {
        struct.set(privateData$LAYOUT, privateData$OFFSET, fieldValue);
    }

    private static final OfInt shaderDemoteToHelperInvocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderDemoteToHelperInvocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderDemoteToHelperInvocation
     * }
     */
    public static final OfInt shaderDemoteToHelperInvocation$layout() {
        return shaderDemoteToHelperInvocation$LAYOUT;
    }

    private static final long shaderDemoteToHelperInvocation$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderDemoteToHelperInvocation
     * }
     */
    public static final long shaderDemoteToHelperInvocation$offset() {
        return shaderDemoteToHelperInvocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderDemoteToHelperInvocation
     * }
     */
    public static int shaderDemoteToHelperInvocation(MemorySegment struct) {
        return struct.get(shaderDemoteToHelperInvocation$LAYOUT, shaderDemoteToHelperInvocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderDemoteToHelperInvocation
     * }
     */
    public static void shaderDemoteToHelperInvocation(MemorySegment struct, int fieldValue) {
        struct.set(shaderDemoteToHelperInvocation$LAYOUT, shaderDemoteToHelperInvocation$OFFSET, fieldValue);
    }

    private static final OfInt shaderTerminateInvocation$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderTerminateInvocation"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderTerminateInvocation
     * }
     */
    public static final OfInt shaderTerminateInvocation$layout() {
        return shaderTerminateInvocation$LAYOUT;
    }

    private static final long shaderTerminateInvocation$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderTerminateInvocation
     * }
     */
    public static final long shaderTerminateInvocation$offset() {
        return shaderTerminateInvocation$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderTerminateInvocation
     * }
     */
    public static int shaderTerminateInvocation(MemorySegment struct) {
        return struct.get(shaderTerminateInvocation$LAYOUT, shaderTerminateInvocation$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderTerminateInvocation
     * }
     */
    public static void shaderTerminateInvocation(MemorySegment struct, int fieldValue) {
        struct.set(shaderTerminateInvocation$LAYOUT, shaderTerminateInvocation$OFFSET, fieldValue);
    }

    private static final OfInt subgroupSizeControl$LAYOUT = (OfInt)$LAYOUT.select(groupElement("subgroupSizeControl"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 subgroupSizeControl
     * }
     */
    public static final OfInt subgroupSizeControl$layout() {
        return subgroupSizeControl$LAYOUT;
    }

    private static final long subgroupSizeControl$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 subgroupSizeControl
     * }
     */
    public static final long subgroupSizeControl$offset() {
        return subgroupSizeControl$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 subgroupSizeControl
     * }
     */
    public static int subgroupSizeControl(MemorySegment struct) {
        return struct.get(subgroupSizeControl$LAYOUT, subgroupSizeControl$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 subgroupSizeControl
     * }
     */
    public static void subgroupSizeControl(MemorySegment struct, int fieldValue) {
        struct.set(subgroupSizeControl$LAYOUT, subgroupSizeControl$OFFSET, fieldValue);
    }

    private static final OfInt computeFullSubgroups$LAYOUT = (OfInt)$LAYOUT.select(groupElement("computeFullSubgroups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 computeFullSubgroups
     * }
     */
    public static final OfInt computeFullSubgroups$layout() {
        return computeFullSubgroups$LAYOUT;
    }

    private static final long computeFullSubgroups$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 computeFullSubgroups
     * }
     */
    public static final long computeFullSubgroups$offset() {
        return computeFullSubgroups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 computeFullSubgroups
     * }
     */
    public static int computeFullSubgroups(MemorySegment struct) {
        return struct.get(computeFullSubgroups$LAYOUT, computeFullSubgroups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 computeFullSubgroups
     * }
     */
    public static void computeFullSubgroups(MemorySegment struct, int fieldValue) {
        struct.set(computeFullSubgroups$LAYOUT, computeFullSubgroups$OFFSET, fieldValue);
    }

    private static final OfInt synchronization2$LAYOUT = (OfInt)$LAYOUT.select(groupElement("synchronization2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 synchronization2
     * }
     */
    public static final OfInt synchronization2$layout() {
        return synchronization2$LAYOUT;
    }

    private static final long synchronization2$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 synchronization2
     * }
     */
    public static final long synchronization2$offset() {
        return synchronization2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 synchronization2
     * }
     */
    public static int synchronization2(MemorySegment struct) {
        return struct.get(synchronization2$LAYOUT, synchronization2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 synchronization2
     * }
     */
    public static void synchronization2(MemorySegment struct, int fieldValue) {
        struct.set(synchronization2$LAYOUT, synchronization2$OFFSET, fieldValue);
    }

    private static final OfInt textureCompressionASTC_HDR$LAYOUT = (OfInt)$LAYOUT.select(groupElement("textureCompressionASTC_HDR"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_HDR
     * }
     */
    public static final OfInt textureCompressionASTC_HDR$layout() {
        return textureCompressionASTC_HDR$LAYOUT;
    }

    private static final long textureCompressionASTC_HDR$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_HDR
     * }
     */
    public static final long textureCompressionASTC_HDR$offset() {
        return textureCompressionASTC_HDR$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_HDR
     * }
     */
    public static int textureCompressionASTC_HDR(MemorySegment struct) {
        return struct.get(textureCompressionASTC_HDR$LAYOUT, textureCompressionASTC_HDR$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 textureCompressionASTC_HDR
     * }
     */
    public static void textureCompressionASTC_HDR(MemorySegment struct, int fieldValue) {
        struct.set(textureCompressionASTC_HDR$LAYOUT, textureCompressionASTC_HDR$OFFSET, fieldValue);
    }

    private static final OfInt shaderZeroInitializeWorkgroupMemory$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderZeroInitializeWorkgroupMemory"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderZeroInitializeWorkgroupMemory
     * }
     */
    public static final OfInt shaderZeroInitializeWorkgroupMemory$layout() {
        return shaderZeroInitializeWorkgroupMemory$LAYOUT;
    }

    private static final long shaderZeroInitializeWorkgroupMemory$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderZeroInitializeWorkgroupMemory
     * }
     */
    public static final long shaderZeroInitializeWorkgroupMemory$offset() {
        return shaderZeroInitializeWorkgroupMemory$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderZeroInitializeWorkgroupMemory
     * }
     */
    public static int shaderZeroInitializeWorkgroupMemory(MemorySegment struct) {
        return struct.get(shaderZeroInitializeWorkgroupMemory$LAYOUT, shaderZeroInitializeWorkgroupMemory$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderZeroInitializeWorkgroupMemory
     * }
     */
    public static void shaderZeroInitializeWorkgroupMemory(MemorySegment struct, int fieldValue) {
        struct.set(shaderZeroInitializeWorkgroupMemory$LAYOUT, shaderZeroInitializeWorkgroupMemory$OFFSET, fieldValue);
    }

    private static final OfInt dynamicRendering$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dynamicRendering"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 dynamicRendering
     * }
     */
    public static final OfInt dynamicRendering$layout() {
        return dynamicRendering$LAYOUT;
    }

    private static final long dynamicRendering$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 dynamicRendering
     * }
     */
    public static final long dynamicRendering$offset() {
        return dynamicRendering$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 dynamicRendering
     * }
     */
    public static int dynamicRendering(MemorySegment struct) {
        return struct.get(dynamicRendering$LAYOUT, dynamicRendering$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 dynamicRendering
     * }
     */
    public static void dynamicRendering(MemorySegment struct, int fieldValue) {
        struct.set(dynamicRendering$LAYOUT, dynamicRendering$OFFSET, fieldValue);
    }

    private static final OfInt shaderIntegerDotProduct$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderIntegerDotProduct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 shaderIntegerDotProduct
     * }
     */
    public static final OfInt shaderIntegerDotProduct$layout() {
        return shaderIntegerDotProduct$LAYOUT;
    }

    private static final long shaderIntegerDotProduct$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 shaderIntegerDotProduct
     * }
     */
    public static final long shaderIntegerDotProduct$offset() {
        return shaderIntegerDotProduct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 shaderIntegerDotProduct
     * }
     */
    public static int shaderIntegerDotProduct(MemorySegment struct) {
        return struct.get(shaderIntegerDotProduct$LAYOUT, shaderIntegerDotProduct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 shaderIntegerDotProduct
     * }
     */
    public static void shaderIntegerDotProduct(MemorySegment struct, int fieldValue) {
        struct.set(shaderIntegerDotProduct$LAYOUT, shaderIntegerDotProduct$OFFSET, fieldValue);
    }

    private static final OfInt maintenance4$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maintenance4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 maintenance4
     * }
     */
    public static final OfInt maintenance4$layout() {
        return maintenance4$LAYOUT;
    }

    private static final long maintenance4$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 maintenance4
     * }
     */
    public static final long maintenance4$offset() {
        return maintenance4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 maintenance4
     * }
     */
    public static int maintenance4(MemorySegment struct) {
        return struct.get(maintenance4$LAYOUT, maintenance4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 maintenance4
     * }
     */
    public static void maintenance4(MemorySegment struct, int fieldValue) {
        struct.set(maintenance4$LAYOUT, maintenance4$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

