// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkBool32 workgroupMemoryExplicitLayout;
 *     VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
 *     VkBool32 workgroupMemoryExplicitLayout8BitAccess;
 *     VkBool32 workgroupMemoryExplicitLayout16BitAccess;
 * }
 * }
 */
public class VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR {

    VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("workgroupMemoryExplicitLayout"),
        vulkan_h.C_INT.withName("workgroupMemoryExplicitLayoutScalarBlockLayout"),
        vulkan_h.C_INT.withName("workgroupMemoryExplicitLayout8BitAccess"),
        vulkan_h.C_INT.withName("workgroupMemoryExplicitLayout16BitAccess")
    ).withName("VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt workgroupMemoryExplicitLayout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("workgroupMemoryExplicitLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout
     * }
     */
    public static final OfInt workgroupMemoryExplicitLayout$layout() {
        return workgroupMemoryExplicitLayout$LAYOUT;
    }

    private static final long workgroupMemoryExplicitLayout$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout
     * }
     */
    public static final long workgroupMemoryExplicitLayout$offset() {
        return workgroupMemoryExplicitLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout
     * }
     */
    public static int workgroupMemoryExplicitLayout(MemorySegment struct) {
        return struct.get(workgroupMemoryExplicitLayout$LAYOUT, workgroupMemoryExplicitLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout
     * }
     */
    public static void workgroupMemoryExplicitLayout(MemorySegment struct, int fieldValue) {
        struct.set(workgroupMemoryExplicitLayout$LAYOUT, workgroupMemoryExplicitLayout$OFFSET, fieldValue);
    }

    private static final OfInt workgroupMemoryExplicitLayoutScalarBlockLayout$LAYOUT = (OfInt)$LAYOUT.select(groupElement("workgroupMemoryExplicitLayoutScalarBlockLayout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout
     * }
     */
    public static final OfInt workgroupMemoryExplicitLayoutScalarBlockLayout$layout() {
        return workgroupMemoryExplicitLayoutScalarBlockLayout$LAYOUT;
    }

    private static final long workgroupMemoryExplicitLayoutScalarBlockLayout$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout
     * }
     */
    public static final long workgroupMemoryExplicitLayoutScalarBlockLayout$offset() {
        return workgroupMemoryExplicitLayoutScalarBlockLayout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout
     * }
     */
    public static int workgroupMemoryExplicitLayoutScalarBlockLayout(MemorySegment struct) {
        return struct.get(workgroupMemoryExplicitLayoutScalarBlockLayout$LAYOUT, workgroupMemoryExplicitLayoutScalarBlockLayout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout
     * }
     */
    public static void workgroupMemoryExplicitLayoutScalarBlockLayout(MemorySegment struct, int fieldValue) {
        struct.set(workgroupMemoryExplicitLayoutScalarBlockLayout$LAYOUT, workgroupMemoryExplicitLayoutScalarBlockLayout$OFFSET, fieldValue);
    }

    private static final OfInt workgroupMemoryExplicitLayout8BitAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("workgroupMemoryExplicitLayout8BitAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout8BitAccess
     * }
     */
    public static final OfInt workgroupMemoryExplicitLayout8BitAccess$layout() {
        return workgroupMemoryExplicitLayout8BitAccess$LAYOUT;
    }

    private static final long workgroupMemoryExplicitLayout8BitAccess$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout8BitAccess
     * }
     */
    public static final long workgroupMemoryExplicitLayout8BitAccess$offset() {
        return workgroupMemoryExplicitLayout8BitAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout8BitAccess
     * }
     */
    public static int workgroupMemoryExplicitLayout8BitAccess(MemorySegment struct) {
        return struct.get(workgroupMemoryExplicitLayout8BitAccess$LAYOUT, workgroupMemoryExplicitLayout8BitAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout8BitAccess
     * }
     */
    public static void workgroupMemoryExplicitLayout8BitAccess(MemorySegment struct, int fieldValue) {
        struct.set(workgroupMemoryExplicitLayout8BitAccess$LAYOUT, workgroupMemoryExplicitLayout8BitAccess$OFFSET, fieldValue);
    }

    private static final OfInt workgroupMemoryExplicitLayout16BitAccess$LAYOUT = (OfInt)$LAYOUT.select(groupElement("workgroupMemoryExplicitLayout16BitAccess"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout16BitAccess
     * }
     */
    public static final OfInt workgroupMemoryExplicitLayout16BitAccess$layout() {
        return workgroupMemoryExplicitLayout16BitAccess$LAYOUT;
    }

    private static final long workgroupMemoryExplicitLayout16BitAccess$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout16BitAccess
     * }
     */
    public static final long workgroupMemoryExplicitLayout16BitAccess$offset() {
        return workgroupMemoryExplicitLayout16BitAccess$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout16BitAccess
     * }
     */
    public static int workgroupMemoryExplicitLayout16BitAccess(MemorySegment struct) {
        return struct.get(workgroupMemoryExplicitLayout16BitAccess$LAYOUT, workgroupMemoryExplicitLayout16BitAccess$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 workgroupMemoryExplicitLayout16BitAccess
     * }
     */
    public static void workgroupMemoryExplicitLayout16BitAccess(MemorySegment struct, int fieldValue) {
        struct.set(workgroupMemoryExplicitLayout16BitAccess$LAYOUT, workgroupMemoryExplicitLayout16BitAccess$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

