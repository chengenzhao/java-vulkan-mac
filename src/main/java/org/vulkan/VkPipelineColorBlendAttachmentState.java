// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPipelineColorBlendAttachmentState {
 *     VkBool32 blendEnable;
 *     VkBlendFactor srcColorBlendFactor;
 *     VkBlendFactor dstColorBlendFactor;
 *     VkBlendOp colorBlendOp;
 *     VkBlendFactor srcAlphaBlendFactor;
 *     VkBlendFactor dstAlphaBlendFactor;
 *     VkBlendOp alphaBlendOp;
 *     VkColorComponentFlags colorWriteMask;
 * }
 * }
 */
public class VkPipelineColorBlendAttachmentState {

    VkPipelineColorBlendAttachmentState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("blendEnable"),
        vulkan_h.C_INT.withName("srcColorBlendFactor"),
        vulkan_h.C_INT.withName("dstColorBlendFactor"),
        vulkan_h.C_INT.withName("colorBlendOp"),
        vulkan_h.C_INT.withName("srcAlphaBlendFactor"),
        vulkan_h.C_INT.withName("dstAlphaBlendFactor"),
        vulkan_h.C_INT.withName("alphaBlendOp"),
        vulkan_h.C_INT.withName("colorWriteMask")
    ).withName("VkPipelineColorBlendAttachmentState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt blendEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("blendEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 blendEnable
     * }
     */
    public static final OfInt blendEnable$layout() {
        return blendEnable$LAYOUT;
    }

    private static final long blendEnable$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 blendEnable
     * }
     */
    public static final long blendEnable$offset() {
        return blendEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 blendEnable
     * }
     */
    public static int blendEnable(MemorySegment struct) {
        return struct.get(blendEnable$LAYOUT, blendEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 blendEnable
     * }
     */
    public static void blendEnable(MemorySegment struct, int fieldValue) {
        struct.set(blendEnable$LAYOUT, blendEnable$OFFSET, fieldValue);
    }

    private static final OfInt srcColorBlendFactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("srcColorBlendFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBlendFactor srcColorBlendFactor
     * }
     */
    public static final OfInt srcColorBlendFactor$layout() {
        return srcColorBlendFactor$LAYOUT;
    }

    private static final long srcColorBlendFactor$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBlendFactor srcColorBlendFactor
     * }
     */
    public static final long srcColorBlendFactor$offset() {
        return srcColorBlendFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBlendFactor srcColorBlendFactor
     * }
     */
    public static int srcColorBlendFactor(MemorySegment struct) {
        return struct.get(srcColorBlendFactor$LAYOUT, srcColorBlendFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBlendFactor srcColorBlendFactor
     * }
     */
    public static void srcColorBlendFactor(MemorySegment struct, int fieldValue) {
        struct.set(srcColorBlendFactor$LAYOUT, srcColorBlendFactor$OFFSET, fieldValue);
    }

    private static final OfInt dstColorBlendFactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dstColorBlendFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBlendFactor dstColorBlendFactor
     * }
     */
    public static final OfInt dstColorBlendFactor$layout() {
        return dstColorBlendFactor$LAYOUT;
    }

    private static final long dstColorBlendFactor$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBlendFactor dstColorBlendFactor
     * }
     */
    public static final long dstColorBlendFactor$offset() {
        return dstColorBlendFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBlendFactor dstColorBlendFactor
     * }
     */
    public static int dstColorBlendFactor(MemorySegment struct) {
        return struct.get(dstColorBlendFactor$LAYOUT, dstColorBlendFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBlendFactor dstColorBlendFactor
     * }
     */
    public static void dstColorBlendFactor(MemorySegment struct, int fieldValue) {
        struct.set(dstColorBlendFactor$LAYOUT, dstColorBlendFactor$OFFSET, fieldValue);
    }

    private static final OfInt colorBlendOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorBlendOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBlendOp colorBlendOp
     * }
     */
    public static final OfInt colorBlendOp$layout() {
        return colorBlendOp$LAYOUT;
    }

    private static final long colorBlendOp$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBlendOp colorBlendOp
     * }
     */
    public static final long colorBlendOp$offset() {
        return colorBlendOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBlendOp colorBlendOp
     * }
     */
    public static int colorBlendOp(MemorySegment struct) {
        return struct.get(colorBlendOp$LAYOUT, colorBlendOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBlendOp colorBlendOp
     * }
     */
    public static void colorBlendOp(MemorySegment struct, int fieldValue) {
        struct.set(colorBlendOp$LAYOUT, colorBlendOp$OFFSET, fieldValue);
    }

    private static final OfInt srcAlphaBlendFactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("srcAlphaBlendFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBlendFactor srcAlphaBlendFactor
     * }
     */
    public static final OfInt srcAlphaBlendFactor$layout() {
        return srcAlphaBlendFactor$LAYOUT;
    }

    private static final long srcAlphaBlendFactor$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBlendFactor srcAlphaBlendFactor
     * }
     */
    public static final long srcAlphaBlendFactor$offset() {
        return srcAlphaBlendFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBlendFactor srcAlphaBlendFactor
     * }
     */
    public static int srcAlphaBlendFactor(MemorySegment struct) {
        return struct.get(srcAlphaBlendFactor$LAYOUT, srcAlphaBlendFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBlendFactor srcAlphaBlendFactor
     * }
     */
    public static void srcAlphaBlendFactor(MemorySegment struct, int fieldValue) {
        struct.set(srcAlphaBlendFactor$LAYOUT, srcAlphaBlendFactor$OFFSET, fieldValue);
    }

    private static final OfInt dstAlphaBlendFactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("dstAlphaBlendFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBlendFactor dstAlphaBlendFactor
     * }
     */
    public static final OfInt dstAlphaBlendFactor$layout() {
        return dstAlphaBlendFactor$LAYOUT;
    }

    private static final long dstAlphaBlendFactor$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBlendFactor dstAlphaBlendFactor
     * }
     */
    public static final long dstAlphaBlendFactor$offset() {
        return dstAlphaBlendFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBlendFactor dstAlphaBlendFactor
     * }
     */
    public static int dstAlphaBlendFactor(MemorySegment struct) {
        return struct.get(dstAlphaBlendFactor$LAYOUT, dstAlphaBlendFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBlendFactor dstAlphaBlendFactor
     * }
     */
    public static void dstAlphaBlendFactor(MemorySegment struct, int fieldValue) {
        struct.set(dstAlphaBlendFactor$LAYOUT, dstAlphaBlendFactor$OFFSET, fieldValue);
    }

    private static final OfInt alphaBlendOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("alphaBlendOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBlendOp alphaBlendOp
     * }
     */
    public static final OfInt alphaBlendOp$layout() {
        return alphaBlendOp$LAYOUT;
    }

    private static final long alphaBlendOp$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBlendOp alphaBlendOp
     * }
     */
    public static final long alphaBlendOp$offset() {
        return alphaBlendOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBlendOp alphaBlendOp
     * }
     */
    public static int alphaBlendOp(MemorySegment struct) {
        return struct.get(alphaBlendOp$LAYOUT, alphaBlendOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBlendOp alphaBlendOp
     * }
     */
    public static void alphaBlendOp(MemorySegment struct, int fieldValue) {
        struct.set(alphaBlendOp$LAYOUT, alphaBlendOp$OFFSET, fieldValue);
    }

    private static final OfInt colorWriteMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorWriteMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkColorComponentFlags colorWriteMask
     * }
     */
    public static final OfInt colorWriteMask$layout() {
        return colorWriteMask$LAYOUT;
    }

    private static final long colorWriteMask$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkColorComponentFlags colorWriteMask
     * }
     */
    public static final long colorWriteMask$offset() {
        return colorWriteMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkColorComponentFlags colorWriteMask
     * }
     */
    public static int colorWriteMask(MemorySegment struct) {
        return struct.get(colorWriteMask$LAYOUT, colorWriteMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkColorComponentFlags colorWriteMask
     * }
     */
    public static void colorWriteMask(MemorySegment struct, int fieldValue) {
        struct.set(colorWriteMask$LAYOUT, colorWriteMask$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

