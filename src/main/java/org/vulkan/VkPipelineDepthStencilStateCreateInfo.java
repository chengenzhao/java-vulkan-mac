// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPipelineDepthStencilStateCreateInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkPipelineDepthStencilStateCreateFlags flags;
 *     VkBool32 depthTestEnable;
 *     VkBool32 depthWriteEnable;
 *     VkCompareOp depthCompareOp;
 *     VkBool32 depthBoundsTestEnable;
 *     VkBool32 stencilTestEnable;
 *     VkStencilOpState front;
 *     VkStencilOpState back;
 *     float minDepthBounds;
 *     float maxDepthBounds;
 * }
 * }
 */
public class VkPipelineDepthStencilStateCreateInfo {

    VkPipelineDepthStencilStateCreateInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("depthTestEnable"),
        vulkan_h.C_INT.withName("depthWriteEnable"),
        vulkan_h.C_INT.withName("depthCompareOp"),
        vulkan_h.C_INT.withName("depthBoundsTestEnable"),
        vulkan_h.C_INT.withName("stencilTestEnable"),
        VkStencilOpState.layout().withName("front"),
        VkStencilOpState.layout().withName("back"),
        vulkan_h.C_FLOAT.withName("minDepthBounds"),
        vulkan_h.C_FLOAT.withName("maxDepthBounds")
    ).withName("VkPipelineDepthStencilStateCreateInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineDepthStencilStateCreateFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineDepthStencilStateCreateFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineDepthStencilStateCreateFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineDepthStencilStateCreateFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt depthTestEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthTestEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthTestEnable
     * }
     */
    public static final OfInt depthTestEnable$layout() {
        return depthTestEnable$LAYOUT;
    }

    private static final long depthTestEnable$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthTestEnable
     * }
     */
    public static final long depthTestEnable$offset() {
        return depthTestEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthTestEnable
     * }
     */
    public static int depthTestEnable(MemorySegment struct) {
        return struct.get(depthTestEnable$LAYOUT, depthTestEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthTestEnable
     * }
     */
    public static void depthTestEnable(MemorySegment struct, int fieldValue) {
        struct.set(depthTestEnable$LAYOUT, depthTestEnable$OFFSET, fieldValue);
    }

    private static final OfInt depthWriteEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthWriteEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthWriteEnable
     * }
     */
    public static final OfInt depthWriteEnable$layout() {
        return depthWriteEnable$LAYOUT;
    }

    private static final long depthWriteEnable$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthWriteEnable
     * }
     */
    public static final long depthWriteEnable$offset() {
        return depthWriteEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthWriteEnable
     * }
     */
    public static int depthWriteEnable(MemorySegment struct) {
        return struct.get(depthWriteEnable$LAYOUT, depthWriteEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthWriteEnable
     * }
     */
    public static void depthWriteEnable(MemorySegment struct, int fieldValue) {
        struct.set(depthWriteEnable$LAYOUT, depthWriteEnable$OFFSET, fieldValue);
    }

    private static final OfInt depthCompareOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthCompareOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkCompareOp depthCompareOp
     * }
     */
    public static final OfInt depthCompareOp$layout() {
        return depthCompareOp$LAYOUT;
    }

    private static final long depthCompareOp$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkCompareOp depthCompareOp
     * }
     */
    public static final long depthCompareOp$offset() {
        return depthCompareOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkCompareOp depthCompareOp
     * }
     */
    public static int depthCompareOp(MemorySegment struct) {
        return struct.get(depthCompareOp$LAYOUT, depthCompareOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkCompareOp depthCompareOp
     * }
     */
    public static void depthCompareOp(MemorySegment struct, int fieldValue) {
        struct.set(depthCompareOp$LAYOUT, depthCompareOp$OFFSET, fieldValue);
    }

    private static final OfInt depthBoundsTestEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthBoundsTestEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthBoundsTestEnable
     * }
     */
    public static final OfInt depthBoundsTestEnable$layout() {
        return depthBoundsTestEnable$LAYOUT;
    }

    private static final long depthBoundsTestEnable$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthBoundsTestEnable
     * }
     */
    public static final long depthBoundsTestEnable$offset() {
        return depthBoundsTestEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthBoundsTestEnable
     * }
     */
    public static int depthBoundsTestEnable(MemorySegment struct) {
        return struct.get(depthBoundsTestEnable$LAYOUT, depthBoundsTestEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthBoundsTestEnable
     * }
     */
    public static void depthBoundsTestEnable(MemorySegment struct, int fieldValue) {
        struct.set(depthBoundsTestEnable$LAYOUT, depthBoundsTestEnable$OFFSET, fieldValue);
    }

    private static final OfInt stencilTestEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stencilTestEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 stencilTestEnable
     * }
     */
    public static final OfInt stencilTestEnable$layout() {
        return stencilTestEnable$LAYOUT;
    }

    private static final long stencilTestEnable$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 stencilTestEnable
     * }
     */
    public static final long stencilTestEnable$offset() {
        return stencilTestEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 stencilTestEnable
     * }
     */
    public static int stencilTestEnable(MemorySegment struct) {
        return struct.get(stencilTestEnable$LAYOUT, stencilTestEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 stencilTestEnable
     * }
     */
    public static void stencilTestEnable(MemorySegment struct, int fieldValue) {
        struct.set(stencilTestEnable$LAYOUT, stencilTestEnable$OFFSET, fieldValue);
    }

    private static final GroupLayout front$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("front"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStencilOpState front
     * }
     */
    public static final GroupLayout front$layout() {
        return front$LAYOUT;
    }

    private static final long front$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStencilOpState front
     * }
     */
    public static final long front$offset() {
        return front$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStencilOpState front
     * }
     */
    public static MemorySegment front(MemorySegment struct) {
        return struct.asSlice(front$OFFSET, front$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStencilOpState front
     * }
     */
    public static void front(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, front$OFFSET, front$LAYOUT.byteSize());
    }

    private static final GroupLayout back$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("back"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStencilOpState back
     * }
     */
    public static final GroupLayout back$layout() {
        return back$LAYOUT;
    }

    private static final long back$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStencilOpState back
     * }
     */
    public static final long back$offset() {
        return back$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStencilOpState back
     * }
     */
    public static MemorySegment back(MemorySegment struct) {
        return struct.asSlice(back$OFFSET, back$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStencilOpState back
     * }
     */
    public static void back(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, back$OFFSET, back$LAYOUT.byteSize());
    }

    private static final OfFloat minDepthBounds$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minDepthBounds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minDepthBounds
     * }
     */
    public static final OfFloat minDepthBounds$layout() {
        return minDepthBounds$LAYOUT;
    }

    private static final long minDepthBounds$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minDepthBounds
     * }
     */
    public static final long minDepthBounds$offset() {
        return minDepthBounds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minDepthBounds
     * }
     */
    public static float minDepthBounds(MemorySegment struct) {
        return struct.get(minDepthBounds$LAYOUT, minDepthBounds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minDepthBounds
     * }
     */
    public static void minDepthBounds(MemorySegment struct, float fieldValue) {
        struct.set(minDepthBounds$LAYOUT, minDepthBounds$OFFSET, fieldValue);
    }

    private static final OfFloat maxDepthBounds$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxDepthBounds"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxDepthBounds
     * }
     */
    public static final OfFloat maxDepthBounds$layout() {
        return maxDepthBounds$LAYOUT;
    }

    private static final long maxDepthBounds$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxDepthBounds
     * }
     */
    public static final long maxDepthBounds$offset() {
        return maxDepthBounds$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxDepthBounds
     * }
     */
    public static float maxDepthBounds(MemorySegment struct) {
        return struct.get(maxDepthBounds$LAYOUT, maxDepthBounds$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxDepthBounds
     * }
     */
    public static void maxDepthBounds(MemorySegment struct, float fieldValue) {
        struct.set(maxDepthBounds$LAYOUT, maxDepthBounds$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

