// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union VkPipelineExecutableStatisticValueKHR {
 *     VkBool32 b32;
 *     int64_t i64;
 *     uint64_t u64;
 *     double f64;
 * }
 * }
 */
public class VkPipelineExecutableStatisticValueKHR {

    VkPipelineExecutableStatisticValueKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        vulkan_h.C_INT.withName("b32"),
        vulkan_h.C_LONG_LONG.withName("i64"),
        vulkan_h.C_LONG_LONG.withName("u64"),
        vulkan_h.C_DOUBLE.withName("f64")
    ).withName("VkPipelineExecutableStatisticValueKHR");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt b32$LAYOUT = (OfInt)$LAYOUT.select(groupElement("b32"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 b32
     * }
     */
    public static final OfInt b32$layout() {
        return b32$LAYOUT;
    }

    private static final long b32$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 b32
     * }
     */
    public static final long b32$offset() {
        return b32$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 b32
     * }
     */
    public static int b32(MemorySegment union) {
        return union.get(b32$LAYOUT, b32$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 b32
     * }
     */
    public static void b32(MemorySegment union, int fieldValue) {
        union.set(b32$LAYOUT, b32$OFFSET, fieldValue);
    }

    private static final OfLong i64$LAYOUT = (OfLong)$LAYOUT.select(groupElement("i64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t i64
     * }
     */
    public static final OfLong i64$layout() {
        return i64$LAYOUT;
    }

    private static final long i64$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t i64
     * }
     */
    public static final long i64$offset() {
        return i64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t i64
     * }
     */
    public static long i64(MemorySegment union) {
        return union.get(i64$LAYOUT, i64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t i64
     * }
     */
    public static void i64(MemorySegment union, long fieldValue) {
        union.set(i64$LAYOUT, i64$OFFSET, fieldValue);
    }

    private static final OfLong u64$LAYOUT = (OfLong)$LAYOUT.select(groupElement("u64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static final OfLong u64$layout() {
        return u64$LAYOUT;
    }

    private static final long u64$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static final long u64$offset() {
        return u64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static long u64(MemorySegment union) {
        return union.get(u64$LAYOUT, u64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t u64
     * }
     */
    public static void u64(MemorySegment union, long fieldValue) {
        union.set(u64$LAYOUT, u64$OFFSET, fieldValue);
    }

    private static final OfDouble f64$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("f64"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double f64
     * }
     */
    public static final OfDouble f64$layout() {
        return f64$LAYOUT;
    }

    private static final long f64$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double f64
     * }
     */
    public static final long f64$offset() {
        return f64$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double f64
     * }
     */
    public static double f64(MemorySegment union) {
        return union.get(f64$LAYOUT, f64$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double f64
     * }
     */
    public static void f64(MemorySegment union, double fieldValue) {
        union.set(f64$LAYOUT, f64$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

