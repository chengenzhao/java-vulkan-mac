// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPipelineRasterizationLineStateCreateInfoKHR {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkLineRasterizationModeKHR lineRasterizationMode;
 *     VkBool32 stippledLineEnable;
 *     uint32_t lineStippleFactor;
 *     uint16_t lineStipplePattern;
 * }
 * }
 */
public class VkPipelineRasterizationLineStateCreateInfoKHR {

    VkPipelineRasterizationLineStateCreateInfoKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("lineRasterizationMode"),
        vulkan_h.C_INT.withName("stippledLineEnable"),
        vulkan_h.C_INT.withName("lineStippleFactor"),
        vulkan_h.C_SHORT.withName("lineStipplePattern"),
        MemoryLayout.paddingLayout(2)
    ).withName("VkPipelineRasterizationLineStateCreateInfoKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt lineRasterizationMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lineRasterizationMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkLineRasterizationModeKHR lineRasterizationMode
     * }
     */
    public static final OfInt lineRasterizationMode$layout() {
        return lineRasterizationMode$LAYOUT;
    }

    private static final long lineRasterizationMode$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkLineRasterizationModeKHR lineRasterizationMode
     * }
     */
    public static final long lineRasterizationMode$offset() {
        return lineRasterizationMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkLineRasterizationModeKHR lineRasterizationMode
     * }
     */
    public static int lineRasterizationMode(MemorySegment struct) {
        return struct.get(lineRasterizationMode$LAYOUT, lineRasterizationMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkLineRasterizationModeKHR lineRasterizationMode
     * }
     */
    public static void lineRasterizationMode(MemorySegment struct, int fieldValue) {
        struct.set(lineRasterizationMode$LAYOUT, lineRasterizationMode$OFFSET, fieldValue);
    }

    private static final OfInt stippledLineEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stippledLineEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 stippledLineEnable
     * }
     */
    public static final OfInt stippledLineEnable$layout() {
        return stippledLineEnable$LAYOUT;
    }

    private static final long stippledLineEnable$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 stippledLineEnable
     * }
     */
    public static final long stippledLineEnable$offset() {
        return stippledLineEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 stippledLineEnable
     * }
     */
    public static int stippledLineEnable(MemorySegment struct) {
        return struct.get(stippledLineEnable$LAYOUT, stippledLineEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 stippledLineEnable
     * }
     */
    public static void stippledLineEnable(MemorySegment struct, int fieldValue) {
        struct.set(stippledLineEnable$LAYOUT, stippledLineEnable$OFFSET, fieldValue);
    }

    private static final OfInt lineStippleFactor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("lineStippleFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t lineStippleFactor
     * }
     */
    public static final OfInt lineStippleFactor$layout() {
        return lineStippleFactor$LAYOUT;
    }

    private static final long lineStippleFactor$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t lineStippleFactor
     * }
     */
    public static final long lineStippleFactor$offset() {
        return lineStippleFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t lineStippleFactor
     * }
     */
    public static int lineStippleFactor(MemorySegment struct) {
        return struct.get(lineStippleFactor$LAYOUT, lineStippleFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t lineStippleFactor
     * }
     */
    public static void lineStippleFactor(MemorySegment struct, int fieldValue) {
        struct.set(lineStippleFactor$LAYOUT, lineStippleFactor$OFFSET, fieldValue);
    }

    private static final OfShort lineStipplePattern$LAYOUT = (OfShort)$LAYOUT.select(groupElement("lineStipplePattern"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint16_t lineStipplePattern
     * }
     */
    public static final OfShort lineStipplePattern$layout() {
        return lineStipplePattern$LAYOUT;
    }

    private static final long lineStipplePattern$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint16_t lineStipplePattern
     * }
     */
    public static final long lineStipplePattern$offset() {
        return lineStipplePattern$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint16_t lineStipplePattern
     * }
     */
    public static short lineStipplePattern(MemorySegment struct) {
        return struct.get(lineStipplePattern$LAYOUT, lineStipplePattern$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint16_t lineStipplePattern
     * }
     */
    public static void lineStipplePattern(MemorySegment struct, short fieldValue) {
        struct.set(lineStipplePattern$LAYOUT, lineStipplePattern$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

