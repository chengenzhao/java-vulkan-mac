// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPipelineRasterizationStateCreateInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkPipelineRasterizationStateCreateFlags flags;
 *     VkBool32 depthClampEnable;
 *     VkBool32 rasterizerDiscardEnable;
 *     VkPolygonMode polygonMode;
 *     VkCullModeFlags cullMode;
 *     VkFrontFace frontFace;
 *     VkBool32 depthBiasEnable;
 *     float depthBiasConstantFactor;
 *     float depthBiasClamp;
 *     float depthBiasSlopeFactor;
 *     float lineWidth;
 * }
 * }
 */
public class VkPipelineRasterizationStateCreateInfo {

    VkPipelineRasterizationStateCreateInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("depthClampEnable"),
        vulkan_h.C_INT.withName("rasterizerDiscardEnable"),
        vulkan_h.C_INT.withName("polygonMode"),
        vulkan_h.C_INT.withName("cullMode"),
        vulkan_h.C_INT.withName("frontFace"),
        vulkan_h.C_INT.withName("depthBiasEnable"),
        vulkan_h.C_FLOAT.withName("depthBiasConstantFactor"),
        vulkan_h.C_FLOAT.withName("depthBiasClamp"),
        vulkan_h.C_FLOAT.withName("depthBiasSlopeFactor"),
        vulkan_h.C_FLOAT.withName("lineWidth"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkPipelineRasterizationStateCreateInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineRasterizationStateCreateFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineRasterizationStateCreateFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineRasterizationStateCreateFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineRasterizationStateCreateFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt depthClampEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthClampEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthClampEnable
     * }
     */
    public static final OfInt depthClampEnable$layout() {
        return depthClampEnable$LAYOUT;
    }

    private static final long depthClampEnable$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthClampEnable
     * }
     */
    public static final long depthClampEnable$offset() {
        return depthClampEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthClampEnable
     * }
     */
    public static int depthClampEnable(MemorySegment struct) {
        return struct.get(depthClampEnable$LAYOUT, depthClampEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthClampEnable
     * }
     */
    public static void depthClampEnable(MemorySegment struct, int fieldValue) {
        struct.set(depthClampEnable$LAYOUT, depthClampEnable$OFFSET, fieldValue);
    }

    private static final OfInt rasterizerDiscardEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rasterizerDiscardEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 rasterizerDiscardEnable
     * }
     */
    public static final OfInt rasterizerDiscardEnable$layout() {
        return rasterizerDiscardEnable$LAYOUT;
    }

    private static final long rasterizerDiscardEnable$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 rasterizerDiscardEnable
     * }
     */
    public static final long rasterizerDiscardEnable$offset() {
        return rasterizerDiscardEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 rasterizerDiscardEnable
     * }
     */
    public static int rasterizerDiscardEnable(MemorySegment struct) {
        return struct.get(rasterizerDiscardEnable$LAYOUT, rasterizerDiscardEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 rasterizerDiscardEnable
     * }
     */
    public static void rasterizerDiscardEnable(MemorySegment struct, int fieldValue) {
        struct.set(rasterizerDiscardEnable$LAYOUT, rasterizerDiscardEnable$OFFSET, fieldValue);
    }

    private static final OfInt polygonMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("polygonMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPolygonMode polygonMode
     * }
     */
    public static final OfInt polygonMode$layout() {
        return polygonMode$LAYOUT;
    }

    private static final long polygonMode$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPolygonMode polygonMode
     * }
     */
    public static final long polygonMode$offset() {
        return polygonMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPolygonMode polygonMode
     * }
     */
    public static int polygonMode(MemorySegment struct) {
        return struct.get(polygonMode$LAYOUT, polygonMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPolygonMode polygonMode
     * }
     */
    public static void polygonMode(MemorySegment struct, int fieldValue) {
        struct.set(polygonMode$LAYOUT, polygonMode$OFFSET, fieldValue);
    }

    private static final OfInt cullMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("cullMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkCullModeFlags cullMode
     * }
     */
    public static final OfInt cullMode$layout() {
        return cullMode$LAYOUT;
    }

    private static final long cullMode$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkCullModeFlags cullMode
     * }
     */
    public static final long cullMode$offset() {
        return cullMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkCullModeFlags cullMode
     * }
     */
    public static int cullMode(MemorySegment struct) {
        return struct.get(cullMode$LAYOUT, cullMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkCullModeFlags cullMode
     * }
     */
    public static void cullMode(MemorySegment struct, int fieldValue) {
        struct.set(cullMode$LAYOUT, cullMode$OFFSET, fieldValue);
    }

    private static final OfInt frontFace$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frontFace"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFrontFace frontFace
     * }
     */
    public static final OfInt frontFace$layout() {
        return frontFace$LAYOUT;
    }

    private static final long frontFace$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFrontFace frontFace
     * }
     */
    public static final long frontFace$offset() {
        return frontFace$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFrontFace frontFace
     * }
     */
    public static int frontFace(MemorySegment struct) {
        return struct.get(frontFace$LAYOUT, frontFace$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFrontFace frontFace
     * }
     */
    public static void frontFace(MemorySegment struct, int fieldValue) {
        struct.set(frontFace$LAYOUT, frontFace$OFFSET, fieldValue);
    }

    private static final OfInt depthBiasEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthBiasEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasEnable
     * }
     */
    public static final OfInt depthBiasEnable$layout() {
        return depthBiasEnable$LAYOUT;
    }

    private static final long depthBiasEnable$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasEnable
     * }
     */
    public static final long depthBiasEnable$offset() {
        return depthBiasEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasEnable
     * }
     */
    public static int depthBiasEnable(MemorySegment struct) {
        return struct.get(depthBiasEnable$LAYOUT, depthBiasEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 depthBiasEnable
     * }
     */
    public static void depthBiasEnable(MemorySegment struct, int fieldValue) {
        struct.set(depthBiasEnable$LAYOUT, depthBiasEnable$OFFSET, fieldValue);
    }

    private static final OfFloat depthBiasConstantFactor$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("depthBiasConstantFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float depthBiasConstantFactor
     * }
     */
    public static final OfFloat depthBiasConstantFactor$layout() {
        return depthBiasConstantFactor$LAYOUT;
    }

    private static final long depthBiasConstantFactor$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float depthBiasConstantFactor
     * }
     */
    public static final long depthBiasConstantFactor$offset() {
        return depthBiasConstantFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float depthBiasConstantFactor
     * }
     */
    public static float depthBiasConstantFactor(MemorySegment struct) {
        return struct.get(depthBiasConstantFactor$LAYOUT, depthBiasConstantFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float depthBiasConstantFactor
     * }
     */
    public static void depthBiasConstantFactor(MemorySegment struct, float fieldValue) {
        struct.set(depthBiasConstantFactor$LAYOUT, depthBiasConstantFactor$OFFSET, fieldValue);
    }

    private static final OfFloat depthBiasClamp$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("depthBiasClamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static final OfFloat depthBiasClamp$layout() {
        return depthBiasClamp$LAYOUT;
    }

    private static final long depthBiasClamp$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static final long depthBiasClamp$offset() {
        return depthBiasClamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static float depthBiasClamp(MemorySegment struct) {
        return struct.get(depthBiasClamp$LAYOUT, depthBiasClamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float depthBiasClamp
     * }
     */
    public static void depthBiasClamp(MemorySegment struct, float fieldValue) {
        struct.set(depthBiasClamp$LAYOUT, depthBiasClamp$OFFSET, fieldValue);
    }

    private static final OfFloat depthBiasSlopeFactor$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("depthBiasSlopeFactor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float depthBiasSlopeFactor
     * }
     */
    public static final OfFloat depthBiasSlopeFactor$layout() {
        return depthBiasSlopeFactor$LAYOUT;
    }

    private static final long depthBiasSlopeFactor$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float depthBiasSlopeFactor
     * }
     */
    public static final long depthBiasSlopeFactor$offset() {
        return depthBiasSlopeFactor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float depthBiasSlopeFactor
     * }
     */
    public static float depthBiasSlopeFactor(MemorySegment struct) {
        return struct.get(depthBiasSlopeFactor$LAYOUT, depthBiasSlopeFactor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float depthBiasSlopeFactor
     * }
     */
    public static void depthBiasSlopeFactor(MemorySegment struct, float fieldValue) {
        struct.set(depthBiasSlopeFactor$LAYOUT, depthBiasSlopeFactor$OFFSET, fieldValue);
    }

    private static final OfFloat lineWidth$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("lineWidth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float lineWidth
     * }
     */
    public static final OfFloat lineWidth$layout() {
        return lineWidth$LAYOUT;
    }

    private static final long lineWidth$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float lineWidth
     * }
     */
    public static final long lineWidth$offset() {
        return lineWidth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float lineWidth
     * }
     */
    public static float lineWidth(MemorySegment struct) {
        return struct.get(lineWidth$LAYOUT, lineWidth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float lineWidth
     * }
     */
    public static void lineWidth(MemorySegment struct, float fieldValue) {
        struct.set(lineWidth$LAYOUT, lineWidth$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

