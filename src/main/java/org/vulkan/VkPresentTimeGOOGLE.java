// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPresentTimeGOOGLE {
 *     uint32_t presentID;
 *     uint64_t desiredPresentTime;
 * }
 * }
 */
public class VkPresentTimeGOOGLE {

    VkPresentTimeGOOGLE() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("presentID"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("desiredPresentTime")
    ).withName("VkPresentTimeGOOGLE");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt presentID$LAYOUT = (OfInt)$LAYOUT.select(groupElement("presentID"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t presentID
     * }
     */
    public static final OfInt presentID$layout() {
        return presentID$LAYOUT;
    }

    private static final long presentID$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t presentID
     * }
     */
    public static final long presentID$offset() {
        return presentID$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t presentID
     * }
     */
    public static int presentID(MemorySegment struct) {
        return struct.get(presentID$LAYOUT, presentID$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t presentID
     * }
     */
    public static void presentID(MemorySegment struct, int fieldValue) {
        struct.set(presentID$LAYOUT, presentID$OFFSET, fieldValue);
    }

    private static final OfLong desiredPresentTime$LAYOUT = (OfLong)$LAYOUT.select(groupElement("desiredPresentTime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint64_t desiredPresentTime
     * }
     */
    public static final OfLong desiredPresentTime$layout() {
        return desiredPresentTime$LAYOUT;
    }

    private static final long desiredPresentTime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint64_t desiredPresentTime
     * }
     */
    public static final long desiredPresentTime$offset() {
        return desiredPresentTime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint64_t desiredPresentTime
     * }
     */
    public static long desiredPresentTime(MemorySegment struct) {
        return struct.get(desiredPresentTime$LAYOUT, desiredPresentTime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint64_t desiredPresentTime
     * }
     */
    public static void desiredPresentTime(MemorySegment struct, long fieldValue) {
        struct.set(desiredPresentTime$LAYOUT, desiredPresentTime$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

