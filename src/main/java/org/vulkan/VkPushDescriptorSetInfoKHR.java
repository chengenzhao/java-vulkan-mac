// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkPushDescriptorSetInfoKHR {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkShaderStageFlags stageFlags;
 *     VkPipelineLayout layout;
 *     uint32_t set;
 *     uint32_t descriptorWriteCount;
 *     const VkWriteDescriptorSet *pDescriptorWrites;
 * }
 * }
 */
public class VkPushDescriptorSetInfoKHR {

    VkPushDescriptorSetInfoKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("stageFlags"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("layout"),
        vulkan_h.C_INT.withName("set"),
        vulkan_h.C_INT.withName("descriptorWriteCount"),
        vulkan_h.C_POINTER.withName("pDescriptorWrites")
    ).withName("VkPushDescriptorSetInfoKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt stageFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stageFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static final OfInt stageFlags$layout() {
        return stageFlags$LAYOUT;
    }

    private static final long stageFlags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static final long stageFlags$offset() {
        return stageFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static int stageFlags(MemorySegment struct) {
        return struct.get(stageFlags$LAYOUT, stageFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags stageFlags
     * }
     */
    public static void stageFlags(MemorySegment struct, int fieldValue) {
        struct.set(stageFlags$LAYOUT, stageFlags$OFFSET, fieldValue);
    }

    private static final AddressLayout layout$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static final AddressLayout layout$layout() {
        return layout$LAYOUT;
    }

    private static final long layout$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static final long layout$offset() {
        return layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static MemorySegment layout(MemorySegment struct) {
        return struct.get(layout$LAYOUT, layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static void layout(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layout$LAYOUT, layout$OFFSET, fieldValue);
    }

    private static final OfInt set$LAYOUT = (OfInt)$LAYOUT.select(groupElement("set"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t set
     * }
     */
    public static final OfInt set$layout() {
        return set$LAYOUT;
    }

    private static final long set$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t set
     * }
     */
    public static final long set$offset() {
        return set$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t set
     * }
     */
    public static int set(MemorySegment struct) {
        return struct.get(set$LAYOUT, set$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t set
     * }
     */
    public static void set(MemorySegment struct, int fieldValue) {
        struct.set(set$LAYOUT, set$OFFSET, fieldValue);
    }

    private static final OfInt descriptorWriteCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("descriptorWriteCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t descriptorWriteCount
     * }
     */
    public static final OfInt descriptorWriteCount$layout() {
        return descriptorWriteCount$LAYOUT;
    }

    private static final long descriptorWriteCount$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t descriptorWriteCount
     * }
     */
    public static final long descriptorWriteCount$offset() {
        return descriptorWriteCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t descriptorWriteCount
     * }
     */
    public static int descriptorWriteCount(MemorySegment struct) {
        return struct.get(descriptorWriteCount$LAYOUT, descriptorWriteCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t descriptorWriteCount
     * }
     */
    public static void descriptorWriteCount(MemorySegment struct, int fieldValue) {
        struct.set(descriptorWriteCount$LAYOUT, descriptorWriteCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pDescriptorWrites$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDescriptorWrites"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkWriteDescriptorSet *pDescriptorWrites
     * }
     */
    public static final AddressLayout pDescriptorWrites$layout() {
        return pDescriptorWrites$LAYOUT;
    }

    private static final long pDescriptorWrites$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkWriteDescriptorSet *pDescriptorWrites
     * }
     */
    public static final long pDescriptorWrites$offset() {
        return pDescriptorWrites$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkWriteDescriptorSet *pDescriptorWrites
     * }
     */
    public static MemorySegment pDescriptorWrites(MemorySegment struct) {
        return struct.get(pDescriptorWrites$LAYOUT, pDescriptorWrites$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkWriteDescriptorSet *pDescriptorWrites
     * }
     */
    public static void pDescriptorWrites(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDescriptorWrites$LAYOUT, pDescriptorWrites$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

