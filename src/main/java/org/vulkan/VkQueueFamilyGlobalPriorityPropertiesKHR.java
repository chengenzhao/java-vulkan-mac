// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkQueueFamilyGlobalPriorityPropertiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     uint32_t priorityCount;
 *     VkQueueGlobalPriorityKHR priorities[16];
 * }
 * }
 */
public class VkQueueFamilyGlobalPriorityPropertiesKHR {

    VkQueueFamilyGlobalPriorityPropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("priorityCount"),
        MemoryLayout.sequenceLayout(16, vulkan_h.C_INT).withName("priorities"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkQueueFamilyGlobalPriorityPropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt priorityCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("priorityCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t priorityCount
     * }
     */
    public static final OfInt priorityCount$layout() {
        return priorityCount$LAYOUT;
    }

    private static final long priorityCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t priorityCount
     * }
     */
    public static final long priorityCount$offset() {
        return priorityCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t priorityCount
     * }
     */
    public static int priorityCount(MemorySegment struct) {
        return struct.get(priorityCount$LAYOUT, priorityCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t priorityCount
     * }
     */
    public static void priorityCount(MemorySegment struct, int fieldValue) {
        struct.set(priorityCount$LAYOUT, priorityCount$OFFSET, fieldValue);
    }

    private static final SequenceLayout priorities$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("priorities"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkQueueGlobalPriorityKHR priorities[16]
     * }
     */
    public static final SequenceLayout priorities$layout() {
        return priorities$LAYOUT;
    }

    private static final long priorities$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkQueueGlobalPriorityKHR priorities[16]
     * }
     */
    public static final long priorities$offset() {
        return priorities$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkQueueGlobalPriorityKHR priorities[16]
     * }
     */
    public static MemorySegment priorities(MemorySegment struct) {
        return struct.asSlice(priorities$OFFSET, priorities$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkQueueGlobalPriorityKHR priorities[16]
     * }
     */
    public static void priorities(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, priorities$OFFSET, priorities$LAYOUT.byteSize());
    }

    private static long[] priorities$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * VkQueueGlobalPriorityKHR priorities[16]
     * }
     */
    public static long[] priorities$dimensions() {
        return priorities$DIMS;
    }
    private static final VarHandle priorities$ELEM_HANDLE = priorities$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * VkQueueGlobalPriorityKHR priorities[16]
     * }
     */
    public static int priorities(MemorySegment struct, long index0) {
        return (int)priorities$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * VkQueueGlobalPriorityKHR priorities[16]
     * }
     */
    public static void priorities(MemorySegment struct, long index0, int fieldValue) {
        priorities$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

