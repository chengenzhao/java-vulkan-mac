// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkRayTracingPipelineCreateInfoNV {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkPipelineCreateFlags flags;
 *     uint32_t stageCount;
 *     const VkPipelineShaderStageCreateInfo *pStages;
 *     uint32_t groupCount;
 *     const VkRayTracingShaderGroupCreateInfoNV *pGroups;
 *     uint32_t maxRecursionDepth;
 *     VkPipelineLayout layout;
 *     VkPipeline basePipelineHandle;
 *     int32_t basePipelineIndex;
 * }
 * }
 */
public class VkRayTracingPipelineCreateInfoNV {

    VkRayTracingPipelineCreateInfoNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("stageCount"),
        vulkan_h.C_POINTER.withName("pStages"),
        vulkan_h.C_INT.withName("groupCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pGroups"),
        vulkan_h.C_INT.withName("maxRecursionDepth"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("layout"),
        vulkan_h.C_POINTER.withName("basePipelineHandle"),
        vulkan_h.C_INT.withName("basePipelineIndex"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkRayTracingPipelineCreateInfoNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineCreateFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt stageCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stageCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static final OfInt stageCount$layout() {
        return stageCount$LAYOUT;
    }

    private static final long stageCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static final long stageCount$offset() {
        return stageCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static int stageCount(MemorySegment struct) {
        return struct.get(stageCount$LAYOUT, stageCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t stageCount
     * }
     */
    public static void stageCount(MemorySegment struct, int fieldValue) {
        struct.set(stageCount$LAYOUT, stageCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pStages$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pStages"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static final AddressLayout pStages$layout() {
        return pStages$LAYOUT;
    }

    private static final long pStages$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static final long pStages$offset() {
        return pStages$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static MemorySegment pStages(MemorySegment struct) {
        return struct.get(pStages$LAYOUT, pStages$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineShaderStageCreateInfo *pStages
     * }
     */
    public static void pStages(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pStages$LAYOUT, pStages$OFFSET, fieldValue);
    }

    private static final OfInt groupCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("groupCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t groupCount
     * }
     */
    public static final OfInt groupCount$layout() {
        return groupCount$LAYOUT;
    }

    private static final long groupCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t groupCount
     * }
     */
    public static final long groupCount$offset() {
        return groupCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t groupCount
     * }
     */
    public static int groupCount(MemorySegment struct) {
        return struct.get(groupCount$LAYOUT, groupCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t groupCount
     * }
     */
    public static void groupCount(MemorySegment struct, int fieldValue) {
        struct.set(groupCount$LAYOUT, groupCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pGroups$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pGroups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkRayTracingShaderGroupCreateInfoNV *pGroups
     * }
     */
    public static final AddressLayout pGroups$layout() {
        return pGroups$LAYOUT;
    }

    private static final long pGroups$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkRayTracingShaderGroupCreateInfoNV *pGroups
     * }
     */
    public static final long pGroups$offset() {
        return pGroups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkRayTracingShaderGroupCreateInfoNV *pGroups
     * }
     */
    public static MemorySegment pGroups(MemorySegment struct) {
        return struct.get(pGroups$LAYOUT, pGroups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkRayTracingShaderGroupCreateInfoNV *pGroups
     * }
     */
    public static void pGroups(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pGroups$LAYOUT, pGroups$OFFSET, fieldValue);
    }

    private static final OfInt maxRecursionDepth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxRecursionDepth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxRecursionDepth
     * }
     */
    public static final OfInt maxRecursionDepth$layout() {
        return maxRecursionDepth$LAYOUT;
    }

    private static final long maxRecursionDepth$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxRecursionDepth
     * }
     */
    public static final long maxRecursionDepth$offset() {
        return maxRecursionDepth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxRecursionDepth
     * }
     */
    public static int maxRecursionDepth(MemorySegment struct) {
        return struct.get(maxRecursionDepth$LAYOUT, maxRecursionDepth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxRecursionDepth
     * }
     */
    public static void maxRecursionDepth(MemorySegment struct, int fieldValue) {
        struct.set(maxRecursionDepth$LAYOUT, maxRecursionDepth$OFFSET, fieldValue);
    }

    private static final AddressLayout layout$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static final AddressLayout layout$layout() {
        return layout$LAYOUT;
    }

    private static final long layout$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static final long layout$offset() {
        return layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static MemorySegment layout(MemorySegment struct) {
        return struct.get(layout$LAYOUT, layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipelineLayout layout
     * }
     */
    public static void layout(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layout$LAYOUT, layout$OFFSET, fieldValue);
    }

    private static final AddressLayout basePipelineHandle$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("basePipelineHandle"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static final AddressLayout basePipelineHandle$layout() {
        return basePipelineHandle$LAYOUT;
    }

    private static final long basePipelineHandle$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static final long basePipelineHandle$offset() {
        return basePipelineHandle$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static MemorySegment basePipelineHandle(MemorySegment struct) {
        return struct.get(basePipelineHandle$LAYOUT, basePipelineHandle$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkPipeline basePipelineHandle
     * }
     */
    public static void basePipelineHandle(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(basePipelineHandle$LAYOUT, basePipelineHandle$OFFSET, fieldValue);
    }

    private static final OfInt basePipelineIndex$LAYOUT = (OfInt)$LAYOUT.select(groupElement("basePipelineIndex"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static final OfInt basePipelineIndex$layout() {
        return basePipelineIndex$LAYOUT;
    }

    private static final long basePipelineIndex$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static final long basePipelineIndex$offset() {
        return basePipelineIndex$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static int basePipelineIndex(MemorySegment struct) {
        return struct.get(basePipelineIndex$LAYOUT, basePipelineIndex$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t basePipelineIndex
     * }
     */
    public static void basePipelineIndex(MemorySegment struct, int fieldValue) {
        struct.set(basePipelineIndex$LAYOUT, basePipelineIndex$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

