// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkRenderPassBeginInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkRenderPass renderPass;
 *     VkFramebuffer framebuffer;
 *     VkRect2D renderArea;
 *     uint32_t clearValueCount;
 *     const VkClearValue *pClearValues;
 * }
 * }
 */
public class VkRenderPassBeginInfo {

    VkRenderPassBeginInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_POINTER.withName("renderPass"),
        vulkan_h.C_POINTER.withName("framebuffer"),
        VkRect2D.layout().withName("renderArea"),
        vulkan_h.C_INT.withName("clearValueCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pClearValues")
    ).withName("VkRenderPassBeginInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final AddressLayout renderPass$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("renderPass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static final AddressLayout renderPass$layout() {
        return renderPass$LAYOUT;
    }

    private static final long renderPass$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static final long renderPass$offset() {
        return renderPass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static MemorySegment renderPass(MemorySegment struct) {
        return struct.get(renderPass$LAYOUT, renderPass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkRenderPass renderPass
     * }
     */
    public static void renderPass(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(renderPass$LAYOUT, renderPass$OFFSET, fieldValue);
    }

    private static final AddressLayout framebuffer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("framebuffer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static final AddressLayout framebuffer$layout() {
        return framebuffer$LAYOUT;
    }

    private static final long framebuffer$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static final long framebuffer$offset() {
        return framebuffer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static MemorySegment framebuffer(MemorySegment struct) {
        return struct.get(framebuffer$LAYOUT, framebuffer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFramebuffer framebuffer
     * }
     */
    public static void framebuffer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(framebuffer$LAYOUT, framebuffer$OFFSET, fieldValue);
    }

    private static final GroupLayout renderArea$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("renderArea"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static final GroupLayout renderArea$layout() {
        return renderArea$LAYOUT;
    }

    private static final long renderArea$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static final long renderArea$offset() {
        return renderArea$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static MemorySegment renderArea(MemorySegment struct) {
        return struct.asSlice(renderArea$OFFSET, renderArea$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static void renderArea(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, renderArea$OFFSET, renderArea$LAYOUT.byteSize());
    }

    private static final OfInt clearValueCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("clearValueCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t clearValueCount
     * }
     */
    public static final OfInt clearValueCount$layout() {
        return clearValueCount$LAYOUT;
    }

    private static final long clearValueCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t clearValueCount
     * }
     */
    public static final long clearValueCount$offset() {
        return clearValueCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t clearValueCount
     * }
     */
    public static int clearValueCount(MemorySegment struct) {
        return struct.get(clearValueCount$LAYOUT, clearValueCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t clearValueCount
     * }
     */
    public static void clearValueCount(MemorySegment struct, int fieldValue) {
        struct.set(clearValueCount$LAYOUT, clearValueCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pClearValues$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pClearValues"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkClearValue *pClearValues
     * }
     */
    public static final AddressLayout pClearValues$layout() {
        return pClearValues$LAYOUT;
    }

    private static final long pClearValues$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkClearValue *pClearValues
     * }
     */
    public static final long pClearValues$offset() {
        return pClearValues$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkClearValue *pClearValues
     * }
     */
    public static MemorySegment pClearValues(MemorySegment struct) {
        return struct.get(pClearValues$LAYOUT, pClearValues$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkClearValue *pClearValues
     * }
     */
    public static void pClearValues(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pClearValues$LAYOUT, pClearValues$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

