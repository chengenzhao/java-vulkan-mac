// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkRenderingInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkRenderingFlags flags;
 *     VkRect2D renderArea;
 *     uint32_t layerCount;
 *     uint32_t viewMask;
 *     uint32_t colorAttachmentCount;
 *     const VkRenderingAttachmentInfo *pColorAttachments;
 *     const VkRenderingAttachmentInfo *pDepthAttachment;
 *     const VkRenderingAttachmentInfo *pStencilAttachment;
 * }
 * }
 */
public class VkRenderingInfo {

    VkRenderingInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        VkRect2D.layout().withName("renderArea"),
        vulkan_h.C_INT.withName("layerCount"),
        vulkan_h.C_INT.withName("viewMask"),
        vulkan_h.C_INT.withName("colorAttachmentCount"),
        vulkan_h.C_POINTER.withName("pColorAttachments"),
        vulkan_h.C_POINTER.withName("pDepthAttachment"),
        vulkan_h.C_POINTER.withName("pStencilAttachment")
    ).withName("VkRenderingInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkRenderingFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkRenderingFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkRenderingFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkRenderingFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final GroupLayout renderArea$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("renderArea"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static final GroupLayout renderArea$layout() {
        return renderArea$LAYOUT;
    }

    private static final long renderArea$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static final long renderArea$offset() {
        return renderArea$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static MemorySegment renderArea(MemorySegment struct) {
        return struct.asSlice(renderArea$OFFSET, renderArea$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkRect2D renderArea
     * }
     */
    public static void renderArea(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, renderArea$OFFSET, renderArea$LAYOUT.byteSize());
    }

    private static final OfInt layerCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("layerCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static final OfInt layerCount$layout() {
        return layerCount$LAYOUT;
    }

    private static final long layerCount$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static final long layerCount$offset() {
        return layerCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static int layerCount(MemorySegment struct) {
        return struct.get(layerCount$LAYOUT, layerCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static void layerCount(MemorySegment struct, int fieldValue) {
        struct.set(layerCount$LAYOUT, layerCount$OFFSET, fieldValue);
    }

    private static final OfInt viewMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("viewMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t viewMask
     * }
     */
    public static final OfInt viewMask$layout() {
        return viewMask$LAYOUT;
    }

    private static final long viewMask$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t viewMask
     * }
     */
    public static final long viewMask$offset() {
        return viewMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t viewMask
     * }
     */
    public static int viewMask(MemorySegment struct) {
        return struct.get(viewMask$LAYOUT, viewMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t viewMask
     * }
     */
    public static void viewMask(MemorySegment struct, int fieldValue) {
        struct.set(viewMask$LAYOUT, viewMask$OFFSET, fieldValue);
    }

    private static final OfInt colorAttachmentCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("colorAttachmentCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t colorAttachmentCount
     * }
     */
    public static final OfInt colorAttachmentCount$layout() {
        return colorAttachmentCount$LAYOUT;
    }

    private static final long colorAttachmentCount$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t colorAttachmentCount
     * }
     */
    public static final long colorAttachmentCount$offset() {
        return colorAttachmentCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t colorAttachmentCount
     * }
     */
    public static int colorAttachmentCount(MemorySegment struct) {
        return struct.get(colorAttachmentCount$LAYOUT, colorAttachmentCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t colorAttachmentCount
     * }
     */
    public static void colorAttachmentCount(MemorySegment struct, int fieldValue) {
        struct.set(colorAttachmentCount$LAYOUT, colorAttachmentCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pColorAttachments$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pColorAttachments"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pColorAttachments
     * }
     */
    public static final AddressLayout pColorAttachments$layout() {
        return pColorAttachments$LAYOUT;
    }

    private static final long pColorAttachments$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pColorAttachments
     * }
     */
    public static final long pColorAttachments$offset() {
        return pColorAttachments$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pColorAttachments
     * }
     */
    public static MemorySegment pColorAttachments(MemorySegment struct) {
        return struct.get(pColorAttachments$LAYOUT, pColorAttachments$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pColorAttachments
     * }
     */
    public static void pColorAttachments(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pColorAttachments$LAYOUT, pColorAttachments$OFFSET, fieldValue);
    }

    private static final AddressLayout pDepthAttachment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pDepthAttachment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pDepthAttachment
     * }
     */
    public static final AddressLayout pDepthAttachment$layout() {
        return pDepthAttachment$LAYOUT;
    }

    private static final long pDepthAttachment$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pDepthAttachment
     * }
     */
    public static final long pDepthAttachment$offset() {
        return pDepthAttachment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pDepthAttachment
     * }
     */
    public static MemorySegment pDepthAttachment(MemorySegment struct) {
        return struct.get(pDepthAttachment$LAYOUT, pDepthAttachment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pDepthAttachment
     * }
     */
    public static void pDepthAttachment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pDepthAttachment$LAYOUT, pDepthAttachment$OFFSET, fieldValue);
    }

    private static final AddressLayout pStencilAttachment$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pStencilAttachment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pStencilAttachment
     * }
     */
    public static final AddressLayout pStencilAttachment$layout() {
        return pStencilAttachment$LAYOUT;
    }

    private static final long pStencilAttachment$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pStencilAttachment
     * }
     */
    public static final long pStencilAttachment$offset() {
        return pStencilAttachment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pStencilAttachment
     * }
     */
    public static MemorySegment pStencilAttachment(MemorySegment struct) {
        return struct.get(pStencilAttachment$LAYOUT, pStencilAttachment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkRenderingAttachmentInfo *pStencilAttachment
     * }
     */
    public static void pStencilAttachment(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pStencilAttachment$LAYOUT, pStencilAttachment$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

