// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkSRTDataNV {
 *     float sx;
 *     float a;
 *     float b;
 *     float pvx;
 *     float sy;
 *     float c;
 *     float pvy;
 *     float sz;
 *     float pvz;
 *     float qx;
 *     float qy;
 *     float qz;
 *     float qw;
 *     float tx;
 *     float ty;
 *     float tz;
 * }
 * }
 */
public class VkSRTDataNV {

    VkSRTDataNV() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_FLOAT.withName("sx"),
        vulkan_h.C_FLOAT.withName("a"),
        vulkan_h.C_FLOAT.withName("b"),
        vulkan_h.C_FLOAT.withName("pvx"),
        vulkan_h.C_FLOAT.withName("sy"),
        vulkan_h.C_FLOAT.withName("c"),
        vulkan_h.C_FLOAT.withName("pvy"),
        vulkan_h.C_FLOAT.withName("sz"),
        vulkan_h.C_FLOAT.withName("pvz"),
        vulkan_h.C_FLOAT.withName("qx"),
        vulkan_h.C_FLOAT.withName("qy"),
        vulkan_h.C_FLOAT.withName("qz"),
        vulkan_h.C_FLOAT.withName("qw"),
        vulkan_h.C_FLOAT.withName("tx"),
        vulkan_h.C_FLOAT.withName("ty"),
        vulkan_h.C_FLOAT.withName("tz")
    ).withName("VkSRTDataNV");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfFloat sx$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("sx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float sx
     * }
     */
    public static final OfFloat sx$layout() {
        return sx$LAYOUT;
    }

    private static final long sx$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float sx
     * }
     */
    public static final long sx$offset() {
        return sx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float sx
     * }
     */
    public static float sx(MemorySegment struct) {
        return struct.get(sx$LAYOUT, sx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float sx
     * }
     */
    public static void sx(MemorySegment struct, float fieldValue) {
        struct.set(sx$LAYOUT, sx$OFFSET, fieldValue);
    }

    private static final OfFloat a$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("a"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float a
     * }
     */
    public static final OfFloat a$layout() {
        return a$LAYOUT;
    }

    private static final long a$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float a
     * }
     */
    public static final long a$offset() {
        return a$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float a
     * }
     */
    public static float a(MemorySegment struct) {
        return struct.get(a$LAYOUT, a$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float a
     * }
     */
    public static void a(MemorySegment struct, float fieldValue) {
        struct.set(a$LAYOUT, a$OFFSET, fieldValue);
    }

    private static final OfFloat b$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("b"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float b
     * }
     */
    public static final OfFloat b$layout() {
        return b$LAYOUT;
    }

    private static final long b$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float b
     * }
     */
    public static final long b$offset() {
        return b$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float b
     * }
     */
    public static float b(MemorySegment struct) {
        return struct.get(b$LAYOUT, b$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float b
     * }
     */
    public static void b(MemorySegment struct, float fieldValue) {
        struct.set(b$LAYOUT, b$OFFSET, fieldValue);
    }

    private static final OfFloat pvx$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("pvx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float pvx
     * }
     */
    public static final OfFloat pvx$layout() {
        return pvx$LAYOUT;
    }

    private static final long pvx$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float pvx
     * }
     */
    public static final long pvx$offset() {
        return pvx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float pvx
     * }
     */
    public static float pvx(MemorySegment struct) {
        return struct.get(pvx$LAYOUT, pvx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float pvx
     * }
     */
    public static void pvx(MemorySegment struct, float fieldValue) {
        struct.set(pvx$LAYOUT, pvx$OFFSET, fieldValue);
    }

    private static final OfFloat sy$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("sy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float sy
     * }
     */
    public static final OfFloat sy$layout() {
        return sy$LAYOUT;
    }

    private static final long sy$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float sy
     * }
     */
    public static final long sy$offset() {
        return sy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float sy
     * }
     */
    public static float sy(MemorySegment struct) {
        return struct.get(sy$LAYOUT, sy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float sy
     * }
     */
    public static void sy(MemorySegment struct, float fieldValue) {
        struct.set(sy$LAYOUT, sy$OFFSET, fieldValue);
    }

    private static final OfFloat c$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("c"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float c
     * }
     */
    public static final OfFloat c$layout() {
        return c$LAYOUT;
    }

    private static final long c$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float c
     * }
     */
    public static final long c$offset() {
        return c$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float c
     * }
     */
    public static float c(MemorySegment struct) {
        return struct.get(c$LAYOUT, c$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float c
     * }
     */
    public static void c(MemorySegment struct, float fieldValue) {
        struct.set(c$LAYOUT, c$OFFSET, fieldValue);
    }

    private static final OfFloat pvy$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("pvy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float pvy
     * }
     */
    public static final OfFloat pvy$layout() {
        return pvy$LAYOUT;
    }

    private static final long pvy$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float pvy
     * }
     */
    public static final long pvy$offset() {
        return pvy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float pvy
     * }
     */
    public static float pvy(MemorySegment struct) {
        return struct.get(pvy$LAYOUT, pvy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float pvy
     * }
     */
    public static void pvy(MemorySegment struct, float fieldValue) {
        struct.set(pvy$LAYOUT, pvy$OFFSET, fieldValue);
    }

    private static final OfFloat sz$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("sz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float sz
     * }
     */
    public static final OfFloat sz$layout() {
        return sz$LAYOUT;
    }

    private static final long sz$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float sz
     * }
     */
    public static final long sz$offset() {
        return sz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float sz
     * }
     */
    public static float sz(MemorySegment struct) {
        return struct.get(sz$LAYOUT, sz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float sz
     * }
     */
    public static void sz(MemorySegment struct, float fieldValue) {
        struct.set(sz$LAYOUT, sz$OFFSET, fieldValue);
    }

    private static final OfFloat pvz$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("pvz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float pvz
     * }
     */
    public static final OfFloat pvz$layout() {
        return pvz$LAYOUT;
    }

    private static final long pvz$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float pvz
     * }
     */
    public static final long pvz$offset() {
        return pvz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float pvz
     * }
     */
    public static float pvz(MemorySegment struct) {
        return struct.get(pvz$LAYOUT, pvz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float pvz
     * }
     */
    public static void pvz(MemorySegment struct, float fieldValue) {
        struct.set(pvz$LAYOUT, pvz$OFFSET, fieldValue);
    }

    private static final OfFloat qx$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("qx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float qx
     * }
     */
    public static final OfFloat qx$layout() {
        return qx$LAYOUT;
    }

    private static final long qx$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float qx
     * }
     */
    public static final long qx$offset() {
        return qx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float qx
     * }
     */
    public static float qx(MemorySegment struct) {
        return struct.get(qx$LAYOUT, qx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float qx
     * }
     */
    public static void qx(MemorySegment struct, float fieldValue) {
        struct.set(qx$LAYOUT, qx$OFFSET, fieldValue);
    }

    private static final OfFloat qy$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("qy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float qy
     * }
     */
    public static final OfFloat qy$layout() {
        return qy$LAYOUT;
    }

    private static final long qy$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float qy
     * }
     */
    public static final long qy$offset() {
        return qy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float qy
     * }
     */
    public static float qy(MemorySegment struct) {
        return struct.get(qy$LAYOUT, qy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float qy
     * }
     */
    public static void qy(MemorySegment struct, float fieldValue) {
        struct.set(qy$LAYOUT, qy$OFFSET, fieldValue);
    }

    private static final OfFloat qz$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("qz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float qz
     * }
     */
    public static final OfFloat qz$layout() {
        return qz$LAYOUT;
    }

    private static final long qz$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float qz
     * }
     */
    public static final long qz$offset() {
        return qz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float qz
     * }
     */
    public static float qz(MemorySegment struct) {
        return struct.get(qz$LAYOUT, qz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float qz
     * }
     */
    public static void qz(MemorySegment struct, float fieldValue) {
        struct.set(qz$LAYOUT, qz$OFFSET, fieldValue);
    }

    private static final OfFloat qw$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("qw"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float qw
     * }
     */
    public static final OfFloat qw$layout() {
        return qw$LAYOUT;
    }

    private static final long qw$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float qw
     * }
     */
    public static final long qw$offset() {
        return qw$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float qw
     * }
     */
    public static float qw(MemorySegment struct) {
        return struct.get(qw$LAYOUT, qw$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float qw
     * }
     */
    public static void qw(MemorySegment struct, float fieldValue) {
        struct.set(qw$LAYOUT, qw$OFFSET, fieldValue);
    }

    private static final OfFloat tx$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("tx"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float tx
     * }
     */
    public static final OfFloat tx$layout() {
        return tx$LAYOUT;
    }

    private static final long tx$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float tx
     * }
     */
    public static final long tx$offset() {
        return tx$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float tx
     * }
     */
    public static float tx(MemorySegment struct) {
        return struct.get(tx$LAYOUT, tx$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float tx
     * }
     */
    public static void tx(MemorySegment struct, float fieldValue) {
        struct.set(tx$LAYOUT, tx$OFFSET, fieldValue);
    }

    private static final OfFloat ty$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("ty"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float ty
     * }
     */
    public static final OfFloat ty$layout() {
        return ty$LAYOUT;
    }

    private static final long ty$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float ty
     * }
     */
    public static final long ty$offset() {
        return ty$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float ty
     * }
     */
    public static float ty(MemorySegment struct) {
        return struct.get(ty$LAYOUT, ty$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float ty
     * }
     */
    public static void ty(MemorySegment struct, float fieldValue) {
        struct.set(ty$LAYOUT, ty$OFFSET, fieldValue);
    }

    private static final OfFloat tz$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("tz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float tz
     * }
     */
    public static final OfFloat tz$layout() {
        return tz$LAYOUT;
    }

    private static final long tz$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float tz
     * }
     */
    public static final long tz$offset() {
        return tz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float tz
     * }
     */
    public static float tz(MemorySegment struct) {
        return struct.get(tz$LAYOUT, tz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float tz
     * }
     */
    public static void tz(MemorySegment struct, float fieldValue) {
        struct.set(tz$LAYOUT, tz$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

