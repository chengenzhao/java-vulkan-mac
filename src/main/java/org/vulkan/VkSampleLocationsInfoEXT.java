// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkSampleLocationsInfoEXT {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkSampleCountFlagBits sampleLocationsPerPixel;
 *     VkExtent2D sampleLocationGridSize;
 *     uint32_t sampleLocationsCount;
 *     const VkSampleLocationEXT *pSampleLocations;
 * }
 * }
 */
public class VkSampleLocationsInfoEXT {

    VkSampleLocationsInfoEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("sampleLocationsPerPixel"),
        VkExtent2D.layout().withName("sampleLocationGridSize"),
        vulkan_h.C_INT.withName("sampleLocationsCount"),
        vulkan_h.C_POINTER.withName("pSampleLocations")
    ).withName("VkSampleLocationsInfoEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt sampleLocationsPerPixel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampleLocationsPerPixel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits sampleLocationsPerPixel
     * }
     */
    public static final OfInt sampleLocationsPerPixel$layout() {
        return sampleLocationsPerPixel$LAYOUT;
    }

    private static final long sampleLocationsPerPixel$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits sampleLocationsPerPixel
     * }
     */
    public static final long sampleLocationsPerPixel$offset() {
        return sampleLocationsPerPixel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits sampleLocationsPerPixel
     * }
     */
    public static int sampleLocationsPerPixel(MemorySegment struct) {
        return struct.get(sampleLocationsPerPixel$LAYOUT, sampleLocationsPerPixel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSampleCountFlagBits sampleLocationsPerPixel
     * }
     */
    public static void sampleLocationsPerPixel(MemorySegment struct, int fieldValue) {
        struct.set(sampleLocationsPerPixel$LAYOUT, sampleLocationsPerPixel$OFFSET, fieldValue);
    }

    private static final GroupLayout sampleLocationGridSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("sampleLocationGridSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D sampleLocationGridSize
     * }
     */
    public static final GroupLayout sampleLocationGridSize$layout() {
        return sampleLocationGridSize$LAYOUT;
    }

    private static final long sampleLocationGridSize$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D sampleLocationGridSize
     * }
     */
    public static final long sampleLocationGridSize$offset() {
        return sampleLocationGridSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D sampleLocationGridSize
     * }
     */
    public static MemorySegment sampleLocationGridSize(MemorySegment struct) {
        return struct.asSlice(sampleLocationGridSize$OFFSET, sampleLocationGridSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D sampleLocationGridSize
     * }
     */
    public static void sampleLocationGridSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sampleLocationGridSize$OFFSET, sampleLocationGridSize$LAYOUT.byteSize());
    }

    private static final OfInt sampleLocationsCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sampleLocationsCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t sampleLocationsCount
     * }
     */
    public static final OfInt sampleLocationsCount$layout() {
        return sampleLocationsCount$LAYOUT;
    }

    private static final long sampleLocationsCount$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t sampleLocationsCount
     * }
     */
    public static final long sampleLocationsCount$offset() {
        return sampleLocationsCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t sampleLocationsCount
     * }
     */
    public static int sampleLocationsCount(MemorySegment struct) {
        return struct.get(sampleLocationsCount$LAYOUT, sampleLocationsCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t sampleLocationsCount
     * }
     */
    public static void sampleLocationsCount(MemorySegment struct, int fieldValue) {
        struct.set(sampleLocationsCount$LAYOUT, sampleLocationsCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pSampleLocations$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSampleLocations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSampleLocationEXT *pSampleLocations
     * }
     */
    public static final AddressLayout pSampleLocations$layout() {
        return pSampleLocations$LAYOUT;
    }

    private static final long pSampleLocations$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSampleLocationEXT *pSampleLocations
     * }
     */
    public static final long pSampleLocations$offset() {
        return pSampleLocations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSampleLocationEXT *pSampleLocations
     * }
     */
    public static MemorySegment pSampleLocations(MemorySegment struct) {
        return struct.get(pSampleLocations$LAYOUT, pSampleLocations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSampleLocationEXT *pSampleLocations
     * }
     */
    public static void pSampleLocations(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSampleLocations$LAYOUT, pSampleLocations$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

