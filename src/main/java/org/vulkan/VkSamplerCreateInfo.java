// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkSamplerCreateInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkSamplerCreateFlags flags;
 *     VkFilter magFilter;
 *     VkFilter minFilter;
 *     VkSamplerMipmapMode mipmapMode;
 *     VkSamplerAddressMode addressModeU;
 *     VkSamplerAddressMode addressModeV;
 *     VkSamplerAddressMode addressModeW;
 *     float mipLodBias;
 *     VkBool32 anisotropyEnable;
 *     float maxAnisotropy;
 *     VkBool32 compareEnable;
 *     VkCompareOp compareOp;
 *     float minLod;
 *     float maxLod;
 *     VkBorderColor borderColor;
 *     VkBool32 unnormalizedCoordinates;
 * }
 * }
 */
public class VkSamplerCreateInfo {

    VkSamplerCreateInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("magFilter"),
        vulkan_h.C_INT.withName("minFilter"),
        vulkan_h.C_INT.withName("mipmapMode"),
        vulkan_h.C_INT.withName("addressModeU"),
        vulkan_h.C_INT.withName("addressModeV"),
        vulkan_h.C_INT.withName("addressModeW"),
        vulkan_h.C_FLOAT.withName("mipLodBias"),
        vulkan_h.C_INT.withName("anisotropyEnable"),
        vulkan_h.C_FLOAT.withName("maxAnisotropy"),
        vulkan_h.C_INT.withName("compareEnable"),
        vulkan_h.C_INT.withName("compareOp"),
        vulkan_h.C_FLOAT.withName("minLod"),
        vulkan_h.C_FLOAT.withName("maxLod"),
        vulkan_h.C_INT.withName("borderColor"),
        vulkan_h.C_INT.withName("unnormalizedCoordinates")
    ).withName("VkSamplerCreateInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSamplerCreateFlags flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSamplerCreateFlags flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSamplerCreateFlags flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSamplerCreateFlags flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt magFilter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("magFilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFilter magFilter
     * }
     */
    public static final OfInt magFilter$layout() {
        return magFilter$LAYOUT;
    }

    private static final long magFilter$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFilter magFilter
     * }
     */
    public static final long magFilter$offset() {
        return magFilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFilter magFilter
     * }
     */
    public static int magFilter(MemorySegment struct) {
        return struct.get(magFilter$LAYOUT, magFilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFilter magFilter
     * }
     */
    public static void magFilter(MemorySegment struct, int fieldValue) {
        struct.set(magFilter$LAYOUT, magFilter$OFFSET, fieldValue);
    }

    private static final OfInt minFilter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("minFilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFilter minFilter
     * }
     */
    public static final OfInt minFilter$layout() {
        return minFilter$LAYOUT;
    }

    private static final long minFilter$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFilter minFilter
     * }
     */
    public static final long minFilter$offset() {
        return minFilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFilter minFilter
     * }
     */
    public static int minFilter(MemorySegment struct) {
        return struct.get(minFilter$LAYOUT, minFilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFilter minFilter
     * }
     */
    public static void minFilter(MemorySegment struct, int fieldValue) {
        struct.set(minFilter$LAYOUT, minFilter$OFFSET, fieldValue);
    }

    private static final OfInt mipmapMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mipmapMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSamplerMipmapMode mipmapMode
     * }
     */
    public static final OfInt mipmapMode$layout() {
        return mipmapMode$LAYOUT;
    }

    private static final long mipmapMode$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSamplerMipmapMode mipmapMode
     * }
     */
    public static final long mipmapMode$offset() {
        return mipmapMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSamplerMipmapMode mipmapMode
     * }
     */
    public static int mipmapMode(MemorySegment struct) {
        return struct.get(mipmapMode$LAYOUT, mipmapMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSamplerMipmapMode mipmapMode
     * }
     */
    public static void mipmapMode(MemorySegment struct, int fieldValue) {
        struct.set(mipmapMode$LAYOUT, mipmapMode$OFFSET, fieldValue);
    }

    private static final OfInt addressModeU$LAYOUT = (OfInt)$LAYOUT.select(groupElement("addressModeU"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeU
     * }
     */
    public static final OfInt addressModeU$layout() {
        return addressModeU$LAYOUT;
    }

    private static final long addressModeU$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeU
     * }
     */
    public static final long addressModeU$offset() {
        return addressModeU$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeU
     * }
     */
    public static int addressModeU(MemorySegment struct) {
        return struct.get(addressModeU$LAYOUT, addressModeU$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeU
     * }
     */
    public static void addressModeU(MemorySegment struct, int fieldValue) {
        struct.set(addressModeU$LAYOUT, addressModeU$OFFSET, fieldValue);
    }

    private static final OfInt addressModeV$LAYOUT = (OfInt)$LAYOUT.select(groupElement("addressModeV"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeV
     * }
     */
    public static final OfInt addressModeV$layout() {
        return addressModeV$LAYOUT;
    }

    private static final long addressModeV$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeV
     * }
     */
    public static final long addressModeV$offset() {
        return addressModeV$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeV
     * }
     */
    public static int addressModeV(MemorySegment struct) {
        return struct.get(addressModeV$LAYOUT, addressModeV$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeV
     * }
     */
    public static void addressModeV(MemorySegment struct, int fieldValue) {
        struct.set(addressModeV$LAYOUT, addressModeV$OFFSET, fieldValue);
    }

    private static final OfInt addressModeW$LAYOUT = (OfInt)$LAYOUT.select(groupElement("addressModeW"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeW
     * }
     */
    public static final OfInt addressModeW$layout() {
        return addressModeW$LAYOUT;
    }

    private static final long addressModeW$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeW
     * }
     */
    public static final long addressModeW$offset() {
        return addressModeW$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeW
     * }
     */
    public static int addressModeW(MemorySegment struct) {
        return struct.get(addressModeW$LAYOUT, addressModeW$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSamplerAddressMode addressModeW
     * }
     */
    public static void addressModeW(MemorySegment struct, int fieldValue) {
        struct.set(addressModeW$LAYOUT, addressModeW$OFFSET, fieldValue);
    }

    private static final OfFloat mipLodBias$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("mipLodBias"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float mipLodBias
     * }
     */
    public static final OfFloat mipLodBias$layout() {
        return mipLodBias$LAYOUT;
    }

    private static final long mipLodBias$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float mipLodBias
     * }
     */
    public static final long mipLodBias$offset() {
        return mipLodBias$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float mipLodBias
     * }
     */
    public static float mipLodBias(MemorySegment struct) {
        return struct.get(mipLodBias$LAYOUT, mipLodBias$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float mipLodBias
     * }
     */
    public static void mipLodBias(MemorySegment struct, float fieldValue) {
        struct.set(mipLodBias$LAYOUT, mipLodBias$OFFSET, fieldValue);
    }

    private static final OfInt anisotropyEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("anisotropyEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 anisotropyEnable
     * }
     */
    public static final OfInt anisotropyEnable$layout() {
        return anisotropyEnable$LAYOUT;
    }

    private static final long anisotropyEnable$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 anisotropyEnable
     * }
     */
    public static final long anisotropyEnable$offset() {
        return anisotropyEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 anisotropyEnable
     * }
     */
    public static int anisotropyEnable(MemorySegment struct) {
        return struct.get(anisotropyEnable$LAYOUT, anisotropyEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 anisotropyEnable
     * }
     */
    public static void anisotropyEnable(MemorySegment struct, int fieldValue) {
        struct.set(anisotropyEnable$LAYOUT, anisotropyEnable$OFFSET, fieldValue);
    }

    private static final OfFloat maxAnisotropy$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxAnisotropy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxAnisotropy
     * }
     */
    public static final OfFloat maxAnisotropy$layout() {
        return maxAnisotropy$LAYOUT;
    }

    private static final long maxAnisotropy$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxAnisotropy
     * }
     */
    public static final long maxAnisotropy$offset() {
        return maxAnisotropy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxAnisotropy
     * }
     */
    public static float maxAnisotropy(MemorySegment struct) {
        return struct.get(maxAnisotropy$LAYOUT, maxAnisotropy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxAnisotropy
     * }
     */
    public static void maxAnisotropy(MemorySegment struct, float fieldValue) {
        struct.set(maxAnisotropy$LAYOUT, maxAnisotropy$OFFSET, fieldValue);
    }

    private static final OfInt compareEnable$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compareEnable"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 compareEnable
     * }
     */
    public static final OfInt compareEnable$layout() {
        return compareEnable$LAYOUT;
    }

    private static final long compareEnable$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 compareEnable
     * }
     */
    public static final long compareEnable$offset() {
        return compareEnable$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 compareEnable
     * }
     */
    public static int compareEnable(MemorySegment struct) {
        return struct.get(compareEnable$LAYOUT, compareEnable$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 compareEnable
     * }
     */
    public static void compareEnable(MemorySegment struct, int fieldValue) {
        struct.set(compareEnable$LAYOUT, compareEnable$OFFSET, fieldValue);
    }

    private static final OfInt compareOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compareOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static final OfInt compareOp$layout() {
        return compareOp$LAYOUT;
    }

    private static final long compareOp$OFFSET = 60;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static final long compareOp$offset() {
        return compareOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static int compareOp(MemorySegment struct) {
        return struct.get(compareOp$LAYOUT, compareOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static void compareOp(MemorySegment struct, int fieldValue) {
        struct.set(compareOp$LAYOUT, compareOp$OFFSET, fieldValue);
    }

    private static final OfFloat minLod$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("minLod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float minLod
     * }
     */
    public static final OfFloat minLod$layout() {
        return minLod$LAYOUT;
    }

    private static final long minLod$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float minLod
     * }
     */
    public static final long minLod$offset() {
        return minLod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float minLod
     * }
     */
    public static float minLod(MemorySegment struct) {
        return struct.get(minLod$LAYOUT, minLod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float minLod
     * }
     */
    public static void minLod(MemorySegment struct, float fieldValue) {
        struct.set(minLod$LAYOUT, minLod$OFFSET, fieldValue);
    }

    private static final OfFloat maxLod$LAYOUT = (OfFloat)$LAYOUT.select(groupElement("maxLod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * float maxLod
     * }
     */
    public static final OfFloat maxLod$layout() {
        return maxLod$LAYOUT;
    }

    private static final long maxLod$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * float maxLod
     * }
     */
    public static final long maxLod$offset() {
        return maxLod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * float maxLod
     * }
     */
    public static float maxLod(MemorySegment struct) {
        return struct.get(maxLod$LAYOUT, maxLod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * float maxLod
     * }
     */
    public static void maxLod(MemorySegment struct, float fieldValue) {
        struct.set(maxLod$LAYOUT, maxLod$OFFSET, fieldValue);
    }

    private static final OfInt borderColor$LAYOUT = (OfInt)$LAYOUT.select(groupElement("borderColor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBorderColor borderColor
     * }
     */
    public static final OfInt borderColor$layout() {
        return borderColor$LAYOUT;
    }

    private static final long borderColor$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBorderColor borderColor
     * }
     */
    public static final long borderColor$offset() {
        return borderColor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBorderColor borderColor
     * }
     */
    public static int borderColor(MemorySegment struct) {
        return struct.get(borderColor$LAYOUT, borderColor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBorderColor borderColor
     * }
     */
    public static void borderColor(MemorySegment struct, int fieldValue) {
        struct.set(borderColor$LAYOUT, borderColor$OFFSET, fieldValue);
    }

    private static final OfInt unnormalizedCoordinates$LAYOUT = (OfInt)$LAYOUT.select(groupElement("unnormalizedCoordinates"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 unnormalizedCoordinates
     * }
     */
    public static final OfInt unnormalizedCoordinates$layout() {
        return unnormalizedCoordinates$LAYOUT;
    }

    private static final long unnormalizedCoordinates$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 unnormalizedCoordinates
     * }
     */
    public static final long unnormalizedCoordinates$offset() {
        return unnormalizedCoordinates$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 unnormalizedCoordinates
     * }
     */
    public static int unnormalizedCoordinates(MemorySegment struct) {
        return struct.get(unnormalizedCoordinates$LAYOUT, unnormalizedCoordinates$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 unnormalizedCoordinates
     * }
     */
    public static void unnormalizedCoordinates(MemorySegment struct, int fieldValue) {
        struct.set(unnormalizedCoordinates$LAYOUT, unnormalizedCoordinates$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

