// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkSamplerYcbcrConversionCreateInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkFormat format;
 *     VkSamplerYcbcrModelConversion ycbcrModel;
 *     VkSamplerYcbcrRange ycbcrRange;
 *     VkComponentMapping components;
 *     VkChromaLocation xChromaOffset;
 *     VkChromaLocation yChromaOffset;
 *     VkFilter chromaFilter;
 *     VkBool32 forceExplicitReconstruction;
 * }
 * }
 */
public class VkSamplerYcbcrConversionCreateInfo {

    VkSamplerYcbcrConversionCreateInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("format"),
        vulkan_h.C_INT.withName("ycbcrModel"),
        vulkan_h.C_INT.withName("ycbcrRange"),
        VkComponentMapping.layout().withName("components"),
        vulkan_h.C_INT.withName("xChromaOffset"),
        vulkan_h.C_INT.withName("yChromaOffset"),
        vulkan_h.C_INT.withName("chromaFilter"),
        vulkan_h.C_INT.withName("forceExplicitReconstruction"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkSamplerYcbcrConversionCreateInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final OfInt ycbcrModel$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ycbcrModel"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrModelConversion ycbcrModel
     * }
     */
    public static final OfInt ycbcrModel$layout() {
        return ycbcrModel$LAYOUT;
    }

    private static final long ycbcrModel$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrModelConversion ycbcrModel
     * }
     */
    public static final long ycbcrModel$offset() {
        return ycbcrModel$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrModelConversion ycbcrModel
     * }
     */
    public static int ycbcrModel(MemorySegment struct) {
        return struct.get(ycbcrModel$LAYOUT, ycbcrModel$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrModelConversion ycbcrModel
     * }
     */
    public static void ycbcrModel(MemorySegment struct, int fieldValue) {
        struct.set(ycbcrModel$LAYOUT, ycbcrModel$OFFSET, fieldValue);
    }

    private static final OfInt ycbcrRange$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ycbcrRange"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrRange ycbcrRange
     * }
     */
    public static final OfInt ycbcrRange$layout() {
        return ycbcrRange$LAYOUT;
    }

    private static final long ycbcrRange$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrRange ycbcrRange
     * }
     */
    public static final long ycbcrRange$offset() {
        return ycbcrRange$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrRange ycbcrRange
     * }
     */
    public static int ycbcrRange(MemorySegment struct) {
        return struct.get(ycbcrRange$LAYOUT, ycbcrRange$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSamplerYcbcrRange ycbcrRange
     * }
     */
    public static void ycbcrRange(MemorySegment struct, int fieldValue) {
        struct.set(ycbcrRange$LAYOUT, ycbcrRange$OFFSET, fieldValue);
    }

    private static final GroupLayout components$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("components"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentMapping components
     * }
     */
    public static final GroupLayout components$layout() {
        return components$LAYOUT;
    }

    private static final long components$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentMapping components
     * }
     */
    public static final long components$offset() {
        return components$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentMapping components
     * }
     */
    public static MemorySegment components(MemorySegment struct) {
        return struct.asSlice(components$OFFSET, components$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentMapping components
     * }
     */
    public static void components(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, components$OFFSET, components$LAYOUT.byteSize());
    }

    private static final OfInt xChromaOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("xChromaOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkChromaLocation xChromaOffset
     * }
     */
    public static final OfInt xChromaOffset$layout() {
        return xChromaOffset$LAYOUT;
    }

    private static final long xChromaOffset$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkChromaLocation xChromaOffset
     * }
     */
    public static final long xChromaOffset$offset() {
        return xChromaOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkChromaLocation xChromaOffset
     * }
     */
    public static int xChromaOffset(MemorySegment struct) {
        return struct.get(xChromaOffset$LAYOUT, xChromaOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkChromaLocation xChromaOffset
     * }
     */
    public static void xChromaOffset(MemorySegment struct, int fieldValue) {
        struct.set(xChromaOffset$LAYOUT, xChromaOffset$OFFSET, fieldValue);
    }

    private static final OfInt yChromaOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("yChromaOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkChromaLocation yChromaOffset
     * }
     */
    public static final OfInt yChromaOffset$layout() {
        return yChromaOffset$LAYOUT;
    }

    private static final long yChromaOffset$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkChromaLocation yChromaOffset
     * }
     */
    public static final long yChromaOffset$offset() {
        return yChromaOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkChromaLocation yChromaOffset
     * }
     */
    public static int yChromaOffset(MemorySegment struct) {
        return struct.get(yChromaOffset$LAYOUT, yChromaOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkChromaLocation yChromaOffset
     * }
     */
    public static void yChromaOffset(MemorySegment struct, int fieldValue) {
        struct.set(yChromaOffset$LAYOUT, yChromaOffset$OFFSET, fieldValue);
    }

    private static final OfInt chromaFilter$LAYOUT = (OfInt)$LAYOUT.select(groupElement("chromaFilter"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFilter chromaFilter
     * }
     */
    public static final OfInt chromaFilter$layout() {
        return chromaFilter$LAYOUT;
    }

    private static final long chromaFilter$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFilter chromaFilter
     * }
     */
    public static final long chromaFilter$offset() {
        return chromaFilter$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFilter chromaFilter
     * }
     */
    public static int chromaFilter(MemorySegment struct) {
        return struct.get(chromaFilter$LAYOUT, chromaFilter$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFilter chromaFilter
     * }
     */
    public static void chromaFilter(MemorySegment struct, int fieldValue) {
        struct.set(chromaFilter$LAYOUT, chromaFilter$OFFSET, fieldValue);
    }

    private static final OfInt forceExplicitReconstruction$LAYOUT = (OfInt)$LAYOUT.select(groupElement("forceExplicitReconstruction"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 forceExplicitReconstruction
     * }
     */
    public static final OfInt forceExplicitReconstruction$layout() {
        return forceExplicitReconstruction$LAYOUT;
    }

    private static final long forceExplicitReconstruction$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 forceExplicitReconstruction
     * }
     */
    public static final long forceExplicitReconstruction$offset() {
        return forceExplicitReconstruction$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 forceExplicitReconstruction
     * }
     */
    public static int forceExplicitReconstruction(MemorySegment struct) {
        return struct.get(forceExplicitReconstruction$LAYOUT, forceExplicitReconstruction$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 forceExplicitReconstruction
     * }
     */
    public static void forceExplicitReconstruction(MemorySegment struct, int fieldValue) {
        struct.set(forceExplicitReconstruction$LAYOUT, forceExplicitReconstruction$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

