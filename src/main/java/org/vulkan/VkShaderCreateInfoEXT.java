// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkShaderCreateInfoEXT {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkShaderCreateFlagsEXT flags;
 *     VkShaderStageFlagBits stage;
 *     VkShaderStageFlags nextStage;
 *     VkShaderCodeTypeEXT codeType;
 *     size_t codeSize;
 *     const void *pCode;
 *     const char *pName;
 *     uint32_t setLayoutCount;
 *     const VkDescriptorSetLayout *pSetLayouts;
 *     uint32_t pushConstantRangeCount;
 *     const VkPushConstantRange *pPushConstantRanges;
 *     const VkSpecializationInfo *pSpecializationInfo;
 * }
 * }
 */
public class VkShaderCreateInfoEXT {

    VkShaderCreateInfoEXT() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("stage"),
        vulkan_h.C_INT.withName("nextStage"),
        vulkan_h.C_INT.withName("codeType"),
        vulkan_h.C_LONG.withName("codeSize"),
        vulkan_h.C_POINTER.withName("pCode"),
        vulkan_h.C_POINTER.withName("pName"),
        vulkan_h.C_INT.withName("setLayoutCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pSetLayouts"),
        vulkan_h.C_INT.withName("pushConstantRangeCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pPushConstantRanges"),
        vulkan_h.C_POINTER.withName("pSpecializationInfo")
    ).withName("VkShaderCreateInfoEXT");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderCreateFlagsEXT flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderCreateFlagsEXT flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderCreateFlagsEXT flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderCreateFlagsEXT flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt stage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("stage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderStageFlagBits stage
     * }
     */
    public static final OfInt stage$layout() {
        return stage$LAYOUT;
    }

    private static final long stage$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderStageFlagBits stage
     * }
     */
    public static final long stage$offset() {
        return stage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderStageFlagBits stage
     * }
     */
    public static int stage(MemorySegment struct) {
        return struct.get(stage$LAYOUT, stage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderStageFlagBits stage
     * }
     */
    public static void stage(MemorySegment struct, int fieldValue) {
        struct.set(stage$LAYOUT, stage$OFFSET, fieldValue);
    }

    private static final OfInt nextStage$LAYOUT = (OfInt)$LAYOUT.select(groupElement("nextStage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderStageFlags nextStage
     * }
     */
    public static final OfInt nextStage$layout() {
        return nextStage$LAYOUT;
    }

    private static final long nextStage$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderStageFlags nextStage
     * }
     */
    public static final long nextStage$offset() {
        return nextStage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags nextStage
     * }
     */
    public static int nextStage(MemorySegment struct) {
        return struct.get(nextStage$LAYOUT, nextStage$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags nextStage
     * }
     */
    public static void nextStage(MemorySegment struct, int fieldValue) {
        struct.set(nextStage$LAYOUT, nextStage$OFFSET, fieldValue);
    }

    private static final OfInt codeType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("codeType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderCodeTypeEXT codeType
     * }
     */
    public static final OfInt codeType$layout() {
        return codeType$LAYOUT;
    }

    private static final long codeType$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderCodeTypeEXT codeType
     * }
     */
    public static final long codeType$offset() {
        return codeType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderCodeTypeEXT codeType
     * }
     */
    public static int codeType(MemorySegment struct) {
        return struct.get(codeType$LAYOUT, codeType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderCodeTypeEXT codeType
     * }
     */
    public static void codeType(MemorySegment struct, int fieldValue) {
        struct.set(codeType$LAYOUT, codeType$OFFSET, fieldValue);
    }

    private static final OfLong codeSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("codeSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t codeSize
     * }
     */
    public static final OfLong codeSize$layout() {
        return codeSize$LAYOUT;
    }

    private static final long codeSize$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t codeSize
     * }
     */
    public static final long codeSize$offset() {
        return codeSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t codeSize
     * }
     */
    public static long codeSize(MemorySegment struct) {
        return struct.get(codeSize$LAYOUT, codeSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t codeSize
     * }
     */
    public static void codeSize(MemorySegment struct, long fieldValue) {
        struct.set(codeSize$LAYOUT, codeSize$OFFSET, fieldValue);
    }

    private static final AddressLayout pCode$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pCode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pCode
     * }
     */
    public static final AddressLayout pCode$layout() {
        return pCode$LAYOUT;
    }

    private static final long pCode$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pCode
     * }
     */
    public static final long pCode$offset() {
        return pCode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pCode
     * }
     */
    public static MemorySegment pCode(MemorySegment struct) {
        return struct.get(pCode$LAYOUT, pCode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pCode
     * }
     */
    public static void pCode(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pCode$LAYOUT, pCode$OFFSET, fieldValue);
    }

    private static final AddressLayout pName$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pName"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *pName
     * }
     */
    public static final AddressLayout pName$layout() {
        return pName$LAYOUT;
    }

    private static final long pName$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *pName
     * }
     */
    public static final long pName$offset() {
        return pName$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *pName
     * }
     */
    public static MemorySegment pName(MemorySegment struct) {
        return struct.get(pName$LAYOUT, pName$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *pName
     * }
     */
    public static void pName(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pName$LAYOUT, pName$OFFSET, fieldValue);
    }

    private static final OfInt setLayoutCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("setLayoutCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t setLayoutCount
     * }
     */
    public static final OfInt setLayoutCount$layout() {
        return setLayoutCount$LAYOUT;
    }

    private static final long setLayoutCount$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t setLayoutCount
     * }
     */
    public static final long setLayoutCount$offset() {
        return setLayoutCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t setLayoutCount
     * }
     */
    public static int setLayoutCount(MemorySegment struct) {
        return struct.get(setLayoutCount$LAYOUT, setLayoutCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t setLayoutCount
     * }
     */
    public static void setLayoutCount(MemorySegment struct, int fieldValue) {
        struct.set(setLayoutCount$LAYOUT, setLayoutCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pSetLayouts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSetLayouts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkDescriptorSetLayout *pSetLayouts
     * }
     */
    public static final AddressLayout pSetLayouts$layout() {
        return pSetLayouts$LAYOUT;
    }

    private static final long pSetLayouts$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkDescriptorSetLayout *pSetLayouts
     * }
     */
    public static final long pSetLayouts$offset() {
        return pSetLayouts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkDescriptorSetLayout *pSetLayouts
     * }
     */
    public static MemorySegment pSetLayouts(MemorySegment struct) {
        return struct.get(pSetLayouts$LAYOUT, pSetLayouts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkDescriptorSetLayout *pSetLayouts
     * }
     */
    public static void pSetLayouts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSetLayouts$LAYOUT, pSetLayouts$OFFSET, fieldValue);
    }

    private static final OfInt pushConstantRangeCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("pushConstantRangeCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t pushConstantRangeCount
     * }
     */
    public static final OfInt pushConstantRangeCount$layout() {
        return pushConstantRangeCount$LAYOUT;
    }

    private static final long pushConstantRangeCount$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t pushConstantRangeCount
     * }
     */
    public static final long pushConstantRangeCount$offset() {
        return pushConstantRangeCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t pushConstantRangeCount
     * }
     */
    public static int pushConstantRangeCount(MemorySegment struct) {
        return struct.get(pushConstantRangeCount$LAYOUT, pushConstantRangeCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t pushConstantRangeCount
     * }
     */
    public static void pushConstantRangeCount(MemorySegment struct, int fieldValue) {
        struct.set(pushConstantRangeCount$LAYOUT, pushConstantRangeCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pPushConstantRanges$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pPushConstantRanges"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPushConstantRange *pPushConstantRanges
     * }
     */
    public static final AddressLayout pPushConstantRanges$layout() {
        return pPushConstantRanges$LAYOUT;
    }

    private static final long pPushConstantRanges$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPushConstantRange *pPushConstantRanges
     * }
     */
    public static final long pPushConstantRanges$offset() {
        return pPushConstantRanges$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPushConstantRange *pPushConstantRanges
     * }
     */
    public static MemorySegment pPushConstantRanges(MemorySegment struct) {
        return struct.get(pPushConstantRanges$LAYOUT, pPushConstantRanges$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPushConstantRange *pPushConstantRanges
     * }
     */
    public static void pPushConstantRanges(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pPushConstantRanges$LAYOUT, pPushConstantRanges$OFFSET, fieldValue);
    }

    private static final AddressLayout pSpecializationInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSpecializationInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSpecializationInfo *pSpecializationInfo
     * }
     */
    public static final AddressLayout pSpecializationInfo$layout() {
        return pSpecializationInfo$LAYOUT;
    }

    private static final long pSpecializationInfo$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSpecializationInfo *pSpecializationInfo
     * }
     */
    public static final long pSpecializationInfo$offset() {
        return pSpecializationInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSpecializationInfo *pSpecializationInfo
     * }
     */
    public static MemorySegment pSpecializationInfo(MemorySegment struct) {
        return struct.get(pSpecializationInfo$LAYOUT, pSpecializationInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSpecializationInfo *pSpecializationInfo
     * }
     */
    public static void pSpecializationInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSpecializationInfo$LAYOUT, pSpecializationInfo$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

