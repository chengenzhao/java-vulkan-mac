// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkShaderResourceUsageAMD {
 *     uint32_t numUsedVgprs;
 *     uint32_t numUsedSgprs;
 *     uint32_t ldsSizePerLocalWorkGroup;
 *     size_t ldsUsageSizeInBytes;
 *     size_t scratchMemUsageInBytes;
 * }
 * }
 */
public class VkShaderResourceUsageAMD {

    VkShaderResourceUsageAMD() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("numUsedVgprs"),
        vulkan_h.C_INT.withName("numUsedSgprs"),
        vulkan_h.C_INT.withName("ldsSizePerLocalWorkGroup"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG.withName("ldsUsageSizeInBytes"),
        vulkan_h.C_LONG.withName("scratchMemUsageInBytes")
    ).withName("VkShaderResourceUsageAMD");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt numUsedVgprs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numUsedVgprs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t numUsedVgprs
     * }
     */
    public static final OfInt numUsedVgprs$layout() {
        return numUsedVgprs$LAYOUT;
    }

    private static final long numUsedVgprs$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t numUsedVgprs
     * }
     */
    public static final long numUsedVgprs$offset() {
        return numUsedVgprs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t numUsedVgprs
     * }
     */
    public static int numUsedVgprs(MemorySegment struct) {
        return struct.get(numUsedVgprs$LAYOUT, numUsedVgprs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t numUsedVgprs
     * }
     */
    public static void numUsedVgprs(MemorySegment struct, int fieldValue) {
        struct.set(numUsedVgprs$LAYOUT, numUsedVgprs$OFFSET, fieldValue);
    }

    private static final OfInt numUsedSgprs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numUsedSgprs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t numUsedSgprs
     * }
     */
    public static final OfInt numUsedSgprs$layout() {
        return numUsedSgprs$LAYOUT;
    }

    private static final long numUsedSgprs$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t numUsedSgprs
     * }
     */
    public static final long numUsedSgprs$offset() {
        return numUsedSgprs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t numUsedSgprs
     * }
     */
    public static int numUsedSgprs(MemorySegment struct) {
        return struct.get(numUsedSgprs$LAYOUT, numUsedSgprs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t numUsedSgprs
     * }
     */
    public static void numUsedSgprs(MemorySegment struct, int fieldValue) {
        struct.set(numUsedSgprs$LAYOUT, numUsedSgprs$OFFSET, fieldValue);
    }

    private static final OfInt ldsSizePerLocalWorkGroup$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ldsSizePerLocalWorkGroup"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t ldsSizePerLocalWorkGroup
     * }
     */
    public static final OfInt ldsSizePerLocalWorkGroup$layout() {
        return ldsSizePerLocalWorkGroup$LAYOUT;
    }

    private static final long ldsSizePerLocalWorkGroup$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t ldsSizePerLocalWorkGroup
     * }
     */
    public static final long ldsSizePerLocalWorkGroup$offset() {
        return ldsSizePerLocalWorkGroup$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t ldsSizePerLocalWorkGroup
     * }
     */
    public static int ldsSizePerLocalWorkGroup(MemorySegment struct) {
        return struct.get(ldsSizePerLocalWorkGroup$LAYOUT, ldsSizePerLocalWorkGroup$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t ldsSizePerLocalWorkGroup
     * }
     */
    public static void ldsSizePerLocalWorkGroup(MemorySegment struct, int fieldValue) {
        struct.set(ldsSizePerLocalWorkGroup$LAYOUT, ldsSizePerLocalWorkGroup$OFFSET, fieldValue);
    }

    private static final OfLong ldsUsageSizeInBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ldsUsageSizeInBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t ldsUsageSizeInBytes
     * }
     */
    public static final OfLong ldsUsageSizeInBytes$layout() {
        return ldsUsageSizeInBytes$LAYOUT;
    }

    private static final long ldsUsageSizeInBytes$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t ldsUsageSizeInBytes
     * }
     */
    public static final long ldsUsageSizeInBytes$offset() {
        return ldsUsageSizeInBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t ldsUsageSizeInBytes
     * }
     */
    public static long ldsUsageSizeInBytes(MemorySegment struct) {
        return struct.get(ldsUsageSizeInBytes$LAYOUT, ldsUsageSizeInBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t ldsUsageSizeInBytes
     * }
     */
    public static void ldsUsageSizeInBytes(MemorySegment struct, long fieldValue) {
        struct.set(ldsUsageSizeInBytes$LAYOUT, ldsUsageSizeInBytes$OFFSET, fieldValue);
    }

    private static final OfLong scratchMemUsageInBytes$LAYOUT = (OfLong)$LAYOUT.select(groupElement("scratchMemUsageInBytes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * size_t scratchMemUsageInBytes
     * }
     */
    public static final OfLong scratchMemUsageInBytes$layout() {
        return scratchMemUsageInBytes$LAYOUT;
    }

    private static final long scratchMemUsageInBytes$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * size_t scratchMemUsageInBytes
     * }
     */
    public static final long scratchMemUsageInBytes$offset() {
        return scratchMemUsageInBytes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * size_t scratchMemUsageInBytes
     * }
     */
    public static long scratchMemUsageInBytes(MemorySegment struct) {
        return struct.get(scratchMemUsageInBytes$LAYOUT, scratchMemUsageInBytes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * size_t scratchMemUsageInBytes
     * }
     */
    public static void scratchMemUsageInBytes(MemorySegment struct, long fieldValue) {
        struct.set(scratchMemUsageInBytes$LAYOUT, scratchMemUsageInBytes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

