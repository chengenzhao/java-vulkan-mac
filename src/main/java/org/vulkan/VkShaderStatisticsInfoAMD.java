// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkShaderStatisticsInfoAMD {
 *     VkShaderStageFlags shaderStageMask;
 *     VkShaderResourceUsageAMD resourceUsage;
 *     uint32_t numPhysicalVgprs;
 *     uint32_t numPhysicalSgprs;
 *     uint32_t numAvailableVgprs;
 *     uint32_t numAvailableSgprs;
 *     uint32_t computeWorkGroupSize[3];
 * }
 * }
 */
public class VkShaderStatisticsInfoAMD {

    VkShaderStatisticsInfoAMD() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("shaderStageMask"),
        MemoryLayout.paddingLayout(4),
        VkShaderResourceUsageAMD.layout().withName("resourceUsage"),
        vulkan_h.C_INT.withName("numPhysicalVgprs"),
        vulkan_h.C_INT.withName("numPhysicalSgprs"),
        vulkan_h.C_INT.withName("numAvailableVgprs"),
        vulkan_h.C_INT.withName("numAvailableSgprs"),
        MemoryLayout.sequenceLayout(3, vulkan_h.C_INT).withName("computeWorkGroupSize"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkShaderStatisticsInfoAMD");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt shaderStageMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("shaderStageMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderStageFlags shaderStageMask
     * }
     */
    public static final OfInt shaderStageMask$layout() {
        return shaderStageMask$LAYOUT;
    }

    private static final long shaderStageMask$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderStageFlags shaderStageMask
     * }
     */
    public static final long shaderStageMask$offset() {
        return shaderStageMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags shaderStageMask
     * }
     */
    public static int shaderStageMask(MemorySegment struct) {
        return struct.get(shaderStageMask$LAYOUT, shaderStageMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderStageFlags shaderStageMask
     * }
     */
    public static void shaderStageMask(MemorySegment struct, int fieldValue) {
        struct.set(shaderStageMask$LAYOUT, shaderStageMask$OFFSET, fieldValue);
    }

    private static final GroupLayout resourceUsage$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("resourceUsage"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkShaderResourceUsageAMD resourceUsage
     * }
     */
    public static final GroupLayout resourceUsage$layout() {
        return resourceUsage$LAYOUT;
    }

    private static final long resourceUsage$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkShaderResourceUsageAMD resourceUsage
     * }
     */
    public static final long resourceUsage$offset() {
        return resourceUsage$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkShaderResourceUsageAMD resourceUsage
     * }
     */
    public static MemorySegment resourceUsage(MemorySegment struct) {
        return struct.asSlice(resourceUsage$OFFSET, resourceUsage$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkShaderResourceUsageAMD resourceUsage
     * }
     */
    public static void resourceUsage(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, resourceUsage$OFFSET, resourceUsage$LAYOUT.byteSize());
    }

    private static final OfInt numPhysicalVgprs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numPhysicalVgprs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalVgprs
     * }
     */
    public static final OfInt numPhysicalVgprs$layout() {
        return numPhysicalVgprs$LAYOUT;
    }

    private static final long numPhysicalVgprs$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalVgprs
     * }
     */
    public static final long numPhysicalVgprs$offset() {
        return numPhysicalVgprs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalVgprs
     * }
     */
    public static int numPhysicalVgprs(MemorySegment struct) {
        return struct.get(numPhysicalVgprs$LAYOUT, numPhysicalVgprs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalVgprs
     * }
     */
    public static void numPhysicalVgprs(MemorySegment struct, int fieldValue) {
        struct.set(numPhysicalVgprs$LAYOUT, numPhysicalVgprs$OFFSET, fieldValue);
    }

    private static final OfInt numPhysicalSgprs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numPhysicalSgprs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalSgprs
     * }
     */
    public static final OfInt numPhysicalSgprs$layout() {
        return numPhysicalSgprs$LAYOUT;
    }

    private static final long numPhysicalSgprs$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalSgprs
     * }
     */
    public static final long numPhysicalSgprs$offset() {
        return numPhysicalSgprs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalSgprs
     * }
     */
    public static int numPhysicalSgprs(MemorySegment struct) {
        return struct.get(numPhysicalSgprs$LAYOUT, numPhysicalSgprs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t numPhysicalSgprs
     * }
     */
    public static void numPhysicalSgprs(MemorySegment struct, int fieldValue) {
        struct.set(numPhysicalSgprs$LAYOUT, numPhysicalSgprs$OFFSET, fieldValue);
    }

    private static final OfInt numAvailableVgprs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numAvailableVgprs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t numAvailableVgprs
     * }
     */
    public static final OfInt numAvailableVgprs$layout() {
        return numAvailableVgprs$LAYOUT;
    }

    private static final long numAvailableVgprs$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t numAvailableVgprs
     * }
     */
    public static final long numAvailableVgprs$offset() {
        return numAvailableVgprs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t numAvailableVgprs
     * }
     */
    public static int numAvailableVgprs(MemorySegment struct) {
        return struct.get(numAvailableVgprs$LAYOUT, numAvailableVgprs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t numAvailableVgprs
     * }
     */
    public static void numAvailableVgprs(MemorySegment struct, int fieldValue) {
        struct.set(numAvailableVgprs$LAYOUT, numAvailableVgprs$OFFSET, fieldValue);
    }

    private static final OfInt numAvailableSgprs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("numAvailableSgprs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t numAvailableSgprs
     * }
     */
    public static final OfInt numAvailableSgprs$layout() {
        return numAvailableSgprs$LAYOUT;
    }

    private static final long numAvailableSgprs$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t numAvailableSgprs
     * }
     */
    public static final long numAvailableSgprs$offset() {
        return numAvailableSgprs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t numAvailableSgprs
     * }
     */
    public static int numAvailableSgprs(MemorySegment struct) {
        return struct.get(numAvailableSgprs$LAYOUT, numAvailableSgprs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t numAvailableSgprs
     * }
     */
    public static void numAvailableSgprs(MemorySegment struct, int fieldValue) {
        struct.set(numAvailableSgprs$LAYOUT, numAvailableSgprs$OFFSET, fieldValue);
    }

    private static final SequenceLayout computeWorkGroupSize$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("computeWorkGroupSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t computeWorkGroupSize[3]
     * }
     */
    public static final SequenceLayout computeWorkGroupSize$layout() {
        return computeWorkGroupSize$LAYOUT;
    }

    private static final long computeWorkGroupSize$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t computeWorkGroupSize[3]
     * }
     */
    public static final long computeWorkGroupSize$offset() {
        return computeWorkGroupSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t computeWorkGroupSize[3]
     * }
     */
    public static MemorySegment computeWorkGroupSize(MemorySegment struct) {
        return struct.asSlice(computeWorkGroupSize$OFFSET, computeWorkGroupSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t computeWorkGroupSize[3]
     * }
     */
    public static void computeWorkGroupSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, computeWorkGroupSize$OFFSET, computeWorkGroupSize$LAYOUT.byteSize());
    }

    private static long[] computeWorkGroupSize$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * uint32_t computeWorkGroupSize[3]
     * }
     */
    public static long[] computeWorkGroupSize$dimensions() {
        return computeWorkGroupSize$DIMS;
    }
    private static final VarHandle computeWorkGroupSize$ELEM_HANDLE = computeWorkGroupSize$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * uint32_t computeWorkGroupSize[3]
     * }
     */
    public static int computeWorkGroupSize(MemorySegment struct, long index0) {
        return (int)computeWorkGroupSize$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * uint32_t computeWorkGroupSize[3]
     * }
     */
    public static void computeWorkGroupSize(MemorySegment struct, long index0, int fieldValue) {
        computeWorkGroupSize$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

