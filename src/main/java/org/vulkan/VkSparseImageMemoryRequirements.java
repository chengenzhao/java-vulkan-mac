// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkSparseImageMemoryRequirements {
 *     VkSparseImageFormatProperties formatProperties;
 *     uint32_t imageMipTailFirstLod;
 *     VkDeviceSize imageMipTailSize;
 *     VkDeviceSize imageMipTailOffset;
 *     VkDeviceSize imageMipTailStride;
 * }
 * }
 */
public class VkSparseImageMemoryRequirements {

    VkSparseImageMemoryRequirements() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        VkSparseImageFormatProperties.layout().withName("formatProperties"),
        vulkan_h.C_INT.withName("imageMipTailFirstLod"),
        vulkan_h.C_LONG_LONG.withName("imageMipTailSize"),
        vulkan_h.C_LONG_LONG.withName("imageMipTailOffset"),
        vulkan_h.C_LONG_LONG.withName("imageMipTailStride")
    ).withName("VkSparseImageMemoryRequirements");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout formatProperties$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("formatProperties"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkSparseImageFormatProperties formatProperties
     * }
     */
    public static final GroupLayout formatProperties$layout() {
        return formatProperties$LAYOUT;
    }

    private static final long formatProperties$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkSparseImageFormatProperties formatProperties
     * }
     */
    public static final long formatProperties$offset() {
        return formatProperties$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkSparseImageFormatProperties formatProperties
     * }
     */
    public static MemorySegment formatProperties(MemorySegment struct) {
        return struct.asSlice(formatProperties$OFFSET, formatProperties$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkSparseImageFormatProperties formatProperties
     * }
     */
    public static void formatProperties(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, formatProperties$OFFSET, formatProperties$LAYOUT.byteSize());
    }

    private static final OfInt imageMipTailFirstLod$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageMipTailFirstLod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t imageMipTailFirstLod
     * }
     */
    public static final OfInt imageMipTailFirstLod$layout() {
        return imageMipTailFirstLod$LAYOUT;
    }

    private static final long imageMipTailFirstLod$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t imageMipTailFirstLod
     * }
     */
    public static final long imageMipTailFirstLod$offset() {
        return imageMipTailFirstLod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t imageMipTailFirstLod
     * }
     */
    public static int imageMipTailFirstLod(MemorySegment struct) {
        return struct.get(imageMipTailFirstLod$LAYOUT, imageMipTailFirstLod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t imageMipTailFirstLod
     * }
     */
    public static void imageMipTailFirstLod(MemorySegment struct, int fieldValue) {
        struct.set(imageMipTailFirstLod$LAYOUT, imageMipTailFirstLod$OFFSET, fieldValue);
    }

    private static final OfLong imageMipTailSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("imageMipTailSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailSize
     * }
     */
    public static final OfLong imageMipTailSize$layout() {
        return imageMipTailSize$LAYOUT;
    }

    private static final long imageMipTailSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailSize
     * }
     */
    public static final long imageMipTailSize$offset() {
        return imageMipTailSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailSize
     * }
     */
    public static long imageMipTailSize(MemorySegment struct) {
        return struct.get(imageMipTailSize$LAYOUT, imageMipTailSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailSize
     * }
     */
    public static void imageMipTailSize(MemorySegment struct, long fieldValue) {
        struct.set(imageMipTailSize$LAYOUT, imageMipTailSize$OFFSET, fieldValue);
    }

    private static final OfLong imageMipTailOffset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("imageMipTailOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailOffset
     * }
     */
    public static final OfLong imageMipTailOffset$layout() {
        return imageMipTailOffset$LAYOUT;
    }

    private static final long imageMipTailOffset$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailOffset
     * }
     */
    public static final long imageMipTailOffset$offset() {
        return imageMipTailOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailOffset
     * }
     */
    public static long imageMipTailOffset(MemorySegment struct) {
        return struct.get(imageMipTailOffset$LAYOUT, imageMipTailOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailOffset
     * }
     */
    public static void imageMipTailOffset(MemorySegment struct, long fieldValue) {
        struct.set(imageMipTailOffset$LAYOUT, imageMipTailOffset$OFFSET, fieldValue);
    }

    private static final OfLong imageMipTailStride$LAYOUT = (OfLong)$LAYOUT.select(groupElement("imageMipTailStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailStride
     * }
     */
    public static final OfLong imageMipTailStride$layout() {
        return imageMipTailStride$LAYOUT;
    }

    private static final long imageMipTailStride$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailStride
     * }
     */
    public static final long imageMipTailStride$offset() {
        return imageMipTailStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailStride
     * }
     */
    public static long imageMipTailStride(MemorySegment struct) {
        return struct.get(imageMipTailStride$LAYOUT, imageMipTailStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize imageMipTailStride
     * }
     */
    public static void imageMipTailStride(MemorySegment struct, long fieldValue) {
        struct.set(imageMipTailStride$LAYOUT, imageMipTailStride$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

