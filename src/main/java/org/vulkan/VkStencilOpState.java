// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkStencilOpState {
 *     VkStencilOp failOp;
 *     VkStencilOp passOp;
 *     VkStencilOp depthFailOp;
 *     VkCompareOp compareOp;
 *     uint32_t compareMask;
 *     uint32_t writeMask;
 *     uint32_t reference;
 * }
 * }
 */
public class VkStencilOpState {

    VkStencilOpState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("failOp"),
        vulkan_h.C_INT.withName("passOp"),
        vulkan_h.C_INT.withName("depthFailOp"),
        vulkan_h.C_INT.withName("compareOp"),
        vulkan_h.C_INT.withName("compareMask"),
        vulkan_h.C_INT.withName("writeMask"),
        vulkan_h.C_INT.withName("reference")
    ).withName("VkStencilOpState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt failOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("failOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStencilOp failOp
     * }
     */
    public static final OfInt failOp$layout() {
        return failOp$LAYOUT;
    }

    private static final long failOp$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStencilOp failOp
     * }
     */
    public static final long failOp$offset() {
        return failOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStencilOp failOp
     * }
     */
    public static int failOp(MemorySegment struct) {
        return struct.get(failOp$LAYOUT, failOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStencilOp failOp
     * }
     */
    public static void failOp(MemorySegment struct, int fieldValue) {
        struct.set(failOp$LAYOUT, failOp$OFFSET, fieldValue);
    }

    private static final OfInt passOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("passOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStencilOp passOp
     * }
     */
    public static final OfInt passOp$layout() {
        return passOp$LAYOUT;
    }

    private static final long passOp$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStencilOp passOp
     * }
     */
    public static final long passOp$offset() {
        return passOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStencilOp passOp
     * }
     */
    public static int passOp(MemorySegment struct) {
        return struct.get(passOp$LAYOUT, passOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStencilOp passOp
     * }
     */
    public static void passOp(MemorySegment struct, int fieldValue) {
        struct.set(passOp$LAYOUT, passOp$OFFSET, fieldValue);
    }

    private static final OfInt depthFailOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depthFailOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStencilOp depthFailOp
     * }
     */
    public static final OfInt depthFailOp$layout() {
        return depthFailOp$LAYOUT;
    }

    private static final long depthFailOp$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStencilOp depthFailOp
     * }
     */
    public static final long depthFailOp$offset() {
        return depthFailOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStencilOp depthFailOp
     * }
     */
    public static int depthFailOp(MemorySegment struct) {
        return struct.get(depthFailOp$LAYOUT, depthFailOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStencilOp depthFailOp
     * }
     */
    public static void depthFailOp(MemorySegment struct, int fieldValue) {
        struct.set(depthFailOp$LAYOUT, depthFailOp$OFFSET, fieldValue);
    }

    private static final OfInt compareOp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compareOp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static final OfInt compareOp$layout() {
        return compareOp$LAYOUT;
    }

    private static final long compareOp$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static final long compareOp$offset() {
        return compareOp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static int compareOp(MemorySegment struct) {
        return struct.get(compareOp$LAYOUT, compareOp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkCompareOp compareOp
     * }
     */
    public static void compareOp(MemorySegment struct, int fieldValue) {
        struct.set(compareOp$LAYOUT, compareOp$OFFSET, fieldValue);
    }

    private static final OfInt compareMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("compareMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t compareMask
     * }
     */
    public static final OfInt compareMask$layout() {
        return compareMask$LAYOUT;
    }

    private static final long compareMask$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t compareMask
     * }
     */
    public static final long compareMask$offset() {
        return compareMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t compareMask
     * }
     */
    public static int compareMask(MemorySegment struct) {
        return struct.get(compareMask$LAYOUT, compareMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t compareMask
     * }
     */
    public static void compareMask(MemorySegment struct, int fieldValue) {
        struct.set(compareMask$LAYOUT, compareMask$OFFSET, fieldValue);
    }

    private static final OfInt writeMask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("writeMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t writeMask
     * }
     */
    public static final OfInt writeMask$layout() {
        return writeMask$LAYOUT;
    }

    private static final long writeMask$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t writeMask
     * }
     */
    public static final long writeMask$offset() {
        return writeMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t writeMask
     * }
     */
    public static int writeMask(MemorySegment struct) {
        return struct.get(writeMask$LAYOUT, writeMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t writeMask
     * }
     */
    public static void writeMask(MemorySegment struct, int fieldValue) {
        struct.set(writeMask$LAYOUT, writeMask$OFFSET, fieldValue);
    }

    private static final OfInt reference$LAYOUT = (OfInt)$LAYOUT.select(groupElement("reference"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t reference
     * }
     */
    public static final OfInt reference$layout() {
        return reference$LAYOUT;
    }

    private static final long reference$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t reference
     * }
     */
    public static final long reference$offset() {
        return reference$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t reference
     * }
     */
    public static int reference(MemorySegment struct) {
        return struct.get(reference$LAYOUT, reference$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t reference
     * }
     */
    public static void reference(MemorySegment struct, int fieldValue) {
        struct.set(reference$LAYOUT, reference$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

