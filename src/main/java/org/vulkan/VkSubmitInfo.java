// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkSubmitInfo {
 *     VkStructureType sType;
 *     const void *pNext;
 *     uint32_t waitSemaphoreCount;
 *     const VkSemaphore *pWaitSemaphores;
 *     const VkPipelineStageFlags *pWaitDstStageMask;
 *     uint32_t commandBufferCount;
 *     const VkCommandBuffer *pCommandBuffers;
 *     uint32_t signalSemaphoreCount;
 *     const VkSemaphore *pSignalSemaphores;
 * }
 * }
 */
public class VkSubmitInfo {

    VkSubmitInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("waitSemaphoreCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pWaitSemaphores"),
        vulkan_h.C_POINTER.withName("pWaitDstStageMask"),
        vulkan_h.C_INT.withName("commandBufferCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pCommandBuffers"),
        vulkan_h.C_INT.withName("signalSemaphoreCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pSignalSemaphores")
    ).withName("VkSubmitInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt waitSemaphoreCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("waitSemaphoreCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static final OfInt waitSemaphoreCount$layout() {
        return waitSemaphoreCount$LAYOUT;
    }

    private static final long waitSemaphoreCount$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static final long waitSemaphoreCount$offset() {
        return waitSemaphoreCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static int waitSemaphoreCount(MemorySegment struct) {
        return struct.get(waitSemaphoreCount$LAYOUT, waitSemaphoreCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t waitSemaphoreCount
     * }
     */
    public static void waitSemaphoreCount(MemorySegment struct, int fieldValue) {
        struct.set(waitSemaphoreCount$LAYOUT, waitSemaphoreCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pWaitSemaphores$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pWaitSemaphores"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static final AddressLayout pWaitSemaphores$layout() {
        return pWaitSemaphores$LAYOUT;
    }

    private static final long pWaitSemaphores$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static final long pWaitSemaphores$offset() {
        return pWaitSemaphores$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static MemorySegment pWaitSemaphores(MemorySegment struct) {
        return struct.get(pWaitSemaphores$LAYOUT, pWaitSemaphores$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pWaitSemaphores
     * }
     */
    public static void pWaitSemaphores(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pWaitSemaphores$LAYOUT, pWaitSemaphores$OFFSET, fieldValue);
    }

    private static final AddressLayout pWaitDstStageMask$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pWaitDstStageMask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkPipelineStageFlags *pWaitDstStageMask
     * }
     */
    public static final AddressLayout pWaitDstStageMask$layout() {
        return pWaitDstStageMask$LAYOUT;
    }

    private static final long pWaitDstStageMask$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkPipelineStageFlags *pWaitDstStageMask
     * }
     */
    public static final long pWaitDstStageMask$offset() {
        return pWaitDstStageMask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkPipelineStageFlags *pWaitDstStageMask
     * }
     */
    public static MemorySegment pWaitDstStageMask(MemorySegment struct) {
        return struct.get(pWaitDstStageMask$LAYOUT, pWaitDstStageMask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkPipelineStageFlags *pWaitDstStageMask
     * }
     */
    public static void pWaitDstStageMask(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pWaitDstStageMask$LAYOUT, pWaitDstStageMask$OFFSET, fieldValue);
    }

    private static final OfInt commandBufferCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("commandBufferCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t commandBufferCount
     * }
     */
    public static final OfInt commandBufferCount$layout() {
        return commandBufferCount$LAYOUT;
    }

    private static final long commandBufferCount$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t commandBufferCount
     * }
     */
    public static final long commandBufferCount$offset() {
        return commandBufferCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t commandBufferCount
     * }
     */
    public static int commandBufferCount(MemorySegment struct) {
        return struct.get(commandBufferCount$LAYOUT, commandBufferCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t commandBufferCount
     * }
     */
    public static void commandBufferCount(MemorySegment struct, int fieldValue) {
        struct.set(commandBufferCount$LAYOUT, commandBufferCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pCommandBuffers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pCommandBuffers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkCommandBuffer *pCommandBuffers
     * }
     */
    public static final AddressLayout pCommandBuffers$layout() {
        return pCommandBuffers$LAYOUT;
    }

    private static final long pCommandBuffers$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkCommandBuffer *pCommandBuffers
     * }
     */
    public static final long pCommandBuffers$offset() {
        return pCommandBuffers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkCommandBuffer *pCommandBuffers
     * }
     */
    public static MemorySegment pCommandBuffers(MemorySegment struct) {
        return struct.get(pCommandBuffers$LAYOUT, pCommandBuffers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkCommandBuffer *pCommandBuffers
     * }
     */
    public static void pCommandBuffers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pCommandBuffers$LAYOUT, pCommandBuffers$OFFSET, fieldValue);
    }

    private static final OfInt signalSemaphoreCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("signalSemaphoreCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static final OfInt signalSemaphoreCount$layout() {
        return signalSemaphoreCount$LAYOUT;
    }

    private static final long signalSemaphoreCount$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static final long signalSemaphoreCount$offset() {
        return signalSemaphoreCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static int signalSemaphoreCount(MemorySegment struct) {
        return struct.get(signalSemaphoreCount$LAYOUT, signalSemaphoreCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t signalSemaphoreCount
     * }
     */
    public static void signalSemaphoreCount(MemorySegment struct, int fieldValue) {
        struct.set(signalSemaphoreCount$LAYOUT, signalSemaphoreCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pSignalSemaphores$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pSignalSemaphores"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static final AddressLayout pSignalSemaphores$layout() {
        return pSignalSemaphores$LAYOUT;
    }

    private static final long pSignalSemaphores$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static final long pSignalSemaphores$offset() {
        return pSignalSemaphores$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static MemorySegment pSignalSemaphores(MemorySegment struct) {
        return struct.get(pSignalSemaphores$LAYOUT, pSignalSemaphores$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkSemaphore *pSignalSemaphores
     * }
     */
    public static void pSignalSemaphores(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pSignalSemaphores$LAYOUT, pSignalSemaphores$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

