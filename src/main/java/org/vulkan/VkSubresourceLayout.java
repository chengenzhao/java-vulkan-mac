// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkSubresourceLayout {
 *     VkDeviceSize offset;
 *     VkDeviceSize size;
 *     VkDeviceSize rowPitch;
 *     VkDeviceSize arrayPitch;
 *     VkDeviceSize depthPitch;
 * }
 * }
 */
public class VkSubresourceLayout {

    VkSubresourceLayout() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_LONG_LONG.withName("offset"),
        vulkan_h.C_LONG_LONG.withName("size"),
        vulkan_h.C_LONG_LONG.withName("rowPitch"),
        vulkan_h.C_LONG_LONG.withName("arrayPitch"),
        vulkan_h.C_LONG_LONG.withName("depthPitch")
    ).withName("VkSubresourceLayout");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong offset$LAYOUT = (OfLong)$LAYOUT.select(groupElement("offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize offset
     * }
     */
    public static final OfLong offset$layout() {
        return offset$LAYOUT;
    }

    private static final long offset$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize offset
     * }
     */
    public static final long offset$offset() {
        return offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize offset
     * }
     */
    public static long offset(MemorySegment struct) {
        return struct.get(offset$LAYOUT, offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize offset
     * }
     */
    public static void offset(MemorySegment struct, long fieldValue) {
        struct.set(offset$LAYOUT, offset$OFFSET, fieldValue);
    }

    private static final OfLong size$LAYOUT = (OfLong)$LAYOUT.select(groupElement("size"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize size
     * }
     */
    public static final OfLong size$layout() {
        return size$LAYOUT;
    }

    private static final long size$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize size
     * }
     */
    public static final long size$offset() {
        return size$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize size
     * }
     */
    public static long size(MemorySegment struct) {
        return struct.get(size$LAYOUT, size$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize size
     * }
     */
    public static void size(MemorySegment struct, long fieldValue) {
        struct.set(size$LAYOUT, size$OFFSET, fieldValue);
    }

    private static final OfLong rowPitch$LAYOUT = (OfLong)$LAYOUT.select(groupElement("rowPitch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize rowPitch
     * }
     */
    public static final OfLong rowPitch$layout() {
        return rowPitch$LAYOUT;
    }

    private static final long rowPitch$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize rowPitch
     * }
     */
    public static final long rowPitch$offset() {
        return rowPitch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize rowPitch
     * }
     */
    public static long rowPitch(MemorySegment struct) {
        return struct.get(rowPitch$LAYOUT, rowPitch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize rowPitch
     * }
     */
    public static void rowPitch(MemorySegment struct, long fieldValue) {
        struct.set(rowPitch$LAYOUT, rowPitch$OFFSET, fieldValue);
    }

    private static final OfLong arrayPitch$LAYOUT = (OfLong)$LAYOUT.select(groupElement("arrayPitch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize arrayPitch
     * }
     */
    public static final OfLong arrayPitch$layout() {
        return arrayPitch$LAYOUT;
    }

    private static final long arrayPitch$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize arrayPitch
     * }
     */
    public static final long arrayPitch$offset() {
        return arrayPitch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize arrayPitch
     * }
     */
    public static long arrayPitch(MemorySegment struct) {
        return struct.get(arrayPitch$LAYOUT, arrayPitch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize arrayPitch
     * }
     */
    public static void arrayPitch(MemorySegment struct, long fieldValue) {
        struct.set(arrayPitch$LAYOUT, arrayPitch$OFFSET, fieldValue);
    }

    private static final OfLong depthPitch$LAYOUT = (OfLong)$LAYOUT.select(groupElement("depthPitch"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize depthPitch
     * }
     */
    public static final OfLong depthPitch$layout() {
        return depthPitch$LAYOUT;
    }

    private static final long depthPitch$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize depthPitch
     * }
     */
    public static final long depthPitch$offset() {
        return depthPitch$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize depthPitch
     * }
     */
    public static long depthPitch(MemorySegment struct) {
        return struct.get(depthPitch$LAYOUT, depthPitch$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize depthPitch
     * }
     */
    public static void depthPitch(MemorySegment struct, long fieldValue) {
        struct.set(depthPitch$LAYOUT, depthPitch$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

