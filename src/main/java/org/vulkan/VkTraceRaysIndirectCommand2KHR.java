// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkTraceRaysIndirectCommand2KHR {
 *     VkDeviceAddress raygenShaderRecordAddress;
 *     VkDeviceSize raygenShaderRecordSize;
 *     VkDeviceAddress missShaderBindingTableAddress;
 *     VkDeviceSize missShaderBindingTableSize;
 *     VkDeviceSize missShaderBindingTableStride;
 *     VkDeviceAddress hitShaderBindingTableAddress;
 *     VkDeviceSize hitShaderBindingTableSize;
 *     VkDeviceSize hitShaderBindingTableStride;
 *     VkDeviceAddress callableShaderBindingTableAddress;
 *     VkDeviceSize callableShaderBindingTableSize;
 *     VkDeviceSize callableShaderBindingTableStride;
 *     uint32_t width;
 *     uint32_t height;
 *     uint32_t depth;
 * }
 * }
 */
public class VkTraceRaysIndirectCommand2KHR {

    VkTraceRaysIndirectCommand2KHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_LONG_LONG.withName("raygenShaderRecordAddress"),
        vulkan_h.C_LONG_LONG.withName("raygenShaderRecordSize"),
        vulkan_h.C_LONG_LONG.withName("missShaderBindingTableAddress"),
        vulkan_h.C_LONG_LONG.withName("missShaderBindingTableSize"),
        vulkan_h.C_LONG_LONG.withName("missShaderBindingTableStride"),
        vulkan_h.C_LONG_LONG.withName("hitShaderBindingTableAddress"),
        vulkan_h.C_LONG_LONG.withName("hitShaderBindingTableSize"),
        vulkan_h.C_LONG_LONG.withName("hitShaderBindingTableStride"),
        vulkan_h.C_LONG_LONG.withName("callableShaderBindingTableAddress"),
        vulkan_h.C_LONG_LONG.withName("callableShaderBindingTableSize"),
        vulkan_h.C_LONG_LONG.withName("callableShaderBindingTableStride"),
        vulkan_h.C_INT.withName("width"),
        vulkan_h.C_INT.withName("height"),
        vulkan_h.C_INT.withName("depth"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkTraceRaysIndirectCommand2KHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong raygenShaderRecordAddress$LAYOUT = (OfLong)$LAYOUT.select(groupElement("raygenShaderRecordAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceAddress raygenShaderRecordAddress
     * }
     */
    public static final OfLong raygenShaderRecordAddress$layout() {
        return raygenShaderRecordAddress$LAYOUT;
    }

    private static final long raygenShaderRecordAddress$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceAddress raygenShaderRecordAddress
     * }
     */
    public static final long raygenShaderRecordAddress$offset() {
        return raygenShaderRecordAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceAddress raygenShaderRecordAddress
     * }
     */
    public static long raygenShaderRecordAddress(MemorySegment struct) {
        return struct.get(raygenShaderRecordAddress$LAYOUT, raygenShaderRecordAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceAddress raygenShaderRecordAddress
     * }
     */
    public static void raygenShaderRecordAddress(MemorySegment struct, long fieldValue) {
        struct.set(raygenShaderRecordAddress$LAYOUT, raygenShaderRecordAddress$OFFSET, fieldValue);
    }

    private static final OfLong raygenShaderRecordSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("raygenShaderRecordSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize raygenShaderRecordSize
     * }
     */
    public static final OfLong raygenShaderRecordSize$layout() {
        return raygenShaderRecordSize$LAYOUT;
    }

    private static final long raygenShaderRecordSize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize raygenShaderRecordSize
     * }
     */
    public static final long raygenShaderRecordSize$offset() {
        return raygenShaderRecordSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize raygenShaderRecordSize
     * }
     */
    public static long raygenShaderRecordSize(MemorySegment struct) {
        return struct.get(raygenShaderRecordSize$LAYOUT, raygenShaderRecordSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize raygenShaderRecordSize
     * }
     */
    public static void raygenShaderRecordSize(MemorySegment struct, long fieldValue) {
        struct.set(raygenShaderRecordSize$LAYOUT, raygenShaderRecordSize$OFFSET, fieldValue);
    }

    private static final OfLong missShaderBindingTableAddress$LAYOUT = (OfLong)$LAYOUT.select(groupElement("missShaderBindingTableAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceAddress missShaderBindingTableAddress
     * }
     */
    public static final OfLong missShaderBindingTableAddress$layout() {
        return missShaderBindingTableAddress$LAYOUT;
    }

    private static final long missShaderBindingTableAddress$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceAddress missShaderBindingTableAddress
     * }
     */
    public static final long missShaderBindingTableAddress$offset() {
        return missShaderBindingTableAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceAddress missShaderBindingTableAddress
     * }
     */
    public static long missShaderBindingTableAddress(MemorySegment struct) {
        return struct.get(missShaderBindingTableAddress$LAYOUT, missShaderBindingTableAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceAddress missShaderBindingTableAddress
     * }
     */
    public static void missShaderBindingTableAddress(MemorySegment struct, long fieldValue) {
        struct.set(missShaderBindingTableAddress$LAYOUT, missShaderBindingTableAddress$OFFSET, fieldValue);
    }

    private static final OfLong missShaderBindingTableSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("missShaderBindingTableSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableSize
     * }
     */
    public static final OfLong missShaderBindingTableSize$layout() {
        return missShaderBindingTableSize$LAYOUT;
    }

    private static final long missShaderBindingTableSize$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableSize
     * }
     */
    public static final long missShaderBindingTableSize$offset() {
        return missShaderBindingTableSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableSize
     * }
     */
    public static long missShaderBindingTableSize(MemorySegment struct) {
        return struct.get(missShaderBindingTableSize$LAYOUT, missShaderBindingTableSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableSize
     * }
     */
    public static void missShaderBindingTableSize(MemorySegment struct, long fieldValue) {
        struct.set(missShaderBindingTableSize$LAYOUT, missShaderBindingTableSize$OFFSET, fieldValue);
    }

    private static final OfLong missShaderBindingTableStride$LAYOUT = (OfLong)$LAYOUT.select(groupElement("missShaderBindingTableStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableStride
     * }
     */
    public static final OfLong missShaderBindingTableStride$layout() {
        return missShaderBindingTableStride$LAYOUT;
    }

    private static final long missShaderBindingTableStride$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableStride
     * }
     */
    public static final long missShaderBindingTableStride$offset() {
        return missShaderBindingTableStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableStride
     * }
     */
    public static long missShaderBindingTableStride(MemorySegment struct) {
        return struct.get(missShaderBindingTableStride$LAYOUT, missShaderBindingTableStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize missShaderBindingTableStride
     * }
     */
    public static void missShaderBindingTableStride(MemorySegment struct, long fieldValue) {
        struct.set(missShaderBindingTableStride$LAYOUT, missShaderBindingTableStride$OFFSET, fieldValue);
    }

    private static final OfLong hitShaderBindingTableAddress$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hitShaderBindingTableAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceAddress hitShaderBindingTableAddress
     * }
     */
    public static final OfLong hitShaderBindingTableAddress$layout() {
        return hitShaderBindingTableAddress$LAYOUT;
    }

    private static final long hitShaderBindingTableAddress$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceAddress hitShaderBindingTableAddress
     * }
     */
    public static final long hitShaderBindingTableAddress$offset() {
        return hitShaderBindingTableAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceAddress hitShaderBindingTableAddress
     * }
     */
    public static long hitShaderBindingTableAddress(MemorySegment struct) {
        return struct.get(hitShaderBindingTableAddress$LAYOUT, hitShaderBindingTableAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceAddress hitShaderBindingTableAddress
     * }
     */
    public static void hitShaderBindingTableAddress(MemorySegment struct, long fieldValue) {
        struct.set(hitShaderBindingTableAddress$LAYOUT, hitShaderBindingTableAddress$OFFSET, fieldValue);
    }

    private static final OfLong hitShaderBindingTableSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hitShaderBindingTableSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableSize
     * }
     */
    public static final OfLong hitShaderBindingTableSize$layout() {
        return hitShaderBindingTableSize$LAYOUT;
    }

    private static final long hitShaderBindingTableSize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableSize
     * }
     */
    public static final long hitShaderBindingTableSize$offset() {
        return hitShaderBindingTableSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableSize
     * }
     */
    public static long hitShaderBindingTableSize(MemorySegment struct) {
        return struct.get(hitShaderBindingTableSize$LAYOUT, hitShaderBindingTableSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableSize
     * }
     */
    public static void hitShaderBindingTableSize(MemorySegment struct, long fieldValue) {
        struct.set(hitShaderBindingTableSize$LAYOUT, hitShaderBindingTableSize$OFFSET, fieldValue);
    }

    private static final OfLong hitShaderBindingTableStride$LAYOUT = (OfLong)$LAYOUT.select(groupElement("hitShaderBindingTableStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableStride
     * }
     */
    public static final OfLong hitShaderBindingTableStride$layout() {
        return hitShaderBindingTableStride$LAYOUT;
    }

    private static final long hitShaderBindingTableStride$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableStride
     * }
     */
    public static final long hitShaderBindingTableStride$offset() {
        return hitShaderBindingTableStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableStride
     * }
     */
    public static long hitShaderBindingTableStride(MemorySegment struct) {
        return struct.get(hitShaderBindingTableStride$LAYOUT, hitShaderBindingTableStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize hitShaderBindingTableStride
     * }
     */
    public static void hitShaderBindingTableStride(MemorySegment struct, long fieldValue) {
        struct.set(hitShaderBindingTableStride$LAYOUT, hitShaderBindingTableStride$OFFSET, fieldValue);
    }

    private static final OfLong callableShaderBindingTableAddress$LAYOUT = (OfLong)$LAYOUT.select(groupElement("callableShaderBindingTableAddress"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceAddress callableShaderBindingTableAddress
     * }
     */
    public static final OfLong callableShaderBindingTableAddress$layout() {
        return callableShaderBindingTableAddress$LAYOUT;
    }

    private static final long callableShaderBindingTableAddress$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceAddress callableShaderBindingTableAddress
     * }
     */
    public static final long callableShaderBindingTableAddress$offset() {
        return callableShaderBindingTableAddress$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceAddress callableShaderBindingTableAddress
     * }
     */
    public static long callableShaderBindingTableAddress(MemorySegment struct) {
        return struct.get(callableShaderBindingTableAddress$LAYOUT, callableShaderBindingTableAddress$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceAddress callableShaderBindingTableAddress
     * }
     */
    public static void callableShaderBindingTableAddress(MemorySegment struct, long fieldValue) {
        struct.set(callableShaderBindingTableAddress$LAYOUT, callableShaderBindingTableAddress$OFFSET, fieldValue);
    }

    private static final OfLong callableShaderBindingTableSize$LAYOUT = (OfLong)$LAYOUT.select(groupElement("callableShaderBindingTableSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableSize
     * }
     */
    public static final OfLong callableShaderBindingTableSize$layout() {
        return callableShaderBindingTableSize$LAYOUT;
    }

    private static final long callableShaderBindingTableSize$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableSize
     * }
     */
    public static final long callableShaderBindingTableSize$offset() {
        return callableShaderBindingTableSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableSize
     * }
     */
    public static long callableShaderBindingTableSize(MemorySegment struct) {
        return struct.get(callableShaderBindingTableSize$LAYOUT, callableShaderBindingTableSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableSize
     * }
     */
    public static void callableShaderBindingTableSize(MemorySegment struct, long fieldValue) {
        struct.set(callableShaderBindingTableSize$LAYOUT, callableShaderBindingTableSize$OFFSET, fieldValue);
    }

    private static final OfLong callableShaderBindingTableStride$LAYOUT = (OfLong)$LAYOUT.select(groupElement("callableShaderBindingTableStride"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableStride
     * }
     */
    public static final OfLong callableShaderBindingTableStride$layout() {
        return callableShaderBindingTableStride$LAYOUT;
    }

    private static final long callableShaderBindingTableStride$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableStride
     * }
     */
    public static final long callableShaderBindingTableStride$offset() {
        return callableShaderBindingTableStride$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableStride
     * }
     */
    public static long callableShaderBindingTableStride(MemorySegment struct) {
        return struct.get(callableShaderBindingTableStride$LAYOUT, callableShaderBindingTableStride$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize callableShaderBindingTableStride
     * }
     */
    public static void callableShaderBindingTableStride(MemorySegment struct, long fieldValue) {
        struct.set(callableShaderBindingTableStride$LAYOUT, callableShaderBindingTableStride$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 92;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt depth$LAYOUT = (OfInt)$LAYOUT.select(groupElement("depth"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t depth
     * }
     */
    public static final OfInt depth$layout() {
        return depth$LAYOUT;
    }

    private static final long depth$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t depth
     * }
     */
    public static final long depth$offset() {
        return depth$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t depth
     * }
     */
    public static int depth(MemorySegment struct) {
        return struct.get(depth$LAYOUT, depth$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t depth
     * }
     */
    public static void depth(MemorySegment struct, int fieldValue) {
        struct.set(depth$LAYOUT, depth$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

