// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoCapabilitiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkVideoCapabilityFlagsKHR flags;
 *     VkDeviceSize minBitstreamBufferOffsetAlignment;
 *     VkDeviceSize minBitstreamBufferSizeAlignment;
 *     VkExtent2D pictureAccessGranularity;
 *     VkExtent2D minCodedExtent;
 *     VkExtent2D maxCodedExtent;
 *     uint32_t maxDpbSlots;
 *     uint32_t maxActiveReferencePictures;
 *     VkExtensionProperties stdHeaderVersion;
 * }
 * }
 */
public class VkVideoCapabilitiesKHR {

    VkVideoCapabilitiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_LONG_LONG.withName("minBitstreamBufferOffsetAlignment"),
        vulkan_h.C_LONG_LONG.withName("minBitstreamBufferSizeAlignment"),
        VkExtent2D.layout().withName("pictureAccessGranularity"),
        VkExtent2D.layout().withName("minCodedExtent"),
        VkExtent2D.layout().withName("maxCodedExtent"),
        vulkan_h.C_INT.withName("maxDpbSlots"),
        vulkan_h.C_INT.withName("maxActiveReferencePictures"),
        VkExtensionProperties.layout().withName("stdHeaderVersion"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkVideoCapabilitiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoCapabilityFlagsKHR flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoCapabilityFlagsKHR flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoCapabilityFlagsKHR flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoCapabilityFlagsKHR flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong minBitstreamBufferOffsetAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minBitstreamBufferOffsetAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferOffsetAlignment
     * }
     */
    public static final OfLong minBitstreamBufferOffsetAlignment$layout() {
        return minBitstreamBufferOffsetAlignment$LAYOUT;
    }

    private static final long minBitstreamBufferOffsetAlignment$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferOffsetAlignment
     * }
     */
    public static final long minBitstreamBufferOffsetAlignment$offset() {
        return minBitstreamBufferOffsetAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferOffsetAlignment
     * }
     */
    public static long minBitstreamBufferOffsetAlignment(MemorySegment struct) {
        return struct.get(minBitstreamBufferOffsetAlignment$LAYOUT, minBitstreamBufferOffsetAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferOffsetAlignment
     * }
     */
    public static void minBitstreamBufferOffsetAlignment(MemorySegment struct, long fieldValue) {
        struct.set(minBitstreamBufferOffsetAlignment$LAYOUT, minBitstreamBufferOffsetAlignment$OFFSET, fieldValue);
    }

    private static final OfLong minBitstreamBufferSizeAlignment$LAYOUT = (OfLong)$LAYOUT.select(groupElement("minBitstreamBufferSizeAlignment"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferSizeAlignment
     * }
     */
    public static final OfLong minBitstreamBufferSizeAlignment$layout() {
        return minBitstreamBufferSizeAlignment$LAYOUT;
    }

    private static final long minBitstreamBufferSizeAlignment$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferSizeAlignment
     * }
     */
    public static final long minBitstreamBufferSizeAlignment$offset() {
        return minBitstreamBufferSizeAlignment$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferSizeAlignment
     * }
     */
    public static long minBitstreamBufferSizeAlignment(MemorySegment struct) {
        return struct.get(minBitstreamBufferSizeAlignment$LAYOUT, minBitstreamBufferSizeAlignment$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkDeviceSize minBitstreamBufferSizeAlignment
     * }
     */
    public static void minBitstreamBufferSizeAlignment(MemorySegment struct, long fieldValue) {
        struct.set(minBitstreamBufferSizeAlignment$LAYOUT, minBitstreamBufferSizeAlignment$OFFSET, fieldValue);
    }

    private static final GroupLayout pictureAccessGranularity$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("pictureAccessGranularity"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D pictureAccessGranularity
     * }
     */
    public static final GroupLayout pictureAccessGranularity$layout() {
        return pictureAccessGranularity$LAYOUT;
    }

    private static final long pictureAccessGranularity$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D pictureAccessGranularity
     * }
     */
    public static final long pictureAccessGranularity$offset() {
        return pictureAccessGranularity$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D pictureAccessGranularity
     * }
     */
    public static MemorySegment pictureAccessGranularity(MemorySegment struct) {
        return struct.asSlice(pictureAccessGranularity$OFFSET, pictureAccessGranularity$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D pictureAccessGranularity
     * }
     */
    public static void pictureAccessGranularity(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, pictureAccessGranularity$OFFSET, pictureAccessGranularity$LAYOUT.byteSize());
    }

    private static final GroupLayout minCodedExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("minCodedExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D minCodedExtent
     * }
     */
    public static final GroupLayout minCodedExtent$layout() {
        return minCodedExtent$LAYOUT;
    }

    private static final long minCodedExtent$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D minCodedExtent
     * }
     */
    public static final long minCodedExtent$offset() {
        return minCodedExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D minCodedExtent
     * }
     */
    public static MemorySegment minCodedExtent(MemorySegment struct) {
        return struct.asSlice(minCodedExtent$OFFSET, minCodedExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D minCodedExtent
     * }
     */
    public static void minCodedExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, minCodedExtent$OFFSET, minCodedExtent$LAYOUT.byteSize());
    }

    private static final GroupLayout maxCodedExtent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("maxCodedExtent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtent2D maxCodedExtent
     * }
     */
    public static final GroupLayout maxCodedExtent$layout() {
        return maxCodedExtent$LAYOUT;
    }

    private static final long maxCodedExtent$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtent2D maxCodedExtent
     * }
     */
    public static final long maxCodedExtent$offset() {
        return maxCodedExtent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtent2D maxCodedExtent
     * }
     */
    public static MemorySegment maxCodedExtent(MemorySegment struct) {
        return struct.asSlice(maxCodedExtent$OFFSET, maxCodedExtent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtent2D maxCodedExtent
     * }
     */
    public static void maxCodedExtent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxCodedExtent$OFFSET, maxCodedExtent$LAYOUT.byteSize());
    }

    private static final OfInt maxDpbSlots$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxDpbSlots"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxDpbSlots
     * }
     */
    public static final OfInt maxDpbSlots$layout() {
        return maxDpbSlots$LAYOUT;
    }

    private static final long maxDpbSlots$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxDpbSlots
     * }
     */
    public static final long maxDpbSlots$offset() {
        return maxDpbSlots$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxDpbSlots
     * }
     */
    public static int maxDpbSlots(MemorySegment struct) {
        return struct.get(maxDpbSlots$LAYOUT, maxDpbSlots$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxDpbSlots
     * }
     */
    public static void maxDpbSlots(MemorySegment struct, int fieldValue) {
        struct.set(maxDpbSlots$LAYOUT, maxDpbSlots$OFFSET, fieldValue);
    }

    private static final OfInt maxActiveReferencePictures$LAYOUT = (OfInt)$LAYOUT.select(groupElement("maxActiveReferencePictures"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t maxActiveReferencePictures
     * }
     */
    public static final OfInt maxActiveReferencePictures$layout() {
        return maxActiveReferencePictures$LAYOUT;
    }

    private static final long maxActiveReferencePictures$OFFSET = 68;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t maxActiveReferencePictures
     * }
     */
    public static final long maxActiveReferencePictures$offset() {
        return maxActiveReferencePictures$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t maxActiveReferencePictures
     * }
     */
    public static int maxActiveReferencePictures(MemorySegment struct) {
        return struct.get(maxActiveReferencePictures$LAYOUT, maxActiveReferencePictures$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t maxActiveReferencePictures
     * }
     */
    public static void maxActiveReferencePictures(MemorySegment struct, int fieldValue) {
        struct.set(maxActiveReferencePictures$LAYOUT, maxActiveReferencePictures$OFFSET, fieldValue);
    }

    private static final GroupLayout stdHeaderVersion$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("stdHeaderVersion"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkExtensionProperties stdHeaderVersion
     * }
     */
    public static final GroupLayout stdHeaderVersion$layout() {
        return stdHeaderVersion$LAYOUT;
    }

    private static final long stdHeaderVersion$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkExtensionProperties stdHeaderVersion
     * }
     */
    public static final long stdHeaderVersion$offset() {
        return stdHeaderVersion$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkExtensionProperties stdHeaderVersion
     * }
     */
    public static MemorySegment stdHeaderVersion(MemorySegment struct) {
        return struct.asSlice(stdHeaderVersion$OFFSET, stdHeaderVersion$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkExtensionProperties stdHeaderVersion
     * }
     */
    public static void stdHeaderVersion(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, stdHeaderVersion$OFFSET, stdHeaderVersion$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

