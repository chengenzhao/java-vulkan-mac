// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoDecodeAV1PictureInfoKHR {
 *     VkStructureType sType;
 *     const void *pNext;
 *     const StdVideoDecodeAV1PictureInfo *pStdPictureInfo;
 *     int32_t referenceNameSlotIndices[7];
 *     uint32_t frameHeaderOffset;
 *     uint32_t tileCount;
 *     const uint32_t *pTileOffsets;
 *     const uint32_t *pTileSizes;
 * }
 * }
 */
public class VkVideoDecodeAV1PictureInfoKHR {

    VkVideoDecodeAV1PictureInfoKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_POINTER.withName("pStdPictureInfo"),
        MemoryLayout.sequenceLayout(7, vulkan_h.C_INT).withName("referenceNameSlotIndices"),
        vulkan_h.C_INT.withName("frameHeaderOffset"),
        vulkan_h.C_INT.withName("tileCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pTileOffsets"),
        vulkan_h.C_POINTER.withName("pTileSizes")
    ).withName("VkVideoDecodeAV1PictureInfoKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final AddressLayout pStdPictureInfo$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pStdPictureInfo"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const StdVideoDecodeAV1PictureInfo *pStdPictureInfo
     * }
     */
    public static final AddressLayout pStdPictureInfo$layout() {
        return pStdPictureInfo$LAYOUT;
    }

    private static final long pStdPictureInfo$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const StdVideoDecodeAV1PictureInfo *pStdPictureInfo
     * }
     */
    public static final long pStdPictureInfo$offset() {
        return pStdPictureInfo$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const StdVideoDecodeAV1PictureInfo *pStdPictureInfo
     * }
     */
    public static MemorySegment pStdPictureInfo(MemorySegment struct) {
        return struct.get(pStdPictureInfo$LAYOUT, pStdPictureInfo$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const StdVideoDecodeAV1PictureInfo *pStdPictureInfo
     * }
     */
    public static void pStdPictureInfo(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pStdPictureInfo$LAYOUT, pStdPictureInfo$OFFSET, fieldValue);
    }

    private static final SequenceLayout referenceNameSlotIndices$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("referenceNameSlotIndices"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t referenceNameSlotIndices[7]
     * }
     */
    public static final SequenceLayout referenceNameSlotIndices$layout() {
        return referenceNameSlotIndices$LAYOUT;
    }

    private static final long referenceNameSlotIndices$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t referenceNameSlotIndices[7]
     * }
     */
    public static final long referenceNameSlotIndices$offset() {
        return referenceNameSlotIndices$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t referenceNameSlotIndices[7]
     * }
     */
    public static MemorySegment referenceNameSlotIndices(MemorySegment struct) {
        return struct.asSlice(referenceNameSlotIndices$OFFSET, referenceNameSlotIndices$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t referenceNameSlotIndices[7]
     * }
     */
    public static void referenceNameSlotIndices(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, referenceNameSlotIndices$OFFSET, referenceNameSlotIndices$LAYOUT.byteSize());
    }

    private static long[] referenceNameSlotIndices$DIMS = { 7 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int32_t referenceNameSlotIndices[7]
     * }
     */
    public static long[] referenceNameSlotIndices$dimensions() {
        return referenceNameSlotIndices$DIMS;
    }
    private static final VarHandle referenceNameSlotIndices$ELEM_HANDLE = referenceNameSlotIndices$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int32_t referenceNameSlotIndices[7]
     * }
     */
    public static int referenceNameSlotIndices(MemorySegment struct, long index0) {
        return (int)referenceNameSlotIndices$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int32_t referenceNameSlotIndices[7]
     * }
     */
    public static void referenceNameSlotIndices(MemorySegment struct, long index0, int fieldValue) {
        referenceNameSlotIndices$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfInt frameHeaderOffset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frameHeaderOffset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frameHeaderOffset
     * }
     */
    public static final OfInt frameHeaderOffset$layout() {
        return frameHeaderOffset$LAYOUT;
    }

    private static final long frameHeaderOffset$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frameHeaderOffset
     * }
     */
    public static final long frameHeaderOffset$offset() {
        return frameHeaderOffset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frameHeaderOffset
     * }
     */
    public static int frameHeaderOffset(MemorySegment struct) {
        return struct.get(frameHeaderOffset$LAYOUT, frameHeaderOffset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frameHeaderOffset
     * }
     */
    public static void frameHeaderOffset(MemorySegment struct, int fieldValue) {
        struct.set(frameHeaderOffset$LAYOUT, frameHeaderOffset$OFFSET, fieldValue);
    }

    private static final OfInt tileCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("tileCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t tileCount
     * }
     */
    public static final OfInt tileCount$layout() {
        return tileCount$LAYOUT;
    }

    private static final long tileCount$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t tileCount
     * }
     */
    public static final long tileCount$offset() {
        return tileCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t tileCount
     * }
     */
    public static int tileCount(MemorySegment struct) {
        return struct.get(tileCount$LAYOUT, tileCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t tileCount
     * }
     */
    public static void tileCount(MemorySegment struct, int fieldValue) {
        struct.set(tileCount$LAYOUT, tileCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pTileOffsets$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTileOffsets"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint32_t *pTileOffsets
     * }
     */
    public static final AddressLayout pTileOffsets$layout() {
        return pTileOffsets$LAYOUT;
    }

    private static final long pTileOffsets$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint32_t *pTileOffsets
     * }
     */
    public static final long pTileOffsets$offset() {
        return pTileOffsets$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint32_t *pTileOffsets
     * }
     */
    public static MemorySegment pTileOffsets(MemorySegment struct) {
        return struct.get(pTileOffsets$LAYOUT, pTileOffsets$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint32_t *pTileOffsets
     * }
     */
    public static void pTileOffsets(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTileOffsets$LAYOUT, pTileOffsets$OFFSET, fieldValue);
    }

    private static final AddressLayout pTileSizes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pTileSizes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const uint32_t *pTileSizes
     * }
     */
    public static final AddressLayout pTileSizes$layout() {
        return pTileSizes$LAYOUT;
    }

    private static final long pTileSizes$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const uint32_t *pTileSizes
     * }
     */
    public static final long pTileSizes$offset() {
        return pTileSizes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const uint32_t *pTileSizes
     * }
     */
    public static MemorySegment pTileSizes(MemorySegment struct) {
        return struct.get(pTileSizes$LAYOUT, pTileSizes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const uint32_t *pTileSizes
     * }
     */
    public static void pTileSizes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pTileSizes$LAYOUT, pTileSizes$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

