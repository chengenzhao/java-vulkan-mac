// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoEncodeH264QpKHR {
 *     int32_t qpI;
 *     int32_t qpP;
 *     int32_t qpB;
 * }
 * }
 */
public class VkVideoEncodeH264QpKHR {

    VkVideoEncodeH264QpKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("qpI"),
        vulkan_h.C_INT.withName("qpP"),
        vulkan_h.C_INT.withName("qpB")
    ).withName("VkVideoEncodeH264QpKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt qpI$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qpI"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t qpI
     * }
     */
    public static final OfInt qpI$layout() {
        return qpI$LAYOUT;
    }

    private static final long qpI$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t qpI
     * }
     */
    public static final long qpI$offset() {
        return qpI$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t qpI
     * }
     */
    public static int qpI(MemorySegment struct) {
        return struct.get(qpI$LAYOUT, qpI$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t qpI
     * }
     */
    public static void qpI(MemorySegment struct, int fieldValue) {
        struct.set(qpI$LAYOUT, qpI$OFFSET, fieldValue);
    }

    private static final OfInt qpP$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qpP"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t qpP
     * }
     */
    public static final OfInt qpP$layout() {
        return qpP$LAYOUT;
    }

    private static final long qpP$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t qpP
     * }
     */
    public static final long qpP$offset() {
        return qpP$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t qpP
     * }
     */
    public static int qpP(MemorySegment struct) {
        return struct.get(qpP$LAYOUT, qpP$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t qpP
     * }
     */
    public static void qpP(MemorySegment struct, int fieldValue) {
        struct.set(qpP$LAYOUT, qpP$OFFSET, fieldValue);
    }

    private static final OfInt qpB$LAYOUT = (OfInt)$LAYOUT.select(groupElement("qpB"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int32_t qpB
     * }
     */
    public static final OfInt qpB$layout() {
        return qpB$LAYOUT;
    }

    private static final long qpB$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int32_t qpB
     * }
     */
    public static final long qpB$offset() {
        return qpB$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int32_t qpB
     * }
     */
    public static int qpB(MemorySegment struct) {
        return struct.get(qpB$LAYOUT, qpB$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int32_t qpB
     * }
     */
    public static void qpB(MemorySegment struct, int fieldValue) {
        struct.set(qpB$LAYOUT, qpB$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

