// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoEncodeH264RateControlLayerInfoKHR {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkBool32 useMinQp;
 *     VkVideoEncodeH264QpKHR minQp;
 *     VkBool32 useMaxQp;
 *     VkVideoEncodeH264QpKHR maxQp;
 *     VkBool32 useMaxFrameSize;
 *     VkVideoEncodeH264FrameSizeKHR maxFrameSize;
 * }
 * }
 */
public class VkVideoEncodeH264RateControlLayerInfoKHR {

    VkVideoEncodeH264RateControlLayerInfoKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("useMinQp"),
        VkVideoEncodeH264QpKHR.layout().withName("minQp"),
        vulkan_h.C_INT.withName("useMaxQp"),
        VkVideoEncodeH264QpKHR.layout().withName("maxQp"),
        vulkan_h.C_INT.withName("useMaxFrameSize"),
        VkVideoEncodeH264FrameSizeKHR.layout().withName("maxFrameSize")
    ).withName("VkVideoEncodeH264RateControlLayerInfoKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt useMinQp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("useMinQp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 useMinQp
     * }
     */
    public static final OfInt useMinQp$layout() {
        return useMinQp$LAYOUT;
    }

    private static final long useMinQp$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 useMinQp
     * }
     */
    public static final long useMinQp$offset() {
        return useMinQp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 useMinQp
     * }
     */
    public static int useMinQp(MemorySegment struct) {
        return struct.get(useMinQp$LAYOUT, useMinQp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 useMinQp
     * }
     */
    public static void useMinQp(MemorySegment struct, int fieldValue) {
        struct.set(useMinQp$LAYOUT, useMinQp$OFFSET, fieldValue);
    }

    private static final GroupLayout minQp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("minQp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR minQp
     * }
     */
    public static final GroupLayout minQp$layout() {
        return minQp$LAYOUT;
    }

    private static final long minQp$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR minQp
     * }
     */
    public static final long minQp$offset() {
        return minQp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR minQp
     * }
     */
    public static MemorySegment minQp(MemorySegment struct) {
        return struct.asSlice(minQp$OFFSET, minQp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR minQp
     * }
     */
    public static void minQp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, minQp$OFFSET, minQp$LAYOUT.byteSize());
    }

    private static final OfInt useMaxQp$LAYOUT = (OfInt)$LAYOUT.select(groupElement("useMaxQp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 useMaxQp
     * }
     */
    public static final OfInt useMaxQp$layout() {
        return useMaxQp$LAYOUT;
    }

    private static final long useMaxQp$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 useMaxQp
     * }
     */
    public static final long useMaxQp$offset() {
        return useMaxQp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 useMaxQp
     * }
     */
    public static int useMaxQp(MemorySegment struct) {
        return struct.get(useMaxQp$LAYOUT, useMaxQp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 useMaxQp
     * }
     */
    public static void useMaxQp(MemorySegment struct, int fieldValue) {
        struct.set(useMaxQp$LAYOUT, useMaxQp$OFFSET, fieldValue);
    }

    private static final GroupLayout maxQp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("maxQp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR maxQp
     * }
     */
    public static final GroupLayout maxQp$layout() {
        return maxQp$LAYOUT;
    }

    private static final long maxQp$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR maxQp
     * }
     */
    public static final long maxQp$offset() {
        return maxQp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR maxQp
     * }
     */
    public static MemorySegment maxQp(MemorySegment struct) {
        return struct.asSlice(maxQp$OFFSET, maxQp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264QpKHR maxQp
     * }
     */
    public static void maxQp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxQp$OFFSET, maxQp$LAYOUT.byteSize());
    }

    private static final OfInt useMaxFrameSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("useMaxFrameSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkBool32 useMaxFrameSize
     * }
     */
    public static final OfInt useMaxFrameSize$layout() {
        return useMaxFrameSize$LAYOUT;
    }

    private static final long useMaxFrameSize$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkBool32 useMaxFrameSize
     * }
     */
    public static final long useMaxFrameSize$offset() {
        return useMaxFrameSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkBool32 useMaxFrameSize
     * }
     */
    public static int useMaxFrameSize(MemorySegment struct) {
        return struct.get(useMaxFrameSize$LAYOUT, useMaxFrameSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkBool32 useMaxFrameSize
     * }
     */
    public static void useMaxFrameSize(MemorySegment struct, int fieldValue) {
        struct.set(useMaxFrameSize$LAYOUT, useMaxFrameSize$OFFSET, fieldValue);
    }

    private static final GroupLayout maxFrameSize$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("maxFrameSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264FrameSizeKHR maxFrameSize
     * }
     */
    public static final GroupLayout maxFrameSize$layout() {
        return maxFrameSize$LAYOUT;
    }

    private static final long maxFrameSize$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264FrameSizeKHR maxFrameSize
     * }
     */
    public static final long maxFrameSize$offset() {
        return maxFrameSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264FrameSizeKHR maxFrameSize
     * }
     */
    public static MemorySegment maxFrameSize(MemorySegment struct) {
        return struct.asSlice(maxFrameSize$OFFSET, maxFrameSize$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH264FrameSizeKHR maxFrameSize
     * }
     */
    public static void maxFrameSize(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, maxFrameSize$OFFSET, maxFrameSize$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

