// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoEncodeH265FrameSizeKHR {
 *     uint32_t frameISize;
 *     uint32_t framePSize;
 *     uint32_t frameBSize;
 * }
 * }
 */
public class VkVideoEncodeH265FrameSizeKHR {

    VkVideoEncodeH265FrameSizeKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("frameISize"),
        vulkan_h.C_INT.withName("framePSize"),
        vulkan_h.C_INT.withName("frameBSize")
    ).withName("VkVideoEncodeH265FrameSizeKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt frameISize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frameISize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frameISize
     * }
     */
    public static final OfInt frameISize$layout() {
        return frameISize$LAYOUT;
    }

    private static final long frameISize$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frameISize
     * }
     */
    public static final long frameISize$offset() {
        return frameISize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frameISize
     * }
     */
    public static int frameISize(MemorySegment struct) {
        return struct.get(frameISize$LAYOUT, frameISize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frameISize
     * }
     */
    public static void frameISize(MemorySegment struct, int fieldValue) {
        struct.set(frameISize$LAYOUT, frameISize$OFFSET, fieldValue);
    }

    private static final OfInt framePSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("framePSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t framePSize
     * }
     */
    public static final OfInt framePSize$layout() {
        return framePSize$LAYOUT;
    }

    private static final long framePSize$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t framePSize
     * }
     */
    public static final long framePSize$offset() {
        return framePSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t framePSize
     * }
     */
    public static int framePSize(MemorySegment struct) {
        return struct.get(framePSize$LAYOUT, framePSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t framePSize
     * }
     */
    public static void framePSize(MemorySegment struct, int fieldValue) {
        struct.set(framePSize$LAYOUT, framePSize$OFFSET, fieldValue);
    }

    private static final OfInt frameBSize$LAYOUT = (OfInt)$LAYOUT.select(groupElement("frameBSize"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t frameBSize
     * }
     */
    public static final OfInt frameBSize$layout() {
        return frameBSize$LAYOUT;
    }

    private static final long frameBSize$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t frameBSize
     * }
     */
    public static final long frameBSize$offset() {
        return frameBSize$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t frameBSize
     * }
     */
    public static int frameBSize(MemorySegment struct) {
        return struct.get(frameBSize$LAYOUT, frameBSize$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t frameBSize
     * }
     */
    public static void frameBSize(MemorySegment struct, int fieldValue) {
        struct.set(frameBSize$LAYOUT, frameBSize$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

