// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoEncodeH265QualityLevelPropertiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags;
 *     uint32_t preferredGopFrameCount;
 *     uint32_t preferredIdrPeriod;
 *     uint32_t preferredConsecutiveBFrameCount;
 *     uint32_t preferredSubLayerCount;
 *     VkVideoEncodeH265QpKHR preferredConstantQp;
 *     uint32_t preferredMaxL0ReferenceCount;
 *     uint32_t preferredMaxL1ReferenceCount;
 * }
 * }
 */
public class VkVideoEncodeH265QualityLevelPropertiesKHR {

    VkVideoEncodeH265QualityLevelPropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("preferredRateControlFlags"),
        vulkan_h.C_INT.withName("preferredGopFrameCount"),
        vulkan_h.C_INT.withName("preferredIdrPeriod"),
        vulkan_h.C_INT.withName("preferredConsecutiveBFrameCount"),
        vulkan_h.C_INT.withName("preferredSubLayerCount"),
        VkVideoEncodeH265QpKHR.layout().withName("preferredConstantQp"),
        vulkan_h.C_INT.withName("preferredMaxL0ReferenceCount"),
        vulkan_h.C_INT.withName("preferredMaxL1ReferenceCount")
    ).withName("VkVideoEncodeH265QualityLevelPropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt preferredRateControlFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferredRateControlFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags
     * }
     */
    public static final OfInt preferredRateControlFlags$layout() {
        return preferredRateControlFlags$LAYOUT;
    }

    private static final long preferredRateControlFlags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags
     * }
     */
    public static final long preferredRateControlFlags$offset() {
        return preferredRateControlFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags
     * }
     */
    public static int preferredRateControlFlags(MemorySegment struct) {
        return struct.get(preferredRateControlFlags$LAYOUT, preferredRateControlFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265RateControlFlagsKHR preferredRateControlFlags
     * }
     */
    public static void preferredRateControlFlags(MemorySegment struct, int fieldValue) {
        struct.set(preferredRateControlFlags$LAYOUT, preferredRateControlFlags$OFFSET, fieldValue);
    }

    private static final OfInt preferredGopFrameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferredGopFrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t preferredGopFrameCount
     * }
     */
    public static final OfInt preferredGopFrameCount$layout() {
        return preferredGopFrameCount$LAYOUT;
    }

    private static final long preferredGopFrameCount$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t preferredGopFrameCount
     * }
     */
    public static final long preferredGopFrameCount$offset() {
        return preferredGopFrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t preferredGopFrameCount
     * }
     */
    public static int preferredGopFrameCount(MemorySegment struct) {
        return struct.get(preferredGopFrameCount$LAYOUT, preferredGopFrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t preferredGopFrameCount
     * }
     */
    public static void preferredGopFrameCount(MemorySegment struct, int fieldValue) {
        struct.set(preferredGopFrameCount$LAYOUT, preferredGopFrameCount$OFFSET, fieldValue);
    }

    private static final OfInt preferredIdrPeriod$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferredIdrPeriod"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t preferredIdrPeriod
     * }
     */
    public static final OfInt preferredIdrPeriod$layout() {
        return preferredIdrPeriod$LAYOUT;
    }

    private static final long preferredIdrPeriod$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t preferredIdrPeriod
     * }
     */
    public static final long preferredIdrPeriod$offset() {
        return preferredIdrPeriod$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t preferredIdrPeriod
     * }
     */
    public static int preferredIdrPeriod(MemorySegment struct) {
        return struct.get(preferredIdrPeriod$LAYOUT, preferredIdrPeriod$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t preferredIdrPeriod
     * }
     */
    public static void preferredIdrPeriod(MemorySegment struct, int fieldValue) {
        struct.set(preferredIdrPeriod$LAYOUT, preferredIdrPeriod$OFFSET, fieldValue);
    }

    private static final OfInt preferredConsecutiveBFrameCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferredConsecutiveBFrameCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t preferredConsecutiveBFrameCount
     * }
     */
    public static final OfInt preferredConsecutiveBFrameCount$layout() {
        return preferredConsecutiveBFrameCount$LAYOUT;
    }

    private static final long preferredConsecutiveBFrameCount$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t preferredConsecutiveBFrameCount
     * }
     */
    public static final long preferredConsecutiveBFrameCount$offset() {
        return preferredConsecutiveBFrameCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t preferredConsecutiveBFrameCount
     * }
     */
    public static int preferredConsecutiveBFrameCount(MemorySegment struct) {
        return struct.get(preferredConsecutiveBFrameCount$LAYOUT, preferredConsecutiveBFrameCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t preferredConsecutiveBFrameCount
     * }
     */
    public static void preferredConsecutiveBFrameCount(MemorySegment struct, int fieldValue) {
        struct.set(preferredConsecutiveBFrameCount$LAYOUT, preferredConsecutiveBFrameCount$OFFSET, fieldValue);
    }

    private static final OfInt preferredSubLayerCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferredSubLayerCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t preferredSubLayerCount
     * }
     */
    public static final OfInt preferredSubLayerCount$layout() {
        return preferredSubLayerCount$LAYOUT;
    }

    private static final long preferredSubLayerCount$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t preferredSubLayerCount
     * }
     */
    public static final long preferredSubLayerCount$offset() {
        return preferredSubLayerCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t preferredSubLayerCount
     * }
     */
    public static int preferredSubLayerCount(MemorySegment struct) {
        return struct.get(preferredSubLayerCount$LAYOUT, preferredSubLayerCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t preferredSubLayerCount
     * }
     */
    public static void preferredSubLayerCount(MemorySegment struct, int fieldValue) {
        struct.set(preferredSubLayerCount$LAYOUT, preferredSubLayerCount$OFFSET, fieldValue);
    }

    private static final GroupLayout preferredConstantQp$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("preferredConstantQp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265QpKHR preferredConstantQp
     * }
     */
    public static final GroupLayout preferredConstantQp$layout() {
        return preferredConstantQp$LAYOUT;
    }

    private static final long preferredConstantQp$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265QpKHR preferredConstantQp
     * }
     */
    public static final long preferredConstantQp$offset() {
        return preferredConstantQp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265QpKHR preferredConstantQp
     * }
     */
    public static MemorySegment preferredConstantQp(MemorySegment struct) {
        return struct.asSlice(preferredConstantQp$OFFSET, preferredConstantQp$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoEncodeH265QpKHR preferredConstantQp
     * }
     */
    public static void preferredConstantQp(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, preferredConstantQp$OFFSET, preferredConstantQp$LAYOUT.byteSize());
    }

    private static final OfInt preferredMaxL0ReferenceCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferredMaxL0ReferenceCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL0ReferenceCount
     * }
     */
    public static final OfInt preferredMaxL0ReferenceCount$layout() {
        return preferredMaxL0ReferenceCount$LAYOUT;
    }

    private static final long preferredMaxL0ReferenceCount$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL0ReferenceCount
     * }
     */
    public static final long preferredMaxL0ReferenceCount$offset() {
        return preferredMaxL0ReferenceCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL0ReferenceCount
     * }
     */
    public static int preferredMaxL0ReferenceCount(MemorySegment struct) {
        return struct.get(preferredMaxL0ReferenceCount$LAYOUT, preferredMaxL0ReferenceCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL0ReferenceCount
     * }
     */
    public static void preferredMaxL0ReferenceCount(MemorySegment struct, int fieldValue) {
        struct.set(preferredMaxL0ReferenceCount$LAYOUT, preferredMaxL0ReferenceCount$OFFSET, fieldValue);
    }

    private static final OfInt preferredMaxL1ReferenceCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("preferredMaxL1ReferenceCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL1ReferenceCount
     * }
     */
    public static final OfInt preferredMaxL1ReferenceCount$layout() {
        return preferredMaxL1ReferenceCount$LAYOUT;
    }

    private static final long preferredMaxL1ReferenceCount$OFFSET = 52;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL1ReferenceCount
     * }
     */
    public static final long preferredMaxL1ReferenceCount$offset() {
        return preferredMaxL1ReferenceCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL1ReferenceCount
     * }
     */
    public static int preferredMaxL1ReferenceCount(MemorySegment struct) {
        return struct.get(preferredMaxL1ReferenceCount$LAYOUT, preferredMaxL1ReferenceCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t preferredMaxL1ReferenceCount
     * }
     */
    public static void preferredMaxL1ReferenceCount(MemorySegment struct, int fieldValue) {
        struct.set(preferredMaxL1ReferenceCount$LAYOUT, preferredMaxL1ReferenceCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

