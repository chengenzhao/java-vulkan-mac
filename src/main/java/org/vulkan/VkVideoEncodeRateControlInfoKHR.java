// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoEncodeRateControlInfoKHR {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkVideoEncodeRateControlFlagsKHR flags;
 *     VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode;
 *     uint32_t layerCount;
 *     const VkVideoEncodeRateControlLayerInfoKHR *pLayers;
 *     uint32_t virtualBufferSizeInMs;
 *     uint32_t initialVirtualBufferSizeInMs;
 * }
 * }
 */
public class VkVideoEncodeRateControlInfoKHR {

    VkVideoEncodeRateControlInfoKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("flags"),
        vulkan_h.C_INT.withName("rateControlMode"),
        vulkan_h.C_INT.withName("layerCount"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pLayers"),
        vulkan_h.C_INT.withName("virtualBufferSizeInMs"),
        vulkan_h.C_INT.withName("initialVirtualBufferSizeInMs")
    ).withName("VkVideoEncodeRateControlInfoKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlFlagsKHR flags
     * }
     */
    public static final OfInt flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlFlagsKHR flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlFlagsKHR flags
     * }
     */
    public static int flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlFlagsKHR flags
     * }
     */
    public static void flags(MemorySegment struct, int fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfInt rateControlMode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("rateControlMode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode
     * }
     */
    public static final OfInt rateControlMode$layout() {
        return rateControlMode$LAYOUT;
    }

    private static final long rateControlMode$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode
     * }
     */
    public static final long rateControlMode$offset() {
        return rateControlMode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode
     * }
     */
    public static int rateControlMode(MemorySegment struct) {
        return struct.get(rateControlMode$LAYOUT, rateControlMode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode
     * }
     */
    public static void rateControlMode(MemorySegment struct, int fieldValue) {
        struct.set(rateControlMode$LAYOUT, rateControlMode$OFFSET, fieldValue);
    }

    private static final OfInt layerCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("layerCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static final OfInt layerCount$layout() {
        return layerCount$LAYOUT;
    }

    private static final long layerCount$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static final long layerCount$offset() {
        return layerCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static int layerCount(MemorySegment struct) {
        return struct.get(layerCount$LAYOUT, layerCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t layerCount
     * }
     */
    public static void layerCount(MemorySegment struct, int fieldValue) {
        struct.set(layerCount$LAYOUT, layerCount$OFFSET, fieldValue);
    }

    private static final AddressLayout pLayers$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pLayers"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const VkVideoEncodeRateControlLayerInfoKHR *pLayers
     * }
     */
    public static final AddressLayout pLayers$layout() {
        return pLayers$LAYOUT;
    }

    private static final long pLayers$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const VkVideoEncodeRateControlLayerInfoKHR *pLayers
     * }
     */
    public static final long pLayers$offset() {
        return pLayers$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const VkVideoEncodeRateControlLayerInfoKHR *pLayers
     * }
     */
    public static MemorySegment pLayers(MemorySegment struct) {
        return struct.get(pLayers$LAYOUT, pLayers$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const VkVideoEncodeRateControlLayerInfoKHR *pLayers
     * }
     */
    public static void pLayers(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pLayers$LAYOUT, pLayers$OFFSET, fieldValue);
    }

    private static final OfInt virtualBufferSizeInMs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("virtualBufferSizeInMs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t virtualBufferSizeInMs
     * }
     */
    public static final OfInt virtualBufferSizeInMs$layout() {
        return virtualBufferSizeInMs$LAYOUT;
    }

    private static final long virtualBufferSizeInMs$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t virtualBufferSizeInMs
     * }
     */
    public static final long virtualBufferSizeInMs$offset() {
        return virtualBufferSizeInMs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t virtualBufferSizeInMs
     * }
     */
    public static int virtualBufferSizeInMs(MemorySegment struct) {
        return struct.get(virtualBufferSizeInMs$LAYOUT, virtualBufferSizeInMs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t virtualBufferSizeInMs
     * }
     */
    public static void virtualBufferSizeInMs(MemorySegment struct, int fieldValue) {
        struct.set(virtualBufferSizeInMs$LAYOUT, virtualBufferSizeInMs$OFFSET, fieldValue);
    }

    private static final OfInt initialVirtualBufferSizeInMs$LAYOUT = (OfInt)$LAYOUT.select(groupElement("initialVirtualBufferSizeInMs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t initialVirtualBufferSizeInMs
     * }
     */
    public static final OfInt initialVirtualBufferSizeInMs$layout() {
        return initialVirtualBufferSizeInMs$LAYOUT;
    }

    private static final long initialVirtualBufferSizeInMs$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t initialVirtualBufferSizeInMs
     * }
     */
    public static final long initialVirtualBufferSizeInMs$offset() {
        return initialVirtualBufferSizeInMs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t initialVirtualBufferSizeInMs
     * }
     */
    public static int initialVirtualBufferSizeInMs(MemorySegment struct) {
        return struct.get(initialVirtualBufferSizeInMs$LAYOUT, initialVirtualBufferSizeInMs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t initialVirtualBufferSizeInMs
     * }
     */
    public static void initialVirtualBufferSizeInMs(MemorySegment struct, int fieldValue) {
        struct.set(initialVirtualBufferSizeInMs$LAYOUT, initialVirtualBufferSizeInMs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

