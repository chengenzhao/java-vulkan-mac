// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoFormatPropertiesKHR {
 *     VkStructureType sType;
 *     void *pNext;
 *     VkFormat format;
 *     VkComponentMapping componentMapping;
 *     VkImageCreateFlags imageCreateFlags;
 *     VkImageType imageType;
 *     VkImageTiling imageTiling;
 *     VkImageUsageFlags imageUsageFlags;
 * }
 * }
 */
public class VkVideoFormatPropertiesKHR {

    VkVideoFormatPropertiesKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_INT.withName("format"),
        VkComponentMapping.layout().withName("componentMapping"),
        vulkan_h.C_INT.withName("imageCreateFlags"),
        vulkan_h.C_INT.withName("imageType"),
        vulkan_h.C_INT.withName("imageTiling"),
        vulkan_h.C_INT.withName("imageUsageFlags"),
        MemoryLayout.paddingLayout(4)
    ).withName("VkVideoFormatPropertiesKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final OfInt format$LAYOUT = (OfInt)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final OfInt format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static int format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkFormat format
     * }
     */
    public static void format(MemorySegment struct, int fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final GroupLayout componentMapping$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("componentMapping"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkComponentMapping componentMapping
     * }
     */
    public static final GroupLayout componentMapping$layout() {
        return componentMapping$LAYOUT;
    }

    private static final long componentMapping$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkComponentMapping componentMapping
     * }
     */
    public static final long componentMapping$offset() {
        return componentMapping$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkComponentMapping componentMapping
     * }
     */
    public static MemorySegment componentMapping(MemorySegment struct) {
        return struct.asSlice(componentMapping$OFFSET, componentMapping$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkComponentMapping componentMapping
     * }
     */
    public static void componentMapping(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, componentMapping$OFFSET, componentMapping$LAYOUT.byteSize());
    }

    private static final OfInt imageCreateFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageCreateFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageCreateFlags imageCreateFlags
     * }
     */
    public static final OfInt imageCreateFlags$layout() {
        return imageCreateFlags$LAYOUT;
    }

    private static final long imageCreateFlags$OFFSET = 36;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageCreateFlags imageCreateFlags
     * }
     */
    public static final long imageCreateFlags$offset() {
        return imageCreateFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageCreateFlags imageCreateFlags
     * }
     */
    public static int imageCreateFlags(MemorySegment struct) {
        return struct.get(imageCreateFlags$LAYOUT, imageCreateFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageCreateFlags imageCreateFlags
     * }
     */
    public static void imageCreateFlags(MemorySegment struct, int fieldValue) {
        struct.set(imageCreateFlags$LAYOUT, imageCreateFlags$OFFSET, fieldValue);
    }

    private static final OfInt imageType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static final OfInt imageType$layout() {
        return imageType$LAYOUT;
    }

    private static final long imageType$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static final long imageType$offset() {
        return imageType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static int imageType(MemorySegment struct) {
        return struct.get(imageType$LAYOUT, imageType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageType imageType
     * }
     */
    public static void imageType(MemorySegment struct, int fieldValue) {
        struct.set(imageType$LAYOUT, imageType$OFFSET, fieldValue);
    }

    private static final OfInt imageTiling$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageTiling"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageTiling imageTiling
     * }
     */
    public static final OfInt imageTiling$layout() {
        return imageTiling$LAYOUT;
    }

    private static final long imageTiling$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageTiling imageTiling
     * }
     */
    public static final long imageTiling$offset() {
        return imageTiling$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageTiling imageTiling
     * }
     */
    public static int imageTiling(MemorySegment struct) {
        return struct.get(imageTiling$LAYOUT, imageTiling$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageTiling imageTiling
     * }
     */
    public static void imageTiling(MemorySegment struct, int fieldValue) {
        struct.set(imageTiling$LAYOUT, imageTiling$OFFSET, fieldValue);
    }

    private static final OfInt imageUsageFlags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("imageUsageFlags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkImageUsageFlags imageUsageFlags
     * }
     */
    public static final OfInt imageUsageFlags$layout() {
        return imageUsageFlags$LAYOUT;
    }

    private static final long imageUsageFlags$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkImageUsageFlags imageUsageFlags
     * }
     */
    public static final long imageUsageFlags$offset() {
        return imageUsageFlags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkImageUsageFlags imageUsageFlags
     * }
     */
    public static int imageUsageFlags(MemorySegment struct) {
        return struct.get(imageUsageFlags$LAYOUT, imageUsageFlags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkImageUsageFlags imageUsageFlags
     * }
     */
    public static void imageUsageFlags(MemorySegment struct, int fieldValue) {
        struct.set(imageUsageFlags$LAYOUT, imageUsageFlags$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

