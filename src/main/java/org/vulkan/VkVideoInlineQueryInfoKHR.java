// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct VkVideoInlineQueryInfoKHR {
 *     VkStructureType sType;
 *     const void *pNext;
 *     VkQueryPool queryPool;
 *     uint32_t firstQuery;
 *     uint32_t queryCount;
 * }
 * }
 */
public class VkVideoInlineQueryInfoKHR {

    VkVideoInlineQueryInfoKHR() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        vulkan_h.C_INT.withName("sType"),
        MemoryLayout.paddingLayout(4),
        vulkan_h.C_POINTER.withName("pNext"),
        vulkan_h.C_POINTER.withName("queryPool"),
        vulkan_h.C_INT.withName("firstQuery"),
        vulkan_h.C_INT.withName("queryCount")
    ).withName("VkVideoInlineQueryInfoKHR");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt sType$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sType"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final OfInt sType$layout() {
        return sType$LAYOUT;
    }

    private static final long sType$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static final long sType$offset() {
        return sType$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static int sType(MemorySegment struct) {
        return struct.get(sType$LAYOUT, sType$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkStructureType sType
     * }
     */
    public static void sType(MemorySegment struct, int fieldValue) {
        struct.set(sType$LAYOUT, sType$OFFSET, fieldValue);
    }

    private static final AddressLayout pNext$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pNext"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final AddressLayout pNext$layout() {
        return pNext$LAYOUT;
    }

    private static final long pNext$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static final long pNext$offset() {
        return pNext$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static MemorySegment pNext(MemorySegment struct) {
        return struct.get(pNext$LAYOUT, pNext$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const void *pNext
     * }
     */
    public static void pNext(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pNext$LAYOUT, pNext$OFFSET, fieldValue);
    }

    private static final AddressLayout queryPool$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("queryPool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VkQueryPool queryPool
     * }
     */
    public static final AddressLayout queryPool$layout() {
        return queryPool$LAYOUT;
    }

    private static final long queryPool$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VkQueryPool queryPool
     * }
     */
    public static final long queryPool$offset() {
        return queryPool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VkQueryPool queryPool
     * }
     */
    public static MemorySegment queryPool(MemorySegment struct) {
        return struct.get(queryPool$LAYOUT, queryPool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VkQueryPool queryPool
     * }
     */
    public static void queryPool(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(queryPool$LAYOUT, queryPool$OFFSET, fieldValue);
    }

    private static final OfInt firstQuery$LAYOUT = (OfInt)$LAYOUT.select(groupElement("firstQuery"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t firstQuery
     * }
     */
    public static final OfInt firstQuery$layout() {
        return firstQuery$LAYOUT;
    }

    private static final long firstQuery$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t firstQuery
     * }
     */
    public static final long firstQuery$offset() {
        return firstQuery$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t firstQuery
     * }
     */
    public static int firstQuery(MemorySegment struct) {
        return struct.get(firstQuery$LAYOUT, firstQuery$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t firstQuery
     * }
     */
    public static void firstQuery(MemorySegment struct, int fieldValue) {
        struct.set(firstQuery$LAYOUT, firstQuery$OFFSET, fieldValue);
    }

    private static final OfInt queryCount$LAYOUT = (OfInt)$LAYOUT.select(groupElement("queryCount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uint32_t queryCount
     * }
     */
    public static final OfInt queryCount$layout() {
        return queryCount$LAYOUT;
    }

    private static final long queryCount$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uint32_t queryCount
     * }
     */
    public static final long queryCount$offset() {
        return queryCount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uint32_t queryCount
     * }
     */
    public static int queryCount(MemorySegment struct) {
        return struct.get(queryCount$LAYOUT, queryCount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uint32_t queryCount
     * }
     */
    public static void queryCount(MemorySegment struct, int fieldValue) {
        struct.set(queryCount$LAYOUT, queryCount$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

