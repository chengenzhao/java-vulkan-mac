// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class vulkan_h_1 extends vulkan_h_2 {

    vulkan_h_1() {
        // Should not be called directly
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR = 4096
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR = 8192
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_DIRECT_8X8_INFERENCE_FLAG_UNSET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR = 32768
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_DISABLED_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR = 65536
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_ENABLED_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR = 131072
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_DEBLOCKING_FILTER_PARTIAL_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR = 524288
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_SLICE_QP_DELTA_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH264StdFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH264StdFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_RATE_CONTROL_REGULAR_GOP_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR = 16
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_RATE_CONTROL_TEMPORAL_LAYER_PATTERN_DYADIC_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H264_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH264RateControlFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH264RateControlFlagsKHR = vulkan_h.C_INT;
    private static final int STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME = 0
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME() {
        return STD_VIDEO_H265_CHROMA_FORMAT_IDC_MONOCHROME;
    }
    private static final int STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_420 = 1
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_420() {
        return STD_VIDEO_H265_CHROMA_FORMAT_IDC_420;
    }
    private static final int STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_422 = 2
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_422() {
        return STD_VIDEO_H265_CHROMA_FORMAT_IDC_422;
    }
    private static final int STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_444 = 3
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_444() {
        return STD_VIDEO_H265_CHROMA_FORMAT_IDC_444;
    }
    private static final int STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID() {
        return STD_VIDEO_H265_CHROMA_FORMAT_IDC_INVALID;
    }
    private static final int STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ChromaFormatIdc.STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM() {
        return STD_VIDEO_H265_CHROMA_FORMAT_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H265_PROFILE_IDC_MAIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN = 1
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAIN() {
        return STD_VIDEO_H265_PROFILE_IDC_MAIN;
    }
    private static final int STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_10 = 2
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAIN_10() {
        return STD_VIDEO_H265_PROFILE_IDC_MAIN_10;
    }
    private static final int STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE = 3
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE() {
        return STD_VIDEO_H265_PROFILE_IDC_MAIN_STILL_PICTURE;
    }
    private static final int STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS = 4
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS() {
        return STD_VIDEO_H265_PROFILE_IDC_FORMAT_RANGE_EXTENSIONS;
    }
    private static final int STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = (int)9L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS = 9
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS() {
        return STD_VIDEO_H265_PROFILE_IDC_SCC_EXTENSIONS;
    }
    private static final int STD_VIDEO_H265_PROFILE_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_INVALID() {
        return STD_VIDEO_H265_PROFILE_IDC_INVALID;
    }
    private static final int STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265ProfileIdc.STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM() {
        return STD_VIDEO_H265_PROFILE_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_1_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_1_0 = 0
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_1_0() {
        return STD_VIDEO_H265_LEVEL_IDC_1_0;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_2_0 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_0 = 1
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_2_0() {
        return STD_VIDEO_H265_LEVEL_IDC_2_0;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_2_1 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_2_1 = 2
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_2_1() {
        return STD_VIDEO_H265_LEVEL_IDC_2_1;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_3_0 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_0 = 3
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_3_0() {
        return STD_VIDEO_H265_LEVEL_IDC_3_0;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_3_1 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_3_1 = 4
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_3_1() {
        return STD_VIDEO_H265_LEVEL_IDC_3_1;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_4_0 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_0 = 5
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_4_0() {
        return STD_VIDEO_H265_LEVEL_IDC_4_0;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_4_1 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_4_1 = 6
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_4_1() {
        return STD_VIDEO_H265_LEVEL_IDC_4_1;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_5_0 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_0 = 7
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_5_0() {
        return STD_VIDEO_H265_LEVEL_IDC_5_0;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_5_1 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_1 = 8
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_5_1() {
        return STD_VIDEO_H265_LEVEL_IDC_5_1;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_5_2 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_5_2 = 9
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_5_2() {
        return STD_VIDEO_H265_LEVEL_IDC_5_2;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_6_0 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_0 = 10
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_6_0() {
        return STD_VIDEO_H265_LEVEL_IDC_6_0;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_6_1 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_1 = 11
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_6_1() {
        return STD_VIDEO_H265_LEVEL_IDC_6_1;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_6_2 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_6_2 = 12
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_6_2() {
        return STD_VIDEO_H265_LEVEL_IDC_6_2;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_INVALID() {
        return STD_VIDEO_H265_LEVEL_IDC_INVALID;
    }
    private static final int STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265LevelIdc.STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM() {
        return STD_VIDEO_H265_LEVEL_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H265_SLICE_TYPE_B = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_B = 0
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_B() {
        return STD_VIDEO_H265_SLICE_TYPE_B;
    }
    private static final int STD_VIDEO_H265_SLICE_TYPE_P = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_P = 1
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_P() {
        return STD_VIDEO_H265_SLICE_TYPE_P;
    }
    private static final int STD_VIDEO_H265_SLICE_TYPE_I = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_I = 2
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_I() {
        return STD_VIDEO_H265_SLICE_TYPE_I;
    }
    private static final int STD_VIDEO_H265_SLICE_TYPE_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_INVALID() {
        return STD_VIDEO_H265_SLICE_TYPE_INVALID;
    }
    private static final int STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265SliceType.STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM() {
        return STD_VIDEO_H265_SLICE_TYPE_MAX_ENUM;
    }
    private static final int STD_VIDEO_H265_PICTURE_TYPE_P = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_P = 0
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_P() {
        return STD_VIDEO_H265_PICTURE_TYPE_P;
    }
    private static final int STD_VIDEO_H265_PICTURE_TYPE_B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_B = 1
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_B() {
        return STD_VIDEO_H265_PICTURE_TYPE_B;
    }
    private static final int STD_VIDEO_H265_PICTURE_TYPE_I = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_I = 2
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_I() {
        return STD_VIDEO_H265_PICTURE_TYPE_I;
    }
    private static final int STD_VIDEO_H265_PICTURE_TYPE_IDR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_IDR = 3
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_IDR() {
        return STD_VIDEO_H265_PICTURE_TYPE_IDR;
    }
    private static final int STD_VIDEO_H265_PICTURE_TYPE_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_INVALID() {
        return STD_VIDEO_H265_PICTURE_TYPE_INVALID;
    }
    private static final int STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265PictureType.STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM() {
        return STD_VIDEO_H265_PICTURE_TYPE_MAX_ENUM;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED = 0
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_UNSPECIFIED;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE = 1
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_SQUARE;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11 = 2
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_12_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11 = 3
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_10_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11 = 4
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_16_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33 = 5
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_40_33;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11 = 6
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_24_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11 = 7
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_20_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11 = 8
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_32_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33 = 9
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_80_33;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11 = 10
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_18_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11 = 11
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_15_11;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33 = 12
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_64_33;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99 = 13
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_160_99;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3 = 14
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_4_3;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2 = 15
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_3_2;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1 = 16
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_2_1;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = (int)255L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR = 255
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_EXTENDED_SAR;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_INVALID;
    }
    private static final int STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH265AspectRatioIdc.STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM() {
        return STD_VIDEO_H265_ASPECT_RATIO_IDC_MAX_ENUM;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_DIFFERENT_SLICE_SEGMENT_TYPE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR = 128
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_PER_SLICE_SEGMENT_CONSTANT_QP_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR = 256
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_TILES_PER_SLICE_SEGMENT_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR = 512
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_MULTIPLE_SLICE_SEGMENTS_PER_TILE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H265_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH265CapabilityFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH265CapabilityFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_SCALING_LIST_DATA_PRESENT_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_PCM_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR = 16
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_SPS_TEMPORAL_MVP_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR = 32
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_INIT_QP_MINUS26_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR = 128
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_WEIGHTED_BIPRED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR = 256
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_LOG2_PARALLEL_MERGE_LEVEL_MINUS2_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR = 512
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_SIGN_DATA_HIDING_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR = 1024
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR = 2048
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_TRANSFORM_SKIP_ENABLED_FLAG_UNSET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR = 4096
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR = 8192
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_TRANSQUANT_BYPASS_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR = 16384
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_CONSTRAINED_INTRA_PRED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR = 32768
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_ENTROPY_CODING_SYNC_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR = 65536
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR = 131072
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR = 262144
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_DEPENDENT_SLICE_SEGMENT_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR = 524288
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_SLICE_QP_DELTA_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR = 1048576
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_DIFFERENT_SLICE_QP_DELTA_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265StdFlagBitsKHR.VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H265_STD_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH265StdFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH265StdFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CTB_SIZE_16_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CTB_SIZE_32_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_CTB_SIZE_64_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265CtbSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H265_CTB_SIZE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH265CtbSizeFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH265CtbSizeFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_4_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_8_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_16_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_32_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265TransformBlockSizeFlagBitsKHR.VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H265_TRANSFORM_BLOCK_SIZE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH265TransformBlockSizeFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH265TransformBlockSizeFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_RATE_CONTROL_REGULAR_GOP_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR = 16
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR() {
        return VK_VIDEO_ENCODE_H265_RATE_CONTROL_TEMPORAL_SUB_LAYER_PATTERN_DYADIC_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH265RateControlFlagBitsKHR.VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H265_RATE_CONTROL_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH265RateControlFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH265RateControlFlagsKHR = vulkan_h.C_INT;
    private static final int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP = 0
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP() {
        return STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_TOP;
    }
    private static final int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM = 1
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM() {
        return STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_BOTTOM;
    }
    private static final int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID() {
        return STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_INVALID;
    }
    private static final int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoDecodeH264FieldOrderCount.STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM() {
        return STD_VIDEO_DECODE_H264_FIELD_ORDER_COUNT_MAX_ENUM;
    }
    private static final int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR = 0
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR() {
        return VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_PROGRESSIVE_KHR;
    }
    private static final int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR() {
        return VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_INTERLEAVED_LINES_BIT_KHR;
    }
    private static final int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR() {
        return VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_INTERLACED_SEPARATE_PLANES_BIT_KHR;
    }
    private static final int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeH264PictureLayoutFlagBitsKHR.VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_DECODE_H264_PICTURE_LAYOUT_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoDecodeH264PictureLayoutFlagsKHR
     * }
     */
    public static final OfInt VkVideoDecodeH264PictureLayoutFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkRenderingFlags VkRenderingFlagsKHR
     * }
     */
    public static final OfInt VkRenderingFlagsKHR = vulkan_h.C_INT;

    private static class vkCmdBeginRenderingKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginRenderingKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBeginRenderingKHR$descriptor() {
        return vkCmdBeginRenderingKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
     * }
     */
    public static MethodHandle vkCmdBeginRenderingKHR$handle() {
        return vkCmdBeginRenderingKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
     * }
     */
    public static void vkCmdBeginRenderingKHR(MemorySegment commandBuffer, MemorySegment pRenderingInfo) {
        var mh$ = vkCmdBeginRenderingKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginRenderingKHR", commandBuffer, pRenderingInfo);
            }
            mh$.invokeExact(commandBuffer, pRenderingInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndRenderingKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndRenderingKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkCmdEndRenderingKHR$descriptor() {
        return vkCmdEndRenderingKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkCmdEndRenderingKHR$handle() {
        return vkCmdEndRenderingKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)
     * }
     */
    public static void vkCmdEndRenderingKHR(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndRenderingKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndRenderingKHR", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceFeatures2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceFeatures2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceFeatures2KHR$descriptor() {
        return vkGetPhysicalDeviceFeatures2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceFeatures2KHR$handle() {
        return vkGetPhysicalDeviceFeatures2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures)
     * }
     */
    public static void vkGetPhysicalDeviceFeatures2KHR(MemorySegment physicalDevice, MemorySegment pFeatures) {
        var mh$ = vkGetPhysicalDeviceFeatures2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceFeatures2KHR", physicalDevice, pFeatures);
            }
            mh$.invokeExact(physicalDevice, pFeatures);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceProperties2KHR$handle() {
        return vkGetPhysicalDeviceProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties)
     * }
     */
    public static void vkGetPhysicalDeviceProperties2KHR(MemorySegment physicalDevice, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceProperties2KHR", physicalDevice, pProperties);
            }
            mh$.invokeExact(physicalDevice, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceFormatProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceFormatProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 *pFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceFormatProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceFormatProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 *pFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceFormatProperties2KHR$handle() {
        return vkGetPhysicalDeviceFormatProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 *pFormatProperties)
     * }
     */
    public static void vkGetPhysicalDeviceFormatProperties2KHR(MemorySegment physicalDevice, int format, MemorySegment pFormatProperties) {
        var mh$ = vkGetPhysicalDeviceFormatProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceFormatProperties2KHR", physicalDevice, format, pFormatProperties);
            }
            mh$.invokeExact(physicalDevice, format, pFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceImageFormatProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceImageFormatProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkImageFormatProperties2 *pImageFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceImageFormatProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceImageFormatProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkImageFormatProperties2 *pImageFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceImageFormatProperties2KHR$handle() {
        return vkGetPhysicalDeviceImageFormatProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkImageFormatProperties2 *pImageFormatProperties)
     * }
     */
    public static int vkGetPhysicalDeviceImageFormatProperties2KHR(MemorySegment physicalDevice, MemorySegment pImageFormatInfo, MemorySegment pImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceImageFormatProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceImageFormatProperties2KHR", physicalDevice, pImageFormatInfo, pImageFormatProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceQueueFamilyProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceQueueFamilyProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *pQueueFamilyProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceQueueFamilyProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceQueueFamilyProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *pQueueFamilyProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyProperties2KHR$handle() {
        return vkGetPhysicalDeviceQueueFamilyProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *pQueueFamilyProperties)
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyProperties2KHR(MemorySegment physicalDevice, MemorySegment pQueueFamilyPropertyCount, MemorySegment pQueueFamilyProperties) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceQueueFamilyProperties2KHR", physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
            }
            mh$.invokeExact(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceMemoryProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceMemoryProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceMemoryProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceMemoryProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceMemoryProperties2KHR$handle() {
        return vkGetPhysicalDeviceMemoryProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties)
     * }
     */
    public static void vkGetPhysicalDeviceMemoryProperties2KHR(MemorySegment physicalDevice, MemorySegment pMemoryProperties) {
        var mh$ = vkGetPhysicalDeviceMemoryProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceMemoryProperties2KHR", physicalDevice, pMemoryProperties);
            }
            mh$.invokeExact(physicalDevice, pMemoryProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSparseImageFormatProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSparseImageFormatProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSparseImageFormatProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceSparseImageFormatProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSparseImageFormatProperties2KHR$handle() {
        return vkGetPhysicalDeviceSparseImageFormatProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties)
     * }
     */
    public static void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(MemorySegment physicalDevice, MemorySegment pFormatInfo, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceSparseImageFormatProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSparseImageFormatProperties2KHR", physicalDevice, pFormatInfo, pPropertyCount, pProperties);
            }
            mh$.invokeExact(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkPeerMemoryFeatureFlags VkPeerMemoryFeatureFlagsKHR
     * }
     */
    public static final OfInt VkPeerMemoryFeatureFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkMemoryAllocateFlags VkMemoryAllocateFlagsKHR
     * }
     */
    public static final OfInt VkMemoryAllocateFlagsKHR = vulkan_h.C_INT;

    private static class vkGetDeviceGroupPeerMemoryFeaturesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceGroupPeerMemoryFeaturesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures)
     * }
     */
    public static FunctionDescriptor vkGetDeviceGroupPeerMemoryFeaturesKHR$descriptor() {
        return vkGetDeviceGroupPeerMemoryFeaturesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures)
     * }
     */
    public static MethodHandle vkGetDeviceGroupPeerMemoryFeaturesKHR$handle() {
        return vkGetDeviceGroupPeerMemoryFeaturesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures)
     * }
     */
    public static void vkGetDeviceGroupPeerMemoryFeaturesKHR(MemorySegment device, int heapIndex, int localDeviceIndex, int remoteDeviceIndex, MemorySegment pPeerMemoryFeatures) {
        var mh$ = vkGetDeviceGroupPeerMemoryFeaturesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceGroupPeerMemoryFeaturesKHR", device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
            }
            mh$.invokeExact(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDeviceMaskKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDeviceMaskKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
     * }
     */
    public static FunctionDescriptor vkCmdSetDeviceMaskKHR$descriptor() {
        return vkCmdSetDeviceMaskKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
     * }
     */
    public static MethodHandle vkCmdSetDeviceMaskKHR$handle() {
        return vkCmdSetDeviceMaskKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
     * }
     */
    public static void vkCmdSetDeviceMaskKHR(MemorySegment commandBuffer, int deviceMask) {
        var mh$ = vkCmdSetDeviceMaskKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDeviceMaskKHR", commandBuffer, deviceMask);
            }
            mh$.invokeExact(commandBuffer, deviceMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDispatchBaseKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDispatchBaseKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static FunctionDescriptor vkCmdDispatchBaseKHR$descriptor() {
        return vkCmdDispatchBaseKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static MethodHandle vkCmdDispatchBaseKHR$handle() {
        return vkCmdDispatchBaseKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static void vkCmdDispatchBaseKHR(MemorySegment commandBuffer, int baseGroupX, int baseGroupY, int baseGroupZ, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDispatchBaseKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDispatchBaseKHR", commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
            }
            mh$.invokeExact(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkCommandPoolTrimFlags VkCommandPoolTrimFlagsKHR
     * }
     */
    public static final OfInt VkCommandPoolTrimFlagsKHR = vulkan_h.C_INT;

    private static class vkTrimCommandPoolKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkTrimCommandPoolKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
     * }
     */
    public static FunctionDescriptor vkTrimCommandPoolKHR$descriptor() {
        return vkTrimCommandPoolKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
     * }
     */
    public static MethodHandle vkTrimCommandPoolKHR$handle() {
        return vkTrimCommandPoolKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
     * }
     */
    public static void vkTrimCommandPoolKHR(MemorySegment device, MemorySegment commandPool, int flags) {
        var mh$ = vkTrimCommandPoolKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkTrimCommandPoolKHR", device, commandPool, flags);
            }
            mh$.invokeExact(device, commandPool, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEnumeratePhysicalDeviceGroupsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumeratePhysicalDeviceGroupsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t *pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties)
     * }
     */
    public static FunctionDescriptor vkEnumeratePhysicalDeviceGroupsKHR$descriptor() {
        return vkEnumeratePhysicalDeviceGroupsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t *pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties)
     * }
     */
    public static MethodHandle vkEnumeratePhysicalDeviceGroupsKHR$handle() {
        return vkEnumeratePhysicalDeviceGroupsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t *pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties)
     * }
     */
    public static int vkEnumeratePhysicalDeviceGroupsKHR(MemorySegment instance, MemorySegment pPhysicalDeviceGroupCount, MemorySegment pPhysicalDeviceGroupProperties) {
        var mh$ = vkEnumeratePhysicalDeviceGroupsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumeratePhysicalDeviceGroupsKHR", instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
            }
            return (int)mh$.invokeExact(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkExternalMemoryHandleTypeFlags VkExternalMemoryHandleTypeFlagsKHR
     * }
     */
    public static final OfInt VkExternalMemoryHandleTypeFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkExternalMemoryFeatureFlags VkExternalMemoryFeatureFlagsKHR
     * }
     */
    public static final OfInt VkExternalMemoryFeatureFlagsKHR = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceExternalBufferPropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceExternalBufferPropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo, VkExternalBufferProperties *pExternalBufferProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceExternalBufferPropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceExternalBufferPropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo, VkExternalBufferProperties *pExternalBufferProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceExternalBufferPropertiesKHR$handle() {
        return vkGetPhysicalDeviceExternalBufferPropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo, VkExternalBufferProperties *pExternalBufferProperties)
     * }
     */
    public static void vkGetPhysicalDeviceExternalBufferPropertiesKHR(MemorySegment physicalDevice, MemorySegment pExternalBufferInfo, MemorySegment pExternalBufferProperties) {
        var mh$ = vkGetPhysicalDeviceExternalBufferPropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceExternalBufferPropertiesKHR", physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
            }
            mh$.invokeExact(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetMemoryFdKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetMemoryFdKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static FunctionDescriptor vkGetMemoryFdKHR$descriptor() {
        return vkGetMemoryFdKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static MethodHandle vkGetMemoryFdKHR$handle() {
        return vkGetMemoryFdKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static int vkGetMemoryFdKHR(MemorySegment device, MemorySegment pGetFdInfo, MemorySegment pFd) {
        var mh$ = vkGetMemoryFdKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetMemoryFdKHR", device, pGetFdInfo, pFd);
            }
            return (int)mh$.invokeExact(device, pGetFdInfo, pFd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetMemoryFdPropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetMemoryFdPropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR *pMemoryFdProperties)
     * }
     */
    public static FunctionDescriptor vkGetMemoryFdPropertiesKHR$descriptor() {
        return vkGetMemoryFdPropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR *pMemoryFdProperties)
     * }
     */
    public static MethodHandle vkGetMemoryFdPropertiesKHR$handle() {
        return vkGetMemoryFdPropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR *pMemoryFdProperties)
     * }
     */
    public static int vkGetMemoryFdPropertiesKHR(MemorySegment device, int handleType, int fd, MemorySegment pMemoryFdProperties) {
        var mh$ = vkGetMemoryFdPropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetMemoryFdPropertiesKHR", device, handleType, fd, pMemoryFdProperties);
            }
            return (int)mh$.invokeExact(device, handleType, fd, pMemoryFdProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkExternalSemaphoreHandleTypeFlags VkExternalSemaphoreHandleTypeFlagsKHR
     * }
     */
    public static final OfInt VkExternalSemaphoreHandleTypeFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkExternalSemaphoreFeatureFlags VkExternalSemaphoreFeatureFlagsKHR
     * }
     */
    public static final OfInt VkExternalSemaphoreFeatureFlagsKHR = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceExternalSemaphorePropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, VkExternalSemaphoreProperties *pExternalSemaphoreProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceExternalSemaphorePropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, VkExternalSemaphoreProperties *pExternalSemaphoreProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceExternalSemaphorePropertiesKHR$handle() {
        return vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, VkExternalSemaphoreProperties *pExternalSemaphoreProperties)
     * }
     */
    public static void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(MemorySegment physicalDevice, MemorySegment pExternalSemaphoreInfo, MemorySegment pExternalSemaphoreProperties) {
        var mh$ = vkGetPhysicalDeviceExternalSemaphorePropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR", physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
            }
            mh$.invokeExact(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkSemaphoreImportFlags VkSemaphoreImportFlagsKHR
     * }
     */
    public static final OfInt VkSemaphoreImportFlagsKHR = vulkan_h.C_INT;

    private static class vkImportSemaphoreFdKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkImportSemaphoreFdKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR *pImportSemaphoreFdInfo)
     * }
     */
    public static FunctionDescriptor vkImportSemaphoreFdKHR$descriptor() {
        return vkImportSemaphoreFdKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR *pImportSemaphoreFdInfo)
     * }
     */
    public static MethodHandle vkImportSemaphoreFdKHR$handle() {
        return vkImportSemaphoreFdKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR *pImportSemaphoreFdInfo)
     * }
     */
    public static int vkImportSemaphoreFdKHR(MemorySegment device, MemorySegment pImportSemaphoreFdInfo) {
        var mh$ = vkImportSemaphoreFdKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkImportSemaphoreFdKHR", device, pImportSemaphoreFdInfo);
            }
            return (int)mh$.invokeExact(device, pImportSemaphoreFdInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetSemaphoreFdKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetSemaphoreFdKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static FunctionDescriptor vkGetSemaphoreFdKHR$descriptor() {
        return vkGetSemaphoreFdKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static MethodHandle vkGetSemaphoreFdKHR$handle() {
        return vkGetSemaphoreFdKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static int vkGetSemaphoreFdKHR(MemorySegment device, MemorySegment pGetFdInfo, MemorySegment pFd) {
        var mh$ = vkGetSemaphoreFdKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetSemaphoreFdKHR", device, pGetFdInfo, pFd);
            }
            return (int)mh$.invokeExact(device, pGetFdInfo, pFd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPushDescriptorSetKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPushDescriptorSetKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites)
     * }
     */
    public static FunctionDescriptor vkCmdPushDescriptorSetKHR$descriptor() {
        return vkCmdPushDescriptorSetKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites)
     * }
     */
    public static MethodHandle vkCmdPushDescriptorSetKHR$handle() {
        return vkCmdPushDescriptorSetKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites)
     * }
     */
    public static void vkCmdPushDescriptorSetKHR(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int set, int descriptorWriteCount, MemorySegment pDescriptorWrites) {
        var mh$ = vkCmdPushDescriptorSetKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPushDescriptorSetKHR", commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
            }
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPushDescriptorSetWithTemplateKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPushDescriptorSetWithTemplateKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void *pData)
     * }
     */
    public static FunctionDescriptor vkCmdPushDescriptorSetWithTemplateKHR$descriptor() {
        return vkCmdPushDescriptorSetWithTemplateKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void *pData)
     * }
     */
    public static MethodHandle vkCmdPushDescriptorSetWithTemplateKHR$handle() {
        return vkCmdPushDescriptorSetWithTemplateKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void *pData)
     * }
     */
    public static void vkCmdPushDescriptorSetWithTemplateKHR(MemorySegment commandBuffer, MemorySegment descriptorUpdateTemplate, MemorySegment layout, int set, MemorySegment pData) {
        var mh$ = vkCmdPushDescriptorSetWithTemplateKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPushDescriptorSetWithTemplateKHR", commandBuffer, descriptorUpdateTemplate, layout, set, pData);
            }
            mh$.invokeExact(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkDescriptorUpdateTemplate VkDescriptorUpdateTemplateKHR
     * }
     */
    public static final AddressLayout VkDescriptorUpdateTemplateKHR = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VkDescriptorUpdateTemplateCreateFlags VkDescriptorUpdateTemplateCreateFlagsKHR
     * }
     */
    public static final OfInt VkDescriptorUpdateTemplateCreateFlagsKHR = vulkan_h.C_INT;

    private static class vkCreateDescriptorUpdateTemplateKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDescriptorUpdateTemplateKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate)
     * }
     */
    public static FunctionDescriptor vkCreateDescriptorUpdateTemplateKHR$descriptor() {
        return vkCreateDescriptorUpdateTemplateKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate)
     * }
     */
    public static MethodHandle vkCreateDescriptorUpdateTemplateKHR$handle() {
        return vkCreateDescriptorUpdateTemplateKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate)
     * }
     */
    public static int vkCreateDescriptorUpdateTemplateKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDescriptorUpdateTemplate) {
        var mh$ = vkCreateDescriptorUpdateTemplateKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDescriptorUpdateTemplateKHR", device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDescriptorUpdateTemplateKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDescriptorUpdateTemplateKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDescriptorUpdateTemplateKHR$descriptor() {
        return vkDestroyDescriptorUpdateTemplateKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDescriptorUpdateTemplateKHR$handle() {
        return vkDestroyDescriptorUpdateTemplateKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDescriptorUpdateTemplateKHR(MemorySegment device, MemorySegment descriptorUpdateTemplate, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorUpdateTemplateKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDescriptorUpdateTemplateKHR", device, descriptorUpdateTemplate, pAllocator);
            }
            mh$.invokeExact(device, descriptorUpdateTemplate, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkUpdateDescriptorSetWithTemplateKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkUpdateDescriptorSetWithTemplateKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
     * }
     */
    public static FunctionDescriptor vkUpdateDescriptorSetWithTemplateKHR$descriptor() {
        return vkUpdateDescriptorSetWithTemplateKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
     * }
     */
    public static MethodHandle vkUpdateDescriptorSetWithTemplateKHR$handle() {
        return vkUpdateDescriptorSetWithTemplateKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
     * }
     */
    public static void vkUpdateDescriptorSetWithTemplateKHR(MemorySegment device, MemorySegment descriptorSet, MemorySegment descriptorUpdateTemplate, MemorySegment pData) {
        var mh$ = vkUpdateDescriptorSetWithTemplateKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkUpdateDescriptorSetWithTemplateKHR", device, descriptorSet, descriptorUpdateTemplate, pData);
            }
            mh$.invokeExact(device, descriptorSet, descriptorUpdateTemplate, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateRenderPass2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateRenderPass2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static FunctionDescriptor vkCreateRenderPass2KHR$descriptor() {
        return vkCreateRenderPass2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static MethodHandle vkCreateRenderPass2KHR$handle() {
        return vkCreateRenderPass2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static int vkCreateRenderPass2KHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pRenderPass) {
        var mh$ = vkCreateRenderPass2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateRenderPass2KHR", device, pCreateInfo, pAllocator, pRenderPass);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pRenderPass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginRenderPass2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginRenderPass2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBeginRenderPass2KHR$descriptor() {
        return vkCmdBeginRenderPass2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
     * }
     */
    public static MethodHandle vkCmdBeginRenderPass2KHR$handle() {
        return vkCmdBeginRenderPass2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
     * }
     */
    public static void vkCmdBeginRenderPass2KHR(MemorySegment commandBuffer, MemorySegment pRenderPassBegin, MemorySegment pSubpassBeginInfo) {
        var mh$ = vkCmdBeginRenderPass2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginRenderPass2KHR", commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
            }
            mh$.invokeExact(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdNextSubpass2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdNextSubpass2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static FunctionDescriptor vkCmdNextSubpass2KHR$descriptor() {
        return vkCmdNextSubpass2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static MethodHandle vkCmdNextSubpass2KHR$handle() {
        return vkCmdNextSubpass2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static void vkCmdNextSubpass2KHR(MemorySegment commandBuffer, MemorySegment pSubpassBeginInfo, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdNextSubpass2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdNextSubpass2KHR", commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
            }
            mh$.invokeExact(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndRenderPass2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndRenderPass2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static FunctionDescriptor vkCmdEndRenderPass2KHR$descriptor() {
        return vkCmdEndRenderPass2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static MethodHandle vkCmdEndRenderPass2KHR$handle() {
        return vkCmdEndRenderPass2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static void vkCmdEndRenderPass2KHR(MemorySegment commandBuffer, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdEndRenderPass2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndRenderPass2KHR", commandBuffer, pSubpassEndInfo);
            }
            mh$.invokeExact(commandBuffer, pSubpassEndInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetSwapchainStatusKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetSwapchainStatusKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)
     * }
     */
    public static FunctionDescriptor vkGetSwapchainStatusKHR$descriptor() {
        return vkGetSwapchainStatusKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)
     * }
     */
    public static MethodHandle vkGetSwapchainStatusKHR$handle() {
        return vkGetSwapchainStatusKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)
     * }
     */
    public static int vkGetSwapchainStatusKHR(MemorySegment device, MemorySegment swapchain) {
        var mh$ = vkGetSwapchainStatusKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetSwapchainStatusKHR", device, swapchain);
            }
            return (int)mh$.invokeExact(device, swapchain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkExternalFenceHandleTypeFlags VkExternalFenceHandleTypeFlagsKHR
     * }
     */
    public static final OfInt VkExternalFenceHandleTypeFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkExternalFenceFeatureFlags VkExternalFenceFeatureFlagsKHR
     * }
     */
    public static final OfInt VkExternalFenceFeatureFlagsKHR = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceExternalFencePropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceExternalFencePropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo, VkExternalFenceProperties *pExternalFenceProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceExternalFencePropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceExternalFencePropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo, VkExternalFenceProperties *pExternalFenceProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceExternalFencePropertiesKHR$handle() {
        return vkGetPhysicalDeviceExternalFencePropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo, VkExternalFenceProperties *pExternalFenceProperties)
     * }
     */
    public static void vkGetPhysicalDeviceExternalFencePropertiesKHR(MemorySegment physicalDevice, MemorySegment pExternalFenceInfo, MemorySegment pExternalFenceProperties) {
        var mh$ = vkGetPhysicalDeviceExternalFencePropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceExternalFencePropertiesKHR", physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
            }
            mh$.invokeExact(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkFenceImportFlags VkFenceImportFlagsKHR
     * }
     */
    public static final OfInt VkFenceImportFlagsKHR = vulkan_h.C_INT;

    private static class vkImportFenceFdKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkImportFenceFdKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR *pImportFenceFdInfo)
     * }
     */
    public static FunctionDescriptor vkImportFenceFdKHR$descriptor() {
        return vkImportFenceFdKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR *pImportFenceFdInfo)
     * }
     */
    public static MethodHandle vkImportFenceFdKHR$handle() {
        return vkImportFenceFdKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR *pImportFenceFdInfo)
     * }
     */
    public static int vkImportFenceFdKHR(MemorySegment device, MemorySegment pImportFenceFdInfo) {
        var mh$ = vkImportFenceFdKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkImportFenceFdKHR", device, pImportFenceFdInfo);
            }
            return (int)mh$.invokeExact(device, pImportFenceFdInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetFenceFdKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetFenceFdKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static FunctionDescriptor vkGetFenceFdKHR$descriptor() {
        return vkGetFenceFdKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static MethodHandle vkGetFenceFdKHR$handle() {
        return vkGetFenceFdKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR *pGetFdInfo, int *pFd)
     * }
     */
    public static int vkGetFenceFdKHR(MemorySegment device, MemorySegment pGetFdInfo, MemorySegment pFd) {
        var mh$ = vkGetFenceFdKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetFenceFdKHR", device, pGetFdInfo, pFd);
            }
            return (int)mh$.invokeExact(device, pGetFdInfo, pFd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterUnitKHR.VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR() {
        return VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR() {
        return VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR() {
        return VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR() {
        return VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR;
    }
    private static final int VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = 0
     * }
     */
    public static int VK_QUERY_SCOPE_COMMAND_BUFFER_KHR() {
        return VK_QUERY_SCOPE_COMMAND_BUFFER_KHR;
    }
    private static final int VK_QUERY_SCOPE_RENDER_PASS_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_RENDER_PASS_KHR = 1
     * }
     */
    public static int VK_QUERY_SCOPE_RENDER_PASS_KHR() {
        return VK_QUERY_SCOPE_RENDER_PASS_KHR;
    }
    private static final int VK_QUERY_SCOPE_COMMAND_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterScopeKHR.VK_QUERY_SCOPE_COMMAND_KHR = 2
     * }
     */
    public static int VK_QUERY_SCOPE_COMMAND_KHR() {
        return VK_QUERY_SCOPE_COMMAND_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterScopeKHR.VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR() {
        return VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR() {
        return VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR() {
        return VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR() {
        return VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR() {
        return VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR() {
        return VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR() {
        return VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterStorageKHR.VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR() {
        return VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 1
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR() {
        return VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 2
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR() {
        return VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = 1
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR() {
        return VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = 2
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR() {
        return VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR;
    }
    private static final int VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceCounterDescriptionFlagBitsKHR.VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPerformanceCounterDescriptionFlagsKHR
     * }
     */
    public static final OfInt VkPerformanceCounterDescriptionFlagsKHR = vulkan_h.C_INT;
    private static final int VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkAcquireProfilingLockFlagBitsKHR.VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkAcquireProfilingLockFlagsKHR
     * }
     */
    public static final OfInt VkAcquireProfilingLockFlagsKHR = vulkan_h.C_INT;

    private static class vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t *pCounterCount, VkPerformanceCounterKHR *pCounters, VkPerformanceCounterDescriptionKHR *pCounterDescriptions)
     * }
     */
    public static FunctionDescriptor vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR$descriptor() {
        return vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t *pCounterCount, VkPerformanceCounterKHR *pCounters, VkPerformanceCounterDescriptionKHR *pCounterDescriptions)
     * }
     */
    public static MethodHandle vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR$handle() {
        return vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t *pCounterCount, VkPerformanceCounterKHR *pCounters, VkPerformanceCounterDescriptionKHR *pCounterDescriptions)
     * }
     */
    public static int vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(MemorySegment physicalDevice, int queueFamilyIndex, MemorySegment pCounterCount, MemorySegment pCounters, MemorySegment pCounterDescriptions) {
        var mh$ = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR", physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
            }
            return (int)mh$.invokeExact(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR *pPerformanceQueryCreateInfo, uint32_t *pNumPasses)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR$descriptor() {
        return vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR *pPerformanceQueryCreateInfo, uint32_t *pNumPasses)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR$handle() {
        return vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR *pPerformanceQueryCreateInfo, uint32_t *pNumPasses)
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(MemorySegment physicalDevice, MemorySegment pPerformanceQueryCreateInfo, MemorySegment pNumPasses) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR", physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
            }
            mh$.invokeExact(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkAcquireProfilingLockKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAcquireProfilingLockKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR *pInfo)
     * }
     */
    public static FunctionDescriptor vkAcquireProfilingLockKHR$descriptor() {
        return vkAcquireProfilingLockKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR *pInfo)
     * }
     */
    public static MethodHandle vkAcquireProfilingLockKHR$handle() {
        return vkAcquireProfilingLockKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR *pInfo)
     * }
     */
    public static int vkAcquireProfilingLockKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkAcquireProfilingLockKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAcquireProfilingLockKHR", device, pInfo);
            }
            return (int)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkReleaseProfilingLockKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkReleaseProfilingLockKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkReleaseProfilingLockKHR(VkDevice device)
     * }
     */
    public static FunctionDescriptor vkReleaseProfilingLockKHR$descriptor() {
        return vkReleaseProfilingLockKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkReleaseProfilingLockKHR(VkDevice device)
     * }
     */
    public static MethodHandle vkReleaseProfilingLockKHR$handle() {
        return vkReleaseProfilingLockKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkReleaseProfilingLockKHR(VkDevice device)
     * }
     */
    public static void vkReleaseProfilingLockKHR(MemorySegment device) {
        var mh$ = vkReleaseProfilingLockKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkReleaseProfilingLockKHR", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSurfaceCapabilities2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSurfaceCapabilities2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo, VkSurfaceCapabilities2KHR *pSurfaceCapabilities)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSurfaceCapabilities2KHR$descriptor() {
        return vkGetPhysicalDeviceSurfaceCapabilities2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo, VkSurfaceCapabilities2KHR *pSurfaceCapabilities)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSurfaceCapabilities2KHR$handle() {
        return vkGetPhysicalDeviceSurfaceCapabilities2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo, VkSurfaceCapabilities2KHR *pSurfaceCapabilities)
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceCapabilities2KHR(MemorySegment physicalDevice, MemorySegment pSurfaceInfo, MemorySegment pSurfaceCapabilities) {
        var mh$ = vkGetPhysicalDeviceSurfaceCapabilities2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSurfaceCapabilities2KHR", physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
            }
            return (int)mh$.invokeExact(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSurfaceFormats2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSurfaceFormats2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo, uint32_t *pSurfaceFormatCount, VkSurfaceFormat2KHR *pSurfaceFormats)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSurfaceFormats2KHR$descriptor() {
        return vkGetPhysicalDeviceSurfaceFormats2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo, uint32_t *pSurfaceFormatCount, VkSurfaceFormat2KHR *pSurfaceFormats)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSurfaceFormats2KHR$handle() {
        return vkGetPhysicalDeviceSurfaceFormats2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR *pSurfaceInfo, uint32_t *pSurfaceFormatCount, VkSurfaceFormat2KHR *pSurfaceFormats)
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceFormats2KHR(MemorySegment physicalDevice, MemorySegment pSurfaceInfo, MemorySegment pSurfaceFormatCount, MemorySegment pSurfaceFormats) {
        var mh$ = vkGetPhysicalDeviceSurfaceFormats2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSurfaceFormats2KHR", physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
            }
            return (int)mh$.invokeExact(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceDisplayProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceDisplayProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayProperties2KHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceDisplayProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceDisplayProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayProperties2KHR *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceDisplayProperties2KHR$handle() {
        return vkGetPhysicalDeviceDisplayProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayProperties2KHR *pProperties)
     * }
     */
    public static int vkGetPhysicalDeviceDisplayProperties2KHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceDisplayProperties2KHR", physicalDevice, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceDisplayPlaneProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceDisplayPlaneProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPlaneProperties2KHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceDisplayPlaneProperties2KHR$descriptor() {
        return vkGetPhysicalDeviceDisplayPlaneProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPlaneProperties2KHR *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceDisplayPlaneProperties2KHR$handle() {
        return vkGetPhysicalDeviceDisplayPlaneProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPlaneProperties2KHR *pProperties)
     * }
     */
    public static int vkGetPhysicalDeviceDisplayPlaneProperties2KHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayPlaneProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceDisplayPlaneProperties2KHR", physicalDevice, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDisplayModeProperties2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDisplayModeProperties2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t *pPropertyCount, VkDisplayModeProperties2KHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetDisplayModeProperties2KHR$descriptor() {
        return vkGetDisplayModeProperties2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t *pPropertyCount, VkDisplayModeProperties2KHR *pProperties)
     * }
     */
    public static MethodHandle vkGetDisplayModeProperties2KHR$handle() {
        return vkGetDisplayModeProperties2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t *pPropertyCount, VkDisplayModeProperties2KHR *pProperties)
     * }
     */
    public static int vkGetDisplayModeProperties2KHR(MemorySegment physicalDevice, MemorySegment display, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetDisplayModeProperties2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDisplayModeProperties2KHR", physicalDevice, display, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, display, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDisplayPlaneCapabilities2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDisplayPlaneCapabilities2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR *pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR *pCapabilities)
     * }
     */
    public static FunctionDescriptor vkGetDisplayPlaneCapabilities2KHR$descriptor() {
        return vkGetDisplayPlaneCapabilities2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR *pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR *pCapabilities)
     * }
     */
    public static MethodHandle vkGetDisplayPlaneCapabilities2KHR$handle() {
        return vkGetDisplayPlaneCapabilities2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR *pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR *pCapabilities)
     * }
     */
    public static int vkGetDisplayPlaneCapabilities2KHR(MemorySegment physicalDevice, MemorySegment pDisplayPlaneInfo, MemorySegment pCapabilities) {
        var mh$ = vkGetDisplayPlaneCapabilities2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDisplayPlaneCapabilities2KHR", physicalDevice, pDisplayPlaneInfo, pCapabilities);
            }
            return (int)mh$.invokeExact(physicalDevice, pDisplayPlaneInfo, pCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageMemoryRequirements2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageMemoryRequirements2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetImageMemoryRequirements2KHR$descriptor() {
        return vkGetImageMemoryRequirements2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetImageMemoryRequirements2KHR$handle() {
        return vkGetImageMemoryRequirements2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetImageMemoryRequirements2KHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetImageMemoryRequirements2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageMemoryRequirements2KHR", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferMemoryRequirements2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferMemoryRequirements2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetBufferMemoryRequirements2KHR$descriptor() {
        return vkGetBufferMemoryRequirements2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetBufferMemoryRequirements2KHR$handle() {
        return vkGetBufferMemoryRequirements2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetBufferMemoryRequirements2KHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetBufferMemoryRequirements2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferMemoryRequirements2KHR", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageSparseMemoryRequirements2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageSparseMemoryRequirements2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetImageSparseMemoryRequirements2KHR$descriptor() {
        return vkGetImageSparseMemoryRequirements2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetImageSparseMemoryRequirements2KHR$handle() {
        return vkGetImageSparseMemoryRequirements2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static void vkGetImageSparseMemoryRequirements2KHR(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetImageSparseMemoryRequirements2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageSparseMemoryRequirements2KHR", device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkSamplerYcbcrConversion VkSamplerYcbcrConversionKHR
     * }
     */
    public static final AddressLayout VkSamplerYcbcrConversionKHR = vulkan_h.C_POINTER;

    private static class vkCreateSamplerYcbcrConversionKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateSamplerYcbcrConversionKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSamplerYcbcrConversion *pYcbcrConversion)
     * }
     */
    public static FunctionDescriptor vkCreateSamplerYcbcrConversionKHR$descriptor() {
        return vkCreateSamplerYcbcrConversionKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSamplerYcbcrConversion *pYcbcrConversion)
     * }
     */
    public static MethodHandle vkCreateSamplerYcbcrConversionKHR$handle() {
        return vkCreateSamplerYcbcrConversionKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSamplerYcbcrConversion *pYcbcrConversion)
     * }
     */
    public static int vkCreateSamplerYcbcrConversionKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pYcbcrConversion) {
        var mh$ = vkCreateSamplerYcbcrConversionKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateSamplerYcbcrConversionKHR", device, pCreateInfo, pAllocator, pYcbcrConversion);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pYcbcrConversion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroySamplerYcbcrConversionKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroySamplerYcbcrConversionKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroySamplerYcbcrConversionKHR$descriptor() {
        return vkDestroySamplerYcbcrConversionKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroySamplerYcbcrConversionKHR$handle() {
        return vkDestroySamplerYcbcrConversionKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroySamplerYcbcrConversionKHR(MemorySegment device, MemorySegment ycbcrConversion, MemorySegment pAllocator) {
        var mh$ = vkDestroySamplerYcbcrConversionKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroySamplerYcbcrConversionKHR", device, ycbcrConversion, pAllocator);
            }
            mh$.invokeExact(device, ycbcrConversion, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindBufferMemory2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindBufferMemory2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos)
     * }
     */
    public static FunctionDescriptor vkBindBufferMemory2KHR$descriptor() {
        return vkBindBufferMemory2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos)
     * }
     */
    public static MethodHandle vkBindBufferMemory2KHR$handle() {
        return vkBindBufferMemory2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos)
     * }
     */
    public static int vkBindBufferMemory2KHR(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindBufferMemory2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindBufferMemory2KHR", device, bindInfoCount, pBindInfos);
            }
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindImageMemory2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindImageMemory2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos)
     * }
     */
    public static FunctionDescriptor vkBindImageMemory2KHR$descriptor() {
        return vkBindImageMemory2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos)
     * }
     */
    public static MethodHandle vkBindImageMemory2KHR$handle() {
        return vkBindImageMemory2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos)
     * }
     */
    public static int vkBindImageMemory2KHR(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindImageMemory2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindImageMemory2KHR", device, bindInfoCount, pBindInfos);
            }
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDescriptorSetLayoutSupportKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDescriptorSetLayoutSupportKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport)
     * }
     */
    public static FunctionDescriptor vkGetDescriptorSetLayoutSupportKHR$descriptor() {
        return vkGetDescriptorSetLayoutSupportKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport)
     * }
     */
    public static MethodHandle vkGetDescriptorSetLayoutSupportKHR$handle() {
        return vkGetDescriptorSetLayoutSupportKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport)
     * }
     */
    public static void vkGetDescriptorSetLayoutSupportKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pSupport) {
        var mh$ = vkGetDescriptorSetLayoutSupportKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDescriptorSetLayoutSupportKHR", device, pCreateInfo, pSupport);
            }
            mh$.invokeExact(device, pCreateInfo, pSupport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndirectCountKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndirectCountKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndirectCountKHR$descriptor() {
        return vkCmdDrawIndirectCountKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndirectCountKHR$handle() {
        return vkCmdDrawIndirectCountKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndirectCountKHR(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndirectCountKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndirectCountKHR", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndexedIndirectCountKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndexedIndirectCountKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndexedIndirectCountKHR$descriptor() {
        return vkCmdDrawIndexedIndirectCountKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndexedIndirectCountKHR$handle() {
        return vkCmdDrawIndexedIndirectCountKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndexedIndirectCountKHR(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirectCountKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndexedIndirectCountKHR", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR() {
        return VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR() {
        return VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR() {
        return VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR() {
        return VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = 128
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT() {
        return VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = 256
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT() {
        return VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = 512
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT() {
        return VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = 1024
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT() {
        return VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT;
    }
    private static final int VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkQueueGlobalPriorityKHR.VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR() {
        return VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkResolveModeFlags VkResolveModeFlagsKHR
     * }
     */
    public static final OfInt VkResolveModeFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkSemaphoreWaitFlags VkSemaphoreWaitFlagsKHR
     * }
     */
    public static final OfInt VkSemaphoreWaitFlagsKHR = vulkan_h.C_INT;

    private static class vkGetSemaphoreCounterValueKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetSemaphoreCounterValueKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t *pValue)
     * }
     */
    public static FunctionDescriptor vkGetSemaphoreCounterValueKHR$descriptor() {
        return vkGetSemaphoreCounterValueKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t *pValue)
     * }
     */
    public static MethodHandle vkGetSemaphoreCounterValueKHR$handle() {
        return vkGetSemaphoreCounterValueKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t *pValue)
     * }
     */
    public static int vkGetSemaphoreCounterValueKHR(MemorySegment device, MemorySegment semaphore, MemorySegment pValue) {
        var mh$ = vkGetSemaphoreCounterValueKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetSemaphoreCounterValueKHR", device, semaphore, pValue);
            }
            return (int)mh$.invokeExact(device, semaphore, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkWaitSemaphoresKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkWaitSemaphoresKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout)
     * }
     */
    public static FunctionDescriptor vkWaitSemaphoresKHR$descriptor() {
        return vkWaitSemaphoresKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout)
     * }
     */
    public static MethodHandle vkWaitSemaphoresKHR$handle() {
        return vkWaitSemaphoresKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout)
     * }
     */
    public static int vkWaitSemaphoresKHR(MemorySegment device, MemorySegment pWaitInfo, long timeout) {
        var mh$ = vkWaitSemaphoresKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkWaitSemaphoresKHR", device, pWaitInfo, timeout);
            }
            return (int)mh$.invokeExact(device, pWaitInfo, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSignalSemaphoreKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSignalSemaphoreKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo)
     * }
     */
    public static FunctionDescriptor vkSignalSemaphoreKHR$descriptor() {
        return vkSignalSemaphoreKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo)
     * }
     */
    public static MethodHandle vkSignalSemaphoreKHR$handle() {
        return vkSignalSemaphoreKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo)
     * }
     */
    public static int vkSignalSemaphoreKHR(MemorySegment device, MemorySegment pSignalInfo) {
        var mh$ = vkSignalSemaphoreKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSignalSemaphoreKHR", device, pSignalInfo);
            }
            return (int)mh$.invokeExact(device, pSignalInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR() {
        return VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR() {
        return VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR() {
        return VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR() {
        return VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR() {
        return VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateCombinerOpKHR.VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR() {
        return VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR;
    }

    private static class vkGetPhysicalDeviceFragmentShadingRatesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceFragmentShadingRatesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t *pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR *pFragmentShadingRates)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceFragmentShadingRatesKHR$descriptor() {
        return vkGetPhysicalDeviceFragmentShadingRatesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t *pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR *pFragmentShadingRates)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceFragmentShadingRatesKHR$handle() {
        return vkGetPhysicalDeviceFragmentShadingRatesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t *pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR *pFragmentShadingRates)
     * }
     */
    public static int vkGetPhysicalDeviceFragmentShadingRatesKHR(MemorySegment physicalDevice, MemorySegment pFragmentShadingRateCount, MemorySegment pFragmentShadingRates) {
        var mh$ = vkGetPhysicalDeviceFragmentShadingRatesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceFragmentShadingRatesKHR", physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
            }
            return (int)mh$.invokeExact(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetFragmentShadingRateKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetFragmentShadingRateKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D *pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
     * }
     */
    public static FunctionDescriptor vkCmdSetFragmentShadingRateKHR$descriptor() {
        return vkCmdSetFragmentShadingRateKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D *pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
     * }
     */
    public static MethodHandle vkCmdSetFragmentShadingRateKHR$handle() {
        return vkCmdSetFragmentShadingRateKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D *pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
     * }
     */
    public static void vkCmdSetFragmentShadingRateKHR(MemorySegment commandBuffer, MemorySegment pFragmentSize, MemorySegment combinerOps) {
        var mh$ = vkCmdSetFragmentShadingRateKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetFragmentShadingRateKHR", commandBuffer, pFragmentSize, combinerOps);
            }
            mh$.invokeExact(commandBuffer, pFragmentSize, combinerOps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkWaitForPresentKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkWaitForPresentKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout)
     * }
     */
    public static FunctionDescriptor vkWaitForPresentKHR$descriptor() {
        return vkWaitForPresentKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout)
     * }
     */
    public static MethodHandle vkWaitForPresentKHR$handle() {
        return vkWaitForPresentKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout)
     * }
     */
    public static int vkWaitForPresentKHR(MemorySegment device, MemorySegment swapchain, long presentId, long timeout) {
        var mh$ = vkWaitForPresentKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkWaitForPresentKHR", device, swapchain, presentId, timeout);
            }
            return (int)mh$.invokeExact(device, swapchain, presentId, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferDeviceAddressKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferDeviceAddressKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetBufferDeviceAddressKHR$descriptor() {
        return vkGetBufferDeviceAddressKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static MethodHandle vkGetBufferDeviceAddressKHR$handle() {
        return vkGetBufferDeviceAddressKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static long vkGetBufferDeviceAddressKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferDeviceAddressKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferDeviceAddressKHR", device, pInfo);
            }
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferOpaqueCaptureAddressKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferOpaqueCaptureAddressKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetBufferOpaqueCaptureAddressKHR$descriptor() {
        return vkGetBufferOpaqueCaptureAddressKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static MethodHandle vkGetBufferOpaqueCaptureAddressKHR$handle() {
        return vkGetBufferOpaqueCaptureAddressKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_t vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static long vkGetBufferOpaqueCaptureAddressKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferOpaqueCaptureAddressKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferOpaqueCaptureAddressKHR", device, pInfo);
            }
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceMemoryOpaqueCaptureAddressKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceMemoryOpaqueCaptureAddressKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetDeviceMemoryOpaqueCaptureAddressKHR$descriptor() {
        return vkGetDeviceMemoryOpaqueCaptureAddressKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)
     * }
     */
    public static MethodHandle vkGetDeviceMemoryOpaqueCaptureAddressKHR$handle() {
        return vkGetDeviceMemoryOpaqueCaptureAddressKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)
     * }
     */
    public static long vkGetDeviceMemoryOpaqueCaptureAddressKHR(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetDeviceMemoryOpaqueCaptureAddressKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceMemoryOpaqueCaptureAddressKHR", device, pInfo);
            }
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkDeferredOperationKHR_T *VkDeferredOperationKHR
     * }
     */
    public static final AddressLayout VkDeferredOperationKHR = vulkan_h.C_POINTER;

    private static class vkCreateDeferredOperationKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDeferredOperationKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks *pAllocator, VkDeferredOperationKHR *pDeferredOperation)
     * }
     */
    public static FunctionDescriptor vkCreateDeferredOperationKHR$descriptor() {
        return vkCreateDeferredOperationKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks *pAllocator, VkDeferredOperationKHR *pDeferredOperation)
     * }
     */
    public static MethodHandle vkCreateDeferredOperationKHR$handle() {
        return vkCreateDeferredOperationKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks *pAllocator, VkDeferredOperationKHR *pDeferredOperation)
     * }
     */
    public static int vkCreateDeferredOperationKHR(MemorySegment device, MemorySegment pAllocator, MemorySegment pDeferredOperation) {
        var mh$ = vkCreateDeferredOperationKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDeferredOperationKHR", device, pAllocator, pDeferredOperation);
            }
            return (int)mh$.invokeExact(device, pAllocator, pDeferredOperation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDeferredOperationKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDeferredOperationKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDeferredOperationKHR$descriptor() {
        return vkDestroyDeferredOperationKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDeferredOperationKHR$handle() {
        return vkDestroyDeferredOperationKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDeferredOperationKHR(MemorySegment device, MemorySegment operation, MemorySegment pAllocator) {
        var mh$ = vkDestroyDeferredOperationKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDeferredOperationKHR", device, operation, pAllocator);
            }
            mh$.invokeExact(device, operation, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeferredOperationMaxConcurrencyKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeferredOperationMaxConcurrencyKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static FunctionDescriptor vkGetDeferredOperationMaxConcurrencyKHR$descriptor() {
        return vkGetDeferredOperationMaxConcurrencyKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static MethodHandle vkGetDeferredOperationMaxConcurrencyKHR$handle() {
        return vkGetDeferredOperationMaxConcurrencyKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32_t vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static int vkGetDeferredOperationMaxConcurrencyKHR(MemorySegment device, MemorySegment operation) {
        var mh$ = vkGetDeferredOperationMaxConcurrencyKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeferredOperationMaxConcurrencyKHR", device, operation);
            }
            return (int)mh$.invokeExact(device, operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeferredOperationResultKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeferredOperationResultKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static FunctionDescriptor vkGetDeferredOperationResultKHR$descriptor() {
        return vkGetDeferredOperationResultKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static MethodHandle vkGetDeferredOperationResultKHR$handle() {
        return vkGetDeferredOperationResultKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static int vkGetDeferredOperationResultKHR(MemorySegment device, MemorySegment operation) {
        var mh$ = vkGetDeferredOperationResultKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeferredOperationResultKHR", device, operation);
            }
            return (int)mh$.invokeExact(device, operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDeferredOperationJoinKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDeferredOperationJoinKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static FunctionDescriptor vkDeferredOperationJoinKHR$descriptor() {
        return vkDeferredOperationJoinKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static MethodHandle vkDeferredOperationJoinKHR$handle() {
        return vkDeferredOperationJoinKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)
     * }
     */
    public static int vkDeferredOperationJoinKHR(MemorySegment device, MemorySegment operation) {
        var mh$ = vkDeferredOperationJoinKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDeferredOperationJoinKHR", device, operation);
            }
            return (int)mh$.invokeExact(device, operation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR() {
        return VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR;
    }
    private static final int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR() {
        return VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR;
    }
    private static final int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR() {
        return VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR;
    }
    private static final int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR() {
        return VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR;
    }
    private static final int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineExecutableStatisticFormatKHR.VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR() {
        return VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR;
    }

    private static class vkGetPipelineExecutablePropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPipelineExecutablePropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR *pPipelineInfo, uint32_t *pExecutableCount, VkPipelineExecutablePropertiesKHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPipelineExecutablePropertiesKHR$descriptor() {
        return vkGetPipelineExecutablePropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR *pPipelineInfo, uint32_t *pExecutableCount, VkPipelineExecutablePropertiesKHR *pProperties)
     * }
     */
    public static MethodHandle vkGetPipelineExecutablePropertiesKHR$handle() {
        return vkGetPipelineExecutablePropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR *pPipelineInfo, uint32_t *pExecutableCount, VkPipelineExecutablePropertiesKHR *pProperties)
     * }
     */
    public static int vkGetPipelineExecutablePropertiesKHR(MemorySegment device, MemorySegment pPipelineInfo, MemorySegment pExecutableCount, MemorySegment pProperties) {
        var mh$ = vkGetPipelineExecutablePropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPipelineExecutablePropertiesKHR", device, pPipelineInfo, pExecutableCount, pProperties);
            }
            return (int)mh$.invokeExact(device, pPipelineInfo, pExecutableCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPipelineExecutableStatisticsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPipelineExecutableStatisticsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pStatisticCount, VkPipelineExecutableStatisticKHR *pStatistics)
     * }
     */
    public static FunctionDescriptor vkGetPipelineExecutableStatisticsKHR$descriptor() {
        return vkGetPipelineExecutableStatisticsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pStatisticCount, VkPipelineExecutableStatisticKHR *pStatistics)
     * }
     */
    public static MethodHandle vkGetPipelineExecutableStatisticsKHR$handle() {
        return vkGetPipelineExecutableStatisticsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pStatisticCount, VkPipelineExecutableStatisticKHR *pStatistics)
     * }
     */
    public static int vkGetPipelineExecutableStatisticsKHR(MemorySegment device, MemorySegment pExecutableInfo, MemorySegment pStatisticCount, MemorySegment pStatistics) {
        var mh$ = vkGetPipelineExecutableStatisticsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPipelineExecutableStatisticsKHR", device, pExecutableInfo, pStatisticCount, pStatistics);
            }
            return (int)mh$.invokeExact(device, pExecutableInfo, pStatisticCount, pStatistics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPipelineExecutableInternalRepresentationsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPipelineExecutableInternalRepresentationsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations)
     * }
     */
    public static FunctionDescriptor vkGetPipelineExecutableInternalRepresentationsKHR$descriptor() {
        return vkGetPipelineExecutableInternalRepresentationsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations)
     * }
     */
    public static MethodHandle vkGetPipelineExecutableInternalRepresentationsKHR$handle() {
        return vkGetPipelineExecutableInternalRepresentationsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR *pExecutableInfo, uint32_t *pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR *pInternalRepresentations)
     * }
     */
    public static int vkGetPipelineExecutableInternalRepresentationsKHR(MemorySegment device, MemorySegment pExecutableInfo, MemorySegment pInternalRepresentationCount, MemorySegment pInternalRepresentations) {
        var mh$ = vkGetPipelineExecutableInternalRepresentationsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPipelineExecutableInternalRepresentationsKHR", device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
            }
            return (int)mh$.invokeExact(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkMemoryUnmapFlagsKHR
     * }
     */
    public static final OfInt VkMemoryUnmapFlagsKHR = vulkan_h.C_INT;

    private static class vkMapMemory2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkMapMemory2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR *pMemoryMapInfo, void **ppData)
     * }
     */
    public static FunctionDescriptor vkMapMemory2KHR$descriptor() {
        return vkMapMemory2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR *pMemoryMapInfo, void **ppData)
     * }
     */
    public static MethodHandle vkMapMemory2KHR$handle() {
        return vkMapMemory2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR *pMemoryMapInfo, void **ppData)
     * }
     */
    public static int vkMapMemory2KHR(MemorySegment device, MemorySegment pMemoryMapInfo, MemorySegment ppData) {
        var mh$ = vkMapMemory2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkMapMemory2KHR", device, pMemoryMapInfo, ppData);
            }
            return (int)mh$.invokeExact(device, pMemoryMapInfo, ppData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkUnmapMemory2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkUnmapMemory2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR *pMemoryUnmapInfo)
     * }
     */
    public static FunctionDescriptor vkUnmapMemory2KHR$descriptor() {
        return vkUnmapMemory2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR *pMemoryUnmapInfo)
     * }
     */
    public static MethodHandle vkUnmapMemory2KHR$handle() {
        return vkUnmapMemory2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR *pMemoryUnmapInfo)
     * }
     */
    public static int vkUnmapMemory2KHR(MemorySegment device, MemorySegment pMemoryUnmapInfo) {
        var mh$ = vkUnmapMemory2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkUnmapMemory2KHR", device, pMemoryUnmapInfo);
            }
            return (int)mh$.invokeExact(device, pMemoryUnmapInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0
     * }
     */
    public static int VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR() {
        return VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR() {
        return VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR;
    }
    private static final int VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR() {
        return VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR;
    }
    private static final int VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3
     * }
     */
    public static int VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR() {
        return VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR;
    }
    private static final int VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR() {
        return VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR;
    }
    private static final int VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeTuningModeKHR.VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_TUNING_MODE_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR() {
        return VK_VIDEO_ENCODE_CAPABILITY_PRECEDING_EXTERNALLY_ENCODED_BYTES_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR() {
        return VK_VIDEO_ENCODE_CAPABILITY_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_DETECTION_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeCapabilityFlagBitsKHR.VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeCapabilityFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeCapabilityFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR = 0
     * }
     */
    public static int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR() {
        return VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR() {
        return VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DISABLED_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR() {
        return VK_VIDEO_ENCODE_RATE_CONTROL_MODE_CBR_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR() {
        return VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeRateControlModeFlagBitsKHR.VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_RATE_CONTROL_MODE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeRateControlModeFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeRateControlModeFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR() {
        return VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BUFFER_OFFSET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR() {
        return VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_BYTES_WRITTEN_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR() {
        return VK_VIDEO_ENCODE_FEEDBACK_BITSTREAM_HAS_OVERRIDES_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeFeedbackFlagBitsKHR.VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_FEEDBACK_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeFeedbackFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeFeedbackFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR = 0
     * }
     */
    public static int VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR() {
        return VK_VIDEO_ENCODE_USAGE_DEFAULT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR() {
        return VK_VIDEO_ENCODE_USAGE_TRANSCODING_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR() {
        return VK_VIDEO_ENCODE_USAGE_STREAMING_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR() {
        return VK_VIDEO_ENCODE_USAGE_RECORDING_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR() {
        return VK_VIDEO_ENCODE_USAGE_CONFERENCING_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeUsageFlagBitsKHR.VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_USAGE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeUsageFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeUsageFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR = 0
     * }
     */
    public static int VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR() {
        return VK_VIDEO_ENCODE_CONTENT_DEFAULT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR() {
        return VK_VIDEO_ENCODE_CONTENT_CAMERA_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR() {
        return VK_VIDEO_ENCODE_CONTENT_DESKTOP_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR() {
        return VK_VIDEO_ENCODE_CONTENT_RENDERED_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeContentFlagBitsKHR.VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_CONTENT_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeContentFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeContentFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeRateControlFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeRateControlFlagsKHR = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR *pQualityLevelProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR *pQualityLevelProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR$handle() {
        return vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR *pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR *pQualityLevelProperties)
     * }
     */
    public static int vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(MemorySegment physicalDevice, MemorySegment pQualityLevelInfo, MemorySegment pQualityLevelProperties) {
        var mh$ = vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR", physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetEncodedVideoSessionParametersKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetEncodedVideoSessionParametersKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR *pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR *pFeedbackInfo, size_t *pDataSize, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetEncodedVideoSessionParametersKHR$descriptor() {
        return vkGetEncodedVideoSessionParametersKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR *pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR *pFeedbackInfo, size_t *pDataSize, void *pData)
     * }
     */
    public static MethodHandle vkGetEncodedVideoSessionParametersKHR$handle() {
        return vkGetEncodedVideoSessionParametersKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR *pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR *pFeedbackInfo, size_t *pDataSize, void *pData)
     * }
     */
    public static int vkGetEncodedVideoSessionParametersKHR(MemorySegment device, MemorySegment pVideoSessionParametersInfo, MemorySegment pFeedbackInfo, MemorySegment pDataSize, MemorySegment pData) {
        var mh$ = vkGetEncodedVideoSessionParametersKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetEncodedVideoSessionParametersKHR", device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
            }
            return (int)mh$.invokeExact(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEncodeVideoKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEncodeVideoKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR *pEncodeInfo)
     * }
     */
    public static FunctionDescriptor vkCmdEncodeVideoKHR$descriptor() {
        return vkCmdEncodeVideoKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR *pEncodeInfo)
     * }
     */
    public static MethodHandle vkCmdEncodeVideoKHR$handle() {
        return vkCmdEncodeVideoKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR *pEncodeInfo)
     * }
     */
    public static void vkCmdEncodeVideoKHR(MemorySegment commandBuffer, MemorySegment pEncodeInfo) {
        var mh$ = vkCmdEncodeVideoKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEncodeVideoKHR", commandBuffer, pEncodeInfo);
            }
            mh$.invokeExact(commandBuffer, pEncodeInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkPipelineStageFlags2 VkPipelineStageFlags2KHR
     * }
     */
    public static final OfLong VkPipelineStageFlags2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkPipelineStageFlagBits2 VkPipelineStageFlagBits2KHR
     * }
     */
    public static final OfLong VkPipelineStageFlagBits2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkAccessFlags2 VkAccessFlags2KHR
     * }
     */
    public static final OfLong VkAccessFlags2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkAccessFlagBits2 VkAccessFlagBits2KHR
     * }
     */
    public static final OfLong VkAccessFlagBits2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkSubmitFlags VkSubmitFlagsKHR
     * }
     */
    public static final OfInt VkSubmitFlagsKHR = vulkan_h.C_INT;

    private static class vkCmdSetEvent2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetEvent2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetEvent2KHR$descriptor() {
        return vkCmdSetEvent2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static MethodHandle vkCmdSetEvent2KHR$handle() {
        return vkCmdSetEvent2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static void vkCmdSetEvent2KHR(MemorySegment commandBuffer, MemorySegment event, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdSetEvent2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetEvent2KHR", commandBuffer, event, pDependencyInfo);
            }
            mh$.invokeExact(commandBuffer, event, pDependencyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdResetEvent2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdResetEvent2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
     * }
     */
    public static FunctionDescriptor vkCmdResetEvent2KHR$descriptor() {
        return vkCmdResetEvent2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
     * }
     */
    public static MethodHandle vkCmdResetEvent2KHR$handle() {
        return vkCmdResetEvent2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
     * }
     */
    public static void vkCmdResetEvent2KHR(MemorySegment commandBuffer, MemorySegment event, long stageMask) {
        var mh$ = vkCmdResetEvent2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdResetEvent2KHR", commandBuffer, event, stageMask);
            }
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWaitEvents2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWaitEvents2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
     * }
     */
    public static FunctionDescriptor vkCmdWaitEvents2KHR$descriptor() {
        return vkCmdWaitEvents2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
     * }
     */
    public static MethodHandle vkCmdWaitEvents2KHR$handle() {
        return vkCmdWaitEvents2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
     * }
     */
    public static void vkCmdWaitEvents2KHR(MemorySegment commandBuffer, int eventCount, MemorySegment pEvents, MemorySegment pDependencyInfos) {
        var mh$ = vkCmdWaitEvents2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWaitEvents2KHR", commandBuffer, eventCount, pEvents, pDependencyInfos);
            }
            mh$.invokeExact(commandBuffer, eventCount, pEvents, pDependencyInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPipelineBarrier2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPipelineBarrier2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static FunctionDescriptor vkCmdPipelineBarrier2KHR$descriptor() {
        return vkCmdPipelineBarrier2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static MethodHandle vkCmdPipelineBarrier2KHR$handle() {
        return vkCmdPipelineBarrier2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static void vkCmdPipelineBarrier2KHR(MemorySegment commandBuffer, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdPipelineBarrier2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPipelineBarrier2KHR", commandBuffer, pDependencyInfo);
            }
            mh$.invokeExact(commandBuffer, pDependencyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWriteTimestamp2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWriteTimestamp2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static FunctionDescriptor vkCmdWriteTimestamp2KHR$descriptor() {
        return vkCmdWriteTimestamp2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static MethodHandle vkCmdWriteTimestamp2KHR$handle() {
        return vkCmdWriteTimestamp2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static void vkCmdWriteTimestamp2KHR(MemorySegment commandBuffer, long stage, MemorySegment queryPool, int query) {
        var mh$ = vkCmdWriteTimestamp2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWriteTimestamp2KHR", commandBuffer, stage, queryPool, query);
            }
            mh$.invokeExact(commandBuffer, stage, queryPool, query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueSubmit2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueSubmit2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
     * }
     */
    public static FunctionDescriptor vkQueueSubmit2KHR$descriptor() {
        return vkQueueSubmit2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
     * }
     */
    public static MethodHandle vkQueueSubmit2KHR$handle() {
        return vkQueueSubmit2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
     * }
     */
    public static int vkQueueSubmit2KHR(MemorySegment queue, int submitCount, MemorySegment pSubmits, MemorySegment fence) {
        var mh$ = vkQueueSubmit2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueSubmit2KHR", queue, submitCount, pSubmits, fence);
            }
            return (int)mh$.invokeExact(queue, submitCount, pSubmits, fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWriteBufferMarker2AMD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWriteBufferMarker2AMD"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
     * }
     */
    public static FunctionDescriptor vkCmdWriteBufferMarker2AMD$descriptor() {
        return vkCmdWriteBufferMarker2AMD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
     * }
     */
    public static MethodHandle vkCmdWriteBufferMarker2AMD$handle() {
        return vkCmdWriteBufferMarker2AMD.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
     * }
     */
    public static void vkCmdWriteBufferMarker2AMD(MemorySegment commandBuffer, long stage, MemorySegment dstBuffer, long dstOffset, int marker) {
        var mh$ = vkCmdWriteBufferMarker2AMD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWriteBufferMarker2AMD", commandBuffer, stage, dstBuffer, dstOffset, marker);
            }
            mh$.invokeExact(commandBuffer, stage, dstBuffer, dstOffset, marker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetQueueCheckpointData2NV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetQueueCheckpointData2NV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointData2NV *pCheckpointData)
     * }
     */
    public static FunctionDescriptor vkGetQueueCheckpointData2NV$descriptor() {
        return vkGetQueueCheckpointData2NV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointData2NV *pCheckpointData)
     * }
     */
    public static MethodHandle vkGetQueueCheckpointData2NV$handle() {
        return vkGetQueueCheckpointData2NV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointData2NV *pCheckpointData)
     * }
     */
    public static void vkGetQueueCheckpointData2NV(MemorySegment queue, MemorySegment pCheckpointDataCount, MemorySegment pCheckpointData) {
        var mh$ = vkGetQueueCheckpointData2NV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetQueueCheckpointData2NV", queue, pCheckpointDataCount, pCheckpointData);
            }
            mh$.invokeExact(queue, pCheckpointDataCount, pCheckpointData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyBuffer2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyBuffer2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyBuffer2KHR$descriptor() {
        return vkCmdCopyBuffer2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
     * }
     */
    public static MethodHandle vkCmdCopyBuffer2KHR$handle() {
        return vkCmdCopyBuffer2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
     * }
     */
    public static void vkCmdCopyBuffer2KHR(MemorySegment commandBuffer, MemorySegment pCopyBufferInfo) {
        var mh$ = vkCmdCopyBuffer2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyBuffer2KHR", commandBuffer, pCopyBufferInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyBufferInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyImage2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyImage2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyImage2KHR$descriptor() {
        return vkCmdCopyImage2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
     * }
     */
    public static MethodHandle vkCmdCopyImage2KHR$handle() {
        return vkCmdCopyImage2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
     * }
     */
    public static void vkCmdCopyImage2KHR(MemorySegment commandBuffer, MemorySegment pCopyImageInfo) {
        var mh$ = vkCmdCopyImage2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyImage2KHR", commandBuffer, pCopyImageInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyBufferToImage2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyBufferToImage2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyBufferToImage2KHR$descriptor() {
        return vkCmdCopyBufferToImage2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
     * }
     */
    public static MethodHandle vkCmdCopyBufferToImage2KHR$handle() {
        return vkCmdCopyBufferToImage2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
     * }
     */
    public static void vkCmdCopyBufferToImage2KHR(MemorySegment commandBuffer, MemorySegment pCopyBufferToImageInfo) {
        var mh$ = vkCmdCopyBufferToImage2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyBufferToImage2KHR", commandBuffer, pCopyBufferToImageInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyBufferToImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyImageToBuffer2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyImageToBuffer2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyImageToBuffer2KHR$descriptor() {
        return vkCmdCopyImageToBuffer2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
     * }
     */
    public static MethodHandle vkCmdCopyImageToBuffer2KHR$handle() {
        return vkCmdCopyImageToBuffer2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
     * }
     */
    public static void vkCmdCopyImageToBuffer2KHR(MemorySegment commandBuffer, MemorySegment pCopyImageToBufferInfo) {
        var mh$ = vkCmdCopyImageToBuffer2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyImageToBuffer2KHR", commandBuffer, pCopyImageToBufferInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyImageToBufferInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBlitImage2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBlitImage2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBlitImage2KHR$descriptor() {
        return vkCmdBlitImage2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
     * }
     */
    public static MethodHandle vkCmdBlitImage2KHR$handle() {
        return vkCmdBlitImage2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
     * }
     */
    public static void vkCmdBlitImage2KHR(MemorySegment commandBuffer, MemorySegment pBlitImageInfo) {
        var mh$ = vkCmdBlitImage2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBlitImage2KHR", commandBuffer, pBlitImageInfo);
            }
            mh$.invokeExact(commandBuffer, pBlitImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdResolveImage2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdResolveImage2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdResolveImage2KHR$descriptor() {
        return vkCmdResolveImage2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
     * }
     */
    public static MethodHandle vkCmdResolveImage2KHR$handle() {
        return vkCmdResolveImage2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
     * }
     */
    public static void vkCmdResolveImage2KHR(MemorySegment commandBuffer, MemorySegment pResolveImageInfo) {
        var mh$ = vkCmdResolveImage2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdResolveImage2KHR", commandBuffer, pResolveImageInfo);
            }
            mh$.invokeExact(commandBuffer, pResolveImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkFormatFeatureFlags2 VkFormatFeatureFlags2KHR
     * }
     */
    public static final OfLong VkFormatFeatureFlags2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFormatFeatureFlagBits2 VkFormatFeatureFlagBits2KHR
     * }
     */
    public static final OfLong VkFormatFeatureFlagBits2KHR = vulkan_h.C_LONG_LONG;

    private static class vkCmdTraceRaysIndirect2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdTraceRaysIndirect2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)
     * }
     */
    public static FunctionDescriptor vkCmdTraceRaysIndirect2KHR$descriptor() {
        return vkCmdTraceRaysIndirect2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)
     * }
     */
    public static MethodHandle vkCmdTraceRaysIndirect2KHR$handle() {
        return vkCmdTraceRaysIndirect2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress)
     * }
     */
    public static void vkCmdTraceRaysIndirect2KHR(MemorySegment commandBuffer, long indirectDeviceAddress) {
        var mh$ = vkCmdTraceRaysIndirect2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdTraceRaysIndirect2KHR", commandBuffer, indirectDeviceAddress);
            }
            mh$.invokeExact(commandBuffer, indirectDeviceAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceBufferMemoryRequirementsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceBufferMemoryRequirementsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetDeviceBufferMemoryRequirementsKHR$descriptor() {
        return vkGetDeviceBufferMemoryRequirementsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetDeviceBufferMemoryRequirementsKHR$handle() {
        return vkGetDeviceBufferMemoryRequirementsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetDeviceBufferMemoryRequirementsKHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceBufferMemoryRequirementsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceBufferMemoryRequirementsKHR", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceImageMemoryRequirementsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceImageMemoryRequirementsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetDeviceImageMemoryRequirementsKHR$descriptor() {
        return vkGetDeviceImageMemoryRequirementsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetDeviceImageMemoryRequirementsKHR$handle() {
        return vkGetDeviceImageMemoryRequirementsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetDeviceImageMemoryRequirementsKHR(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceImageMemoryRequirementsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceImageMemoryRequirementsKHR", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceImageSparseMemoryRequirementsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceImageSparseMemoryRequirementsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetDeviceImageSparseMemoryRequirementsKHR$descriptor() {
        return vkGetDeviceImageSparseMemoryRequirementsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetDeviceImageSparseMemoryRequirementsKHR$handle() {
        return vkGetDeviceImageSparseMemoryRequirementsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static void vkGetDeviceImageSparseMemoryRequirementsKHR(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetDeviceImageSparseMemoryRequirementsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceImageSparseMemoryRequirementsKHR", device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkPipelineCreateFlags2KHR
     * }
     */
    public static final OfLong VkPipelineCreateFlags2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkPipelineCreateFlagBits2KHR
     * }
     */
    public static final OfLong VkPipelineCreateFlagBits2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkBufferUsageFlags2KHR
     * }
     */
    public static final OfLong VkBufferUsageFlags2KHR = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkBufferUsageFlagBits2KHR
     * }
     */
    public static final OfLong VkBufferUsageFlagBits2KHR = vulkan_h.C_LONG_LONG;

    private static class vkCmdBindIndexBuffer2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindIndexBuffer2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)
     * }
     */
    public static FunctionDescriptor vkCmdBindIndexBuffer2KHR$descriptor() {
        return vkCmdBindIndexBuffer2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)
     * }
     */
    public static MethodHandle vkCmdBindIndexBuffer2KHR$handle() {
        return vkCmdBindIndexBuffer2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)
     * }
     */
    public static void vkCmdBindIndexBuffer2KHR(MemorySegment commandBuffer, MemorySegment buffer, long offset, long size, int indexType) {
        var mh$ = vkCmdBindIndexBuffer2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindIndexBuffer2KHR", commandBuffer, buffer, offset, size, indexType);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, size, indexType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetRenderingAreaGranularityKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetRenderingAreaGranularityKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR *pRenderingAreaInfo, VkExtent2D *pGranularity)
     * }
     */
    public static FunctionDescriptor vkGetRenderingAreaGranularityKHR$descriptor() {
        return vkGetRenderingAreaGranularityKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR *pRenderingAreaInfo, VkExtent2D *pGranularity)
     * }
     */
    public static MethodHandle vkGetRenderingAreaGranularityKHR$handle() {
        return vkGetRenderingAreaGranularityKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR *pRenderingAreaInfo, VkExtent2D *pGranularity)
     * }
     */
    public static void vkGetRenderingAreaGranularityKHR(MemorySegment device, MemorySegment pRenderingAreaInfo, MemorySegment pGranularity) {
        var mh$ = vkGetRenderingAreaGranularityKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetRenderingAreaGranularityKHR", device, pRenderingAreaInfo, pGranularity);
            }
            mh$.invokeExact(device, pRenderingAreaInfo, pGranularity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceImageSubresourceLayoutKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceImageSubresourceLayoutKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR *pInfo, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static FunctionDescriptor vkGetDeviceImageSubresourceLayoutKHR$descriptor() {
        return vkGetDeviceImageSubresourceLayoutKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR *pInfo, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static MethodHandle vkGetDeviceImageSubresourceLayoutKHR$handle() {
        return vkGetDeviceImageSubresourceLayoutKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR *pInfo, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static void vkGetDeviceImageSubresourceLayoutKHR(MemorySegment device, MemorySegment pInfo, MemorySegment pLayout) {
        var mh$ = vkGetDeviceImageSubresourceLayoutKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceImageSubresourceLayoutKHR", device, pInfo, pLayout);
            }
            mh$.invokeExact(device, pInfo, pLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageSubresourceLayout2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageSubresourceLayout2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2KHR *pSubresource, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static FunctionDescriptor vkGetImageSubresourceLayout2KHR$descriptor() {
        return vkGetImageSubresourceLayout2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2KHR *pSubresource, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static MethodHandle vkGetImageSubresourceLayout2KHR$handle() {
        return vkGetImageSubresourceLayout2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2KHR *pSubresource, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static void vkGetImageSubresourceLayout2KHR(MemorySegment device, MemorySegment image, MemorySegment pSubresource, MemorySegment pLayout) {
        var mh$ = vkGetImageSubresourceLayout2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageSubresourceLayout2KHR", device, image, pSubresource, pLayout);
            }
            mh$.invokeExact(device, image, pSubresource, pLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_COMPONENT_TYPE_FLOAT16_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT16_KHR = 0
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT16_KHR() {
        return VK_COMPONENT_TYPE_FLOAT16_KHR;
    }
    private static final int VK_COMPONENT_TYPE_FLOAT32_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT32_KHR = 1
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT32_KHR() {
        return VK_COMPONENT_TYPE_FLOAT32_KHR;
    }
    private static final int VK_COMPONENT_TYPE_FLOAT64_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT64_KHR = 2
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT64_KHR() {
        return VK_COMPONENT_TYPE_FLOAT64_KHR;
    }
    private static final int VK_COMPONENT_TYPE_SINT8_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_KHR = 3
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT8_KHR() {
        return VK_COMPONENT_TYPE_SINT8_KHR;
    }
    private static final int VK_COMPONENT_TYPE_SINT16_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT16_KHR = 4
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT16_KHR() {
        return VK_COMPONENT_TYPE_SINT16_KHR;
    }
    private static final int VK_COMPONENT_TYPE_SINT32_KHR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT32_KHR = 5
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT32_KHR() {
        return VK_COMPONENT_TYPE_SINT32_KHR;
    }
    private static final int VK_COMPONENT_TYPE_SINT64_KHR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT64_KHR = 6
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT64_KHR() {
        return VK_COMPONENT_TYPE_SINT64_KHR;
    }
    private static final int VK_COMPONENT_TYPE_UINT8_KHR = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_KHR = 7
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT8_KHR() {
        return VK_COMPONENT_TYPE_UINT8_KHR;
    }
    private static final int VK_COMPONENT_TYPE_UINT16_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT16_KHR = 8
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT16_KHR() {
        return VK_COMPONENT_TYPE_UINT16_KHR;
    }
    private static final int VK_COMPONENT_TYPE_UINT32_KHR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT32_KHR = 9
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT32_KHR() {
        return VK_COMPONENT_TYPE_UINT32_KHR;
    }
    private static final int VK_COMPONENT_TYPE_UINT64_KHR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT64_KHR = 10
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT64_KHR() {
        return VK_COMPONENT_TYPE_UINT64_KHR;
    }
    private static final int VK_COMPONENT_TYPE_FLOAT16_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT16_NV = 0
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT16_NV() {
        return VK_COMPONENT_TYPE_FLOAT16_NV;
    }
    private static final int VK_COMPONENT_TYPE_FLOAT32_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT32_NV = 1
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT32_NV() {
        return VK_COMPONENT_TYPE_FLOAT32_NV;
    }
    private static final int VK_COMPONENT_TYPE_FLOAT64_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_FLOAT64_NV = 2
     * }
     */
    public static int VK_COMPONENT_TYPE_FLOAT64_NV() {
        return VK_COMPONENT_TYPE_FLOAT64_NV;
    }
    private static final int VK_COMPONENT_TYPE_SINT8_NV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT8_NV = 3
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT8_NV() {
        return VK_COMPONENT_TYPE_SINT8_NV;
    }
    private static final int VK_COMPONENT_TYPE_SINT16_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT16_NV = 4
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT16_NV() {
        return VK_COMPONENT_TYPE_SINT16_NV;
    }
    private static final int VK_COMPONENT_TYPE_SINT32_NV = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT32_NV = 5
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT32_NV() {
        return VK_COMPONENT_TYPE_SINT32_NV;
    }
    private static final int VK_COMPONENT_TYPE_SINT64_NV = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_SINT64_NV = 6
     * }
     */
    public static int VK_COMPONENT_TYPE_SINT64_NV() {
        return VK_COMPONENT_TYPE_SINT64_NV;
    }
    private static final int VK_COMPONENT_TYPE_UINT8_NV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT8_NV = 7
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT8_NV() {
        return VK_COMPONENT_TYPE_UINT8_NV;
    }
    private static final int VK_COMPONENT_TYPE_UINT16_NV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT16_NV = 8
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT16_NV() {
        return VK_COMPONENT_TYPE_UINT16_NV;
    }
    private static final int VK_COMPONENT_TYPE_UINT32_NV = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT32_NV = 9
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT32_NV() {
        return VK_COMPONENT_TYPE_UINT32_NV;
    }
    private static final int VK_COMPONENT_TYPE_UINT64_NV = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_UINT64_NV = 10
     * }
     */
    public static int VK_COMPONENT_TYPE_UINT64_NV() {
        return VK_COMPONENT_TYPE_UINT64_NV;
    }
    private static final int VK_COMPONENT_TYPE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkComponentTypeKHR.VK_COMPONENT_TYPE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_COMPONENT_TYPE_MAX_ENUM_KHR() {
        return VK_COMPONENT_TYPE_MAX_ENUM_KHR;
    }
    private static final int VK_SCOPE_DEVICE_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_DEVICE_KHR = 1
     * }
     */
    public static int VK_SCOPE_DEVICE_KHR() {
        return VK_SCOPE_DEVICE_KHR;
    }
    private static final int VK_SCOPE_WORKGROUP_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_WORKGROUP_KHR = 2
     * }
     */
    public static int VK_SCOPE_WORKGROUP_KHR() {
        return VK_SCOPE_WORKGROUP_KHR;
    }
    private static final int VK_SCOPE_SUBGROUP_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_SUBGROUP_KHR = 3
     * }
     */
    public static int VK_SCOPE_SUBGROUP_KHR() {
        return VK_SCOPE_SUBGROUP_KHR;
    }
    private static final int VK_SCOPE_QUEUE_FAMILY_KHR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_QUEUE_FAMILY_KHR = 5
     * }
     */
    public static int VK_SCOPE_QUEUE_FAMILY_KHR() {
        return VK_SCOPE_QUEUE_FAMILY_KHR;
    }
    private static final int VK_SCOPE_DEVICE_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_DEVICE_NV = 1
     * }
     */
    public static int VK_SCOPE_DEVICE_NV() {
        return VK_SCOPE_DEVICE_NV;
    }
    private static final int VK_SCOPE_WORKGROUP_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_WORKGROUP_NV = 2
     * }
     */
    public static int VK_SCOPE_WORKGROUP_NV() {
        return VK_SCOPE_WORKGROUP_NV;
    }
    private static final int VK_SCOPE_SUBGROUP_NV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_SUBGROUP_NV = 3
     * }
     */
    public static int VK_SCOPE_SUBGROUP_NV() {
        return VK_SCOPE_SUBGROUP_NV;
    }
    private static final int VK_SCOPE_QUEUE_FAMILY_NV = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_QUEUE_FAMILY_NV = 5
     * }
     */
    public static int VK_SCOPE_QUEUE_FAMILY_NV() {
        return VK_SCOPE_QUEUE_FAMILY_NV;
    }
    private static final int VK_SCOPE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkScopeKHR.VK_SCOPE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_SCOPE_MAX_ENUM_KHR() {
        return VK_SCOPE_MAX_ENUM_KHR;
    }

    private static class vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesKHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesKHR *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR$handle() {
        return vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesKHR *pProperties)
     * }
     */
    public static int vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR", physicalDevice, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_TIME_DOMAIN_DEVICE_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_DEVICE_KHR = 0
     * }
     */
    public static int VK_TIME_DOMAIN_DEVICE_KHR() {
        return VK_TIME_DOMAIN_DEVICE_KHR;
    }
    private static final int VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR = 1
     * }
     */
    public static int VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR() {
        return VK_TIME_DOMAIN_CLOCK_MONOTONIC_KHR;
    }
    private static final int VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR = 2
     * }
     */
    public static int VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR() {
        return VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_KHR;
    }
    private static final int VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR = 3
     * }
     */
    public static int VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR() {
        return VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_KHR;
    }
    private static final int VK_TIME_DOMAIN_DEVICE_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_DEVICE_EXT = 0
     * }
     */
    public static int VK_TIME_DOMAIN_DEVICE_EXT() {
        return VK_TIME_DOMAIN_DEVICE_EXT;
    }
    private static final int VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1
     * }
     */
    public static int VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT() {
        return VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT;
    }
    private static final int VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2
     * }
     */
    public static int VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT() {
        return VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT;
    }
    private static final int VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
     * }
     */
    public static int VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT() {
        return VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT;
    }
    private static final int VK_TIME_DOMAIN_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkTimeDomainKHR.VK_TIME_DOMAIN_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_TIME_DOMAIN_MAX_ENUM_KHR() {
        return VK_TIME_DOMAIN_MAX_ENUM_KHR;
    }

    private static class vkGetPhysicalDeviceCalibrateableTimeDomainsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t *pTimeDomainCount, VkTimeDomainKHR *pTimeDomains)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceCalibrateableTimeDomainsKHR$descriptor() {
        return vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t *pTimeDomainCount, VkTimeDomainKHR *pTimeDomains)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceCalibrateableTimeDomainsKHR$handle() {
        return vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t *pTimeDomainCount, VkTimeDomainKHR *pTimeDomains)
     * }
     */
    public static int vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(MemorySegment physicalDevice, MemorySegment pTimeDomainCount, MemorySegment pTimeDomains) {
        var mh$ = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceCalibrateableTimeDomainsKHR", physicalDevice, pTimeDomainCount, pTimeDomains);
            }
            return (int)mh$.invokeExact(physicalDevice, pTimeDomainCount, pTimeDomains);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetCalibratedTimestampsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetCalibratedTimestampsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR *pTimestampInfos, uint64_t *pTimestamps, uint64_t *pMaxDeviation)
     * }
     */
    public static FunctionDescriptor vkGetCalibratedTimestampsKHR$descriptor() {
        return vkGetCalibratedTimestampsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR *pTimestampInfos, uint64_t *pTimestamps, uint64_t *pMaxDeviation)
     * }
     */
    public static MethodHandle vkGetCalibratedTimestampsKHR$handle() {
        return vkGetCalibratedTimestampsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR *pTimestampInfos, uint64_t *pTimestamps, uint64_t *pMaxDeviation)
     * }
     */
    public static int vkGetCalibratedTimestampsKHR(MemorySegment device, int timestampCount, MemorySegment pTimestampInfos, MemorySegment pTimestamps, MemorySegment pMaxDeviation) {
        var mh$ = vkGetCalibratedTimestampsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetCalibratedTimestampsKHR", device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
            }
            return (int)mh$.invokeExact(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindDescriptorSets2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindDescriptorSets2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR *pBindDescriptorSetsInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBindDescriptorSets2KHR$descriptor() {
        return vkCmdBindDescriptorSets2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR *pBindDescriptorSetsInfo)
     * }
     */
    public static MethodHandle vkCmdBindDescriptorSets2KHR$handle() {
        return vkCmdBindDescriptorSets2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR *pBindDescriptorSetsInfo)
     * }
     */
    public static void vkCmdBindDescriptorSets2KHR(MemorySegment commandBuffer, MemorySegment pBindDescriptorSetsInfo) {
        var mh$ = vkCmdBindDescriptorSets2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindDescriptorSets2KHR", commandBuffer, pBindDescriptorSetsInfo);
            }
            mh$.invokeExact(commandBuffer, pBindDescriptorSetsInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPushConstants2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPushConstants2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR *pPushConstantsInfo)
     * }
     */
    public static FunctionDescriptor vkCmdPushConstants2KHR$descriptor() {
        return vkCmdPushConstants2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR *pPushConstantsInfo)
     * }
     */
    public static MethodHandle vkCmdPushConstants2KHR$handle() {
        return vkCmdPushConstants2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR *pPushConstantsInfo)
     * }
     */
    public static void vkCmdPushConstants2KHR(MemorySegment commandBuffer, MemorySegment pPushConstantsInfo) {
        var mh$ = vkCmdPushConstants2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPushConstants2KHR", commandBuffer, pPushConstantsInfo);
            }
            mh$.invokeExact(commandBuffer, pPushConstantsInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPushDescriptorSet2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPushDescriptorSet2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR *pPushDescriptorSetInfo)
     * }
     */
    public static FunctionDescriptor vkCmdPushDescriptorSet2KHR$descriptor() {
        return vkCmdPushDescriptorSet2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR *pPushDescriptorSetInfo)
     * }
     */
    public static MethodHandle vkCmdPushDescriptorSet2KHR$handle() {
        return vkCmdPushDescriptorSet2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR *pPushDescriptorSetInfo)
     * }
     */
    public static void vkCmdPushDescriptorSet2KHR(MemorySegment commandBuffer, MemorySegment pPushDescriptorSetInfo) {
        var mh$ = vkCmdPushDescriptorSet2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPushDescriptorSet2KHR", commandBuffer, pPushDescriptorSetInfo);
            }
            mh$.invokeExact(commandBuffer, pPushDescriptorSetInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPushDescriptorSetWithTemplate2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPushDescriptorSetWithTemplate2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR *pPushDescriptorSetWithTemplateInfo)
     * }
     */
    public static FunctionDescriptor vkCmdPushDescriptorSetWithTemplate2KHR$descriptor() {
        return vkCmdPushDescriptorSetWithTemplate2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR *pPushDescriptorSetWithTemplateInfo)
     * }
     */
    public static MethodHandle vkCmdPushDescriptorSetWithTemplate2KHR$handle() {
        return vkCmdPushDescriptorSetWithTemplate2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR *pPushDescriptorSetWithTemplateInfo)
     * }
     */
    public static void vkCmdPushDescriptorSetWithTemplate2KHR(MemorySegment commandBuffer, MemorySegment pPushDescriptorSetWithTemplateInfo) {
        var mh$ = vkCmdPushDescriptorSetWithTemplate2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPushDescriptorSetWithTemplate2KHR", commandBuffer, pPushDescriptorSetWithTemplateInfo);
            }
            mh$.invokeExact(commandBuffer, pPushDescriptorSetWithTemplateInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDescriptorBufferOffsets2EXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDescriptorBufferOffsets2EXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT *pSetDescriptorBufferOffsetsInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetDescriptorBufferOffsets2EXT$descriptor() {
        return vkCmdSetDescriptorBufferOffsets2EXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT *pSetDescriptorBufferOffsetsInfo)
     * }
     */
    public static MethodHandle vkCmdSetDescriptorBufferOffsets2EXT$handle() {
        return vkCmdSetDescriptorBufferOffsets2EXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT *pSetDescriptorBufferOffsetsInfo)
     * }
     */
    public static void vkCmdSetDescriptorBufferOffsets2EXT(MemorySegment commandBuffer, MemorySegment pSetDescriptorBufferOffsetsInfo) {
        var mh$ = vkCmdSetDescriptorBufferOffsets2EXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDescriptorBufferOffsets2EXT", commandBuffer, pSetDescriptorBufferOffsetsInfo);
            }
            mh$.invokeExact(commandBuffer, pSetDescriptorBufferOffsetsInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindDescriptorBufferEmbeddedSamplers2EXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *pBindDescriptorBufferEmbeddedSamplersInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBindDescriptorBufferEmbeddedSamplers2EXT$descriptor() {
        return vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *pBindDescriptorBufferEmbeddedSamplersInfo)
     * }
     */
    public static MethodHandle vkCmdBindDescriptorBufferEmbeddedSamplers2EXT$handle() {
        return vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT *pBindDescriptorBufferEmbeddedSamplersInfo)
     * }
     */
    public static void vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(MemorySegment commandBuffer, MemorySegment pBindDescriptorBufferEmbeddedSamplersInfo) {
        var mh$ = vkCmdBindDescriptorBufferEmbeddedSamplers2EXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT", commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
            }
            mh$.invokeExact(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkDebugReportCallbackEXT_T *VkDebugReportCallbackEXT
     * }
     */
    public static final AddressLayout VkDebugReportCallbackEXT = vulkan_h.C_POINTER;
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = (int)12L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = (int)14L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = (int)17L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = (int)18L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = (int)19L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = (int)20L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = (int)21L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = (int)22L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = (int)23L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = (int)24L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = (int)25L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = (int)26L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = (int)27L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = (int)28L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = (int)29L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = (int)30L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = (int)33L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = (int)1000156000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = (int)1000085000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = (int)1000029000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = (int)1000029001L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = (int)1000150000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = (int)1000165000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = (int)1000307000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT = 1000307000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_MODULE_NV_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = (int)1000307001L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT = 1000307001
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_CUDA_FUNCTION_NV_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = (int)1000366000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = (int)28L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = 28
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = (int)33L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = 33
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = (int)1000085000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = 1000085000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = (int)1000156000L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = 1000156000
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT;
    }
    private static final int VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportObjectTypeEXT.VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT() {
        return VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT;
    }
    private static final int VK_DEBUG_REPORT_INFORMATION_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 1
     * }
     */
    public static int VK_DEBUG_REPORT_INFORMATION_BIT_EXT() {
        return VK_DEBUG_REPORT_INFORMATION_BIT_EXT;
    }
    private static final int VK_DEBUG_REPORT_WARNING_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_WARNING_BIT_EXT = 2
     * }
     */
    public static int VK_DEBUG_REPORT_WARNING_BIT_EXT() {
        return VK_DEBUG_REPORT_WARNING_BIT_EXT;
    }
    private static final int VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 4
     * }
     */
    public static int VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT() {
        return VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT;
    }
    private static final int VK_DEBUG_REPORT_ERROR_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_ERROR_BIT_EXT = 8
     * }
     */
    public static int VK_DEBUG_REPORT_ERROR_BIT_EXT() {
        return VK_DEBUG_REPORT_ERROR_BIT_EXT;
    }
    private static final int VK_DEBUG_REPORT_DEBUG_BIT_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_DEBUG_BIT_EXT = 16
     * }
     */
    public static int VK_DEBUG_REPORT_DEBUG_BIT_EXT() {
        return VK_DEBUG_REPORT_DEBUG_BIT_EXT;
    }
    private static final int VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDebugReportFlagBitsEXT.VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDebugReportFlagsEXT
     * }
     */
    public static final OfInt VkDebugReportFlagsEXT = vulkan_h.C_INT;

    private static class vkCreateDebugReportCallbackEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDebugReportCallbackEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDebugReportCallbackEXT *pCallback)
     * }
     */
    public static FunctionDescriptor vkCreateDebugReportCallbackEXT$descriptor() {
        return vkCreateDebugReportCallbackEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDebugReportCallbackEXT *pCallback)
     * }
     */
    public static MethodHandle vkCreateDebugReportCallbackEXT$handle() {
        return vkCreateDebugReportCallbackEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDebugReportCallbackEXT *pCallback)
     * }
     */
    public static int vkCreateDebugReportCallbackEXT(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pCallback) {
        var mh$ = vkCreateDebugReportCallbackEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDebugReportCallbackEXT", instance, pCreateInfo, pAllocator, pCallback);
            }
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pCallback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDebugReportCallbackEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDebugReportCallbackEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDebugReportCallbackEXT$descriptor() {
        return vkDestroyDebugReportCallbackEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDebugReportCallbackEXT$handle() {
        return vkDestroyDebugReportCallbackEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDebugReportCallbackEXT(MemorySegment instance, MemorySegment callback, MemorySegment pAllocator) {
        var mh$ = vkDestroyDebugReportCallbackEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDebugReportCallbackEXT", instance, callback, pAllocator);
            }
            mh$.invokeExact(instance, callback, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDebugReportMessageEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDebugReportMessageEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char *pLayerPrefix, const char *pMessage)
     * }
     */
    public static FunctionDescriptor vkDebugReportMessageEXT$descriptor() {
        return vkDebugReportMessageEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char *pLayerPrefix, const char *pMessage)
     * }
     */
    public static MethodHandle vkDebugReportMessageEXT$handle() {
        return vkDebugReportMessageEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char *pLayerPrefix, const char *pMessage)
     * }
     */
    public static void vkDebugReportMessageEXT(MemorySegment instance, int flags, int objectType, long object, long location, int messageCode, MemorySegment pLayerPrefix, MemorySegment pMessage) {
        var mh$ = vkDebugReportMessageEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDebugReportMessageEXT", instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
            }
            mh$.invokeExact(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_RASTERIZATION_ORDER_STRICT_AMD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_STRICT_AMD = 0
     * }
     */
    public static int VK_RASTERIZATION_ORDER_STRICT_AMD() {
        return VK_RASTERIZATION_ORDER_STRICT_AMD;
    }
    private static final int VK_RASTERIZATION_ORDER_RELAXED_AMD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
     * }
     */
    public static int VK_RASTERIZATION_ORDER_RELAXED_AMD() {
        return VK_RASTERIZATION_ORDER_RELAXED_AMD;
    }
    private static final int VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkRasterizationOrderAMD.VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 2147483647
     * }
     */
    public static int VK_RASTERIZATION_ORDER_MAX_ENUM_AMD() {
        return VK_RASTERIZATION_ORDER_MAX_ENUM_AMD;
    }

    private static class vkDebugMarkerSetObjectTagEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDebugMarkerSetObjectTagEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo)
     * }
     */
    public static FunctionDescriptor vkDebugMarkerSetObjectTagEXT$descriptor() {
        return vkDebugMarkerSetObjectTagEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo)
     * }
     */
    public static MethodHandle vkDebugMarkerSetObjectTagEXT$handle() {
        return vkDebugMarkerSetObjectTagEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo)
     * }
     */
    public static int vkDebugMarkerSetObjectTagEXT(MemorySegment device, MemorySegment pTagInfo) {
        var mh$ = vkDebugMarkerSetObjectTagEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDebugMarkerSetObjectTagEXT", device, pTagInfo);
            }
            return (int)mh$.invokeExact(device, pTagInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDebugMarkerSetObjectNameEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDebugMarkerSetObjectNameEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT *pNameInfo)
     * }
     */
    public static FunctionDescriptor vkDebugMarkerSetObjectNameEXT$descriptor() {
        return vkDebugMarkerSetObjectNameEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT *pNameInfo)
     * }
     */
    public static MethodHandle vkDebugMarkerSetObjectNameEXT$handle() {
        return vkDebugMarkerSetObjectNameEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT *pNameInfo)
     * }
     */
    public static int vkDebugMarkerSetObjectNameEXT(MemorySegment device, MemorySegment pNameInfo) {
        var mh$ = vkDebugMarkerSetObjectNameEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDebugMarkerSetObjectNameEXT", device, pNameInfo);
            }
            return (int)mh$.invokeExact(device, pNameInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDebugMarkerBeginEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDebugMarkerBeginEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
     * }
     */
    public static FunctionDescriptor vkCmdDebugMarkerBeginEXT$descriptor() {
        return vkCmdDebugMarkerBeginEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
     * }
     */
    public static MethodHandle vkCmdDebugMarkerBeginEXT$handle() {
        return vkCmdDebugMarkerBeginEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
     * }
     */
    public static void vkCmdDebugMarkerBeginEXT(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdDebugMarkerBeginEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDebugMarkerBeginEXT", commandBuffer, pMarkerInfo);
            }
            mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDebugMarkerEndEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDebugMarkerEndEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkCmdDebugMarkerEndEXT$descriptor() {
        return vkCmdDebugMarkerEndEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkCmdDebugMarkerEndEXT$handle() {
        return vkCmdDebugMarkerEndEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static void vkCmdDebugMarkerEndEXT(MemorySegment commandBuffer) {
        var mh$ = vkCmdDebugMarkerEndEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDebugMarkerEndEXT", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDebugMarkerInsertEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDebugMarkerInsertEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
     * }
     */
    public static FunctionDescriptor vkCmdDebugMarkerInsertEXT$descriptor() {
        return vkCmdDebugMarkerInsertEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
     * }
     */
    public static MethodHandle vkCmdDebugMarkerInsertEXT$handle() {
        return vkCmdDebugMarkerInsertEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT *pMarkerInfo)
     * }
     */
    public static void vkCmdDebugMarkerInsertEXT(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdDebugMarkerInsertEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDebugMarkerInsertEXT", commandBuffer, pMarkerInfo);
            }
            mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineRasterizationStateStreamCreateFlagsEXT
     * }
     */
    public static final OfInt VkPipelineRasterizationStateStreamCreateFlagsEXT = vulkan_h.C_INT;

    private static class vkCmdBindTransformFeedbackBuffersEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindTransformFeedbackBuffersEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes)
     * }
     */
    public static FunctionDescriptor vkCmdBindTransformFeedbackBuffersEXT$descriptor() {
        return vkCmdBindTransformFeedbackBuffersEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes)
     * }
     */
    public static MethodHandle vkCmdBindTransformFeedbackBuffersEXT$handle() {
        return vkCmdBindTransformFeedbackBuffersEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes)
     * }
     */
    public static void vkCmdBindTransformFeedbackBuffersEXT(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets, MemorySegment pSizes) {
        var mh$ = vkCmdBindTransformFeedbackBuffersEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindTransformFeedbackBuffersEXT", commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
            }
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginTransformFeedbackEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginTransformFeedbackEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
     * }
     */
    public static FunctionDescriptor vkCmdBeginTransformFeedbackEXT$descriptor() {
        return vkCmdBeginTransformFeedbackEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
     * }
     */
    public static MethodHandle vkCmdBeginTransformFeedbackEXT$handle() {
        return vkCmdBeginTransformFeedbackEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
     * }
     */
    public static void vkCmdBeginTransformFeedbackEXT(MemorySegment commandBuffer, int firstCounterBuffer, int counterBufferCount, MemorySegment pCounterBuffers, MemorySegment pCounterBufferOffsets) {
        var mh$ = vkCmdBeginTransformFeedbackEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginTransformFeedbackEXT", commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
            }
            mh$.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndTransformFeedbackEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndTransformFeedbackEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
     * }
     */
    public static FunctionDescriptor vkCmdEndTransformFeedbackEXT$descriptor() {
        return vkCmdEndTransformFeedbackEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
     * }
     */
    public static MethodHandle vkCmdEndTransformFeedbackEXT$handle() {
        return vkCmdEndTransformFeedbackEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer *pCounterBuffers, const VkDeviceSize *pCounterBufferOffsets)
     * }
     */
    public static void vkCmdEndTransformFeedbackEXT(MemorySegment commandBuffer, int firstCounterBuffer, int counterBufferCount, MemorySegment pCounterBuffers, MemorySegment pCounterBufferOffsets) {
        var mh$ = vkCmdEndTransformFeedbackEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndTransformFeedbackEXT", commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
            }
            mh$.invokeExact(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginQueryIndexedEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginQueryIndexedEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)
     * }
     */
    public static FunctionDescriptor vkCmdBeginQueryIndexedEXT$descriptor() {
        return vkCmdBeginQueryIndexedEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)
     * }
     */
    public static MethodHandle vkCmdBeginQueryIndexedEXT$handle() {
        return vkCmdBeginQueryIndexedEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index)
     * }
     */
    public static void vkCmdBeginQueryIndexedEXT(MemorySegment commandBuffer, MemorySegment queryPool, int query, int flags, int index) {
        var mh$ = vkCmdBeginQueryIndexedEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginQueryIndexedEXT", commandBuffer, queryPool, query, flags, index);
            }
            mh$.invokeExact(commandBuffer, queryPool, query, flags, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndQueryIndexedEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndQueryIndexedEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)
     * }
     */
    public static FunctionDescriptor vkCmdEndQueryIndexedEXT$descriptor() {
        return vkCmdEndQueryIndexedEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)
     * }
     */
    public static MethodHandle vkCmdEndQueryIndexedEXT$handle() {
        return vkCmdEndQueryIndexedEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index)
     * }
     */
    public static void vkCmdEndQueryIndexedEXT(MemorySegment commandBuffer, MemorySegment queryPool, int query, int index) {
        var mh$ = vkCmdEndQueryIndexedEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndQueryIndexedEXT", commandBuffer, queryPool, query, index);
            }
            mh$.invokeExact(commandBuffer, queryPool, query, index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndirectByteCountEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndirectByteCountEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndirectByteCountEXT$descriptor() {
        return vkCmdDrawIndirectByteCountEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)
     * }
     */
    public static MethodHandle vkCmdDrawIndirectByteCountEXT$handle() {
        return vkCmdDrawIndirectByteCountEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride)
     * }
     */
    public static void vkCmdDrawIndirectByteCountEXT(MemorySegment commandBuffer, int instanceCount, int firstInstance, MemorySegment counterBuffer, long counterBufferOffset, int counterOffset, int vertexStride) {
        var mh$ = vkCmdDrawIndirectByteCountEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndirectByteCountEXT", commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
            }
            mh$.invokeExact(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkCuModuleNVX_T *VkCuModuleNVX
     * }
     */
    public static final AddressLayout VkCuModuleNVX = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct VkCuFunctionNVX_T *VkCuFunctionNVX
     * }
     */
    public static final AddressLayout VkCuFunctionNVX = vulkan_h.C_POINTER;

    private static class vkCreateCuModuleNVX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateCuModuleNVX"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCuModuleNVX *pModule)
     * }
     */
    public static FunctionDescriptor vkCreateCuModuleNVX$descriptor() {
        return vkCreateCuModuleNVX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCuModuleNVX *pModule)
     * }
     */
    public static MethodHandle vkCreateCuModuleNVX$handle() {
        return vkCreateCuModuleNVX.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCuModuleNVX *pModule)
     * }
     */
    public static int vkCreateCuModuleNVX(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pModule) {
        var mh$ = vkCreateCuModuleNVX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateCuModuleNVX", device, pCreateInfo, pAllocator, pModule);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pModule);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateCuFunctionNVX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateCuFunctionNVX"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCuFunctionNVX *pFunction)
     * }
     */
    public static FunctionDescriptor vkCreateCuFunctionNVX$descriptor() {
        return vkCreateCuFunctionNVX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCuFunctionNVX *pFunction)
     * }
     */
    public static MethodHandle vkCreateCuFunctionNVX$handle() {
        return vkCreateCuFunctionNVX.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCuFunctionNVX *pFunction)
     * }
     */
    public static int vkCreateCuFunctionNVX(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pFunction) {
        var mh$ = vkCreateCuFunctionNVX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateCuFunctionNVX", device, pCreateInfo, pAllocator, pFunction);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyCuModuleNVX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyCuModuleNVX"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyCuModuleNVX$descriptor() {
        return vkDestroyCuModuleNVX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyCuModuleNVX$handle() {
        return vkDestroyCuModuleNVX.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyCuModuleNVX(MemorySegment device, MemorySegment module, MemorySegment pAllocator) {
        var mh$ = vkDestroyCuModuleNVX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyCuModuleNVX", device, module, pAllocator);
            }
            mh$.invokeExact(device, module, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyCuFunctionNVX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyCuFunctionNVX"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyCuFunctionNVX$descriptor() {
        return vkDestroyCuFunctionNVX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyCuFunctionNVX$handle() {
        return vkDestroyCuFunctionNVX.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyCuFunctionNVX(MemorySegment device, MemorySegment function, MemorySegment pAllocator) {
        var mh$ = vkDestroyCuFunctionNVX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyCuFunctionNVX", device, function, pAllocator);
            }
            mh$.invokeExact(device, function, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCuLaunchKernelNVX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCuLaunchKernelNVX"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX *pLaunchInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCuLaunchKernelNVX$descriptor() {
        return vkCmdCuLaunchKernelNVX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX *pLaunchInfo)
     * }
     */
    public static MethodHandle vkCmdCuLaunchKernelNVX$handle() {
        return vkCmdCuLaunchKernelNVX.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX *pLaunchInfo)
     * }
     */
    public static void vkCmdCuLaunchKernelNVX(MemorySegment commandBuffer, MemorySegment pLaunchInfo) {
        var mh$ = vkCmdCuLaunchKernelNVX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCuLaunchKernelNVX", commandBuffer, pLaunchInfo);
            }
            mh$.invokeExact(commandBuffer, pLaunchInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageViewHandleNVX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageViewHandleNVX"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint32_t vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetImageViewHandleNVX$descriptor() {
        return vkGetImageViewHandleNVX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint32_t vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX *pInfo)
     * }
     */
    public static MethodHandle vkGetImageViewHandleNVX$handle() {
        return vkGetImageViewHandleNVX.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint32_t vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX *pInfo)
     * }
     */
    public static int vkGetImageViewHandleNVX(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetImageViewHandleNVX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageViewHandleNVX", device, pInfo);
            }
            return (int)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageViewAddressNVX {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageViewAddressNVX"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetImageViewAddressNVX$descriptor() {
        return vkGetImageViewAddressNVX.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX *pProperties)
     * }
     */
    public static MethodHandle vkGetImageViewAddressNVX$handle() {
        return vkGetImageViewAddressNVX.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX *pProperties)
     * }
     */
    public static int vkGetImageViewAddressNVX(MemorySegment device, MemorySegment imageView, MemorySegment pProperties) {
        var mh$ = vkGetImageViewAddressNVX.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageViewAddressNVX", device, imageView, pProperties);
            }
            return (int)mh$.invokeExact(device, imageView, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndirectCountAMD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndirectCountAMD"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndirectCountAMD$descriptor() {
        return vkCmdDrawIndirectCountAMD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndirectCountAMD$handle() {
        return vkCmdDrawIndirectCountAMD.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndirectCountAMD(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndirectCountAMD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndirectCountAMD", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndexedIndirectCountAMD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndexedIndirectCountAMD"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndexedIndirectCountAMD$descriptor() {
        return vkCmdDrawIndexedIndirectCountAMD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndexedIndirectCountAMD$handle() {
        return vkCmdDrawIndexedIndirectCountAMD.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndexedIndirectCountAMD(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirectCountAMD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndexedIndirectCountAMD", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_SHADER_INFO_TYPE_STATISTICS_AMD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0
     * }
     */
    public static int VK_SHADER_INFO_TYPE_STATISTICS_AMD() {
        return VK_SHADER_INFO_TYPE_STATISTICS_AMD;
    }
    private static final int VK_SHADER_INFO_TYPE_BINARY_AMD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_BINARY_AMD = 1
     * }
     */
    public static int VK_SHADER_INFO_TYPE_BINARY_AMD() {
        return VK_SHADER_INFO_TYPE_BINARY_AMD;
    }
    private static final int VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
     * }
     */
    public static int VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD() {
        return VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD;
    }
    private static final int VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkShaderInfoTypeAMD.VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 2147483647
     * }
     */
    public static int VK_SHADER_INFO_TYPE_MAX_ENUM_AMD() {
        return VK_SHADER_INFO_TYPE_MAX_ENUM_AMD;
    }

    private static class vkGetShaderInfoAMD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetShaderInfoAMD"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t *pInfoSize, void *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetShaderInfoAMD$descriptor() {
        return vkGetShaderInfoAMD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t *pInfoSize, void *pInfo)
     * }
     */
    public static MethodHandle vkGetShaderInfoAMD$handle() {
        return vkGetShaderInfoAMD.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t *pInfoSize, void *pInfo)
     * }
     */
    public static int vkGetShaderInfoAMD(MemorySegment device, MemorySegment pipeline, int shaderStage, int infoType, MemorySegment pInfoSize, MemorySegment pInfo) {
        var mh$ = vkGetShaderInfoAMD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetShaderInfoAMD", device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
            }
            return (int)mh$.invokeExact(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 1
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 2
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 4
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 8
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBitsNV.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalMemoryHandleTypeFlagsNV
     * }
     */
    public static final OfInt VkExternalMemoryHandleTypeFlagsNV = vulkan_h.C_INT;
    private static final int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 1
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV() {
        return VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 2
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV() {
        return VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 4
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV() {
        return VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBitsNV.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV() {
        return VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalMemoryFeatureFlagsNV
     * }
     */
    public static final OfInt VkExternalMemoryFeatureFlagsNV = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceExternalImageFormatPropertiesNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceExternalImageFormatPropertiesNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV *pExternalImageFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceExternalImageFormatPropertiesNV$descriptor() {
        return vkGetPhysicalDeviceExternalImageFormatPropertiesNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV *pExternalImageFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceExternalImageFormatPropertiesNV$handle() {
        return vkGetPhysicalDeviceExternalImageFormatPropertiesNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV *pExternalImageFormatProperties)
     * }
     */
    public static int vkGetPhysicalDeviceExternalImageFormatPropertiesNV(MemorySegment physicalDevice, int format, int type, int tiling, int usage, int flags, int externalHandleType, MemorySegment pExternalImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceExternalImageFormatPropertiesNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceExternalImageFormatPropertiesNV", physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_VALIDATION_CHECK_ALL_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkValidationCheckEXT.VK_VALIDATION_CHECK_ALL_EXT = 0
     * }
     */
    public static int VK_VALIDATION_CHECK_ALL_EXT() {
        return VK_VALIDATION_CHECK_ALL_EXT;
    }
    private static final int VK_VALIDATION_CHECK_SHADERS_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkValidationCheckEXT.VK_VALIDATION_CHECK_SHADERS_EXT = 1
     * }
     */
    public static int VK_VALIDATION_CHECK_SHADERS_EXT() {
        return VK_VALIDATION_CHECK_SHADERS_EXT;
    }
    private static final int VK_VALIDATION_CHECK_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkValidationCheckEXT.VK_VALIDATION_CHECK_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_VALIDATION_CHECK_MAX_ENUM_EXT() {
        return VK_VALIDATION_CHECK_MAX_ENUM_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT() {
        return VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT() {
        return VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT() {
        return VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT() {
        return VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessBufferBehaviorEXT.VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT() {
        return VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT() {
        return VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT() {
        return VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT() {
        return VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT() {
        return VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT;
    }
    private static final int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineRobustnessImageBehaviorEXT.VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT() {
        return VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT;
    }
    private static final int VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 1
     * }
     */
    public static int VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT() {
        return VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT;
    }
    private static final int VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkConditionalRenderingFlagBitsEXT.VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkConditionalRenderingFlagsEXT
     * }
     */
    public static final OfInt VkConditionalRenderingFlagsEXT = vulkan_h.C_INT;

    private static class vkCmdBeginConditionalRenderingEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginConditionalRenderingEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT *pConditionalRenderingBegin)
     * }
     */
    public static FunctionDescriptor vkCmdBeginConditionalRenderingEXT$descriptor() {
        return vkCmdBeginConditionalRenderingEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT *pConditionalRenderingBegin)
     * }
     */
    public static MethodHandle vkCmdBeginConditionalRenderingEXT$handle() {
        return vkCmdBeginConditionalRenderingEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT *pConditionalRenderingBegin)
     * }
     */
    public static void vkCmdBeginConditionalRenderingEXT(MemorySegment commandBuffer, MemorySegment pConditionalRenderingBegin) {
        var mh$ = vkCmdBeginConditionalRenderingEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginConditionalRenderingEXT", commandBuffer, pConditionalRenderingBegin);
            }
            mh$.invokeExact(commandBuffer, pConditionalRenderingBegin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndConditionalRenderingEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndConditionalRenderingEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkCmdEndConditionalRenderingEXT$descriptor() {
        return vkCmdEndConditionalRenderingEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkCmdEndConditionalRenderingEXT$handle() {
        return vkCmdEndConditionalRenderingEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static void vkCmdEndConditionalRenderingEXT(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndConditionalRenderingEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndConditionalRenderingEXT", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetViewportWScalingNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetViewportWScalingNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV *pViewportWScalings)
     * }
     */
    public static FunctionDescriptor vkCmdSetViewportWScalingNV$descriptor() {
        return vkCmdSetViewportWScalingNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV *pViewportWScalings)
     * }
     */
    public static MethodHandle vkCmdSetViewportWScalingNV$handle() {
        return vkCmdSetViewportWScalingNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV *pViewportWScalings)
     * }
     */
    public static void vkCmdSetViewportWScalingNV(MemorySegment commandBuffer, int firstViewport, int viewportCount, MemorySegment pViewportWScalings) {
        var mh$ = vkCmdSetViewportWScalingNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetViewportWScalingNV", commandBuffer, firstViewport, viewportCount, pViewportWScalings);
            }
            mh$.invokeExact(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkReleaseDisplayEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkReleaseDisplayEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
     * }
     */
    public static FunctionDescriptor vkReleaseDisplayEXT$descriptor() {
        return vkReleaseDisplayEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
     * }
     */
    public static MethodHandle vkReleaseDisplayEXT$handle() {
        return vkReleaseDisplayEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
     * }
     */
    public static int vkReleaseDisplayEXT(MemorySegment physicalDevice, MemorySegment display) {
        var mh$ = vkReleaseDisplayEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkReleaseDisplayEXT", physicalDevice, display);
            }
            return (int)mh$.invokeExact(physicalDevice, display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_SURFACE_COUNTER_VBLANK_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 1
     * }
     */
    public static int VK_SURFACE_COUNTER_VBLANK_BIT_EXT() {
        return VK_SURFACE_COUNTER_VBLANK_BIT_EXT;
    }
    private static final int VK_SURFACE_COUNTER_VBLANK_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_VBLANK_EXT = 1
     * }
     */
    public static int VK_SURFACE_COUNTER_VBLANK_EXT() {
        return VK_SURFACE_COUNTER_VBLANK_EXT;
    }
    private static final int VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceCounterFlagBitsEXT.VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSurfaceCounterFlagsEXT
     * }
     */
    public static final OfInt VkSurfaceCounterFlagsEXT = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceSurfaceCapabilities2EXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSurfaceCapabilities2EXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT *pSurfaceCapabilities)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSurfaceCapabilities2EXT$descriptor() {
        return vkGetPhysicalDeviceSurfaceCapabilities2EXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT *pSurfaceCapabilities)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSurfaceCapabilities2EXT$handle() {
        return vkGetPhysicalDeviceSurfaceCapabilities2EXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT *pSurfaceCapabilities)
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceCapabilities2EXT(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pSurfaceCapabilities) {
        var mh$ = vkGetPhysicalDeviceSurfaceCapabilities2EXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSurfaceCapabilities2EXT", physicalDevice, surface, pSurfaceCapabilities);
            }
            return (int)mh$.invokeExact(physicalDevice, surface, pSurfaceCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_DISPLAY_POWER_STATE_OFF_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_OFF_EXT = 0
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_OFF_EXT() {
        return VK_DISPLAY_POWER_STATE_OFF_EXT;
    }
    private static final int VK_DISPLAY_POWER_STATE_SUSPEND_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_SUSPEND_EXT() {
        return VK_DISPLAY_POWER_STATE_SUSPEND_EXT;
    }
    private static final int VK_DISPLAY_POWER_STATE_ON_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_ON_EXT = 2
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_ON_EXT() {
        return VK_DISPLAY_POWER_STATE_ON_EXT;
    }
    private static final int VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPowerStateEXT.VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT() {
        return VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT;
    }
    private static final int VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
     * }
     */
    public static int VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT() {
        return VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT;
    }
    private static final int VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceEventTypeEXT.VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT() {
        return VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT;
    }
    private static final int VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
     * }
     */
    public static int VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT() {
        return VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT;
    }
    private static final int VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayEventTypeEXT.VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT() {
        return VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT;
    }

    private static class vkDisplayPowerControlEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDisplayPowerControlEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT *pDisplayPowerInfo)
     * }
     */
    public static FunctionDescriptor vkDisplayPowerControlEXT$descriptor() {
        return vkDisplayPowerControlEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT *pDisplayPowerInfo)
     * }
     */
    public static MethodHandle vkDisplayPowerControlEXT$handle() {
        return vkDisplayPowerControlEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT *pDisplayPowerInfo)
     * }
     */
    public static int vkDisplayPowerControlEXT(MemorySegment device, MemorySegment display, MemorySegment pDisplayPowerInfo) {
        var mh$ = vkDisplayPowerControlEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDisplayPowerControlEXT", device, display, pDisplayPowerInfo);
            }
            return (int)mh$.invokeExact(device, display, pDisplayPowerInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkRegisterDeviceEventEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkRegisterDeviceEventEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT *pDeviceEventInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static FunctionDescriptor vkRegisterDeviceEventEXT$descriptor() {
        return vkRegisterDeviceEventEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT *pDeviceEventInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static MethodHandle vkRegisterDeviceEventEXT$handle() {
        return vkRegisterDeviceEventEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT *pDeviceEventInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static int vkRegisterDeviceEventEXT(MemorySegment device, MemorySegment pDeviceEventInfo, MemorySegment pAllocator, MemorySegment pFence) {
        var mh$ = vkRegisterDeviceEventEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkRegisterDeviceEventEXT", device, pDeviceEventInfo, pAllocator, pFence);
            }
            return (int)mh$.invokeExact(device, pDeviceEventInfo, pAllocator, pFence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkRegisterDisplayEventEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkRegisterDisplayEventEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT *pDisplayEventInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static FunctionDescriptor vkRegisterDisplayEventEXT$descriptor() {
        return vkRegisterDisplayEventEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT *pDisplayEventInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static MethodHandle vkRegisterDisplayEventEXT$handle() {
        return vkRegisterDisplayEventEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT *pDisplayEventInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static int vkRegisterDisplayEventEXT(MemorySegment device, MemorySegment display, MemorySegment pDisplayEventInfo, MemorySegment pAllocator, MemorySegment pFence) {
        var mh$ = vkRegisterDisplayEventEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkRegisterDisplayEventEXT", device, display, pDisplayEventInfo, pAllocator, pFence);
            }
            return (int)mh$.invokeExact(device, display, pDisplayEventInfo, pAllocator, pFence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetSwapchainCounterEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetSwapchainCounterEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t *pCounterValue)
     * }
     */
    public static FunctionDescriptor vkGetSwapchainCounterEXT$descriptor() {
        return vkGetSwapchainCounterEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t *pCounterValue)
     * }
     */
    public static MethodHandle vkGetSwapchainCounterEXT$handle() {
        return vkGetSwapchainCounterEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t *pCounterValue)
     * }
     */
    public static int vkGetSwapchainCounterEXT(MemorySegment device, MemorySegment swapchain, int counter, MemorySegment pCounterValue) {
        var mh$ = vkGetSwapchainCounterEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetSwapchainCounterEXT", device, swapchain, counter, pCounterValue);
            }
            return (int)mh$.invokeExact(device, swapchain, counter, pCounterValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetRefreshCycleDurationGOOGLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetRefreshCycleDurationGOOGLE"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE *pDisplayTimingProperties)
     * }
     */
    public static FunctionDescriptor vkGetRefreshCycleDurationGOOGLE$descriptor() {
        return vkGetRefreshCycleDurationGOOGLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE *pDisplayTimingProperties)
     * }
     */
    public static MethodHandle vkGetRefreshCycleDurationGOOGLE$handle() {
        return vkGetRefreshCycleDurationGOOGLE.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE *pDisplayTimingProperties)
     * }
     */
    public static int vkGetRefreshCycleDurationGOOGLE(MemorySegment device, MemorySegment swapchain, MemorySegment pDisplayTimingProperties) {
        var mh$ = vkGetRefreshCycleDurationGOOGLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetRefreshCycleDurationGOOGLE", device, swapchain, pDisplayTimingProperties);
            }
            return (int)mh$.invokeExact(device, swapchain, pDisplayTimingProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPastPresentationTimingGOOGLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPastPresentationTimingGOOGLE"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pPresentationTimingCount, VkPastPresentationTimingGOOGLE *pPresentationTimings)
     * }
     */
    public static FunctionDescriptor vkGetPastPresentationTimingGOOGLE$descriptor() {
        return vkGetPastPresentationTimingGOOGLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pPresentationTimingCount, VkPastPresentationTimingGOOGLE *pPresentationTimings)
     * }
     */
    public static MethodHandle vkGetPastPresentationTimingGOOGLE$handle() {
        return vkGetPastPresentationTimingGOOGLE.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pPresentationTimingCount, VkPastPresentationTimingGOOGLE *pPresentationTimings)
     * }
     */
    public static int vkGetPastPresentationTimingGOOGLE(MemorySegment device, MemorySegment swapchain, MemorySegment pPresentationTimingCount, MemorySegment pPresentationTimings) {
        var mh$ = vkGetPastPresentationTimingGOOGLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPastPresentationTimingGOOGLE", device, swapchain, pPresentationTimingCount, pPresentationTimings);
            }
            return (int)mh$.invokeExact(device, swapchain, pPresentationTimingCount, pPresentationTimings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV;
    }
    private static final int VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkViewportCoordinateSwizzleNV.VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV() {
        return VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineViewportSwizzleStateCreateFlagsNV
     * }
     */
    public static final OfInt VkPipelineViewportSwizzleStateCreateFlagsNV = vulkan_h.C_INT;
    private static final int VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0
     * }
     */
    public static int VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT() {
        return VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT;
    }
    private static final int VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
     * }
     */
    public static int VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT() {
        return VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT;
    }
    private static final int VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDiscardRectangleModeEXT.VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT() {
        return VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineDiscardRectangleStateCreateFlagsEXT
     * }
     */
    public static final OfInt VkPipelineDiscardRectangleStateCreateFlagsEXT = vulkan_h.C_INT;

    private static class vkCmdSetDiscardRectangleEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDiscardRectangleEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D *pDiscardRectangles)
     * }
     */
    public static FunctionDescriptor vkCmdSetDiscardRectangleEXT$descriptor() {
        return vkCmdSetDiscardRectangleEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D *pDiscardRectangles)
     * }
     */
    public static MethodHandle vkCmdSetDiscardRectangleEXT$handle() {
        return vkCmdSetDiscardRectangleEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D *pDiscardRectangles)
     * }
     */
    public static void vkCmdSetDiscardRectangleEXT(MemorySegment commandBuffer, int firstDiscardRectangle, int discardRectangleCount, MemorySegment pDiscardRectangles) {
        var mh$ = vkCmdSetDiscardRectangleEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDiscardRectangleEXT", commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
            }
            mh$.invokeExact(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDiscardRectangleEnableEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDiscardRectangleEnableEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDiscardRectangleEnableEXT$descriptor() {
        return vkCmdSetDiscardRectangleEnableEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)
     * }
     */
    public static MethodHandle vkCmdSetDiscardRectangleEnableEXT$handle() {
        return vkCmdSetDiscardRectangleEnableEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable)
     * }
     */
    public static void vkCmdSetDiscardRectangleEnableEXT(MemorySegment commandBuffer, int discardRectangleEnable) {
        var mh$ = vkCmdSetDiscardRectangleEnableEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDiscardRectangleEnableEXT", commandBuffer, discardRectangleEnable);
            }
            mh$.invokeExact(commandBuffer, discardRectangleEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDiscardRectangleModeEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDiscardRectangleModeEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)
     * }
     */
    public static FunctionDescriptor vkCmdSetDiscardRectangleModeEXT$descriptor() {
        return vkCmdSetDiscardRectangleModeEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)
     * }
     */
    public static MethodHandle vkCmdSetDiscardRectangleModeEXT$handle() {
        return vkCmdSetDiscardRectangleModeEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode)
     * }
     */
    public static void vkCmdSetDiscardRectangleModeEXT(MemorySegment commandBuffer, int discardRectangleMode) {
        var mh$ = vkCmdSetDiscardRectangleModeEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDiscardRectangleModeEXT", commandBuffer, discardRectangleMode);
            }
            mh$.invokeExact(commandBuffer, discardRectangleMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT() {
        return VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT;
    }
    private static final int VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT() {
        return VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT;
    }
    private static final int VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT() {
        return VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT;
    }
    private static final int VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkConservativeRasterizationModeEXT.VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT() {
        return VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineRasterizationConservativeStateCreateFlagsEXT
     * }
     */
    public static final OfInt VkPipelineRasterizationConservativeStateCreateFlagsEXT = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineRasterizationDepthClipStateCreateFlagsEXT
     * }
     */
    public static final OfInt VkPipelineRasterizationDepthClipStateCreateFlagsEXT = vulkan_h.C_INT;

    private static class vkSetHdrMetadataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSetHdrMetadataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR *pSwapchains, const VkHdrMetadataEXT *pMetadata)
     * }
     */
    public static FunctionDescriptor vkSetHdrMetadataEXT$descriptor() {
        return vkSetHdrMetadataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR *pSwapchains, const VkHdrMetadataEXT *pMetadata)
     * }
     */
    public static MethodHandle vkSetHdrMetadataEXT$handle() {
        return vkSetHdrMetadataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR *pSwapchains, const VkHdrMetadataEXT *pMetadata)
     * }
     */
    public static void vkSetHdrMetadataEXT(MemorySegment device, int swapchainCount, MemorySegment pSwapchains, MemorySegment pMetadata) {
        var mh$ = vkSetHdrMetadataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSetHdrMetadataEXT", device, swapchainCount, pSwapchains, pMetadata);
            }
            mh$.invokeExact(device, swapchainCount, pSwapchains, pMetadata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkDebugUtilsMessengerEXT_T *VkDebugUtilsMessengerEXT
     * }
     */
    public static final AddressLayout VkDebugUtilsMessengerEXT = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDebugUtilsMessengerCallbackDataFlagsEXT
     * }
     */
    public static final OfInt VkDebugUtilsMessengerCallbackDataFlagsEXT = vulkan_h.C_INT;
    private static final int VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 1
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 16
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 256
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 4096
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageSeverityFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 1
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 2
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 4
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT = 8
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_TYPE_DEVICE_ADDRESS_BINDING_BIT_EXT;
    }
    private static final int VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDebugUtilsMessageTypeFlagBitsEXT.VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDebugUtilsMessageTypeFlagsEXT
     * }
     */
    public static final OfInt VkDebugUtilsMessageTypeFlagsEXT = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDebugUtilsMessageSeverityFlagsEXT
     * }
     */
    public static final OfInt VkDebugUtilsMessageSeverityFlagsEXT = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDebugUtilsMessengerCreateFlagsEXT
     * }
     */
    public static final OfInt VkDebugUtilsMessengerCreateFlagsEXT = vulkan_h.C_INT;

    private static class vkSetDebugUtilsObjectNameEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSetDebugUtilsObjectNameEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT *pNameInfo)
     * }
     */
    public static FunctionDescriptor vkSetDebugUtilsObjectNameEXT$descriptor() {
        return vkSetDebugUtilsObjectNameEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT *pNameInfo)
     * }
     */
    public static MethodHandle vkSetDebugUtilsObjectNameEXT$handle() {
        return vkSetDebugUtilsObjectNameEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT *pNameInfo)
     * }
     */
    public static int vkSetDebugUtilsObjectNameEXT(MemorySegment device, MemorySegment pNameInfo) {
        var mh$ = vkSetDebugUtilsObjectNameEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSetDebugUtilsObjectNameEXT", device, pNameInfo);
            }
            return (int)mh$.invokeExact(device, pNameInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSetDebugUtilsObjectTagEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSetDebugUtilsObjectTagEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo)
     * }
     */
    public static FunctionDescriptor vkSetDebugUtilsObjectTagEXT$descriptor() {
        return vkSetDebugUtilsObjectTagEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo)
     * }
     */
    public static MethodHandle vkSetDebugUtilsObjectTagEXT$handle() {
        return vkSetDebugUtilsObjectTagEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT *pTagInfo)
     * }
     */
    public static int vkSetDebugUtilsObjectTagEXT(MemorySegment device, MemorySegment pTagInfo) {
        var mh$ = vkSetDebugUtilsObjectTagEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSetDebugUtilsObjectTagEXT", device, pTagInfo);
            }
            return (int)mh$.invokeExact(device, pTagInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueBeginDebugUtilsLabelEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueBeginDebugUtilsLabelEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static FunctionDescriptor vkQueueBeginDebugUtilsLabelEXT$descriptor() {
        return vkQueueBeginDebugUtilsLabelEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static MethodHandle vkQueueBeginDebugUtilsLabelEXT$handle() {
        return vkQueueBeginDebugUtilsLabelEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static void vkQueueBeginDebugUtilsLabelEXT(MemorySegment queue, MemorySegment pLabelInfo) {
        var mh$ = vkQueueBeginDebugUtilsLabelEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueBeginDebugUtilsLabelEXT", queue, pLabelInfo);
            }
            mh$.invokeExact(queue, pLabelInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueEndDebugUtilsLabelEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueEndDebugUtilsLabelEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)
     * }
     */
    public static FunctionDescriptor vkQueueEndDebugUtilsLabelEXT$descriptor() {
        return vkQueueEndDebugUtilsLabelEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)
     * }
     */
    public static MethodHandle vkQueueEndDebugUtilsLabelEXT$handle() {
        return vkQueueEndDebugUtilsLabelEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)
     * }
     */
    public static void vkQueueEndDebugUtilsLabelEXT(MemorySegment queue) {
        var mh$ = vkQueueEndDebugUtilsLabelEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueEndDebugUtilsLabelEXT", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueInsertDebugUtilsLabelEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueInsertDebugUtilsLabelEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static FunctionDescriptor vkQueueInsertDebugUtilsLabelEXT$descriptor() {
        return vkQueueInsertDebugUtilsLabelEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static MethodHandle vkQueueInsertDebugUtilsLabelEXT$handle() {
        return vkQueueInsertDebugUtilsLabelEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static void vkQueueInsertDebugUtilsLabelEXT(MemorySegment queue, MemorySegment pLabelInfo) {
        var mh$ = vkQueueInsertDebugUtilsLabelEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueInsertDebugUtilsLabelEXT", queue, pLabelInfo);
            }
            mh$.invokeExact(queue, pLabelInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginDebugUtilsLabelEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginDebugUtilsLabelEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBeginDebugUtilsLabelEXT$descriptor() {
        return vkCmdBeginDebugUtilsLabelEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static MethodHandle vkCmdBeginDebugUtilsLabelEXT$handle() {
        return vkCmdBeginDebugUtilsLabelEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static void vkCmdBeginDebugUtilsLabelEXT(MemorySegment commandBuffer, MemorySegment pLabelInfo) {
        var mh$ = vkCmdBeginDebugUtilsLabelEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginDebugUtilsLabelEXT", commandBuffer, pLabelInfo);
            }
            mh$.invokeExact(commandBuffer, pLabelInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndDebugUtilsLabelEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndDebugUtilsLabelEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkCmdEndDebugUtilsLabelEXT$descriptor() {
        return vkCmdEndDebugUtilsLabelEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkCmdEndDebugUtilsLabelEXT$handle() {
        return vkCmdEndDebugUtilsLabelEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
     * }
     */
    public static void vkCmdEndDebugUtilsLabelEXT(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndDebugUtilsLabelEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndDebugUtilsLabelEXT", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdInsertDebugUtilsLabelEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdInsertDebugUtilsLabelEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static FunctionDescriptor vkCmdInsertDebugUtilsLabelEXT$descriptor() {
        return vkCmdInsertDebugUtilsLabelEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static MethodHandle vkCmdInsertDebugUtilsLabelEXT$handle() {
        return vkCmdInsertDebugUtilsLabelEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT *pLabelInfo)
     * }
     */
    public static void vkCmdInsertDebugUtilsLabelEXT(MemorySegment commandBuffer, MemorySegment pLabelInfo) {
        var mh$ = vkCmdInsertDebugUtilsLabelEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdInsertDebugUtilsLabelEXT", commandBuffer, pLabelInfo);
            }
            mh$.invokeExact(commandBuffer, pLabelInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateDebugUtilsMessengerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDebugUtilsMessengerEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDebugUtilsMessengerEXT *pMessenger)
     * }
     */
    public static FunctionDescriptor vkCreateDebugUtilsMessengerEXT$descriptor() {
        return vkCreateDebugUtilsMessengerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDebugUtilsMessengerEXT *pMessenger)
     * }
     */
    public static MethodHandle vkCreateDebugUtilsMessengerEXT$handle() {
        return vkCreateDebugUtilsMessengerEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDebugUtilsMessengerEXT *pMessenger)
     * }
     */
    public static int vkCreateDebugUtilsMessengerEXT(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pMessenger) {
        var mh$ = vkCreateDebugUtilsMessengerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDebugUtilsMessengerEXT", instance, pCreateInfo, pAllocator, pMessenger);
            }
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pMessenger);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDebugUtilsMessengerEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDebugUtilsMessengerEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDebugUtilsMessengerEXT$descriptor() {
        return vkDestroyDebugUtilsMessengerEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDebugUtilsMessengerEXT$handle() {
        return vkDestroyDebugUtilsMessengerEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDebugUtilsMessengerEXT(MemorySegment instance, MemorySegment messenger, MemorySegment pAllocator) {
        var mh$ = vkDestroyDebugUtilsMessengerEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDebugUtilsMessengerEXT", instance, messenger, pAllocator);
            }
            mh$.invokeExact(instance, messenger, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSubmitDebugUtilsMessageEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSubmitDebugUtilsMessageEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData)
     * }
     */
    public static FunctionDescriptor vkSubmitDebugUtilsMessageEXT$descriptor() {
        return vkSubmitDebugUtilsMessageEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData)
     * }
     */
    public static MethodHandle vkSubmitDebugUtilsMessageEXT$handle() {
        return vkSubmitDebugUtilsMessageEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT *pCallbackData)
     * }
     */
    public static void vkSubmitDebugUtilsMessageEXT(MemorySegment instance, int messageSeverity, int messageTypes, MemorySegment pCallbackData) {
        var mh$ = vkSubmitDebugUtilsMessageEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSubmitDebugUtilsMessageEXT", instance, messageSeverity, messageTypes, pCallbackData);
            }
            mh$.invokeExact(instance, messageSeverity, messageTypes, pCallbackData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetSampleLocationsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetSampleLocationsEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT *pSampleLocationsInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetSampleLocationsEXT$descriptor() {
        return vkCmdSetSampleLocationsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT *pSampleLocationsInfo)
     * }
     */
    public static MethodHandle vkCmdSetSampleLocationsEXT$handle() {
        return vkCmdSetSampleLocationsEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT *pSampleLocationsInfo)
     * }
     */
    public static void vkCmdSetSampleLocationsEXT(MemorySegment commandBuffer, MemorySegment pSampleLocationsInfo) {
        var mh$ = vkCmdSetSampleLocationsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetSampleLocationsEXT", commandBuffer, pSampleLocationsInfo);
            }
            mh$.invokeExact(commandBuffer, pSampleLocationsInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceMultisamplePropertiesEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceMultisamplePropertiesEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT *pMultisampleProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceMultisamplePropertiesEXT$descriptor() {
        return vkGetPhysicalDeviceMultisamplePropertiesEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT *pMultisampleProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceMultisamplePropertiesEXT$handle() {
        return vkGetPhysicalDeviceMultisamplePropertiesEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT *pMultisampleProperties)
     * }
     */
    public static void vkGetPhysicalDeviceMultisamplePropertiesEXT(MemorySegment physicalDevice, int samples, MemorySegment pMultisampleProperties) {
        var mh$ = vkGetPhysicalDeviceMultisamplePropertiesEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceMultisamplePropertiesEXT", physicalDevice, samples, pMultisampleProperties);
            }
            mh$.invokeExact(physicalDevice, samples, pMultisampleProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_BLEND_OVERLAP_UNCORRELATED_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0
     * }
     */
    public static int VK_BLEND_OVERLAP_UNCORRELATED_EXT() {
        return VK_BLEND_OVERLAP_UNCORRELATED_EXT;
    }
    private static final int VK_BLEND_OVERLAP_DISJOINT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_DISJOINT_EXT = 1
     * }
     */
    public static int VK_BLEND_OVERLAP_DISJOINT_EXT() {
        return VK_BLEND_OVERLAP_DISJOINT_EXT;
    }
    private static final int VK_BLEND_OVERLAP_CONJOINT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_CONJOINT_EXT = 2
     * }
     */
    public static int VK_BLEND_OVERLAP_CONJOINT_EXT() {
        return VK_BLEND_OVERLAP_CONJOINT_EXT;
    }
    private static final int VK_BLEND_OVERLAP_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkBlendOverlapEXT.VK_BLEND_OVERLAP_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_BLEND_OVERLAP_MAX_ENUM_EXT() {
        return VK_BLEND_OVERLAP_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineCoverageToColorStateCreateFlagsNV
     * }
     */
    public static final OfInt VkPipelineCoverageToColorStateCreateFlagsNV = vulkan_h.C_INT;
    private static final int VK_COVERAGE_MODULATION_MODE_NONE_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_NONE_NV = 0
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_NONE_NV() {
        return VK_COVERAGE_MODULATION_MODE_NONE_NV;
    }
    private static final int VK_COVERAGE_MODULATION_MODE_RGB_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGB_NV = 1
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_RGB_NV() {
        return VK_COVERAGE_MODULATION_MODE_RGB_NV;
    }
    private static final int VK_COVERAGE_MODULATION_MODE_ALPHA_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_ALPHA_NV() {
        return VK_COVERAGE_MODULATION_MODE_ALPHA_NV;
    }
    private static final int VK_COVERAGE_MODULATION_MODE_RGBA_NV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_RGBA_NV() {
        return VK_COVERAGE_MODULATION_MODE_RGBA_NV;
    }
    private static final int VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageModulationModeNV.VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV() {
        return VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineCoverageModulationStateCreateFlagsNV
     * }
     */
    public static final OfInt VkPipelineCoverageModulationStateCreateFlagsNV = vulkan_h.C_INT;

    private static class vkGetImageDrmFormatModifierPropertiesEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageDrmFormatModifierPropertiesEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetImageDrmFormatModifierPropertiesEXT$descriptor() {
        return vkGetImageDrmFormatModifierPropertiesEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT *pProperties)
     * }
     */
    public static MethodHandle vkGetImageDrmFormatModifierPropertiesEXT$handle() {
        return vkGetImageDrmFormatModifierPropertiesEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT *pProperties)
     * }
     */
    public static int vkGetImageDrmFormatModifierPropertiesEXT(MemorySegment device, MemorySegment image, MemorySegment pProperties) {
        var mh$ = vkGetImageDrmFormatModifierPropertiesEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageDrmFormatModifierPropertiesEXT", device, image, pProperties);
            }
            return (int)mh$.invokeExact(device, image, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkValidationCacheEXT_T *VkValidationCacheEXT
     * }
     */
    public static final AddressLayout VkValidationCacheEXT = vulkan_h.C_POINTER;
    private static final int VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
     * }
     */
    public static int VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT() {
        return VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT;
    }
    private static final int VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkValidationCacheHeaderVersionEXT.VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT() {
        return VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkValidationCacheCreateFlagsEXT
     * }
     */
    public static final OfInt VkValidationCacheCreateFlagsEXT = vulkan_h.C_INT;

    private static class vkCreateValidationCacheEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateValidationCacheEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkValidationCacheEXT *pValidationCache)
     * }
     */
    public static FunctionDescriptor vkCreateValidationCacheEXT$descriptor() {
        return vkCreateValidationCacheEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkValidationCacheEXT *pValidationCache)
     * }
     */
    public static MethodHandle vkCreateValidationCacheEXT$handle() {
        return vkCreateValidationCacheEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkValidationCacheEXT *pValidationCache)
     * }
     */
    public static int vkCreateValidationCacheEXT(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pValidationCache) {
        var mh$ = vkCreateValidationCacheEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateValidationCacheEXT", device, pCreateInfo, pAllocator, pValidationCache);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pValidationCache);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyValidationCacheEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyValidationCacheEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyValidationCacheEXT$descriptor() {
        return vkDestroyValidationCacheEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyValidationCacheEXT$handle() {
        return vkDestroyValidationCacheEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyValidationCacheEXT(MemorySegment device, MemorySegment validationCache, MemorySegment pAllocator) {
        var mh$ = vkDestroyValidationCacheEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyValidationCacheEXT", device, validationCache, pAllocator);
            }
            mh$.invokeExact(device, validationCache, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkMergeValidationCachesEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkMergeValidationCachesEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT *pSrcCaches)
     * }
     */
    public static FunctionDescriptor vkMergeValidationCachesEXT$descriptor() {
        return vkMergeValidationCachesEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT *pSrcCaches)
     * }
     */
    public static MethodHandle vkMergeValidationCachesEXT$handle() {
        return vkMergeValidationCachesEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT *pSrcCaches)
     * }
     */
    public static int vkMergeValidationCachesEXT(MemorySegment device, MemorySegment dstCache, int srcCacheCount, MemorySegment pSrcCaches) {
        var mh$ = vkMergeValidationCachesEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkMergeValidationCachesEXT", device, dstCache, srcCacheCount, pSrcCaches);
            }
            return (int)mh$.invokeExact(device, dstCache, srcCacheCount, pSrcCaches);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetValidationCacheDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetValidationCacheDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t *pDataSize, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetValidationCacheDataEXT$descriptor() {
        return vkGetValidationCacheDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t *pDataSize, void *pData)
     * }
     */
    public static MethodHandle vkGetValidationCacheDataEXT$handle() {
        return vkGetValidationCacheDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t *pDataSize, void *pData)
     * }
     */
    public static int vkGetValidationCacheDataEXT(MemorySegment device, MemorySegment validationCache, MemorySegment pDataSize, MemorySegment pData) {
        var mh$ = vkGetValidationCacheDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetValidationCacheDataEXT", device, validationCache, pDataSize, pData);
            }
            return (int)mh$.invokeExact(device, validationCache, pDataSize, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkDescriptorBindingFlags VkDescriptorBindingFlagsEXT
     * }
     */
    public static final OfInt VkDescriptorBindingFlagsEXT = vulkan_h.C_INT;
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV;
    }
    private static final int VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkShadingRatePaletteEntryNV.VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV() {
        return VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV;
    }
    private static final int VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV() {
        return VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV;
    }
    private static final int VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV() {
        return VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV;
    }
    private static final int VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV() {
        return VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV;
    }
    private static final int VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV() {
        return VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV;
    }
    private static final int VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCoarseSampleOrderTypeNV.VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV() {
        return VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV;
    }

    private static class vkCmdBindShadingRateImageNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindShadingRateImageNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
     * }
     */
    public static FunctionDescriptor vkCmdBindShadingRateImageNV$descriptor() {
        return vkCmdBindShadingRateImageNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
     * }
     */
    public static MethodHandle vkCmdBindShadingRateImageNV$handle() {
        return vkCmdBindShadingRateImageNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
     * }
     */
    public static void vkCmdBindShadingRateImageNV(MemorySegment commandBuffer, MemorySegment imageView, int imageLayout) {
        var mh$ = vkCmdBindShadingRateImageNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindShadingRateImageNV", commandBuffer, imageView, imageLayout);
            }
            mh$.invokeExact(commandBuffer, imageView, imageLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetViewportShadingRatePaletteNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetViewportShadingRatePaletteNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV *pShadingRatePalettes)
     * }
     */
    public static FunctionDescriptor vkCmdSetViewportShadingRatePaletteNV$descriptor() {
        return vkCmdSetViewportShadingRatePaletteNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV *pShadingRatePalettes)
     * }
     */
    public static MethodHandle vkCmdSetViewportShadingRatePaletteNV$handle() {
        return vkCmdSetViewportShadingRatePaletteNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV *pShadingRatePalettes)
     * }
     */
    public static void vkCmdSetViewportShadingRatePaletteNV(MemorySegment commandBuffer, int firstViewport, int viewportCount, MemorySegment pShadingRatePalettes) {
        var mh$ = vkCmdSetViewportShadingRatePaletteNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetViewportShadingRatePaletteNV", commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
            }
            mh$.invokeExact(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetCoarseSampleOrderNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetCoarseSampleOrderNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV *pCustomSampleOrders)
     * }
     */
    public static FunctionDescriptor vkCmdSetCoarseSampleOrderNV$descriptor() {
        return vkCmdSetCoarseSampleOrderNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV *pCustomSampleOrders)
     * }
     */
    public static MethodHandle vkCmdSetCoarseSampleOrderNV$handle() {
        return vkCmdSetCoarseSampleOrderNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV *pCustomSampleOrders)
     * }
     */
    public static void vkCmdSetCoarseSampleOrderNV(MemorySegment commandBuffer, int sampleOrderType, int customSampleOrderCount, MemorySegment pCustomSampleOrders) {
        var mh$ = vkCmdSetCoarseSampleOrderNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetCoarseSampleOrderNV", commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
            }
            mh$.invokeExact(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkAccelerationStructureNV_T *VkAccelerationStructureNV
     * }
     */
    public static final AddressLayout VkAccelerationStructureNV = vulkan_h.C_POINTER;
    private static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR() {
        return VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR;
    }
    private static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR() {
        return VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR;
    }
    private static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR() {
        return VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR;
    }
    private static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = 0
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV() {
        return VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV;
    }
    private static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = 1
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV() {
        return VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV;
    }
    private static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = 2
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV() {
        return VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV;
    }
    private static final int VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkRayTracingShaderGroupTypeKHR.VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR() {
        return VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR;
    }
    private static final int VK_GEOMETRY_TYPE_TRIANGLES_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0
     * }
     */
    public static int VK_GEOMETRY_TYPE_TRIANGLES_KHR() {
        return VK_GEOMETRY_TYPE_TRIANGLES_KHR;
    }
    private static final int VK_GEOMETRY_TYPE_AABBS_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_KHR = 1
     * }
     */
    public static int VK_GEOMETRY_TYPE_AABBS_KHR() {
        return VK_GEOMETRY_TYPE_AABBS_KHR;
    }
    private static final int VK_GEOMETRY_TYPE_INSTANCES_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_INSTANCES_KHR = 2
     * }
     */
    public static int VK_GEOMETRY_TYPE_INSTANCES_KHR() {
        return VK_GEOMETRY_TYPE_INSTANCES_KHR;
    }
    private static final int VK_GEOMETRY_TYPE_TRIANGLES_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_TRIANGLES_NV = 0
     * }
     */
    public static int VK_GEOMETRY_TYPE_TRIANGLES_NV() {
        return VK_GEOMETRY_TYPE_TRIANGLES_NV;
    }
    private static final int VK_GEOMETRY_TYPE_AABBS_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_AABBS_NV = 1
     * }
     */
    public static int VK_GEOMETRY_TYPE_AABBS_NV() {
        return VK_GEOMETRY_TYPE_AABBS_NV;
    }
    private static final int VK_GEOMETRY_TYPE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryTypeKHR.VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_GEOMETRY_TYPE_MAX_ENUM_KHR() {
        return VK_GEOMETRY_TYPE_MAX_ENUM_KHR;
    }
    private static final int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR() {
        return VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR;
    }
    private static final int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR() {
        return VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR;
    }
    private static final int VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR() {
        return VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR;
    }
    private static final int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = 0
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV() {
        return VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = 1
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV() {
        return VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureTypeKHR.VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR() {
        return VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR;
    }
    private static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR() {
        return VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR;
    }
    private static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR() {
        return VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR;
    }
    private static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR() {
        return VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR;
    }
    private static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR() {
        return VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR;
    }
    private static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = 0
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV() {
        return VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV;
    }
    private static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = 1
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV() {
        return VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV;
    }
    private static final int VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCopyAccelerationStructureModeKHR.VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR() {
        return VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR;
    }
    private static final int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV() {
        return VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV() {
        return VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV() {
        return VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMemoryRequirementsTypeNV.VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV() {
        return VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV;
    }
    private static final int VK_GEOMETRY_OPAQUE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_KHR = 1
     * }
     */
    public static int VK_GEOMETRY_OPAQUE_BIT_KHR() {
        return VK_GEOMETRY_OPAQUE_BIT_KHR;
    }
    private static final int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 2
     * }
     */
    public static int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR() {
        return VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR;
    }
    private static final int VK_GEOMETRY_OPAQUE_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_OPAQUE_BIT_NV = 1
     * }
     */
    public static int VK_GEOMETRY_OPAQUE_BIT_NV() {
        return VK_GEOMETRY_OPAQUE_BIT_NV;
    }
    private static final int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = 2
     * }
     */
    public static int VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV() {
        return VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV;
    }
    private static final int VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryFlagBitsKHR.VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkGeometryFlagsKHR
     * }
     */
    public static final OfInt VkGeometryFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkGeometryFlagsKHR VkGeometryFlagsNV
     * }
     */
    public static final OfInt VkGeometryFlagsNV = vulkan_h.C_INT;
    private static final int VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 1
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR() {
        return VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR;
    }
    private static final int VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 2
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR() {
        return VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR;
    }
    private static final int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 4
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR() {
        return VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR;
    }
    private static final int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 8
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR() {
        return VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR;
    }
    private static final int VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT = 16
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT() {
        return VK_GEOMETRY_INSTANCE_FORCE_OPACITY_MICROMAP_2_STATE_EXT;
    }
    private static final int VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT = 32
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT() {
        return VK_GEOMETRY_INSTANCE_DISABLE_OPACITY_MICROMAPS_EXT;
    }
    private static final int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = 2
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR() {
        return VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR;
    }
    private static final int VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = 1
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV() {
        return VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV;
    }
    private static final int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = 2
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV() {
        return VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV;
    }
    private static final int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = 4
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV() {
        return VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV;
    }
    private static final int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = 8
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV() {
        return VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV;
    }
    private static final int VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkGeometryInstanceFlagBitsKHR.VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkGeometryInstanceFlagsKHR
     * }
     */
    public static final OfInt VkGeometryInstanceFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkGeometryInstanceFlagsKHR VkGeometryInstanceFlagsNV
     * }
     */
    public static final OfInt VkGeometryInstanceFlagsNV = vulkan_h.C_INT;
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 1
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 2
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 4
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR() {
        return VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 8
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR() {
        return VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 16
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR() {
        return VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 32
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV() {
        return VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT = 64
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_UPDATE_EXT;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT = 128
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DISABLE_OPACITY_MICROMAPS_EXT;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT = 256
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_OPACITY_MICROMAP_DATA_UPDATE_EXT;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR = 2048
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_DATA_ACCESS_KHR;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = 1
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = 2
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV() {
        return VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = 4
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV() {
        return VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = 8
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV() {
        return VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = 16
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV() {
        return VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV;
    }
    private static final int VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkBuildAccelerationStructureFlagBitsKHR.VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkBuildAccelerationStructureFlagsKHR
     * }
     */
    public static final OfInt VkBuildAccelerationStructureFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkBuildAccelerationStructureFlagsKHR VkBuildAccelerationStructureFlagsNV
     * }
     */
    public static final OfInt VkBuildAccelerationStructureFlagsNV = vulkan_h.C_INT;

    private static class vkCreateAccelerationStructureNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateAccelerationStructureNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkAccelerationStructureNV *pAccelerationStructure)
     * }
     */
    public static FunctionDescriptor vkCreateAccelerationStructureNV$descriptor() {
        return vkCreateAccelerationStructureNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkAccelerationStructureNV *pAccelerationStructure)
     * }
     */
    public static MethodHandle vkCreateAccelerationStructureNV$handle() {
        return vkCreateAccelerationStructureNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkAccelerationStructureNV *pAccelerationStructure)
     * }
     */
    public static int vkCreateAccelerationStructureNV(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pAccelerationStructure) {
        var mh$ = vkCreateAccelerationStructureNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateAccelerationStructureNV", device, pCreateInfo, pAllocator, pAccelerationStructure);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pAccelerationStructure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyAccelerationStructureNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyAccelerationStructureNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyAccelerationStructureNV$descriptor() {
        return vkDestroyAccelerationStructureNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyAccelerationStructureNV$handle() {
        return vkDestroyAccelerationStructureNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyAccelerationStructureNV(MemorySegment device, MemorySegment accelerationStructure, MemorySegment pAllocator) {
        var mh$ = vkDestroyAccelerationStructureNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyAccelerationStructureNV", device, accelerationStructure, pAllocator);
            }
            mh$.invokeExact(device, accelerationStructure, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetAccelerationStructureMemoryRequirementsNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetAccelerationStructureMemoryRequirementsNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV *pInfo, VkMemoryRequirements2KHR *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetAccelerationStructureMemoryRequirementsNV$descriptor() {
        return vkGetAccelerationStructureMemoryRequirementsNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV *pInfo, VkMemoryRequirements2KHR *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetAccelerationStructureMemoryRequirementsNV$handle() {
        return vkGetAccelerationStructureMemoryRequirementsNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV *pInfo, VkMemoryRequirements2KHR *pMemoryRequirements)
     * }
     */
    public static void vkGetAccelerationStructureMemoryRequirementsNV(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetAccelerationStructureMemoryRequirementsNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetAccelerationStructureMemoryRequirementsNV", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindAccelerationStructureMemoryNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindAccelerationStructureMemoryNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV *pBindInfos)
     * }
     */
    public static FunctionDescriptor vkBindAccelerationStructureMemoryNV$descriptor() {
        return vkBindAccelerationStructureMemoryNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV *pBindInfos)
     * }
     */
    public static MethodHandle vkBindAccelerationStructureMemoryNV$handle() {
        return vkBindAccelerationStructureMemoryNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV *pBindInfos)
     * }
     */
    public static int vkBindAccelerationStructureMemoryNV(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindAccelerationStructureMemoryNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindAccelerationStructureMemoryNV", device, bindInfoCount, pBindInfos);
            }
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBuildAccelerationStructureNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBuildAccelerationStructureNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV *pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)
     * }
     */
    public static FunctionDescriptor vkCmdBuildAccelerationStructureNV$descriptor() {
        return vkCmdBuildAccelerationStructureNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV *pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)
     * }
     */
    public static MethodHandle vkCmdBuildAccelerationStructureNV$handle() {
        return vkCmdBuildAccelerationStructureNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV *pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)
     * }
     */
    public static void vkCmdBuildAccelerationStructureNV(MemorySegment commandBuffer, MemorySegment pInfo, MemorySegment instanceData, long instanceOffset, int update, MemorySegment dst, MemorySegment src, MemorySegment scratch, long scratchOffset) {
        var mh$ = vkCmdBuildAccelerationStructureNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBuildAccelerationStructureNV", commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
            }
            mh$.invokeExact(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyAccelerationStructureNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyAccelerationStructureNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)
     * }
     */
    public static FunctionDescriptor vkCmdCopyAccelerationStructureNV$descriptor() {
        return vkCmdCopyAccelerationStructureNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)
     * }
     */
    public static MethodHandle vkCmdCopyAccelerationStructureNV$handle() {
        return vkCmdCopyAccelerationStructureNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)
     * }
     */
    public static void vkCmdCopyAccelerationStructureNV(MemorySegment commandBuffer, MemorySegment dst, MemorySegment src, int mode) {
        var mh$ = vkCmdCopyAccelerationStructureNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyAccelerationStructureNV", commandBuffer, dst, src, mode);
            }
            mh$.invokeExact(commandBuffer, dst, src, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdTraceRaysNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdTraceRaysNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)
     * }
     */
    public static FunctionDescriptor vkCmdTraceRaysNV$descriptor() {
        return vkCmdTraceRaysNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)
     * }
     */
    public static MethodHandle vkCmdTraceRaysNV$handle() {
        return vkCmdTraceRaysNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth)
     * }
     */
    public static void vkCmdTraceRaysNV(MemorySegment commandBuffer, MemorySegment raygenShaderBindingTableBuffer, long raygenShaderBindingOffset, MemorySegment missShaderBindingTableBuffer, long missShaderBindingOffset, long missShaderBindingStride, MemorySegment hitShaderBindingTableBuffer, long hitShaderBindingOffset, long hitShaderBindingStride, MemorySegment callableShaderBindingTableBuffer, long callableShaderBindingOffset, long callableShaderBindingStride, int width, int height, int depth) {
        var mh$ = vkCmdTraceRaysNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdTraceRaysNV", commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
            }
            mh$.invokeExact(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateRayTracingPipelinesNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateRayTracingPipelinesNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static FunctionDescriptor vkCreateRayTracingPipelinesNV$descriptor() {
        return vkCreateRayTracingPipelinesNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static MethodHandle vkCreateRayTracingPipelinesNV$handle() {
        return vkCreateRayTracingPipelinesNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static int vkCreateRayTracingPipelinesNV(MemorySegment device, MemorySegment pipelineCache, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pPipelines) {
        var mh$ = vkCreateRayTracingPipelinesNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateRayTracingPipelinesNV", device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
            }
            return (int)mh$.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetRayTracingShaderGroupHandlesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_LONG,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetRayTracingShaderGroupHandlesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetRayTracingShaderGroupHandlesKHR$descriptor() {
        return vkGetRayTracingShaderGroupHandlesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void *pData)
     * }
     */
    public static MethodHandle vkGetRayTracingShaderGroupHandlesKHR$handle() {
        return vkGetRayTracingShaderGroupHandlesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void *pData)
     * }
     */
    public static int vkGetRayTracingShaderGroupHandlesKHR(MemorySegment device, MemorySegment pipeline, int firstGroup, int groupCount, long dataSize, MemorySegment pData) {
        var mh$ = vkGetRayTracingShaderGroupHandlesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetRayTracingShaderGroupHandlesKHR", device, pipeline, firstGroup, groupCount, dataSize, pData);
            }
            return (int)mh$.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetRayTracingShaderGroupHandlesNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_LONG,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetRayTracingShaderGroupHandlesNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetRayTracingShaderGroupHandlesNV$descriptor() {
        return vkGetRayTracingShaderGroupHandlesNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void *pData)
     * }
     */
    public static MethodHandle vkGetRayTracingShaderGroupHandlesNV$handle() {
        return vkGetRayTracingShaderGroupHandlesNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void *pData)
     * }
     */
    public static int vkGetRayTracingShaderGroupHandlesNV(MemorySegment device, MemorySegment pipeline, int firstGroup, int groupCount, long dataSize, MemorySegment pData) {
        var mh$ = vkGetRayTracingShaderGroupHandlesNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetRayTracingShaderGroupHandlesNV", device, pipeline, firstGroup, groupCount, dataSize, pData);
            }
            return (int)mh$.invokeExact(device, pipeline, firstGroup, groupCount, dataSize, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetAccelerationStructureHandleNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetAccelerationStructureHandleNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetAccelerationStructureHandleNV$descriptor() {
        return vkGetAccelerationStructureHandleNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void *pData)
     * }
     */
    public static MethodHandle vkGetAccelerationStructureHandleNV$handle() {
        return vkGetAccelerationStructureHandleNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void *pData)
     * }
     */
    public static int vkGetAccelerationStructureHandleNV(MemorySegment device, MemorySegment accelerationStructure, long dataSize, MemorySegment pData) {
        var mh$ = vkGetAccelerationStructureHandleNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetAccelerationStructureHandleNV", device, accelerationStructure, dataSize, pData);
            }
            return (int)mh$.invokeExact(device, accelerationStructure, dataSize, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWriteAccelerationStructuresPropertiesNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWriteAccelerationStructuresPropertiesNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV *pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
     * }
     */
    public static FunctionDescriptor vkCmdWriteAccelerationStructuresPropertiesNV$descriptor() {
        return vkCmdWriteAccelerationStructuresPropertiesNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV *pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
     * }
     */
    public static MethodHandle vkCmdWriteAccelerationStructuresPropertiesNV$handle() {
        return vkCmdWriteAccelerationStructuresPropertiesNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV *pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery)
     * }
     */
    public static void vkCmdWriteAccelerationStructuresPropertiesNV(MemorySegment commandBuffer, int accelerationStructureCount, MemorySegment pAccelerationStructures, int queryType, MemorySegment queryPool, int firstQuery) {
        var mh$ = vkCmdWriteAccelerationStructuresPropertiesNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWriteAccelerationStructuresPropertiesNV", commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
            }
            mh$.invokeExact(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCompileDeferredNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCompileDeferredNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader)
     * }
     */
    public static FunctionDescriptor vkCompileDeferredNV$descriptor() {
        return vkCompileDeferredNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader)
     * }
     */
    public static MethodHandle vkCompileDeferredNV$handle() {
        return vkCompileDeferredNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader)
     * }
     */
    public static int vkCompileDeferredNV(MemorySegment device, MemorySegment pipeline, int shader) {
        var mh$ = vkCompileDeferredNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCompileDeferredNV", device, pipeline, shader);
            }
            return (int)mh$.invokeExact(device, pipeline, shader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetMemoryHostPointerPropertiesEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetMemoryHostPointerPropertiesEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void *pHostPointer, VkMemoryHostPointerPropertiesEXT *pMemoryHostPointerProperties)
     * }
     */
    public static FunctionDescriptor vkGetMemoryHostPointerPropertiesEXT$descriptor() {
        return vkGetMemoryHostPointerPropertiesEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void *pHostPointer, VkMemoryHostPointerPropertiesEXT *pMemoryHostPointerProperties)
     * }
     */
    public static MethodHandle vkGetMemoryHostPointerPropertiesEXT$handle() {
        return vkGetMemoryHostPointerPropertiesEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void *pHostPointer, VkMemoryHostPointerPropertiesEXT *pMemoryHostPointerProperties)
     * }
     */
    public static int vkGetMemoryHostPointerPropertiesEXT(MemorySegment device, int handleType, MemorySegment pHostPointer, MemorySegment pMemoryHostPointerProperties) {
        var mh$ = vkGetMemoryHostPointerPropertiesEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetMemoryHostPointerPropertiesEXT", device, handleType, pHostPointer, pMemoryHostPointerProperties);
            }
            return (int)mh$.invokeExact(device, handleType, pHostPointer, pMemoryHostPointerProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWriteBufferMarkerAMD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWriteBufferMarkerAMD"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
     * }
     */
    public static FunctionDescriptor vkCmdWriteBufferMarkerAMD$descriptor() {
        return vkCmdWriteBufferMarkerAMD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
     * }
     */
    public static MethodHandle vkCmdWriteBufferMarkerAMD$handle() {
        return vkCmdWriteBufferMarkerAMD.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
     * }
     */
    public static void vkCmdWriteBufferMarkerAMD(MemorySegment commandBuffer, int pipelineStage, MemorySegment dstBuffer, long dstOffset, int marker) {
        var mh$ = vkCmdWriteBufferMarkerAMD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWriteBufferMarkerAMD", commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
            }
            mh$.invokeExact(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCompilerControlFlagBitsAMD.VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 2147483647
     * }
     */
    public static int VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD() {
        return VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineCompilerControlFlagsAMD
     * }
     */
    public static final OfInt VkPipelineCompilerControlFlagsAMD = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceCalibrateableTimeDomainsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t *pTimeDomainCount, VkTimeDomainKHR *pTimeDomains)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceCalibrateableTimeDomainsEXT$descriptor() {
        return vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t *pTimeDomainCount, VkTimeDomainKHR *pTimeDomains)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceCalibrateableTimeDomainsEXT$handle() {
        return vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t *pTimeDomainCount, VkTimeDomainKHR *pTimeDomains)
     * }
     */
    public static int vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(MemorySegment physicalDevice, MemorySegment pTimeDomainCount, MemorySegment pTimeDomains) {
        var mh$ = vkGetPhysicalDeviceCalibrateableTimeDomainsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT", physicalDevice, pTimeDomainCount, pTimeDomains);
            }
            return (int)mh$.invokeExact(physicalDevice, pTimeDomainCount, pTimeDomains);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetCalibratedTimestampsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetCalibratedTimestampsEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR *pTimestampInfos, uint64_t *pTimestamps, uint64_t *pMaxDeviation)
     * }
     */
    public static FunctionDescriptor vkGetCalibratedTimestampsEXT$descriptor() {
        return vkGetCalibratedTimestampsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR *pTimestampInfos, uint64_t *pTimestamps, uint64_t *pMaxDeviation)
     * }
     */
    public static MethodHandle vkGetCalibratedTimestampsEXT$handle() {
        return vkGetCalibratedTimestampsEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoKHR *pTimestampInfos, uint64_t *pTimestamps, uint64_t *pMaxDeviation)
     * }
     */
    public static int vkGetCalibratedTimestampsEXT(MemorySegment device, int timestampCount, MemorySegment pTimestampInfos, MemorySegment pTimestamps, MemorySegment pMaxDeviation) {
        var mh$ = vkGetCalibratedTimestampsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetCalibratedTimestampsEXT", device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
            }
            return (int)mh$.invokeExact(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD() {
        return VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD;
    }
    private static final int VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD() {
        return VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD;
    }
    private static final int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD() {
        return VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD;
    }
    private static final int VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryOverallocationBehaviorAMD.VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 2147483647
     * }
     */
    public static int VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD() {
        return VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD;
    }
    /**
     * {@snippet lang=c :
     * typedef VkPipelineCreationFeedbackFlags VkPipelineCreationFeedbackFlagsEXT
     * }
     */
    public static final OfInt VkPipelineCreationFeedbackFlagsEXT = vulkan_h.C_INT;

    private static class vkCmdDrawMeshTasksNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawMeshTasksNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)
     * }
     */
    public static FunctionDescriptor vkCmdDrawMeshTasksNV$descriptor() {
        return vkCmdDrawMeshTasksNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)
     * }
     */
    public static MethodHandle vkCmdDrawMeshTasksNV$handle() {
        return vkCmdDrawMeshTasksNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask)
     * }
     */
    public static void vkCmdDrawMeshTasksNV(MemorySegment commandBuffer, int taskCount, int firstTask) {
        var mh$ = vkCmdDrawMeshTasksNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawMeshTasksNV", commandBuffer, taskCount, firstTask);
            }
            mh$.invokeExact(commandBuffer, taskCount, firstTask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawMeshTasksIndirectNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawMeshTasksIndirectNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawMeshTasksIndirectNV$descriptor() {
        return vkCmdDrawMeshTasksIndirectNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawMeshTasksIndirectNV$handle() {
        return vkCmdDrawMeshTasksIndirectNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawMeshTasksIndirectNV(MemorySegment commandBuffer, MemorySegment buffer, long offset, int drawCount, int stride) {
        var mh$ = vkCmdDrawMeshTasksIndirectNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawMeshTasksIndirectNV", commandBuffer, buffer, offset, drawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, drawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawMeshTasksIndirectCountNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawMeshTasksIndirectCountNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawMeshTasksIndirectCountNV$descriptor() {
        return vkCmdDrawMeshTasksIndirectCountNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawMeshTasksIndirectCountNV$handle() {
        return vkCmdDrawMeshTasksIndirectCountNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawMeshTasksIndirectCountNV(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawMeshTasksIndirectCountNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawMeshTasksIndirectCountNV", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetExclusiveScissorEnableNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetExclusiveScissorEnableNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32 *pExclusiveScissorEnables)
     * }
     */
    public static FunctionDescriptor vkCmdSetExclusiveScissorEnableNV$descriptor() {
        return vkCmdSetExclusiveScissorEnableNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32 *pExclusiveScissorEnables)
     * }
     */
    public static MethodHandle vkCmdSetExclusiveScissorEnableNV$handle() {
        return vkCmdSetExclusiveScissorEnableNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32 *pExclusiveScissorEnables)
     * }
     */
    public static void vkCmdSetExclusiveScissorEnableNV(MemorySegment commandBuffer, int firstExclusiveScissor, int exclusiveScissorCount, MemorySegment pExclusiveScissorEnables) {
        var mh$ = vkCmdSetExclusiveScissorEnableNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetExclusiveScissorEnableNV", commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
            }
            mh$.invokeExact(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetExclusiveScissorNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetExclusiveScissorNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D *pExclusiveScissors)
     * }
     */
    public static FunctionDescriptor vkCmdSetExclusiveScissorNV$descriptor() {
        return vkCmdSetExclusiveScissorNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D *pExclusiveScissors)
     * }
     */
    public static MethodHandle vkCmdSetExclusiveScissorNV$handle() {
        return vkCmdSetExclusiveScissorNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D *pExclusiveScissors)
     * }
     */
    public static void vkCmdSetExclusiveScissorNV(MemorySegment commandBuffer, int firstExclusiveScissor, int exclusiveScissorCount, MemorySegment pExclusiveScissors) {
        var mh$ = vkCmdSetExclusiveScissorNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetExclusiveScissorNV", commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
            }
            mh$.invokeExact(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetCheckpointNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetCheckpointNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pCheckpointMarker)
     * }
     */
    public static FunctionDescriptor vkCmdSetCheckpointNV$descriptor() {
        return vkCmdSetCheckpointNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pCheckpointMarker)
     * }
     */
    public static MethodHandle vkCmdSetCheckpointNV$handle() {
        return vkCmdSetCheckpointNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void *pCheckpointMarker)
     * }
     */
    public static void vkCmdSetCheckpointNV(MemorySegment commandBuffer, MemorySegment pCheckpointMarker) {
        var mh$ = vkCmdSetCheckpointNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetCheckpointNV", commandBuffer, pCheckpointMarker);
            }
            mh$.invokeExact(commandBuffer, pCheckpointMarker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetQueueCheckpointDataNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetQueueCheckpointDataNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointDataNV *pCheckpointData)
     * }
     */
    public static FunctionDescriptor vkGetQueueCheckpointDataNV$descriptor() {
        return vkGetQueueCheckpointDataNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointDataNV *pCheckpointData)
     * }
     */
    public static MethodHandle vkGetQueueCheckpointDataNV$handle() {
        return vkGetQueueCheckpointDataNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t *pCheckpointDataCount, VkCheckpointDataNV *pCheckpointData)
     * }
     */
    public static void vkGetQueueCheckpointDataNV(MemorySegment queue, MemorySegment pCheckpointDataCount, MemorySegment pCheckpointData) {
        var mh$ = vkGetQueueCheckpointDataNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetQueueCheckpointDataNV", queue, pCheckpointDataCount, pCheckpointData);
            }
            mh$.invokeExact(queue, pCheckpointDataCount, pCheckpointData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkPerformanceConfigurationINTEL_T *VkPerformanceConfigurationINTEL
     * }
     */
    public static final AddressLayout VkPerformanceConfigurationINTEL = vulkan_h.C_POINTER;
    private static final int VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
     * }
     */
    public static int VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL() {
        return VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL;
    }
    private static final int VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceConfigurationTypeINTEL.VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL() {
        return VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL;
    }
    private static final int VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
     * }
     */
    public static int VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL() {
        return VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL;
    }
    private static final int VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkQueryPoolSamplingModeINTEL.VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 2147483647
     * }
     */
    public static int VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL() {
        return VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL;
    }
    private static final int VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0
     * }
     */
    public static int VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL() {
        return VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL;
    }
    private static final int VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
     * }
     */
    public static int VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL() {
        return VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL;
    }
    private static final int VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceOverrideTypeINTEL.VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL() {
        return VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL;
    }
    private static final int VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0
     * }
     */
    public static int VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL() {
        return VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL;
    }
    private static final int VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
     * }
     */
    public static int VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL() {
        return VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL;
    }
    private static final int VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceParameterTypeINTEL.VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL() {
        return VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL;
    }
    private static final int VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL() {
        return VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL;
    }
    private static final int VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL() {
        return VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL;
    }
    private static final int VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL() {
        return VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL;
    }
    private static final int VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL() {
        return VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL;
    }
    private static final int VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL() {
        return VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL;
    }
    private static final int VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPerformanceValueTypeINTEL.VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 2147483647
     * }
     */
    public static int VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL() {
        return VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL;
    }

    private static class vkInitializePerformanceApiINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkInitializePerformanceApiINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL *pInitializeInfo)
     * }
     */
    public static FunctionDescriptor vkInitializePerformanceApiINTEL$descriptor() {
        return vkInitializePerformanceApiINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL *pInitializeInfo)
     * }
     */
    public static MethodHandle vkInitializePerformanceApiINTEL$handle() {
        return vkInitializePerformanceApiINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL *pInitializeInfo)
     * }
     */
    public static int vkInitializePerformanceApiINTEL(MemorySegment device, MemorySegment pInitializeInfo) {
        var mh$ = vkInitializePerformanceApiINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkInitializePerformanceApiINTEL", device, pInitializeInfo);
            }
            return (int)mh$.invokeExact(device, pInitializeInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkUninitializePerformanceApiINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkUninitializePerformanceApiINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkUninitializePerformanceApiINTEL(VkDevice device)
     * }
     */
    public static FunctionDescriptor vkUninitializePerformanceApiINTEL$descriptor() {
        return vkUninitializePerformanceApiINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkUninitializePerformanceApiINTEL(VkDevice device)
     * }
     */
    public static MethodHandle vkUninitializePerformanceApiINTEL$handle() {
        return vkUninitializePerformanceApiINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkUninitializePerformanceApiINTEL(VkDevice device)
     * }
     */
    public static void vkUninitializePerformanceApiINTEL(MemorySegment device) {
        var mh$ = vkUninitializePerformanceApiINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkUninitializePerformanceApiINTEL", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetPerformanceMarkerINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetPerformanceMarkerINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL *pMarkerInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetPerformanceMarkerINTEL$descriptor() {
        return vkCmdSetPerformanceMarkerINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL *pMarkerInfo)
     * }
     */
    public static MethodHandle vkCmdSetPerformanceMarkerINTEL$handle() {
        return vkCmdSetPerformanceMarkerINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL *pMarkerInfo)
     * }
     */
    public static int vkCmdSetPerformanceMarkerINTEL(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdSetPerformanceMarkerINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetPerformanceMarkerINTEL", commandBuffer, pMarkerInfo);
            }
            return (int)mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetPerformanceStreamMarkerINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetPerformanceStreamMarkerINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetPerformanceStreamMarkerINTEL$descriptor() {
        return vkCmdSetPerformanceStreamMarkerINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo)
     * }
     */
    public static MethodHandle vkCmdSetPerformanceStreamMarkerINTEL$handle() {
        return vkCmdSetPerformanceStreamMarkerINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL *pMarkerInfo)
     * }
     */
    public static int vkCmdSetPerformanceStreamMarkerINTEL(MemorySegment commandBuffer, MemorySegment pMarkerInfo) {
        var mh$ = vkCmdSetPerformanceStreamMarkerINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetPerformanceStreamMarkerINTEL", commandBuffer, pMarkerInfo);
            }
            return (int)mh$.invokeExact(commandBuffer, pMarkerInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetPerformanceOverrideINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetPerformanceOverrideINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL *pOverrideInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetPerformanceOverrideINTEL$descriptor() {
        return vkCmdSetPerformanceOverrideINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL *pOverrideInfo)
     * }
     */
    public static MethodHandle vkCmdSetPerformanceOverrideINTEL$handle() {
        return vkCmdSetPerformanceOverrideINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL *pOverrideInfo)
     * }
     */
    public static int vkCmdSetPerformanceOverrideINTEL(MemorySegment commandBuffer, MemorySegment pOverrideInfo) {
        var mh$ = vkCmdSetPerformanceOverrideINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetPerformanceOverrideINTEL", commandBuffer, pOverrideInfo);
            }
            return (int)mh$.invokeExact(commandBuffer, pOverrideInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkAcquirePerformanceConfigurationINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAcquirePerformanceConfigurationINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL *pAcquireInfo, VkPerformanceConfigurationINTEL *pConfiguration)
     * }
     */
    public static FunctionDescriptor vkAcquirePerformanceConfigurationINTEL$descriptor() {
        return vkAcquirePerformanceConfigurationINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL *pAcquireInfo, VkPerformanceConfigurationINTEL *pConfiguration)
     * }
     */
    public static MethodHandle vkAcquirePerformanceConfigurationINTEL$handle() {
        return vkAcquirePerformanceConfigurationINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL *pAcquireInfo, VkPerformanceConfigurationINTEL *pConfiguration)
     * }
     */
    public static int vkAcquirePerformanceConfigurationINTEL(MemorySegment device, MemorySegment pAcquireInfo, MemorySegment pConfiguration) {
        var mh$ = vkAcquirePerformanceConfigurationINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAcquirePerformanceConfigurationINTEL", device, pAcquireInfo, pConfiguration);
            }
            return (int)mh$.invokeExact(device, pAcquireInfo, pConfiguration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkReleasePerformanceConfigurationINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkReleasePerformanceConfigurationINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)
     * }
     */
    public static FunctionDescriptor vkReleasePerformanceConfigurationINTEL$descriptor() {
        return vkReleasePerformanceConfigurationINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)
     * }
     */
    public static MethodHandle vkReleasePerformanceConfigurationINTEL$handle() {
        return vkReleasePerformanceConfigurationINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)
     * }
     */
    public static int vkReleasePerformanceConfigurationINTEL(MemorySegment device, MemorySegment configuration) {
        var mh$ = vkReleasePerformanceConfigurationINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkReleasePerformanceConfigurationINTEL", device, configuration);
            }
            return (int)mh$.invokeExact(device, configuration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueSetPerformanceConfigurationINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueSetPerformanceConfigurationINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)
     * }
     */
    public static FunctionDescriptor vkQueueSetPerformanceConfigurationINTEL$descriptor() {
        return vkQueueSetPerformanceConfigurationINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)
     * }
     */
    public static MethodHandle vkQueueSetPerformanceConfigurationINTEL$handle() {
        return vkQueueSetPerformanceConfigurationINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)
     * }
     */
    public static int vkQueueSetPerformanceConfigurationINTEL(MemorySegment queue, MemorySegment configuration) {
        var mh$ = vkQueueSetPerformanceConfigurationINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueSetPerformanceConfigurationINTEL", queue, configuration);
            }
            return (int)mh$.invokeExact(queue, configuration);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPerformanceParameterINTEL {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPerformanceParameterINTEL"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL *pValue)
     * }
     */
    public static FunctionDescriptor vkGetPerformanceParameterINTEL$descriptor() {
        return vkGetPerformanceParameterINTEL.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL *pValue)
     * }
     */
    public static MethodHandle vkGetPerformanceParameterINTEL$handle() {
        return vkGetPerformanceParameterINTEL.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL *pValue)
     * }
     */
    public static int vkGetPerformanceParameterINTEL(MemorySegment device, int parameter, MemorySegment pValue) {
        var mh$ = vkGetPerformanceParameterINTEL.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPerformanceParameterINTEL", device, parameter, pValue);
            }
            return (int)mh$.invokeExact(device, parameter, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSetLocalDimmingAMD {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSetLocalDimmingAMD"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)
     * }
     */
    public static FunctionDescriptor vkSetLocalDimmingAMD$descriptor() {
        return vkSetLocalDimmingAMD.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)
     * }
     */
    public static MethodHandle vkSetLocalDimmingAMD$handle() {
        return vkSetLocalDimmingAMD.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)
     * }
     */
    public static void vkSetLocalDimmingAMD(MemorySegment device, MemorySegment swapChain, int localDimmingEnable) {
        var mh$ = vkSetLocalDimmingAMD.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSetLocalDimmingAMD", device, swapChain, localDimmingEnable);
            }
            mh$.invokeExact(device, swapChain, localDimmingEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkShaderCorePropertiesFlagBitsAMD.VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 2147483647
     * }
     */
    public static int VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD() {
        return VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkShaderCorePropertiesFlagsAMD
     * }
     */
    public static final OfInt VkShaderCorePropertiesFlagsAMD = vulkan_h.C_INT;

    private static class vkGetBufferDeviceAddressEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferDeviceAddressEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetBufferDeviceAddressEXT$descriptor() {
        return vkGetBufferDeviceAddressEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static MethodHandle vkGetBufferDeviceAddressEXT$handle() {
        return vkGetBufferDeviceAddressEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static long vkGetBufferDeviceAddressEXT(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferDeviceAddressEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferDeviceAddressEXT", device, pInfo);
            }
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkToolPurposeFlags VkToolPurposeFlagsEXT
     * }
     */
    public static final OfInt VkToolPurposeFlagsEXT = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceToolPropertiesEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceToolPropertiesEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceToolPropertiesEXT$descriptor() {
        return vkGetPhysicalDeviceToolPropertiesEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceToolPropertiesEXT$handle() {
        return vkGetPhysicalDeviceToolPropertiesEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
     * }
     */
    public static int vkGetPhysicalDeviceToolPropertiesEXT(MemorySegment physicalDevice, MemorySegment pToolCount, MemorySegment pToolProperties) {
        var mh$ = vkGetPhysicalDeviceToolPropertiesEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceToolPropertiesEXT", physicalDevice, pToolCount, pToolProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pToolCount, pToolProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT() {
        return VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT() {
        return VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT() {
        return VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT() {
        return VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT() {
        return VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureEnableEXT.VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT() {
        return VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_ALL_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_ALL_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT;
    }
    private static final int VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkValidationFeatureDisableEXT.VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT() {
        return VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT;
    }

    private static class vkGetPhysicalDeviceCooperativeMatrixPropertiesNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesNV *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceCooperativeMatrixPropertiesNV$descriptor() {
        return vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesNV *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceCooperativeMatrixPropertiesNV$handle() {
        return vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkCooperativeMatrixPropertiesNV *pProperties)
     * }
     */
    public static int vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV", physicalDevice, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_COVERAGE_REDUCTION_MODE_MERGE_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0
     * }
     */
    public static int VK_COVERAGE_REDUCTION_MODE_MERGE_NV() {
        return VK_COVERAGE_REDUCTION_MODE_MERGE_NV;
    }
    private static final int VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
     * }
     */
    public static int VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV() {
        return VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV;
    }
    private static final int VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCoverageReductionModeNV.VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV() {
        return VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineCoverageReductionStateCreateFlagsNV
     * }
     */
    public static final OfInt VkPipelineCoverageReductionStateCreateFlagsNV = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t *pCombinationCount, VkFramebufferMixedSamplesCombinationNV *pCombinations)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV$descriptor() {
        return vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t *pCombinationCount, VkFramebufferMixedSamplesCombinationNV *pCombinations)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV$handle() {
        return vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t *pCombinationCount, VkFramebufferMixedSamplesCombinationNV *pCombinations)
     * }
     */
    public static int vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(MemorySegment physicalDevice, MemorySegment pCombinationCount, MemorySegment pCombinations) {
        var mh$ = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV", physicalDevice, pCombinationCount, pCombinations);
            }
            return (int)mh$.invokeExact(physicalDevice, pCombinationCount, pCombinations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0
     * }
     */
    public static int VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT() {
        return VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT;
    }
    private static final int VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
     * }
     */
    public static int VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT() {
        return VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT;
    }
    private static final int VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkProvokingVertexModeEXT.VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT() {
        return VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkHeadlessSurfaceCreateFlagsEXT
     * }
     */
    public static final OfInt VkHeadlessSurfaceCreateFlagsEXT = vulkan_h.C_INT;

    private static class vkCreateHeadlessSurfaceEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateHeadlessSurfaceEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface)
     * }
     */
    public static FunctionDescriptor vkCreateHeadlessSurfaceEXT$descriptor() {
        return vkCreateHeadlessSurfaceEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface)
     * }
     */
    public static MethodHandle vkCreateHeadlessSurfaceEXT$handle() {
        return vkCreateHeadlessSurfaceEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface)
     * }
     */
    public static int vkCreateHeadlessSurfaceEXT(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSurface) {
        var mh$ = vkCreateHeadlessSurfaceEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateHeadlessSurfaceEXT", instance, pCreateInfo, pAllocator, pSurface);
            }
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT() {
        return VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT;
    }
    private static final int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT() {
        return VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT;
    }
    private static final int VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT() {
        return VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT;
    }
    private static final int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT() {
        return VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT;
    }
    private static final int VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkLineRasterizationModeEXT.VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT() {
        return VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT;
    }

    private static class vkCmdSetLineStippleEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetLineStippleEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
     * }
     */
    public static FunctionDescriptor vkCmdSetLineStippleEXT$descriptor() {
        return vkCmdSetLineStippleEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
     * }
     */
    public static MethodHandle vkCmdSetLineStippleEXT$handle() {
        return vkCmdSetLineStippleEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern)
     * }
     */
    public static void vkCmdSetLineStippleEXT(MemorySegment commandBuffer, int lineStippleFactor, short lineStipplePattern) {
        var mh$ = vkCmdSetLineStippleEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetLineStippleEXT", commandBuffer, lineStippleFactor, lineStipplePattern);
            }
            mh$.invokeExact(commandBuffer, lineStippleFactor, lineStipplePattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkResetQueryPoolEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkResetQueryPoolEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static FunctionDescriptor vkResetQueryPoolEXT$descriptor() {
        return vkResetQueryPoolEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static MethodHandle vkResetQueryPoolEXT$handle() {
        return vkResetQueryPoolEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static void vkResetQueryPoolEXT(MemorySegment device, MemorySegment queryPool, int firstQuery, int queryCount) {
        var mh$ = vkResetQueryPoolEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkResetQueryPoolEXT", device, queryPool, firstQuery, queryCount);
            }
            mh$.invokeExact(device, queryPool, firstQuery, queryCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetCullModeEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetCullModeEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
     * }
     */
    public static FunctionDescriptor vkCmdSetCullModeEXT$descriptor() {
        return vkCmdSetCullModeEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
     * }
     */
    public static MethodHandle vkCmdSetCullModeEXT$handle() {
        return vkCmdSetCullModeEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
     * }
     */
    public static void vkCmdSetCullModeEXT(MemorySegment commandBuffer, int cullMode) {
        var mh$ = vkCmdSetCullModeEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetCullModeEXT", commandBuffer, cullMode);
            }
            mh$.invokeExact(commandBuffer, cullMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetFrontFaceEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetFrontFaceEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
     * }
     */
    public static FunctionDescriptor vkCmdSetFrontFaceEXT$descriptor() {
        return vkCmdSetFrontFaceEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
     * }
     */
    public static MethodHandle vkCmdSetFrontFaceEXT$handle() {
        return vkCmdSetFrontFaceEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
     * }
     */
    public static void vkCmdSetFrontFaceEXT(MemorySegment commandBuffer, int frontFace) {
        var mh$ = vkCmdSetFrontFaceEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetFrontFaceEXT", commandBuffer, frontFace);
            }
            mh$.invokeExact(commandBuffer, frontFace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetPrimitiveTopologyEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetPrimitiveTopologyEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
     * }
     */
    public static FunctionDescriptor vkCmdSetPrimitiveTopologyEXT$descriptor() {
        return vkCmdSetPrimitiveTopologyEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
     * }
     */
    public static MethodHandle vkCmdSetPrimitiveTopologyEXT$handle() {
        return vkCmdSetPrimitiveTopologyEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
     * }
     */
    public static void vkCmdSetPrimitiveTopologyEXT(MemorySegment commandBuffer, int primitiveTopology) {
        var mh$ = vkCmdSetPrimitiveTopologyEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetPrimitiveTopologyEXT", commandBuffer, primitiveTopology);
            }
            mh$.invokeExact(commandBuffer, primitiveTopology);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetViewportWithCountEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetViewportWithCountEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static FunctionDescriptor vkCmdSetViewportWithCountEXT$descriptor() {
        return vkCmdSetViewportWithCountEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static MethodHandle vkCmdSetViewportWithCountEXT$handle() {
        return vkCmdSetViewportWithCountEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static void vkCmdSetViewportWithCountEXT(MemorySegment commandBuffer, int viewportCount, MemorySegment pViewports) {
        var mh$ = vkCmdSetViewportWithCountEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetViewportWithCountEXT", commandBuffer, viewportCount, pViewports);
            }
            mh$.invokeExact(commandBuffer, viewportCount, pViewports);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetScissorWithCountEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetScissorWithCountEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static FunctionDescriptor vkCmdSetScissorWithCountEXT$descriptor() {
        return vkCmdSetScissorWithCountEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static MethodHandle vkCmdSetScissorWithCountEXT$handle() {
        return vkCmdSetScissorWithCountEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static void vkCmdSetScissorWithCountEXT(MemorySegment commandBuffer, int scissorCount, MemorySegment pScissors) {
        var mh$ = vkCmdSetScissorWithCountEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetScissorWithCountEXT", commandBuffer, scissorCount, pScissors);
            }
            mh$.invokeExact(commandBuffer, scissorCount, pScissors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindVertexBuffers2EXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindVertexBuffers2EXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
     * }
     */
    public static FunctionDescriptor vkCmdBindVertexBuffers2EXT$descriptor() {
        return vkCmdBindVertexBuffers2EXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
     * }
     */
    public static MethodHandle vkCmdBindVertexBuffers2EXT$handle() {
        return vkCmdBindVertexBuffers2EXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
     * }
     */
    public static void vkCmdBindVertexBuffers2EXT(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets, MemorySegment pSizes, MemorySegment pStrides) {
        var mh$ = vkCmdBindVertexBuffers2EXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindVertexBuffers2EXT", commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
            }
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthTestEnableEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthTestEnableEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthTestEnableEXT$descriptor() {
        return vkCmdSetDepthTestEnableEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthTestEnableEXT$handle() {
        return vkCmdSetDepthTestEnableEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
     * }
     */
    public static void vkCmdSetDepthTestEnableEXT(MemorySegment commandBuffer, int depthTestEnable) {
        var mh$ = vkCmdSetDepthTestEnableEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthTestEnableEXT", commandBuffer, depthTestEnable);
            }
            mh$.invokeExact(commandBuffer, depthTestEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthWriteEnableEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthWriteEnableEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthWriteEnableEXT$descriptor() {
        return vkCmdSetDepthWriteEnableEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthWriteEnableEXT$handle() {
        return vkCmdSetDepthWriteEnableEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
     * }
     */
    public static void vkCmdSetDepthWriteEnableEXT(MemorySegment commandBuffer, int depthWriteEnable) {
        var mh$ = vkCmdSetDepthWriteEnableEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthWriteEnableEXT", commandBuffer, depthWriteEnable);
            }
            mh$.invokeExact(commandBuffer, depthWriteEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthCompareOpEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthCompareOpEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthCompareOpEXT$descriptor() {
        return vkCmdSetDepthCompareOpEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
     * }
     */
    public static MethodHandle vkCmdSetDepthCompareOpEXT$handle() {
        return vkCmdSetDepthCompareOpEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
     * }
     */
    public static void vkCmdSetDepthCompareOpEXT(MemorySegment commandBuffer, int depthCompareOp) {
        var mh$ = vkCmdSetDepthCompareOpEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthCompareOpEXT", commandBuffer, depthCompareOp);
            }
            mh$.invokeExact(commandBuffer, depthCompareOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthBoundsTestEnableEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthBoundsTestEnableEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthBoundsTestEnableEXT$descriptor() {
        return vkCmdSetDepthBoundsTestEnableEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthBoundsTestEnableEXT$handle() {
        return vkCmdSetDepthBoundsTestEnableEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
     * }
     */
    public static void vkCmdSetDepthBoundsTestEnableEXT(MemorySegment commandBuffer, int depthBoundsTestEnable) {
        var mh$ = vkCmdSetDepthBoundsTestEnableEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthBoundsTestEnableEXT", commandBuffer, depthBoundsTestEnable);
            }
            mh$.invokeExact(commandBuffer, depthBoundsTestEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetStencilTestEnableEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetStencilTestEnableEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetStencilTestEnableEXT$descriptor() {
        return vkCmdSetStencilTestEnableEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
     * }
     */
    public static MethodHandle vkCmdSetStencilTestEnableEXT$handle() {
        return vkCmdSetStencilTestEnableEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
     * }
     */
    public static void vkCmdSetStencilTestEnableEXT(MemorySegment commandBuffer, int stencilTestEnable) {
        var mh$ = vkCmdSetStencilTestEnableEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetStencilTestEnableEXT", commandBuffer, stencilTestEnable);
            }
            mh$.invokeExact(commandBuffer, stencilTestEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetStencilOpEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetStencilOpEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
     * }
     */
    public static FunctionDescriptor vkCmdSetStencilOpEXT$descriptor() {
        return vkCmdSetStencilOpEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
     * }
     */
    public static MethodHandle vkCmdSetStencilOpEXT$handle() {
        return vkCmdSetStencilOpEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
     * }
     */
    public static void vkCmdSetStencilOpEXT(MemorySegment commandBuffer, int faceMask, int failOp, int passOp, int depthFailOp, int compareOp) {
        var mh$ = vkCmdSetStencilOpEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetStencilOpEXT", commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
            }
            mh$.invokeExact(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_HOST_IMAGE_COPY_MEMCPY_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkHostImageCopyFlagBitsEXT.VK_HOST_IMAGE_COPY_MEMCPY_EXT = 1
     * }
     */
    public static int VK_HOST_IMAGE_COPY_MEMCPY_EXT() {
        return VK_HOST_IMAGE_COPY_MEMCPY_EXT;
    }
    private static final int VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkHostImageCopyFlagBitsEXT.VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_HOST_IMAGE_COPY_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkHostImageCopyFlagsEXT
     * }
     */
    public static final OfInt VkHostImageCopyFlagsEXT = vulkan_h.C_INT;

    private static class vkCopyMemoryToImageEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCopyMemoryToImageEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT *pCopyMemoryToImageInfo)
     * }
     */
    public static FunctionDescriptor vkCopyMemoryToImageEXT$descriptor() {
        return vkCopyMemoryToImageEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT *pCopyMemoryToImageInfo)
     * }
     */
    public static MethodHandle vkCopyMemoryToImageEXT$handle() {
        return vkCopyMemoryToImageEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT *pCopyMemoryToImageInfo)
     * }
     */
    public static int vkCopyMemoryToImageEXT(MemorySegment device, MemorySegment pCopyMemoryToImageInfo) {
        var mh$ = vkCopyMemoryToImageEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCopyMemoryToImageEXT", device, pCopyMemoryToImageInfo);
            }
            return (int)mh$.invokeExact(device, pCopyMemoryToImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCopyImageToMemoryEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCopyImageToMemoryEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT *pCopyImageToMemoryInfo)
     * }
     */
    public static FunctionDescriptor vkCopyImageToMemoryEXT$descriptor() {
        return vkCopyImageToMemoryEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT *pCopyImageToMemoryInfo)
     * }
     */
    public static MethodHandle vkCopyImageToMemoryEXT$handle() {
        return vkCopyImageToMemoryEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT *pCopyImageToMemoryInfo)
     * }
     */
    public static int vkCopyImageToMemoryEXT(MemorySegment device, MemorySegment pCopyImageToMemoryInfo) {
        var mh$ = vkCopyImageToMemoryEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCopyImageToMemoryEXT", device, pCopyImageToMemoryInfo);
            }
            return (int)mh$.invokeExact(device, pCopyImageToMemoryInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCopyImageToImageEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCopyImageToImageEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT *pCopyImageToImageInfo)
     * }
     */
    public static FunctionDescriptor vkCopyImageToImageEXT$descriptor() {
        return vkCopyImageToImageEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT *pCopyImageToImageInfo)
     * }
     */
    public static MethodHandle vkCopyImageToImageEXT$handle() {
        return vkCopyImageToImageEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT *pCopyImageToImageInfo)
     * }
     */
    public static int vkCopyImageToImageEXT(MemorySegment device, MemorySegment pCopyImageToImageInfo) {
        var mh$ = vkCopyImageToImageEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCopyImageToImageEXT", device, pCopyImageToImageInfo);
            }
            return (int)mh$.invokeExact(device, pCopyImageToImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkTransitionImageLayoutEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkTransitionImageLayoutEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT *pTransitions)
     * }
     */
    public static FunctionDescriptor vkTransitionImageLayoutEXT$descriptor() {
        return vkTransitionImageLayoutEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT *pTransitions)
     * }
     */
    public static MethodHandle vkTransitionImageLayoutEXT$handle() {
        return vkTransitionImageLayoutEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT *pTransitions)
     * }
     */
    public static int vkTransitionImageLayoutEXT(MemorySegment device, int transitionCount, MemorySegment pTransitions) {
        var mh$ = vkTransitionImageLayoutEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkTransitionImageLayoutEXT", device, transitionCount, pTransitions);
            }
            return (int)mh$.invokeExact(device, transitionCount, pTransitions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageSubresourceLayout2EXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageSubresourceLayout2EXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2KHR *pSubresource, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static FunctionDescriptor vkGetImageSubresourceLayout2EXT$descriptor() {
        return vkGetImageSubresourceLayout2EXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2KHR *pSubresource, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static MethodHandle vkGetImageSubresourceLayout2EXT$handle() {
        return vkGetImageSubresourceLayout2EXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2KHR *pSubresource, VkSubresourceLayout2KHR *pLayout)
     * }
     */
    public static void vkGetImageSubresourceLayout2EXT(MemorySegment device, MemorySegment image, MemorySegment pSubresource, MemorySegment pLayout) {
        var mh$ = vkGetImageSubresourceLayout2EXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageSubresourceLayout2EXT", device, image, pSubresource, pLayout);
            }
            mh$.invokeExact(device, image, pSubresource, pLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT = 1
     * }
     */
    public static int VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT() {
        return VK_PRESENT_SCALING_ONE_TO_ONE_BIT_EXT;
    }
    private static final int VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT = 2
     * }
     */
    public static int VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT() {
        return VK_PRESENT_SCALING_ASPECT_RATIO_STRETCH_BIT_EXT;
    }
    private static final int VK_PRESENT_SCALING_STRETCH_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_STRETCH_BIT_EXT = 4
     * }
     */
    public static int VK_PRESENT_SCALING_STRETCH_BIT_EXT() {
        return VK_PRESENT_SCALING_STRETCH_BIT_EXT;
    }
    private static final int VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPresentScalingFlagBitsEXT.VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_PRESENT_SCALING_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPresentScalingFlagsEXT
     * }
     */
    public static final OfInt VkPresentScalingFlagsEXT = vulkan_h.C_INT;
    private static final int VK_PRESENT_GRAVITY_MIN_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MIN_BIT_EXT = 1
     * }
     */
    public static int VK_PRESENT_GRAVITY_MIN_BIT_EXT() {
        return VK_PRESENT_GRAVITY_MIN_BIT_EXT;
    }
    private static final int VK_PRESENT_GRAVITY_MAX_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_MAX_BIT_EXT = 2
     * }
     */
    public static int VK_PRESENT_GRAVITY_MAX_BIT_EXT() {
        return VK_PRESENT_GRAVITY_MAX_BIT_EXT;
    }
    private static final int VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_CENTERED_BIT_EXT = 4
     * }
     */
    public static int VK_PRESENT_GRAVITY_CENTERED_BIT_EXT() {
        return VK_PRESENT_GRAVITY_CENTERED_BIT_EXT;
    }
    private static final int VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPresentGravityFlagBitsEXT.VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_PRESENT_GRAVITY_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPresentGravityFlagsEXT
     * }
     */
    public static final OfInt VkPresentGravityFlagsEXT = vulkan_h.C_INT;

    private static class vkReleaseSwapchainImagesEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkReleaseSwapchainImagesEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT *pReleaseInfo)
     * }
     */
    public static FunctionDescriptor vkReleaseSwapchainImagesEXT$descriptor() {
        return vkReleaseSwapchainImagesEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT *pReleaseInfo)
     * }
     */
    public static MethodHandle vkReleaseSwapchainImagesEXT$handle() {
        return vkReleaseSwapchainImagesEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT *pReleaseInfo)
     * }
     */
    public static int vkReleaseSwapchainImagesEXT(MemorySegment device, MemorySegment pReleaseInfo) {
        var mh$ = vkReleaseSwapchainImagesEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkReleaseSwapchainImagesEXT", device, pReleaseInfo);
            }
            return (int)mh$.invokeExact(device, pReleaseInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkIndirectCommandsLayoutNV_T *VkIndirectCommandsLayoutNV
     * }
     */
    public static final AddressLayout VkIndirectCommandsLayoutNV = vulkan_h.C_POINTER;
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = (int)1000328000L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV = 1000328000
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = (int)1000428003L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV = 1000428003
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_PIPELINE_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = (int)1000428004L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV = 1000428004
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_DISPATCH_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsTokenTypeNV.VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV() {
        return VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV;
    }
    private static final int VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 1
     * }
     */
    public static int VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV() {
        return VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV;
    }
    private static final int VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectStateFlagBitsNV.VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV() {
        return VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkIndirectStateFlagsNV
     * }
     */
    public static final OfInt VkIndirectStateFlagsNV = vulkan_h.C_INT;
    private static final int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 1
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV() {
        return VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 2
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV() {
        return VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 4
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV() {
        return VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV;
    }
    private static final int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkIndirectCommandsLayoutUsageFlagBitsNV.VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV() {
        return VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkIndirectCommandsLayoutUsageFlagsNV
     * }
     */
    public static final OfInt VkIndirectCommandsLayoutUsageFlagsNV = vulkan_h.C_INT;

    private static class vkGetGeneratedCommandsMemoryRequirementsNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetGeneratedCommandsMemoryRequirementsNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetGeneratedCommandsMemoryRequirementsNV$descriptor() {
        return vkGetGeneratedCommandsMemoryRequirementsNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetGeneratedCommandsMemoryRequirementsNV$handle() {
        return vkGetGeneratedCommandsMemoryRequirementsNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetGeneratedCommandsMemoryRequirementsNV(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetGeneratedCommandsMemoryRequirementsNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetGeneratedCommandsMemoryRequirementsNV", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPreprocessGeneratedCommandsNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPreprocessGeneratedCommandsNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
     * }
     */
    public static FunctionDescriptor vkCmdPreprocessGeneratedCommandsNV$descriptor() {
        return vkCmdPreprocessGeneratedCommandsNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
     * }
     */
    public static MethodHandle vkCmdPreprocessGeneratedCommandsNV$handle() {
        return vkCmdPreprocessGeneratedCommandsNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
     * }
     */
    public static void vkCmdPreprocessGeneratedCommandsNV(MemorySegment commandBuffer, MemorySegment pGeneratedCommandsInfo) {
        var mh$ = vkCmdPreprocessGeneratedCommandsNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPreprocessGeneratedCommandsNV", commandBuffer, pGeneratedCommandsInfo);
            }
            mh$.invokeExact(commandBuffer, pGeneratedCommandsInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdExecuteGeneratedCommandsNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdExecuteGeneratedCommandsNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
     * }
     */
    public static FunctionDescriptor vkCmdExecuteGeneratedCommandsNV$descriptor() {
        return vkCmdExecuteGeneratedCommandsNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
     * }
     */
    public static MethodHandle vkCmdExecuteGeneratedCommandsNV$handle() {
        return vkCmdExecuteGeneratedCommandsNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV *pGeneratedCommandsInfo)
     * }
     */
    public static void vkCmdExecuteGeneratedCommandsNV(MemorySegment commandBuffer, int isPreprocessed, MemorySegment pGeneratedCommandsInfo) {
        var mh$ = vkCmdExecuteGeneratedCommandsNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdExecuteGeneratedCommandsNV", commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
            }
            mh$.invokeExact(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindPipelineShaderGroupNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindPipelineShaderGroupNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)
     * }
     */
    public static FunctionDescriptor vkCmdBindPipelineShaderGroupNV$descriptor() {
        return vkCmdBindPipelineShaderGroupNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)
     * }
     */
    public static MethodHandle vkCmdBindPipelineShaderGroupNV$handle() {
        return vkCmdBindPipelineShaderGroupNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex)
     * }
     */
    public static void vkCmdBindPipelineShaderGroupNV(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment pipeline, int groupIndex) {
        var mh$ = vkCmdBindPipelineShaderGroupNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindPipelineShaderGroupNV", commandBuffer, pipelineBindPoint, pipeline, groupIndex);
            }
            mh$.invokeExact(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateIndirectCommandsLayoutNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateIndirectCommandsLayoutNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkIndirectCommandsLayoutNV *pIndirectCommandsLayout)
     * }
     */
    public static FunctionDescriptor vkCreateIndirectCommandsLayoutNV$descriptor() {
        return vkCreateIndirectCommandsLayoutNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkIndirectCommandsLayoutNV *pIndirectCommandsLayout)
     * }
     */
    public static MethodHandle vkCreateIndirectCommandsLayoutNV$handle() {
        return vkCreateIndirectCommandsLayoutNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkIndirectCommandsLayoutNV *pIndirectCommandsLayout)
     * }
     */
    public static int vkCreateIndirectCommandsLayoutNV(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pIndirectCommandsLayout) {
        var mh$ = vkCreateIndirectCommandsLayoutNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateIndirectCommandsLayoutNV", device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyIndirectCommandsLayoutNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyIndirectCommandsLayoutNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyIndirectCommandsLayoutNV$descriptor() {
        return vkDestroyIndirectCommandsLayoutNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyIndirectCommandsLayoutNV$handle() {
        return vkDestroyIndirectCommandsLayoutNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyIndirectCommandsLayoutNV(MemorySegment device, MemorySegment indirectCommandsLayout, MemorySegment pAllocator) {
        var mh$ = vkDestroyIndirectCommandsLayoutNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyIndirectCommandsLayoutNV", device, indirectCommandsLayout, pAllocator);
            }
            mh$.invokeExact(device, indirectCommandsLayout, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT = 0
     * }
     */
    public static int VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT() {
        return VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORMAT_EXT;
    }
    private static final int VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT = 1
     * }
     */
    public static int VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT() {
        return VK_DEPTH_BIAS_REPRESENTATION_LEAST_REPRESENTABLE_VALUE_FORCE_UNORM_EXT;
    }
    private static final int VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT = 2
     * }
     */
    public static int VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT() {
        return VK_DEPTH_BIAS_REPRESENTATION_FLOAT_EXT;
    }
    private static final int VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDepthBiasRepresentationEXT.VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT() {
        return VK_DEPTH_BIAS_REPRESENTATION_MAX_ENUM_EXT;
    }

    private static class vkCmdSetDepthBias2EXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthBias2EXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT *pDepthBiasInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthBias2EXT$descriptor() {
        return vkCmdSetDepthBias2EXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT *pDepthBiasInfo)
     * }
     */
    public static MethodHandle vkCmdSetDepthBias2EXT$handle() {
        return vkCmdSetDepthBias2EXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT *pDepthBiasInfo)
     * }
     */
    public static void vkCmdSetDepthBias2EXT(MemorySegment commandBuffer, MemorySegment pDepthBiasInfo) {
        var mh$ = vkCmdSetDepthBias2EXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthBias2EXT", commandBuffer, pDepthBiasInfo);
            }
            mh$.invokeExact(commandBuffer, pDepthBiasInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT() {
        return VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT;
    }
    private static final int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT() {
        return VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT;
    }
    private static final int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT() {
        return VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT;
    }
    private static final int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT() {
        return VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT;
    }
    private static final int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT() {
        return VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT;
    }
    private static final int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceMemoryReportEventTypeEXT.VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT() {
        return VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDeviceMemoryReportFlagsEXT
     * }
     */
    public static final OfInt VkDeviceMemoryReportFlagsEXT = vulkan_h.C_INT;

    private static class vkAcquireDrmDisplayEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAcquireDrmDisplayEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display)
     * }
     */
    public static FunctionDescriptor vkAcquireDrmDisplayEXT$descriptor() {
        return vkAcquireDrmDisplayEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display)
     * }
     */
    public static MethodHandle vkAcquireDrmDisplayEXT$handle() {
        return vkAcquireDrmDisplayEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display)
     * }
     */
    public static int vkAcquireDrmDisplayEXT(MemorySegment physicalDevice, int drmFd, MemorySegment display) {
        var mh$ = vkAcquireDrmDisplayEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAcquireDrmDisplayEXT", physicalDevice, drmFd, display);
            }
            return (int)mh$.invokeExact(physicalDevice, drmFd, display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDrmDisplayEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDrmDisplayEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR *display)
     * }
     */
    public static FunctionDescriptor vkGetDrmDisplayEXT$descriptor() {
        return vkGetDrmDisplayEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR *display)
     * }
     */
    public static MethodHandle vkGetDrmDisplayEXT$handle() {
        return vkGetDrmDisplayEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR *display)
     * }
     */
    public static int vkGetDrmDisplayEXT(MemorySegment physicalDevice, int drmFd, int connectorId, MemorySegment display) {
        var mh$ = vkGetDrmDisplayEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDrmDisplayEXT", physicalDevice, drmFd, connectorId, display);
            }
            return (int)mh$.invokeExact(physicalDevice, drmFd, connectorId, display);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef VkPrivateDataSlot VkPrivateDataSlotEXT
     * }
     */
    public static final AddressLayout VkPrivateDataSlotEXT = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VkPrivateDataSlotCreateFlags VkPrivateDataSlotCreateFlagsEXT
     * }
     */
    public static final OfInt VkPrivateDataSlotCreateFlagsEXT = vulkan_h.C_INT;

    private static class vkCreatePrivateDataSlotEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreatePrivateDataSlotEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
     * }
     */
    public static FunctionDescriptor vkCreatePrivateDataSlotEXT$descriptor() {
        return vkCreatePrivateDataSlotEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
     * }
     */
    public static MethodHandle vkCreatePrivateDataSlotEXT$handle() {
        return vkCreatePrivateDataSlotEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
     * }
     */
    public static int vkCreatePrivateDataSlotEXT(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPrivateDataSlot) {
        var mh$ = vkCreatePrivateDataSlotEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreatePrivateDataSlotEXT", device, pCreateInfo, pAllocator, pPrivateDataSlot);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPrivateDataSlot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyPrivateDataSlotEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyPrivateDataSlotEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyPrivateDataSlotEXT$descriptor() {
        return vkDestroyPrivateDataSlotEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyPrivateDataSlotEXT$handle() {
        return vkDestroyPrivateDataSlotEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyPrivateDataSlotEXT(MemorySegment device, MemorySegment privateDataSlot, MemorySegment pAllocator) {
        var mh$ = vkDestroyPrivateDataSlotEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyPrivateDataSlotEXT", device, privateDataSlot, pAllocator);
            }
            mh$.invokeExact(device, privateDataSlot, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSetPrivateDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSetPrivateDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
     * }
     */
    public static FunctionDescriptor vkSetPrivateDataEXT$descriptor() {
        return vkSetPrivateDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
     * }
     */
    public static MethodHandle vkSetPrivateDataEXT$handle() {
        return vkSetPrivateDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
     * }
     */
    public static int vkSetPrivateDataEXT(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, long data) {
        var mh$ = vkSetPrivateDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSetPrivateDataEXT", device, objectType, objectHandle, privateDataSlot, data);
            }
            return (int)mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPrivateDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPrivateDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
     * }
     */
    public static FunctionDescriptor vkGetPrivateDataEXT$descriptor() {
        return vkGetPrivateDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
     * }
     */
    public static MethodHandle vkGetPrivateDataEXT$handle() {
        return vkGetPrivateDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
     * }
     */
    public static void vkGetPrivateDataEXT(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, MemorySegment pData) {
        var mh$ = vkGetPrivateDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPrivateDataEXT", device, objectType, objectHandle, privateDataSlot, pData);
            }
            mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 1
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV() {
        return VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV;
    }
    private static final int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 2
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV() {
        return VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV;
    }
    private static final int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 4
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV() {
        return VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV;
    }
    private static final int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV = 8
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV() {
        return VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV;
    }
    private static final int VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceDiagnosticsConfigFlagBitsNV.VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV() {
        return VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDeviceDiagnosticsConfigFlagsNV
     * }
     */
    public static final OfInt VkDeviceDiagnosticsConfigFlagsNV = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef struct VkCudaModuleNV_T *VkCudaModuleNV
     * }
     */
    public static final AddressLayout VkCudaModuleNV = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct VkCudaFunctionNV_T *VkCudaFunctionNV
     * }
     */
    public static final AddressLayout VkCudaFunctionNV = vulkan_h.C_POINTER;

    private static class vkCreateCudaModuleNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateCudaModuleNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCudaModuleNV *pModule)
     * }
     */
    public static FunctionDescriptor vkCreateCudaModuleNV$descriptor() {
        return vkCreateCudaModuleNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCudaModuleNV *pModule)
     * }
     */
    public static MethodHandle vkCreateCudaModuleNV$handle() {
        return vkCreateCudaModuleNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCudaModuleNV *pModule)
     * }
     */
    public static int vkCreateCudaModuleNV(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pModule) {
        var mh$ = vkCreateCudaModuleNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateCudaModuleNV", device, pCreateInfo, pAllocator, pModule);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pModule);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetCudaModuleCacheNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetCudaModuleCacheNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t *pCacheSize, void *pCacheData)
     * }
     */
    public static FunctionDescriptor vkGetCudaModuleCacheNV$descriptor() {
        return vkGetCudaModuleCacheNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t *pCacheSize, void *pCacheData)
     * }
     */
    public static MethodHandle vkGetCudaModuleCacheNV$handle() {
        return vkGetCudaModuleCacheNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t *pCacheSize, void *pCacheData)
     * }
     */
    public static int vkGetCudaModuleCacheNV(MemorySegment device, MemorySegment module, MemorySegment pCacheSize, MemorySegment pCacheData) {
        var mh$ = vkGetCudaModuleCacheNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetCudaModuleCacheNV", device, module, pCacheSize, pCacheData);
            }
            return (int)mh$.invokeExact(device, module, pCacheSize, pCacheData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateCudaFunctionNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateCudaFunctionNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCudaFunctionNV *pFunction)
     * }
     */
    public static FunctionDescriptor vkCreateCudaFunctionNV$descriptor() {
        return vkCreateCudaFunctionNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCudaFunctionNV *pFunction)
     * }
     */
    public static MethodHandle vkCreateCudaFunctionNV$handle() {
        return vkCreateCudaFunctionNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCudaFunctionNV *pFunction)
     * }
     */
    public static int vkCreateCudaFunctionNV(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pFunction) {
        var mh$ = vkCreateCudaFunctionNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateCudaFunctionNV", device, pCreateInfo, pAllocator, pFunction);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pFunction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyCudaModuleNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyCudaModuleNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyCudaModuleNV$descriptor() {
        return vkDestroyCudaModuleNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyCudaModuleNV$handle() {
        return vkDestroyCudaModuleNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyCudaModuleNV(MemorySegment device, MemorySegment module, MemorySegment pAllocator) {
        var mh$ = vkDestroyCudaModuleNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyCudaModuleNV", device, module, pAllocator);
            }
            mh$.invokeExact(device, module, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyCudaFunctionNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyCudaFunctionNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyCudaFunctionNV$descriptor() {
        return vkDestroyCudaFunctionNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyCudaFunctionNV$handle() {
        return vkDestroyCudaFunctionNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyCudaFunctionNV(MemorySegment device, MemorySegment function, MemorySegment pAllocator) {
        var mh$ = vkDestroyCudaFunctionNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyCudaFunctionNV", device, function, pAllocator);
            }
            mh$.invokeExact(device, function, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCudaLaunchKernelNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCudaLaunchKernelNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV *pLaunchInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCudaLaunchKernelNV$descriptor() {
        return vkCmdCudaLaunchKernelNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV *pLaunchInfo)
     * }
     */
    public static MethodHandle vkCmdCudaLaunchKernelNV$handle() {
        return vkCmdCudaLaunchKernelNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV *pLaunchInfo)
     * }
     */
    public static void vkCmdCudaLaunchKernelNV(MemorySegment commandBuffer, MemorySegment pLaunchInfo) {
        var mh$ = vkCmdCudaLaunchKernelNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCudaLaunchKernelNV", commandBuffer, pLaunchInfo);
            }
            mh$.invokeExact(commandBuffer, pLaunchInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkAccelerationStructureKHR_T *VkAccelerationStructureKHR
     * }
     */
    public static final AddressLayout VkAccelerationStructureKHR = vulkan_h.C_POINTER;

    private static class vkGetDescriptorSetLayoutSizeEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDescriptorSetLayoutSizeEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize *pLayoutSizeInBytes)
     * }
     */
    public static FunctionDescriptor vkGetDescriptorSetLayoutSizeEXT$descriptor() {
        return vkGetDescriptorSetLayoutSizeEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize *pLayoutSizeInBytes)
     * }
     */
    public static MethodHandle vkGetDescriptorSetLayoutSizeEXT$handle() {
        return vkGetDescriptorSetLayoutSizeEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize *pLayoutSizeInBytes)
     * }
     */
    public static void vkGetDescriptorSetLayoutSizeEXT(MemorySegment device, MemorySegment layout, MemorySegment pLayoutSizeInBytes) {
        var mh$ = vkGetDescriptorSetLayoutSizeEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDescriptorSetLayoutSizeEXT", device, layout, pLayoutSizeInBytes);
            }
            mh$.invokeExact(device, layout, pLayoutSizeInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDescriptorSetLayoutBindingOffsetEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDescriptorSetLayoutBindingOffsetEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize *pOffset)
     * }
     */
    public static FunctionDescriptor vkGetDescriptorSetLayoutBindingOffsetEXT$descriptor() {
        return vkGetDescriptorSetLayoutBindingOffsetEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize *pOffset)
     * }
     */
    public static MethodHandle vkGetDescriptorSetLayoutBindingOffsetEXT$handle() {
        return vkGetDescriptorSetLayoutBindingOffsetEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize *pOffset)
     * }
     */
    public static void vkGetDescriptorSetLayoutBindingOffsetEXT(MemorySegment device, MemorySegment layout, int binding, MemorySegment pOffset) {
        var mh$ = vkGetDescriptorSetLayoutBindingOffsetEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDescriptorSetLayoutBindingOffsetEXT", device, layout, binding, pOffset);
            }
            mh$.invokeExact(device, layout, binding, pOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDescriptorEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDescriptorEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT *pDescriptorInfo, size_t dataSize, void *pDescriptor)
     * }
     */
    public static FunctionDescriptor vkGetDescriptorEXT$descriptor() {
        return vkGetDescriptorEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT *pDescriptorInfo, size_t dataSize, void *pDescriptor)
     * }
     */
    public static MethodHandle vkGetDescriptorEXT$handle() {
        return vkGetDescriptorEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT *pDescriptorInfo, size_t dataSize, void *pDescriptor)
     * }
     */
    public static void vkGetDescriptorEXT(MemorySegment device, MemorySegment pDescriptorInfo, long dataSize, MemorySegment pDescriptor) {
        var mh$ = vkGetDescriptorEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDescriptorEXT", device, pDescriptorInfo, dataSize, pDescriptor);
            }
            mh$.invokeExact(device, pDescriptorInfo, dataSize, pDescriptor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindDescriptorBuffersEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindDescriptorBuffersEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT *pBindingInfos)
     * }
     */
    public static FunctionDescriptor vkCmdBindDescriptorBuffersEXT$descriptor() {
        return vkCmdBindDescriptorBuffersEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT *pBindingInfos)
     * }
     */
    public static MethodHandle vkCmdBindDescriptorBuffersEXT$handle() {
        return vkCmdBindDescriptorBuffersEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT *pBindingInfos)
     * }
     */
    public static void vkCmdBindDescriptorBuffersEXT(MemorySegment commandBuffer, int bufferCount, MemorySegment pBindingInfos) {
        var mh$ = vkCmdBindDescriptorBuffersEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindDescriptorBuffersEXT", commandBuffer, bufferCount, pBindingInfos);
            }
            mh$.invokeExact(commandBuffer, bufferCount, pBindingInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDescriptorBufferOffsetsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDescriptorBufferOffsetsEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t *pBufferIndices, const VkDeviceSize *pOffsets)
     * }
     */
    public static FunctionDescriptor vkCmdSetDescriptorBufferOffsetsEXT$descriptor() {
        return vkCmdSetDescriptorBufferOffsetsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t *pBufferIndices, const VkDeviceSize *pOffsets)
     * }
     */
    public static MethodHandle vkCmdSetDescriptorBufferOffsetsEXT$handle() {
        return vkCmdSetDescriptorBufferOffsetsEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t *pBufferIndices, const VkDeviceSize *pOffsets)
     * }
     */
    public static void vkCmdSetDescriptorBufferOffsetsEXT(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int firstSet, int setCount, MemorySegment pBufferIndices, MemorySegment pOffsets) {
        var mh$ = vkCmdSetDescriptorBufferOffsetsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDescriptorBufferOffsetsEXT", commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
            }
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindDescriptorBufferEmbeddedSamplersEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindDescriptorBufferEmbeddedSamplersEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)
     * }
     */
    public static FunctionDescriptor vkCmdBindDescriptorBufferEmbeddedSamplersEXT$descriptor() {
        return vkCmdBindDescriptorBufferEmbeddedSamplersEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)
     * }
     */
    public static MethodHandle vkCmdBindDescriptorBufferEmbeddedSamplersEXT$handle() {
        return vkCmdBindDescriptorBufferEmbeddedSamplersEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set)
     * }
     */
    public static void vkCmdBindDescriptorBufferEmbeddedSamplersEXT(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int set) {
        var mh$ = vkCmdBindDescriptorBufferEmbeddedSamplersEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindDescriptorBufferEmbeddedSamplersEXT", commandBuffer, pipelineBindPoint, layout, set);
            }
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferOpaqueCaptureDescriptorDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferOpaqueCaptureDescriptorDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetBufferOpaqueCaptureDescriptorDataEXT$descriptor() {
        return vkGetBufferOpaqueCaptureDescriptorDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static MethodHandle vkGetBufferOpaqueCaptureDescriptorDataEXT$handle() {
        return vkGetBufferOpaqueCaptureDescriptorDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static int vkGetBufferOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetBufferOpaqueCaptureDescriptorDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferOpaqueCaptureDescriptorDataEXT", device, pInfo, pData);
            }
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageOpaqueCaptureDescriptorDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageOpaqueCaptureDescriptorDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetImageOpaqueCaptureDescriptorDataEXT$descriptor() {
        return vkGetImageOpaqueCaptureDescriptorDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static MethodHandle vkGetImageOpaqueCaptureDescriptorDataEXT$handle() {
        return vkGetImageOpaqueCaptureDescriptorDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static int vkGetImageOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetImageOpaqueCaptureDescriptorDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageOpaqueCaptureDescriptorDataEXT", device, pInfo, pData);
            }
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageViewOpaqueCaptureDescriptorDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageViewOpaqueCaptureDescriptorDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetImageViewOpaqueCaptureDescriptorDataEXT$descriptor() {
        return vkGetImageViewOpaqueCaptureDescriptorDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static MethodHandle vkGetImageViewOpaqueCaptureDescriptorDataEXT$handle() {
        return vkGetImageViewOpaqueCaptureDescriptorDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static int vkGetImageViewOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetImageViewOpaqueCaptureDescriptorDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageViewOpaqueCaptureDescriptorDataEXT", device, pInfo, pData);
            }
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetSamplerOpaqueCaptureDescriptorDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetSamplerOpaqueCaptureDescriptorDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetSamplerOpaqueCaptureDescriptorDataEXT$descriptor() {
        return vkGetSamplerOpaqueCaptureDescriptorDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static MethodHandle vkGetSamplerOpaqueCaptureDescriptorDataEXT$handle() {
        return vkGetSamplerOpaqueCaptureDescriptorDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static int vkGetSamplerOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetSamplerOpaqueCaptureDescriptorDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetSamplerOpaqueCaptureDescriptorDataEXT", device, pInfo, pData);
            }
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT$descriptor() {
        return vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static MethodHandle vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT$handle() {
        return vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT *pInfo, void *pData)
     * }
     */
    public static int vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(MemorySegment device, MemorySegment pInfo, MemorySegment pData) {
        var mh$ = vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT", device, pInfo, pData);
            }
            return (int)mh$.invokeExact(device, pInfo, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT = 1
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT() {
        return VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT;
    }
    private static final int VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT = 2
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT() {
        return VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT;
    }
    private static final int VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT = 4
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT() {
        return VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT;
    }
    private static final int VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT = 8
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT() {
        return VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT;
    }
    private static final int VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkGraphicsPipelineLibraryFlagBitsEXT.VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkGraphicsPipelineLibraryFlagsEXT
     * }
     */
    public static final OfInt VkGraphicsPipelineLibraryFlagsEXT = vulkan_h.C_INT;
    private static final int VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV() {
        return VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV() {
        return VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateTypeNV.VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV() {
        return VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV() {
        return VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV() {
        return VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV() {
        return VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV() {
        return VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV() {
        return VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV() {
        return VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV() {
        return VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV() {
        return VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = (int)12L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV() {
        return VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = (int)13L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV() {
        return VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = (int)14L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV() {
        return VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = (int)15L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV() {
        return VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV;
    }
    private static final int VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkFragmentShadingRateNV.VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV() {
        return VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV;
    }

    private static class vkCmdSetFragmentShadingRateEnumNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetFragmentShadingRateEnumNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
     * }
     */
    public static FunctionDescriptor vkCmdSetFragmentShadingRateEnumNV$descriptor() {
        return vkCmdSetFragmentShadingRateEnumNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
     * }
     */
    public static MethodHandle vkCmdSetFragmentShadingRateEnumNV$handle() {
        return vkCmdSetFragmentShadingRateEnumNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2])
     * }
     */
    public static void vkCmdSetFragmentShadingRateEnumNV(MemorySegment commandBuffer, int shadingRate, MemorySegment combinerOps) {
        var mh$ = vkCmdSetFragmentShadingRateEnumNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetFragmentShadingRateEnumNV", commandBuffer, shadingRate, combinerOps);
            }
            mh$.invokeExact(commandBuffer, shadingRate, combinerOps);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV() {
        return VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV() {
        return VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV() {
        return VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV;
    }
    private static final int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkAccelerationStructureMotionInstanceTypeNV.VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 2147483647
     * }
     */
    public static int VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV() {
        return VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkAccelerationStructureMotionInfoFlagsNV
     * }
     */
    public static final OfInt VkAccelerationStructureMotionInfoFlagsNV = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkAccelerationStructureMotionInstanceFlagsNV
     * }
     */
    public static final OfInt VkAccelerationStructureMotionInstanceFlagsNV = vulkan_h.C_INT;
    private static final int VK_IMAGE_COMPRESSION_DEFAULT_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DEFAULT_EXT = 0
     * }
     */
    public static int VK_IMAGE_COMPRESSION_DEFAULT_EXT() {
        return VK_IMAGE_COMPRESSION_DEFAULT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = 1
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT = 2
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_DISABLED_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_DISABLED_EXT = 4
     * }
     */
    public static int VK_IMAGE_COMPRESSION_DISABLED_EXT() {
        return VK_IMAGE_COMPRESSION_DISABLED_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFlagBitsEXT.VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkImageCompressionFlagsEXT
     * }
     */
    public static final OfInt VkImageCompressionFlagsEXT = vulkan_h.C_INT;
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT = 0
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT = 1
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT = 2
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT = 4
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT = 8
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT = 16
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT = 32
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT = 64
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT = 128
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT = 256
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT = 512
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT = 1024
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT = 2048
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT = 4096
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT = 8192
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT = 16384
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT = 32768
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT = 65536
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT = 131072
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT = 262144
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT = 524288
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT = 1048576
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT = 2097152
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT = 4194304
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT = 8388608
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT;
    }
    private static final int VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkImageCompressionFixedRateFlagBitsEXT.VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkImageCompressionFixedRateFlagsEXT
     * }
     */
    public static final OfInt VkImageCompressionFixedRateFlagsEXT = vulkan_h.C_INT;
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT;
    }
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT;
    }
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT;
    }
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT;
    }
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT;
    }
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT;
    }
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT;
    }
    private static final int VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultAddressTypeEXT.VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT() {
        return VK_DEVICE_FAULT_ADDRESS_TYPE_MAX_ENUM_EXT;
    }
    private static final int VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT = 1
     * }
     */
    public static int VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT() {
        return VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_ONE_EXT;
    }
    private static final int VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceFaultVendorBinaryHeaderVersionEXT.VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT() {
        return VK_DEVICE_FAULT_VENDOR_BINARY_HEADER_VERSION_MAX_ENUM_EXT;
    }

    private static class vkGetDeviceFaultInfoEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceFaultInfoEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT *pFaultCounts, VkDeviceFaultInfoEXT *pFaultInfo)
     * }
     */
    public static FunctionDescriptor vkGetDeviceFaultInfoEXT$descriptor() {
        return vkGetDeviceFaultInfoEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT *pFaultCounts, VkDeviceFaultInfoEXT *pFaultInfo)
     * }
     */
    public static MethodHandle vkGetDeviceFaultInfoEXT$handle() {
        return vkGetDeviceFaultInfoEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT *pFaultCounts, VkDeviceFaultInfoEXT *pFaultInfo)
     * }
     */
    public static int vkGetDeviceFaultInfoEXT(MemorySegment device, MemorySegment pFaultCounts, MemorySegment pFaultInfo) {
        var mh$ = vkGetDeviceFaultInfoEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceFaultInfoEXT", device, pFaultCounts, pFaultInfo);
            }
            return (int)mh$.invokeExact(device, pFaultCounts, pFaultInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetVertexInputEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetVertexInputEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions)
     * }
     */
    public static FunctionDescriptor vkCmdSetVertexInputEXT$descriptor() {
        return vkCmdSetVertexInputEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions)
     * }
     */
    public static MethodHandle vkCmdSetVertexInputEXT$handle() {
        return vkCmdSetVertexInputEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT *pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT *pVertexAttributeDescriptions)
     * }
     */
    public static void vkCmdSetVertexInputEXT(MemorySegment commandBuffer, int vertexBindingDescriptionCount, MemorySegment pVertexBindingDescriptions, int vertexAttributeDescriptionCount, MemorySegment pVertexAttributeDescriptions) {
        var mh$ = vkCmdSetVertexInputEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetVertexInputEXT", commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
            }
            mh$.invokeExact(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT() {
        return VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT;
    }
    private static final int VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT() {
        return VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT;
    }
    private static final int VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceAddressBindingTypeEXT.VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT() {
        return VK_DEVICE_ADDRESS_BINDING_TYPE_MAX_ENUM_EXT;
    }
    private static final int VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT = 1
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT() {
        return VK_DEVICE_ADDRESS_BINDING_INTERNAL_OBJECT_BIT_EXT;
    }
    private static final int VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceAddressBindingFlagBitsEXT.VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_DEVICE_ADDRESS_BINDING_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDeviceAddressBindingFlagsEXT
     * }
     */
    public static final OfInt VkDeviceAddressBindingFlagsEXT = vulkan_h.C_INT;

    private static class vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D *pMaxWorkgroupSize)
     * }
     */
    public static FunctionDescriptor vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI$descriptor() {
        return vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D *pMaxWorkgroupSize)
     * }
     */
    public static MethodHandle vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI$handle() {
        return vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D *pMaxWorkgroupSize)
     * }
     */
    public static int vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(MemorySegment device, MemorySegment renderpass, MemorySegment pMaxWorkgroupSize) {
        var mh$ = vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI", device, renderpass, pMaxWorkgroupSize);
            }
            return (int)mh$.invokeExact(device, renderpass, pMaxWorkgroupSize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSubpassShadingHUAWEI {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSubpassShadingHUAWEI"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkCmdSubpassShadingHUAWEI$descriptor() {
        return vkCmdSubpassShadingHUAWEI.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkCmdSubpassShadingHUAWEI$handle() {
        return vkCmdSubpassShadingHUAWEI.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)
     * }
     */
    public static void vkCmdSubpassShadingHUAWEI(MemorySegment commandBuffer) {
        var mh$ = vkCmdSubpassShadingHUAWEI.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSubpassShadingHUAWEI", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindInvocationMaskHUAWEI {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindInvocationMaskHUAWEI"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
     * }
     */
    public static FunctionDescriptor vkCmdBindInvocationMaskHUAWEI$descriptor() {
        return vkCmdBindInvocationMaskHUAWEI.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
     * }
     */
    public static MethodHandle vkCmdBindInvocationMaskHUAWEI$handle() {
        return vkCmdBindInvocationMaskHUAWEI.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
     * }
     */
    public static void vkCmdBindInvocationMaskHUAWEI(MemorySegment commandBuffer, MemorySegment imageView, int imageLayout) {
        var mh$ = vkCmdBindInvocationMaskHUAWEI.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindInvocationMaskHUAWEI", commandBuffer, imageView, imageLayout);
            }
            mh$.invokeExact(commandBuffer, imageView, imageLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef void *VkRemoteAddressNV
     * }
     */
    public static final AddressLayout VkRemoteAddressNV = vulkan_h.C_POINTER;

    private static class vkGetMemoryRemoteAddressNV {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetMemoryRemoteAddressNV"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV *pMemoryGetRemoteAddressInfo, VkRemoteAddressNV *pAddress)
     * }
     */
    public static FunctionDescriptor vkGetMemoryRemoteAddressNV$descriptor() {
        return vkGetMemoryRemoteAddressNV.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV *pMemoryGetRemoteAddressInfo, VkRemoteAddressNV *pAddress)
     * }
     */
    public static MethodHandle vkGetMemoryRemoteAddressNV$handle() {
        return vkGetMemoryRemoteAddressNV.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV *pMemoryGetRemoteAddressInfo, VkRemoteAddressNV *pAddress)
     * }
     */
    public static int vkGetMemoryRemoteAddressNV(MemorySegment device, MemorySegment pMemoryGetRemoteAddressInfo, MemorySegment pAddress) {
        var mh$ = vkGetMemoryRemoteAddressNV.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetMemoryRemoteAddressNV", device, pMemoryGetRemoteAddressInfo, pAddress);
            }
            return (int)mh$.invokeExact(device, pMemoryGetRemoteAddressInfo, pAddress);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPipelinePropertiesEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPipelinePropertiesEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT *pPipelineInfo, VkBaseOutStructure *pPipelineProperties)
     * }
     */
    public static FunctionDescriptor vkGetPipelinePropertiesEXT$descriptor() {
        return vkGetPipelinePropertiesEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT *pPipelineInfo, VkBaseOutStructure *pPipelineProperties)
     * }
     */
    public static MethodHandle vkGetPipelinePropertiesEXT$handle() {
        return vkGetPipelinePropertiesEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT *pPipelineInfo, VkBaseOutStructure *pPipelineProperties)
     * }
     */
    public static int vkGetPipelinePropertiesEXT(MemorySegment device, MemorySegment pPipelineInfo, MemorySegment pPipelineProperties) {
        var mh$ = vkGetPipelinePropertiesEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPipelinePropertiesEXT", device, pPipelineInfo, pPipelineProperties);
            }
            return (int)mh$.invokeExact(device, pPipelineInfo, pPipelineProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFrameBoundaryFlagBitsEXT.VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT = 1
     * }
     */
    public static int VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT() {
        return VK_FRAME_BOUNDARY_FRAME_END_BIT_EXT;
    }
    private static final int VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkFrameBoundaryFlagBitsEXT.VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT = 2147483647
     * }
     */
    public static int VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT() {
        return VK_FRAME_BOUNDARY_FLAG_BITS_MAX_ENUM_EXT;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkFrameBoundaryFlagsEXT
     * }
     */
    public static final OfInt VkFrameBoundaryFlagsEXT = vulkan_h.C_INT;

    private static class vkCmdSetPatchControlPointsEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetPatchControlPointsEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
     * }
     */
    public static FunctionDescriptor vkCmdSetPatchControlPointsEXT$descriptor() {
        return vkCmdSetPatchControlPointsEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
     * }
     */
    public static MethodHandle vkCmdSetPatchControlPointsEXT$handle() {
        return vkCmdSetPatchControlPointsEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints)
     * }
     */
    public static void vkCmdSetPatchControlPointsEXT(MemorySegment commandBuffer, int patchControlPoints) {
        var mh$ = vkCmdSetPatchControlPointsEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetPatchControlPointsEXT", commandBuffer, patchControlPoints);
            }
            mh$.invokeExact(commandBuffer, patchControlPoints);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetRasterizerDiscardEnableEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetRasterizerDiscardEnableEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetRasterizerDiscardEnableEXT$descriptor() {
        return vkCmdSetRasterizerDiscardEnableEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
     * }
     */
    public static MethodHandle vkCmdSetRasterizerDiscardEnableEXT$handle() {
        return vkCmdSetRasterizerDiscardEnableEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
     * }
     */
    public static void vkCmdSetRasterizerDiscardEnableEXT(MemorySegment commandBuffer, int rasterizerDiscardEnable) {
        var mh$ = vkCmdSetRasterizerDiscardEnableEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetRasterizerDiscardEnableEXT", commandBuffer, rasterizerDiscardEnable);
            }
            mh$.invokeExact(commandBuffer, rasterizerDiscardEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthBiasEnableEXT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthBiasEnableEXT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthBiasEnableEXT$descriptor() {
        return vkCmdSetDepthBiasEnableEXT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthBiasEnableEXT$handle() {
        return vkCmdSetDepthBiasEnableEXT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
     * }
     */
    public static void vkCmdSetDepthBiasEnableEXT(MemorySegment commandBuffer, int depthBiasEnable) {
        var mh$ = vkCmdSetDepthBiasEnableEXT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthBiasEnableEXT", commandBuffer, depthBiasEnable);
            }
            mh$.invokeExact(commandBuffer, depthBiasEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

