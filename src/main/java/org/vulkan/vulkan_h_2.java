// Generated by jextract

package org.vulkan;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class vulkan_h_2 extends vulkan_h_3 {

    vulkan_h_2() {
        // Should not be called directly
    }
    private static final int VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 128
     * }
     */
    public static int VK_BUFFER_USAGE_VERTEX_BUFFER_BIT() {
        return VK_BUFFER_USAGE_VERTEX_BUFFER_BIT;
    }
    private static final int VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 256
     * }
     */
    public static int VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT() {
        return VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT;
    }
    private static final int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 131072
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT() {
        return VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT;
    }
    private static final int VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR = 8192
     * }
     */
    public static int VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR() {
        return VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR = 16384
     * }
     */
    public static int VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR() {
        return VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 2048
     * }
     */
    public static int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT() {
        return VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 4096
     * }
     */
    public static int VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT() {
        return VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 512
     * }
     */
    public static int VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT() {
        return VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 524288
     * }
     */
    public static int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR() {
        return VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 1048576
     * }
     */
    public static int VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR() {
        return VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 1024
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR() {
        return VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR = 32768
     * }
     */
    public static int VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR() {
        return VK_BUFFER_USAGE_VIDEO_ENCODE_DST_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR = 65536
     * }
     */
    public static int VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR() {
        return VK_BUFFER_USAGE_VIDEO_ENCODE_SRC_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT = 2097152
     * }
     */
    public static int VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT() {
        return VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT = 4194304
     * }
     */
    public static int VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT() {
        return VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT = 67108864
     * }
     */
    public static int VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT() {
        return VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT = 8388608
     * }
     */
    public static int VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT() {
        return VK_BUFFER_USAGE_MICROMAP_BUILD_INPUT_READ_ONLY_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT = 16777216
     * }
     */
    public static int VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT() {
        return VK_BUFFER_USAGE_MICROMAP_STORAGE_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = 1024
     * }
     */
    public static int VK_BUFFER_USAGE_RAY_TRACING_BIT_NV() {
        return VK_BUFFER_USAGE_RAY_TRACING_BIT_NV;
    }
    private static final int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = 131072
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT() {
        return VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT;
    }
    private static final int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = 131072
     * }
     */
    public static int VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR() {
        return VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR;
    }
    private static final int VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkBufferUsageFlagBits.VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM() {
        return VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkBufferUsageFlags
     * }
     */
    public static final OfInt VkBufferUsageFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkBufferViewCreateFlags
     * }
     */
    public static final OfInt VkBufferViewCreateFlags = vulkan_h.C_INT;
    private static final int VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 1
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT() {
        return VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT;
    }
    private static final int VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 4
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT() {
        return VK_IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
    }
    private static final int VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 2
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT() {
        return VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT;
    }
    private static final int VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkImageViewCreateFlagBits.VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkImageViewCreateFlags
     * }
     */
    public static final OfInt VkImageViewCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkShaderModuleCreateFlags
     * }
     */
    public static final OfInt VkShaderModuleCreateFlags = vulkan_h.C_INT;
    private static final int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 1
     * }
     */
    public static int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT() {
        return VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT;
    }
    private static final int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = 1
     * }
     */
    public static int VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT() {
        return VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT;
    }
    private static final int VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCacheCreateFlagBits.VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineCacheCreateFlags
     * }
     */
    public static final OfInt VkPipelineCacheCreateFlags = vulkan_h.C_INT;
    private static final int VK_COLOR_COMPONENT_R_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_R_BIT = 1
     * }
     */
    public static int VK_COLOR_COMPONENT_R_BIT() {
        return VK_COLOR_COMPONENT_R_BIT;
    }
    private static final int VK_COLOR_COMPONENT_G_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_G_BIT = 2
     * }
     */
    public static int VK_COLOR_COMPONENT_G_BIT() {
        return VK_COLOR_COMPONENT_G_BIT;
    }
    private static final int VK_COLOR_COMPONENT_B_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_B_BIT = 4
     * }
     */
    public static int VK_COLOR_COMPONENT_B_BIT() {
        return VK_COLOR_COMPONENT_B_BIT;
    }
    private static final int VK_COLOR_COMPONENT_A_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_A_BIT = 8
     * }
     */
    public static int VK_COLOR_COMPONENT_A_BIT() {
        return VK_COLOR_COMPONENT_A_BIT;
    }
    private static final int VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkColorComponentFlagBits.VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM() {
        return VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkColorComponentFlags
     * }
     */
    public static final OfInt VkColorComponentFlags = vulkan_h.C_INT;
    private static final int VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 1
     * }
     */
    public static int VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT() {
        return VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT;
    }
    private static final int VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 2
     * }
     */
    public static int VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT() {
        return VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT;
    }
    private static final int VK_PIPELINE_CREATE_DERIVATIVE_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DERIVATIVE_BIT = 4
     * }
     */
    public static int VK_PIPELINE_CREATE_DERIVATIVE_BIT() {
        return VK_PIPELINE_CREATE_DERIVATIVE_BIT;
    }
    private static final int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 8
     * }
     */
    public static int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT() {
        return VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT;
    }
    private static final int VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 16
     * }
     */
    public static int VK_PIPELINE_CREATE_DISPATCH_BASE_BIT() {
        return VK_PIPELINE_CREATE_DISPATCH_BASE_BIT;
    }
    private static final int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 256
     * }
     */
    public static int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT() {
        return VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT;
    }
    private static final int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 512
     * }
     */
    public static int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT() {
        return VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT;
    }
    private static final int VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
     * }
     */
    public static int VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR() {
        return VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
     * }
     */
    public static int VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT() {
        return VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 16384
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR() {
        return VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 32768
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR() {
        return VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 65536
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR() {
        return VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 131072
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR() {
        return VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 4096
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR() {
        return VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 8192
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR() {
        return VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 524288
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR() {
        return VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 32
     * }
     */
    public static int VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV() {
        return VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV;
    }
    private static final int VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 64
     * }
     */
    public static int VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR() {
        return VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 128
     * }
     */
    public static int VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR() {
        return VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 262144
     * }
     */
    public static int VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV() {
        return VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV;
    }
    private static final int VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 2048
     * }
     */
    public static int VK_PIPELINE_CREATE_LIBRARY_BIT_KHR() {
        return VK_PIPELINE_CREATE_LIBRARY_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 536870912
     * }
     */
    public static int VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT() {
        return VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT = 8388608
     * }
     */
    public static int VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT() {
        return VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT = 1024
     * }
     */
    public static int VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT() {
        return VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 1048576
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV() {
        return VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV;
    }
    private static final int VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 33554432
     * }
     */
    public static int VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT() {
        return VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT = 67108864
     * }
     */
    public static int VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT() {
        return VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT = 16777216
     * }
     */
    public static int VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT() {
        return VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT = 134217728
     * }
     */
    public static int VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT() {
        return VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT = 1073741824
     * }
     */
    public static int VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT() {
        return VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_DISPATCH_BASE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE = 16
     * }
     */
    public static int VK_PIPELINE_CREATE_DISPATCH_BASE() {
        return VK_PIPELINE_CREATE_DISPATCH_BASE;
    }
    private static final int VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 2097152
     * }
     */
    public static int VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR() {
        return VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
    }
    private static final int VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 4194304
     * }
     */
    public static int VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT() {
        return VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = 8
     * }
     */
    public static int VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR() {
        return VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR;
    }
    private static final int VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = 16
     * }
     */
    public static int VK_PIPELINE_CREATE_DISPATCH_BASE_KHR() {
        return VK_PIPELINE_CREATE_DISPATCH_BASE_KHR;
    }
    private static final int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = 256
     * }
     */
    public static int VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT() {
        return VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = 512
     * }
     */
    public static int VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT() {
        return VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreateFlagBits.VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineCreateFlags
     * }
     */
    public static final OfInt VkPipelineCreateFlags = vulkan_h.C_INT;
    private static final int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 1
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT() {
        return VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT;
    }
    private static final int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 2
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT() {
        return VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT;
    }
    private static final int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = 1
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT() {
        return VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT;
    }
    private static final int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = 2
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT() {
        return VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT;
    }
    private static final int VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineShaderStageCreateFlagBits.VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineShaderStageCreateFlags
     * }
     */
    public static final OfInt VkPipelineShaderStageCreateFlags = vulkan_h.C_INT;
    private static final int VK_SHADER_STAGE_VERTEX_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_VERTEX_BIT = 1
     * }
     */
    public static int VK_SHADER_STAGE_VERTEX_BIT() {
        return VK_SHADER_STAGE_VERTEX_BIT;
    }
    private static final int VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 2
     * }
     */
    public static int VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT() {
        return VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT;
    }
    private static final int VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 4
     * }
     */
    public static int VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT() {
        return VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT;
    }
    private static final int VK_SHADER_STAGE_GEOMETRY_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_GEOMETRY_BIT = 8
     * }
     */
    public static int VK_SHADER_STAGE_GEOMETRY_BIT() {
        return VK_SHADER_STAGE_GEOMETRY_BIT;
    }
    private static final int VK_SHADER_STAGE_FRAGMENT_BIT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_FRAGMENT_BIT = 16
     * }
     */
    public static int VK_SHADER_STAGE_FRAGMENT_BIT() {
        return VK_SHADER_STAGE_FRAGMENT_BIT;
    }
    private static final int VK_SHADER_STAGE_COMPUTE_BIT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_COMPUTE_BIT = 32
     * }
     */
    public static int VK_SHADER_STAGE_COMPUTE_BIT() {
        return VK_SHADER_STAGE_COMPUTE_BIT;
    }
    private static final int VK_SHADER_STAGE_ALL_GRAPHICS = (int)31L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ALL_GRAPHICS = 31
     * }
     */
    public static int VK_SHADER_STAGE_ALL_GRAPHICS() {
        return VK_SHADER_STAGE_ALL_GRAPHICS;
    }
    private static final int VK_SHADER_STAGE_ALL = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ALL = 2147483647
     * }
     */
    public static int VK_SHADER_STAGE_ALL() {
        return VK_SHADER_STAGE_ALL;
    }
    private static final int VK_SHADER_STAGE_RAYGEN_BIT_KHR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_KHR = 256
     * }
     */
    public static int VK_SHADER_STAGE_RAYGEN_BIT_KHR() {
        return VK_SHADER_STAGE_RAYGEN_BIT_KHR;
    }
    private static final int VK_SHADER_STAGE_ANY_HIT_BIT_KHR = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 512
     * }
     */
    public static int VK_SHADER_STAGE_ANY_HIT_BIT_KHR() {
        return VK_SHADER_STAGE_ANY_HIT_BIT_KHR;
    }
    private static final int VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 1024
     * }
     */
    public static int VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR() {
        return VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR;
    }
    private static final int VK_SHADER_STAGE_MISS_BIT_KHR = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_KHR = 2048
     * }
     */
    public static int VK_SHADER_STAGE_MISS_BIT_KHR() {
        return VK_SHADER_STAGE_MISS_BIT_KHR;
    }
    private static final int VK_SHADER_STAGE_INTERSECTION_BIT_KHR = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 4096
     * }
     */
    public static int VK_SHADER_STAGE_INTERSECTION_BIT_KHR() {
        return VK_SHADER_STAGE_INTERSECTION_BIT_KHR;
    }
    private static final int VK_SHADER_STAGE_CALLABLE_BIT_KHR = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_KHR = 8192
     * }
     */
    public static int VK_SHADER_STAGE_CALLABLE_BIT_KHR() {
        return VK_SHADER_STAGE_CALLABLE_BIT_KHR;
    }
    private static final int VK_SHADER_STAGE_TASK_BIT_EXT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_EXT = 64
     * }
     */
    public static int VK_SHADER_STAGE_TASK_BIT_EXT() {
        return VK_SHADER_STAGE_TASK_BIT_EXT;
    }
    private static final int VK_SHADER_STAGE_MESH_BIT_EXT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_EXT = 128
     * }
     */
    public static int VK_SHADER_STAGE_MESH_BIT_EXT() {
        return VK_SHADER_STAGE_MESH_BIT_EXT;
    }
    private static final int VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 16384
     * }
     */
    public static int VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI() {
        return VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI;
    }
    private static final int VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI = 524288
     * }
     */
    public static int VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI() {
        return VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI;
    }
    private static final int VK_SHADER_STAGE_RAYGEN_BIT_NV = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_RAYGEN_BIT_NV = 256
     * }
     */
    public static int VK_SHADER_STAGE_RAYGEN_BIT_NV() {
        return VK_SHADER_STAGE_RAYGEN_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_ANY_HIT_BIT_NV = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_ANY_HIT_BIT_NV = 512
     * }
     */
    public static int VK_SHADER_STAGE_ANY_HIT_BIT_NV() {
        return VK_SHADER_STAGE_ANY_HIT_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = 1024
     * }
     */
    public static int VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV() {
        return VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_MISS_BIT_NV = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MISS_BIT_NV = 2048
     * }
     */
    public static int VK_SHADER_STAGE_MISS_BIT_NV() {
        return VK_SHADER_STAGE_MISS_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_INTERSECTION_BIT_NV = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_INTERSECTION_BIT_NV = 4096
     * }
     */
    public static int VK_SHADER_STAGE_INTERSECTION_BIT_NV() {
        return VK_SHADER_STAGE_INTERSECTION_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_CALLABLE_BIT_NV = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_CALLABLE_BIT_NV = 8192
     * }
     */
    public static int VK_SHADER_STAGE_CALLABLE_BIT_NV() {
        return VK_SHADER_STAGE_CALLABLE_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_TASK_BIT_NV = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_TASK_BIT_NV = 64
     * }
     */
    public static int VK_SHADER_STAGE_TASK_BIT_NV() {
        return VK_SHADER_STAGE_TASK_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_MESH_BIT_NV = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_MESH_BIT_NV = 128
     * }
     */
    public static int VK_SHADER_STAGE_MESH_BIT_NV() {
        return VK_SHADER_STAGE_MESH_BIT_NV;
    }
    private static final int VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkShaderStageFlagBits.VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM() {
        return VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM;
    }
    private static final int VK_CULL_MODE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkCullModeFlagBits.VK_CULL_MODE_NONE = 0
     * }
     */
    public static int VK_CULL_MODE_NONE() {
        return VK_CULL_MODE_NONE;
    }
    private static final int VK_CULL_MODE_FRONT_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCullModeFlagBits.VK_CULL_MODE_FRONT_BIT = 1
     * }
     */
    public static int VK_CULL_MODE_FRONT_BIT() {
        return VK_CULL_MODE_FRONT_BIT;
    }
    private static final int VK_CULL_MODE_BACK_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkCullModeFlagBits.VK_CULL_MODE_BACK_BIT = 2
     * }
     */
    public static int VK_CULL_MODE_BACK_BIT() {
        return VK_CULL_MODE_BACK_BIT;
    }
    private static final int VK_CULL_MODE_FRONT_AND_BACK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkCullModeFlagBits.VK_CULL_MODE_FRONT_AND_BACK = 3
     * }
     */
    public static int VK_CULL_MODE_FRONT_AND_BACK() {
        return VK_CULL_MODE_FRONT_AND_BACK;
    }
    private static final int VK_CULL_MODE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCullModeFlagBits.VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_CULL_MODE_FLAG_BITS_MAX_ENUM() {
        return VK_CULL_MODE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkCullModeFlags
     * }
     */
    public static final OfInt VkCullModeFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineVertexInputStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineVertexInputStateCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineInputAssemblyStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineInputAssemblyStateCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineTessellationStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineTessellationStateCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineViewportStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineViewportStateCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineRasterizationStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineRasterizationStateCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineMultisampleStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineMultisampleStateCreateFlags = vulkan_h.C_INT;
    private static final int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 1
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT() {
        return VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT;
    }
    private static final int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 2
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT() {
        return VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT;
    }
    private static final int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 1
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM() {
        return VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM;
    }
    private static final int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 2
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM() {
        return VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM;
    }
    private static final int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineDepthStencilStateCreateFlagBits.VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineDepthStencilStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineDepthStencilStateCreateFlags = vulkan_h.C_INT;
    private static final int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT = 1
     * }
     */
    public static int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT() {
        return VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_EXT;
    }
    private static final int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 1
     * }
     */
    public static int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM() {
        return VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM;
    }
    private static final int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineColorBlendStateCreateFlagBits.VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineColorBlendStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineColorBlendStateCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineDynamicStateCreateFlags
     * }
     */
    public static final OfInt VkPipelineDynamicStateCreateFlags = vulkan_h.C_INT;
    private static final int VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT = 2
     * }
     */
    public static int VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT() {
        return VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT;
    }
    private static final int VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineLayoutCreateFlagBits.VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineLayoutCreateFlags
     * }
     */
    public static final OfInt VkPipelineLayoutCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkShaderStageFlags
     * }
     */
    public static final OfInt VkShaderStageFlags = vulkan_h.C_INT;
    private static final int VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 1
     * }
     */
    public static int VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT() {
        return VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT;
    }
    private static final int VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 2
     * }
     */
    public static int VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT() {
        return VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT;
    }
    private static final int VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT = 8
     * }
     */
    public static int VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT() {
        return VK_SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT;
    }
    private static final int VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT = 4
     * }
     */
    public static int VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT() {
        return VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT;
    }
    private static final int VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM = 16
     * }
     */
    public static int VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM() {
        return VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM;
    }
    private static final int VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerCreateFlagBits.VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSamplerCreateFlags
     * }
     */
    public static final OfInt VkSamplerCreateFlags = vulkan_h.C_INT;
    private static final int VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 1
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT() {
        return VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT;
    }
    private static final int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 2
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT() {
        return VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT;
    }
    private static final int VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT = 4
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT() {
        return VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV = 8
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV() {
        return VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_SETS_BIT_NV;
    }
    private static final int VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV = 16
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV() {
        return VK_DESCRIPTOR_POOL_CREATE_ALLOW_OVERALLOCATION_POOLS_BIT_NV;
    }
    private static final int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = 2
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT() {
        return VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 4
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE() {
        return VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE;
    }
    private static final int VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorPoolCreateFlagBits.VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDescriptorPoolCreateFlags
     * }
     */
    public static final OfInt VkDescriptorPoolCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDescriptorPoolResetFlags
     * }
     */
    public static final OfInt VkDescriptorPoolResetFlags = vulkan_h.C_INT;
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 2
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 1
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT = 16
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT = 32
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV = 128
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_INDIRECT_BINDABLE_BIT_NV;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT = 4
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV = 64
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_PER_STAGE_BIT_NV;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = 2
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 4
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE;
    }
    private static final int VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorSetLayoutCreateFlagBits.VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDescriptorSetLayoutCreateFlags
     * }
     */
    public static final OfInt VkDescriptorSetLayoutCreateFlags = vulkan_h.C_INT;
    private static final int VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 1
     * }
     */
    public static int VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT() {
        return VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT;
    }
    private static final int VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkAttachmentDescriptionFlagBits.VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM() {
        return VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkAttachmentDescriptionFlags
     * }
     */
    public static final OfInt VkAttachmentDescriptionFlags = vulkan_h.C_INT;
    private static final int VK_DEPENDENCY_BY_REGION_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_BY_REGION_BIT = 1
     * }
     */
    public static int VK_DEPENDENCY_BY_REGION_BIT() {
        return VK_DEPENDENCY_BY_REGION_BIT;
    }
    private static final int VK_DEPENDENCY_DEVICE_GROUP_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT = 4
     * }
     */
    public static int VK_DEPENDENCY_DEVICE_GROUP_BIT() {
        return VK_DEPENDENCY_DEVICE_GROUP_BIT;
    }
    private static final int VK_DEPENDENCY_VIEW_LOCAL_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT = 2
     * }
     */
    public static int VK_DEPENDENCY_VIEW_LOCAL_BIT() {
        return VK_DEPENDENCY_VIEW_LOCAL_BIT;
    }
    private static final int VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT = 8
     * }
     */
    public static int VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT() {
        return VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT;
    }
    private static final int VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = 2
     * }
     */
    public static int VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR() {
        return VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR;
    }
    private static final int VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = 4
     * }
     */
    public static int VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR() {
        return VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR;
    }
    private static final int VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDependencyFlagBits.VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_DEPENDENCY_FLAG_BITS_MAX_ENUM() {
        return VK_DEPENDENCY_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDependencyFlags
     * }
     */
    public static final OfInt VkDependencyFlags = vulkan_h.C_INT;
    private static final int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 1
     * }
     */
    public static int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT() {
        return VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT;
    }
    private static final int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = 1
     * }
     */
    public static int VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR() {
        return VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR;
    }
    private static final int VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkFramebufferCreateFlagBits.VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkFramebufferCreateFlags
     * }
     */
    public static final OfInt VkFramebufferCreateFlags = vulkan_h.C_INT;
    private static final int VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 2
     * }
     */
    public static int VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM() {
        return VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM;
    }
    private static final int VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkRenderPassCreateFlagBits.VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkRenderPassCreateFlags
     * }
     */
    public static final OfInt VkRenderPassCreateFlags = vulkan_h.C_INT;
    private static final int VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 1
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX() {
        return VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX;
    }
    private static final int VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 2
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX() {
        return VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX;
    }
    private static final int VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 4
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM() {
        return VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM;
    }
    private static final int VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 8
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM() {
        return VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM;
    }
    private static final int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT = 16
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT() {
        return VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_EXT;
    }
    private static final int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT = 32
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT() {
        return VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_EXT;
    }
    private static final int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT = 64
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT() {
        return VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT;
    }
    private static final int VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT = 128
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT() {
        return VK_SUBPASS_DESCRIPTION_ENABLE_LEGACY_DITHERING_BIT_EXT;
    }
    private static final int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 16
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM() {
        return VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM;
    }
    private static final int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 32
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM() {
        return VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM;
    }
    private static final int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 64
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM() {
        return VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM;
    }
    private static final int VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSubpassDescriptionFlagBits.VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM() {
        return VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSubpassDescriptionFlags
     * }
     */
    public static final OfInt VkSubpassDescriptionFlags = vulkan_h.C_INT;
    private static final int VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 1
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_TRANSIENT_BIT() {
        return VK_COMMAND_POOL_CREATE_TRANSIENT_BIT;
    }
    private static final int VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 2
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT() {
        return VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;
    }
    private static final int VK_COMMAND_POOL_CREATE_PROTECTED_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 4
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_PROTECTED_BIT() {
        return VK_COMMAND_POOL_CREATE_PROTECTED_BIT;
    }
    private static final int VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCommandPoolCreateFlagBits.VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM() {
        return VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkCommandPoolCreateFlags
     * }
     */
    public static final OfInt VkCommandPoolCreateFlags = vulkan_h.C_INT;
    private static final int VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 1
     * }
     */
    public static int VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT() {
        return VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT;
    }
    private static final int VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCommandPoolResetFlagBits.VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM() {
        return VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkCommandPoolResetFlags
     * }
     */
    public static final OfInt VkCommandPoolResetFlags = vulkan_h.C_INT;
    private static final int VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 1
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT() {
        return VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;
    }
    private static final int VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 2
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT() {
        return VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT;
    }
    private static final int VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 4
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT() {
        return VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT;
    }
    private static final int VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCommandBufferUsageFlagBits.VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM() {
        return VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkCommandBufferUsageFlags
     * }
     */
    public static final OfInt VkCommandBufferUsageFlags = vulkan_h.C_INT;
    private static final int VK_QUERY_CONTROL_PRECISE_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkQueryControlFlagBits.VK_QUERY_CONTROL_PRECISE_BIT = 1
     * }
     */
    public static int VK_QUERY_CONTROL_PRECISE_BIT() {
        return VK_QUERY_CONTROL_PRECISE_BIT;
    }
    private static final int VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkQueryControlFlagBits.VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM() {
        return VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkQueryControlFlags
     * }
     */
    public static final OfInt VkQueryControlFlags = vulkan_h.C_INT;
    private static final int VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 1
     * }
     */
    public static int VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT() {
        return VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT;
    }
    private static final int VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCommandBufferResetFlagBits.VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM() {
        return VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkCommandBufferResetFlags
     * }
     */
    public static final OfInt VkCommandBufferResetFlags = vulkan_h.C_INT;
    private static final int VK_STENCIL_FACE_FRONT_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_BIT = 1
     * }
     */
    public static int VK_STENCIL_FACE_FRONT_BIT() {
        return VK_STENCIL_FACE_FRONT_BIT;
    }
    private static final int VK_STENCIL_FACE_BACK_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_BACK_BIT = 2
     * }
     */
    public static int VK_STENCIL_FACE_BACK_BIT() {
        return VK_STENCIL_FACE_BACK_BIT;
    }
    private static final int VK_STENCIL_FACE_FRONT_AND_BACK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_FRONT_AND_BACK = 3
     * }
     */
    public static int VK_STENCIL_FACE_FRONT_AND_BACK() {
        return VK_STENCIL_FACE_FRONT_AND_BACK;
    }
    private static final int VK_STENCIL_FRONT_AND_BACK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FRONT_AND_BACK = 3
     * }
     */
    public static int VK_STENCIL_FRONT_AND_BACK() {
        return VK_STENCIL_FRONT_AND_BACK;
    }
    private static final int VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkStencilFaceFlagBits.VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM() {
        return VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkStencilFaceFlags
     * }
     */
    public static final OfInt VkStencilFaceFlags = vulkan_h.C_INT;

    private static class vkCreateInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateInstance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateInstance(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkInstance *pInstance)
     * }
     */
    public static FunctionDescriptor vkCreateInstance$descriptor() {
        return vkCreateInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateInstance(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkInstance *pInstance)
     * }
     */
    public static MethodHandle vkCreateInstance$handle() {
        return vkCreateInstance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateInstance(const VkInstanceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkInstance *pInstance)
     * }
     */
    public static int vkCreateInstance(MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pInstance) {
        var mh$ = vkCreateInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateInstance", pCreateInfo, pAllocator, pInstance);
            }
            return (int)mh$.invokeExact(pCreateInfo, pAllocator, pInstance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyInstance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyInstance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyInstance$descriptor() {
        return vkDestroyInstance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyInstance$handle() {
        return vkDestroyInstance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyInstance(MemorySegment instance, MemorySegment pAllocator) {
        var mh$ = vkDestroyInstance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyInstance", instance, pAllocator);
            }
            mh$.invokeExact(instance, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEnumeratePhysicalDevices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumeratePhysicalDevices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t *pPhysicalDeviceCount, VkPhysicalDevice *pPhysicalDevices)
     * }
     */
    public static FunctionDescriptor vkEnumeratePhysicalDevices$descriptor() {
        return vkEnumeratePhysicalDevices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t *pPhysicalDeviceCount, VkPhysicalDevice *pPhysicalDevices)
     * }
     */
    public static MethodHandle vkEnumeratePhysicalDevices$handle() {
        return vkEnumeratePhysicalDevices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint32_t *pPhysicalDeviceCount, VkPhysicalDevice *pPhysicalDevices)
     * }
     */
    public static int vkEnumeratePhysicalDevices(MemorySegment instance, MemorySegment pPhysicalDeviceCount, MemorySegment pPhysicalDevices) {
        var mh$ = vkEnumeratePhysicalDevices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumeratePhysicalDevices", instance, pPhysicalDeviceCount, pPhysicalDevices);
            }
            return (int)mh$.invokeExact(instance, pPhysicalDeviceCount, pPhysicalDevices);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceFeatures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures *pFeatures)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceFeatures$descriptor() {
        return vkGetPhysicalDeviceFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures *pFeatures)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceFeatures$handle() {
        return vkGetPhysicalDeviceFeatures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures *pFeatures)
     * }
     */
    public static void vkGetPhysicalDeviceFeatures(MemorySegment physicalDevice, MemorySegment pFeatures) {
        var mh$ = vkGetPhysicalDeviceFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceFeatures", physicalDevice, pFeatures);
            }
            mh$.invokeExact(physicalDevice, pFeatures);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceFormatProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceFormatProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties *pFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceFormatProperties$descriptor() {
        return vkGetPhysicalDeviceFormatProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties *pFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceFormatProperties$handle() {
        return vkGetPhysicalDeviceFormatProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties *pFormatProperties)
     * }
     */
    public static void vkGetPhysicalDeviceFormatProperties(MemorySegment physicalDevice, int format, MemorySegment pFormatProperties) {
        var mh$ = vkGetPhysicalDeviceFormatProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceFormatProperties", physicalDevice, format, pFormatProperties);
            }
            mh$.invokeExact(physicalDevice, format, pFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceImageFormatProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceImageFormatProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties *pImageFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceImageFormatProperties$descriptor() {
        return vkGetPhysicalDeviceImageFormatProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties *pImageFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceImageFormatProperties$handle() {
        return vkGetPhysicalDeviceImageFormatProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties *pImageFormatProperties)
     * }
     */
    public static int vkGetPhysicalDeviceImageFormatProperties(MemorySegment physicalDevice, int format, int type, int tiling, int usage, int flags, MemorySegment pImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceImageFormatProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceImageFormatProperties", physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceProperties$descriptor() {
        return vkGetPhysicalDeviceProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceProperties$handle() {
        return vkGetPhysicalDeviceProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties *pProperties)
     * }
     */
    public static void vkGetPhysicalDeviceProperties(MemorySegment physicalDevice, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceProperties", physicalDevice, pProperties);
            }
            mh$.invokeExact(physicalDevice, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceQueueFamilyProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceQueueFamilyProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties *pQueueFamilyProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceQueueFamilyProperties$descriptor() {
        return vkGetPhysicalDeviceQueueFamilyProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties *pQueueFamilyProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyProperties$handle() {
        return vkGetPhysicalDeviceQueueFamilyProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties *pQueueFamilyProperties)
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyProperties(MemorySegment physicalDevice, MemorySegment pQueueFamilyPropertyCount, MemorySegment pQueueFamilyProperties) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceQueueFamilyProperties", physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
            }
            mh$.invokeExact(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceMemoryProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceMemoryProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties *pMemoryProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceMemoryProperties$descriptor() {
        return vkGetPhysicalDeviceMemoryProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties *pMemoryProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceMemoryProperties$handle() {
        return vkGetPhysicalDeviceMemoryProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties *pMemoryProperties)
     * }
     */
    public static void vkGetPhysicalDeviceMemoryProperties(MemorySegment physicalDevice, MemorySegment pMemoryProperties) {
        var mh$ = vkGetPhysicalDeviceMemoryProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceMemoryProperties", physicalDevice, pMemoryProperties);
            }
            mh$.invokeExact(physicalDevice, pMemoryProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetInstanceProcAddr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetInstanceProcAddr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char *pName)
     * }
     */
    public static FunctionDescriptor vkGetInstanceProcAddr$descriptor() {
        return vkGetInstanceProcAddr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char *pName)
     * }
     */
    public static MethodHandle vkGetInstanceProcAddr$handle() {
        return vkGetInstanceProcAddr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PFN_vkVoidFunction vkGetInstanceProcAddr(VkInstance instance, const char *pName)
     * }
     */
    public static MemorySegment vkGetInstanceProcAddr(MemorySegment instance, MemorySegment pName) {
        var mh$ = vkGetInstanceProcAddr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetInstanceProcAddr", instance, pName);
            }
            return (MemorySegment)mh$.invokeExact(instance, pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceProcAddr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceProcAddr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char *pName)
     * }
     */
    public static FunctionDescriptor vkGetDeviceProcAddr$descriptor() {
        return vkGetDeviceProcAddr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char *pName)
     * }
     */
    public static MethodHandle vkGetDeviceProcAddr$handle() {
        return vkGetDeviceProcAddr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * PFN_vkVoidFunction vkGetDeviceProcAddr(VkDevice device, const char *pName)
     * }
     */
    public static MemorySegment vkGetDeviceProcAddr(MemorySegment device, MemorySegment pName) {
        var mh$ = vkGetDeviceProcAddr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceProcAddr", device, pName);
            }
            return (MemorySegment)mh$.invokeExact(device, pName);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDevice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDevice *pDevice)
     * }
     */
    public static FunctionDescriptor vkCreateDevice$descriptor() {
        return vkCreateDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDevice *pDevice)
     * }
     */
    public static MethodHandle vkCreateDevice$handle() {
        return vkCreateDevice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDevice *pDevice)
     * }
     */
    public static int vkCreateDevice(MemorySegment physicalDevice, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDevice) {
        var mh$ = vkCreateDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDevice", physicalDevice, pCreateInfo, pAllocator, pDevice);
            }
            return (int)mh$.invokeExact(physicalDevice, pCreateInfo, pAllocator, pDevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDevice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDevice$descriptor() {
        return vkDestroyDevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDevice$handle() {
        return vkDestroyDevice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDevice(VkDevice device, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDevice(MemorySegment device, MemorySegment pAllocator) {
        var mh$ = vkDestroyDevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDevice", device, pAllocator);
            }
            mh$.invokeExact(device, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEnumerateInstanceExtensionProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumerateInstanceExtensionProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
     * }
     */
    public static FunctionDescriptor vkEnumerateInstanceExtensionProperties$descriptor() {
        return vkEnumerateInstanceExtensionProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
     * }
     */
    public static MethodHandle vkEnumerateInstanceExtensionProperties$handle() {
        return vkEnumerateInstanceExtensionProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceExtensionProperties(const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
     * }
     */
    public static int vkEnumerateInstanceExtensionProperties(MemorySegment pLayerName, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateInstanceExtensionProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumerateInstanceExtensionProperties", pLayerName, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(pLayerName, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEnumerateDeviceExtensionProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumerateDeviceExtensionProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
     * }
     */
    public static FunctionDescriptor vkEnumerateDeviceExtensionProperties$descriptor() {
        return vkEnumerateDeviceExtensionProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
     * }
     */
    public static MethodHandle vkEnumerateDeviceExtensionProperties$handle() {
        return vkEnumerateDeviceExtensionProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char *pLayerName, uint32_t *pPropertyCount, VkExtensionProperties *pProperties)
     * }
     */
    public static int vkEnumerateDeviceExtensionProperties(MemorySegment physicalDevice, MemorySegment pLayerName, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateDeviceExtensionProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumerateDeviceExtensionProperties", physicalDevice, pLayerName, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pLayerName, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEnumerateInstanceLayerProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumerateInstanceLayerProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties)
     * }
     */
    public static FunctionDescriptor vkEnumerateInstanceLayerProperties$descriptor() {
        return vkEnumerateInstanceLayerProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties)
     * }
     */
    public static MethodHandle vkEnumerateInstanceLayerProperties$handle() {
        return vkEnumerateInstanceLayerProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceLayerProperties(uint32_t *pPropertyCount, VkLayerProperties *pProperties)
     * }
     */
    public static int vkEnumerateInstanceLayerProperties(MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateInstanceLayerProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumerateInstanceLayerProperties", pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEnumerateDeviceLayerProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumerateDeviceLayerProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkLayerProperties *pProperties)
     * }
     */
    public static FunctionDescriptor vkEnumerateDeviceLayerProperties$descriptor() {
        return vkEnumerateDeviceLayerProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkLayerProperties *pProperties)
     * }
     */
    public static MethodHandle vkEnumerateDeviceLayerProperties$handle() {
        return vkEnumerateDeviceLayerProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkLayerProperties *pProperties)
     * }
     */
    public static int vkEnumerateDeviceLayerProperties(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkEnumerateDeviceLayerProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumerateDeviceLayerProperties", physicalDevice, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceQueue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceQueue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue)
     * }
     */
    public static FunctionDescriptor vkGetDeviceQueue$descriptor() {
        return vkGetDeviceQueue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue)
     * }
     */
    public static MethodHandle vkGetDeviceQueue$handle() {
        return vkGetDeviceQueue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue *pQueue)
     * }
     */
    public static void vkGetDeviceQueue(MemorySegment device, int queueFamilyIndex, int queueIndex, MemorySegment pQueue) {
        var mh$ = vkGetDeviceQueue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceQueue", device, queueFamilyIndex, queueIndex, pQueue);
            }
            mh$.invokeExact(device, queueFamilyIndex, queueIndex, pQueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueSubmit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueSubmit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence)
     * }
     */
    public static FunctionDescriptor vkQueueSubmit$descriptor() {
        return vkQueueSubmit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence)
     * }
     */
    public static MethodHandle vkQueueSubmit$handle() {
        return vkQueueSubmit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo *pSubmits, VkFence fence)
     * }
     */
    public static int vkQueueSubmit(MemorySegment queue, int submitCount, MemorySegment pSubmits, MemorySegment fence) {
        var mh$ = vkQueueSubmit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueSubmit", queue, submitCount, pSubmits, fence);
            }
            return (int)mh$.invokeExact(queue, submitCount, pSubmits, fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueWaitIdle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueWaitIdle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkQueueWaitIdle(VkQueue queue)
     * }
     */
    public static FunctionDescriptor vkQueueWaitIdle$descriptor() {
        return vkQueueWaitIdle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkQueueWaitIdle(VkQueue queue)
     * }
     */
    public static MethodHandle vkQueueWaitIdle$handle() {
        return vkQueueWaitIdle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkQueueWaitIdle(VkQueue queue)
     * }
     */
    public static int vkQueueWaitIdle(MemorySegment queue) {
        var mh$ = vkQueueWaitIdle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueWaitIdle", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDeviceWaitIdle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDeviceWaitIdle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkDeviceWaitIdle(VkDevice device)
     * }
     */
    public static FunctionDescriptor vkDeviceWaitIdle$descriptor() {
        return vkDeviceWaitIdle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkDeviceWaitIdle(VkDevice device)
     * }
     */
    public static MethodHandle vkDeviceWaitIdle$handle() {
        return vkDeviceWaitIdle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkDeviceWaitIdle(VkDevice device)
     * }
     */
    public static int vkDeviceWaitIdle(MemorySegment device) {
        var mh$ = vkDeviceWaitIdle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDeviceWaitIdle", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkAllocateMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAllocateMemory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo *pAllocateInfo, const VkAllocationCallbacks *pAllocator, VkDeviceMemory *pMemory)
     * }
     */
    public static FunctionDescriptor vkAllocateMemory$descriptor() {
        return vkAllocateMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo *pAllocateInfo, const VkAllocationCallbacks *pAllocator, VkDeviceMemory *pMemory)
     * }
     */
    public static MethodHandle vkAllocateMemory$handle() {
        return vkAllocateMemory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo *pAllocateInfo, const VkAllocationCallbacks *pAllocator, VkDeviceMemory *pMemory)
     * }
     */
    public static int vkAllocateMemory(MemorySegment device, MemorySegment pAllocateInfo, MemorySegment pAllocator, MemorySegment pMemory) {
        var mh$ = vkAllocateMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAllocateMemory", device, pAllocateInfo, pAllocator, pMemory);
            }
            return (int)mh$.invokeExact(device, pAllocateInfo, pAllocator, pMemory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkFreeMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkFreeMemory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkFreeMemory$descriptor() {
        return vkFreeMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkFreeMemory$handle() {
        return vkFreeMemory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkFreeMemory(MemorySegment device, MemorySegment memory, MemorySegment pAllocator) {
        var mh$ = vkFreeMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkFreeMemory", device, memory, pAllocator);
            }
            mh$.invokeExact(device, memory, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkMapMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkMapMemory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void **ppData)
     * }
     */
    public static FunctionDescriptor vkMapMemory$descriptor() {
        return vkMapMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void **ppData)
     * }
     */
    public static MethodHandle vkMapMemory$handle() {
        return vkMapMemory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void **ppData)
     * }
     */
    public static int vkMapMemory(MemorySegment device, MemorySegment memory, long offset, long size, int flags, MemorySegment ppData) {
        var mh$ = vkMapMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkMapMemory", device, memory, offset, size, flags, ppData);
            }
            return (int)mh$.invokeExact(device, memory, offset, size, flags, ppData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkUnmapMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkUnmapMemory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
     * }
     */
    public static FunctionDescriptor vkUnmapMemory$descriptor() {
        return vkUnmapMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
     * }
     */
    public static MethodHandle vkUnmapMemory$handle() {
        return vkUnmapMemory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
     * }
     */
    public static void vkUnmapMemory(MemorySegment device, MemorySegment memory) {
        var mh$ = vkUnmapMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkUnmapMemory", device, memory);
            }
            mh$.invokeExact(device, memory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkFlushMappedMemoryRanges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkFlushMappedMemoryRanges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
     * }
     */
    public static FunctionDescriptor vkFlushMappedMemoryRanges$descriptor() {
        return vkFlushMappedMemoryRanges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
     * }
     */
    public static MethodHandle vkFlushMappedMemoryRanges$handle() {
        return vkFlushMappedMemoryRanges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
     * }
     */
    public static int vkFlushMappedMemoryRanges(MemorySegment device, int memoryRangeCount, MemorySegment pMemoryRanges) {
        var mh$ = vkFlushMappedMemoryRanges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkFlushMappedMemoryRanges", device, memoryRangeCount, pMemoryRanges);
            }
            return (int)mh$.invokeExact(device, memoryRangeCount, pMemoryRanges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkInvalidateMappedMemoryRanges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkInvalidateMappedMemoryRanges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
     * }
     */
    public static FunctionDescriptor vkInvalidateMappedMemoryRanges$descriptor() {
        return vkInvalidateMappedMemoryRanges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
     * }
     */
    public static MethodHandle vkInvalidateMappedMemoryRanges$handle() {
        return vkInvalidateMappedMemoryRanges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange *pMemoryRanges)
     * }
     */
    public static int vkInvalidateMappedMemoryRanges(MemorySegment device, int memoryRangeCount, MemorySegment pMemoryRanges) {
        var mh$ = vkInvalidateMappedMemoryRanges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkInvalidateMappedMemoryRanges", device, memoryRangeCount, pMemoryRanges);
            }
            return (int)mh$.invokeExact(device, memoryRangeCount, pMemoryRanges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceMemoryCommitment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceMemoryCommitment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes)
     * }
     */
    public static FunctionDescriptor vkGetDeviceMemoryCommitment$descriptor() {
        return vkGetDeviceMemoryCommitment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes)
     * }
     */
    public static MethodHandle vkGetDeviceMemoryCommitment$handle() {
        return vkGetDeviceMemoryCommitment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize *pCommittedMemoryInBytes)
     * }
     */
    public static void vkGetDeviceMemoryCommitment(MemorySegment device, MemorySegment memory, MemorySegment pCommittedMemoryInBytes) {
        var mh$ = vkGetDeviceMemoryCommitment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceMemoryCommitment", device, memory, pCommittedMemoryInBytes);
            }
            mh$.invokeExact(device, memory, pCommittedMemoryInBytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindBufferMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindBufferMemory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
     * }
     */
    public static FunctionDescriptor vkBindBufferMemory$descriptor() {
        return vkBindBufferMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
     * }
     */
    public static MethodHandle vkBindBufferMemory$handle() {
        return vkBindBufferMemory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
     * }
     */
    public static int vkBindBufferMemory(MemorySegment device, MemorySegment buffer, MemorySegment memory, long memoryOffset) {
        var mh$ = vkBindBufferMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindBufferMemory", device, buffer, memory, memoryOffset);
            }
            return (int)mh$.invokeExact(device, buffer, memory, memoryOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindImageMemory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindImageMemory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
     * }
     */
    public static FunctionDescriptor vkBindImageMemory$descriptor() {
        return vkBindImageMemory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
     * }
     */
    public static MethodHandle vkBindImageMemory$handle() {
        return vkBindImageMemory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
     * }
     */
    public static int vkBindImageMemory(MemorySegment device, MemorySegment image, MemorySegment memory, long memoryOffset) {
        var mh$ = vkBindImageMemory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindImageMemory", device, image, memory, memoryOffset);
            }
            return (int)mh$.invokeExact(device, image, memory, memoryOffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferMemoryRequirements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetBufferMemoryRequirements$descriptor() {
        return vkGetBufferMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetBufferMemoryRequirements$handle() {
        return vkGetBufferMemoryRequirements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements *pMemoryRequirements)
     * }
     */
    public static void vkGetBufferMemoryRequirements(MemorySegment device, MemorySegment buffer, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetBufferMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferMemoryRequirements", device, buffer, pMemoryRequirements);
            }
            mh$.invokeExact(device, buffer, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageMemoryRequirements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetImageMemoryRequirements$descriptor() {
        return vkGetImageMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetImageMemoryRequirements$handle() {
        return vkGetImageMemoryRequirements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements *pMemoryRequirements)
     * }
     */
    public static void vkGetImageMemoryRequirements(MemorySegment device, MemorySegment image, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetImageMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageMemoryRequirements", device, image, pMemoryRequirements);
            }
            mh$.invokeExact(device, image, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageSparseMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageSparseMemoryRequirements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *pSparseMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetImageSparseMemoryRequirements$descriptor() {
        return vkGetImageSparseMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *pSparseMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetImageSparseMemoryRequirements$handle() {
        return vkGetImageSparseMemoryRequirements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements *pSparseMemoryRequirements)
     * }
     */
    public static void vkGetImageSparseMemoryRequirements(MemorySegment device, MemorySegment image, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetImageSparseMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageSparseMemoryRequirements", device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
            }
            mh$.invokeExact(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSparseImageFormatProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSparseImageFormatProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t *pPropertyCount, VkSparseImageFormatProperties *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSparseImageFormatProperties$descriptor() {
        return vkGetPhysicalDeviceSparseImageFormatProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t *pPropertyCount, VkSparseImageFormatProperties *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSparseImageFormatProperties$handle() {
        return vkGetPhysicalDeviceSparseImageFormatProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t *pPropertyCount, VkSparseImageFormatProperties *pProperties)
     * }
     */
    public static void vkGetPhysicalDeviceSparseImageFormatProperties(MemorySegment physicalDevice, int format, int type, int samples, int usage, int tiling, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceSparseImageFormatProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSparseImageFormatProperties", physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
            }
            mh$.invokeExact(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueBindSparse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueBindSparse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo, VkFence fence)
     * }
     */
    public static FunctionDescriptor vkQueueBindSparse$descriptor() {
        return vkQueueBindSparse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo, VkFence fence)
     * }
     */
    public static MethodHandle vkQueueBindSparse$handle() {
        return vkQueueBindSparse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo *pBindInfo, VkFence fence)
     * }
     */
    public static int vkQueueBindSparse(MemorySegment queue, int bindInfoCount, MemorySegment pBindInfo, MemorySegment fence) {
        var mh$ = vkQueueBindSparse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueBindSparse", queue, bindInfoCount, pBindInfo, fence);
            }
            return (int)mh$.invokeExact(queue, bindInfoCount, pBindInfo, fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateFence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateFence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static FunctionDescriptor vkCreateFence$descriptor() {
        return vkCreateFence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static MethodHandle vkCreateFence$handle() {
        return vkCreateFence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateFence(VkDevice device, const VkFenceCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFence *pFence)
     * }
     */
    public static int vkCreateFence(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pFence) {
        var mh$ = vkCreateFence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateFence", device, pCreateInfo, pAllocator, pFence);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pFence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyFence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyFence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyFence$descriptor() {
        return vkDestroyFence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyFence$handle() {
        return vkDestroyFence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyFence(MemorySegment device, MemorySegment fence, MemorySegment pAllocator) {
        var mh$ = vkDestroyFence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyFence", device, fence, pAllocator);
            }
            mh$.invokeExact(device, fence, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkResetFences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkResetFences"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences)
     * }
     */
    public static FunctionDescriptor vkResetFences$descriptor() {
        return vkResetFences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences)
     * }
     */
    public static MethodHandle vkResetFences$handle() {
        return vkResetFences.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences)
     * }
     */
    public static int vkResetFences(MemorySegment device, int fenceCount, MemorySegment pFences) {
        var mh$ = vkResetFences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkResetFences", device, fenceCount, pFences);
            }
            return (int)mh$.invokeExact(device, fenceCount, pFences);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetFenceStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetFenceStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetFenceStatus(VkDevice device, VkFence fence)
     * }
     */
    public static FunctionDescriptor vkGetFenceStatus$descriptor() {
        return vkGetFenceStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetFenceStatus(VkDevice device, VkFence fence)
     * }
     */
    public static MethodHandle vkGetFenceStatus$handle() {
        return vkGetFenceStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetFenceStatus(VkDevice device, VkFence fence)
     * }
     */
    public static int vkGetFenceStatus(MemorySegment device, MemorySegment fence) {
        var mh$ = vkGetFenceStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetFenceStatus", device, fence);
            }
            return (int)mh$.invokeExact(device, fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkWaitForFences {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkWaitForFences"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout)
     * }
     */
    public static FunctionDescriptor vkWaitForFences$descriptor() {
        return vkWaitForFences.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout)
     * }
     */
    public static MethodHandle vkWaitForFences$handle() {
        return vkWaitForFences.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence *pFences, VkBool32 waitAll, uint64_t timeout)
     * }
     */
    public static int vkWaitForFences(MemorySegment device, int fenceCount, MemorySegment pFences, int waitAll, long timeout) {
        var mh$ = vkWaitForFences.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkWaitForFences", device, fenceCount, pFences, waitAll, timeout);
            }
            return (int)mh$.invokeExact(device, fenceCount, pFences, waitAll, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateSemaphore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateSemaphore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSemaphore *pSemaphore)
     * }
     */
    public static FunctionDescriptor vkCreateSemaphore$descriptor() {
        return vkCreateSemaphore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSemaphore *pSemaphore)
     * }
     */
    public static MethodHandle vkCreateSemaphore$handle() {
        return vkCreateSemaphore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSemaphore *pSemaphore)
     * }
     */
    public static int vkCreateSemaphore(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSemaphore) {
        var mh$ = vkCreateSemaphore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateSemaphore", device, pCreateInfo, pAllocator, pSemaphore);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSemaphore);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroySemaphore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroySemaphore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroySemaphore$descriptor() {
        return vkDestroySemaphore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroySemaphore$handle() {
        return vkDestroySemaphore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroySemaphore(MemorySegment device, MemorySegment semaphore, MemorySegment pAllocator) {
        var mh$ = vkDestroySemaphore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroySemaphore", device, semaphore, pAllocator);
            }
            mh$.invokeExact(device, semaphore, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkEvent *pEvent)
     * }
     */
    public static FunctionDescriptor vkCreateEvent$descriptor() {
        return vkCreateEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkEvent *pEvent)
     * }
     */
    public static MethodHandle vkCreateEvent$handle() {
        return vkCreateEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateEvent(VkDevice device, const VkEventCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkEvent *pEvent)
     * }
     */
    public static int vkCreateEvent(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pEvent) {
        var mh$ = vkCreateEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateEvent", device, pCreateInfo, pAllocator, pEvent);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pEvent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyEvent$descriptor() {
        return vkDestroyEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyEvent$handle() {
        return vkDestroyEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyEvent(MemorySegment device, MemorySegment event, MemorySegment pAllocator) {
        var mh$ = vkDestroyEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyEvent", device, event, pAllocator);
            }
            mh$.invokeExact(device, event, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetEventStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetEventStatus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetEventStatus(VkDevice device, VkEvent event)
     * }
     */
    public static FunctionDescriptor vkGetEventStatus$descriptor() {
        return vkGetEventStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetEventStatus(VkDevice device, VkEvent event)
     * }
     */
    public static MethodHandle vkGetEventStatus$handle() {
        return vkGetEventStatus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetEventStatus(VkDevice device, VkEvent event)
     * }
     */
    public static int vkGetEventStatus(MemorySegment device, MemorySegment event) {
        var mh$ = vkGetEventStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetEventStatus", device, event);
            }
            return (int)mh$.invokeExact(device, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSetEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkSetEvent(VkDevice device, VkEvent event)
     * }
     */
    public static FunctionDescriptor vkSetEvent$descriptor() {
        return vkSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkSetEvent(VkDevice device, VkEvent event)
     * }
     */
    public static MethodHandle vkSetEvent$handle() {
        return vkSetEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkSetEvent(VkDevice device, VkEvent event)
     * }
     */
    public static int vkSetEvent(MemorySegment device, MemorySegment event) {
        var mh$ = vkSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSetEvent", device, event);
            }
            return (int)mh$.invokeExact(device, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkResetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkResetEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkResetEvent(VkDevice device, VkEvent event)
     * }
     */
    public static FunctionDescriptor vkResetEvent$descriptor() {
        return vkResetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkResetEvent(VkDevice device, VkEvent event)
     * }
     */
    public static MethodHandle vkResetEvent$handle() {
        return vkResetEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkResetEvent(VkDevice device, VkEvent event)
     * }
     */
    public static int vkResetEvent(MemorySegment device, MemorySegment event) {
        var mh$ = vkResetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkResetEvent", device, event);
            }
            return (int)mh$.invokeExact(device, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateQueryPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateQueryPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkQueryPool *pQueryPool)
     * }
     */
    public static FunctionDescriptor vkCreateQueryPool$descriptor() {
        return vkCreateQueryPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkQueryPool *pQueryPool)
     * }
     */
    public static MethodHandle vkCreateQueryPool$handle() {
        return vkCreateQueryPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkQueryPool *pQueryPool)
     * }
     */
    public static int vkCreateQueryPool(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pQueryPool) {
        var mh$ = vkCreateQueryPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateQueryPool", device, pCreateInfo, pAllocator, pQueryPool);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pQueryPool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyQueryPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyQueryPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyQueryPool$descriptor() {
        return vkDestroyQueryPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyQueryPool$handle() {
        return vkDestroyQueryPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyQueryPool(MemorySegment device, MemorySegment queryPool, MemorySegment pAllocator) {
        var mh$ = vkDestroyQueryPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyQueryPool", device, queryPool, pAllocator);
            }
            mh$.invokeExact(device, queryPool, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetQueryPoolResults {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetQueryPoolResults"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void *pData, VkDeviceSize stride, VkQueryResultFlags flags)
     * }
     */
    public static FunctionDescriptor vkGetQueryPoolResults$descriptor() {
        return vkGetQueryPoolResults.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void *pData, VkDeviceSize stride, VkQueryResultFlags flags)
     * }
     */
    public static MethodHandle vkGetQueryPoolResults$handle() {
        return vkGetQueryPoolResults.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void *pData, VkDeviceSize stride, VkQueryResultFlags flags)
     * }
     */
    public static int vkGetQueryPoolResults(MemorySegment device, MemorySegment queryPool, int firstQuery, int queryCount, long dataSize, MemorySegment pData, long stride, int flags) {
        var mh$ = vkGetQueryPoolResults.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetQueryPoolResults", device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
            }
            return (int)mh$.invokeExact(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBuffer *pBuffer)
     * }
     */
    public static FunctionDescriptor vkCreateBuffer$descriptor() {
        return vkCreateBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBuffer *pBuffer)
     * }
     */
    public static MethodHandle vkCreateBuffer$handle() {
        return vkCreateBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateBuffer(VkDevice device, const VkBufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBuffer *pBuffer)
     * }
     */
    public static int vkCreateBuffer(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pBuffer) {
        var mh$ = vkCreateBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateBuffer", device, pCreateInfo, pAllocator, pBuffer);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyBuffer$descriptor() {
        return vkDestroyBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyBuffer$handle() {
        return vkDestroyBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyBuffer(MemorySegment device, MemorySegment buffer, MemorySegment pAllocator) {
        var mh$ = vkDestroyBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyBuffer", device, buffer, pAllocator);
            }
            mh$.invokeExact(device, buffer, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateBufferView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateBufferView"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBufferView *pView)
     * }
     */
    public static FunctionDescriptor vkCreateBufferView$descriptor() {
        return vkCreateBufferView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBufferView *pView)
     * }
     */
    public static MethodHandle vkCreateBufferView$handle() {
        return vkCreateBufferView.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkBufferView *pView)
     * }
     */
    public static int vkCreateBufferView(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pView) {
        var mh$ = vkCreateBufferView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateBufferView", device, pCreateInfo, pAllocator, pView);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pView);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyBufferView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyBufferView"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyBufferView$descriptor() {
        return vkDestroyBufferView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyBufferView$handle() {
        return vkDestroyBufferView.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyBufferView(MemorySegment device, MemorySegment bufferView, MemorySegment pAllocator) {
        var mh$ = vkDestroyBufferView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyBufferView", device, bufferView, pAllocator);
            }
            mh$.invokeExact(device, bufferView, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImage *pImage)
     * }
     */
    public static FunctionDescriptor vkCreateImage$descriptor() {
        return vkCreateImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImage *pImage)
     * }
     */
    public static MethodHandle vkCreateImage$handle() {
        return vkCreateImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateImage(VkDevice device, const VkImageCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImage *pImage)
     * }
     */
    public static int vkCreateImage(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pImage) {
        var mh$ = vkCreateImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateImage", device, pCreateInfo, pAllocator, pImage);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pImage);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyImage$descriptor() {
        return vkDestroyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyImage$handle() {
        return vkDestroyImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyImage(MemorySegment device, MemorySegment image, MemorySegment pAllocator) {
        var mh$ = vkDestroyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyImage", device, image, pAllocator);
            }
            mh$.invokeExact(device, image, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageSubresourceLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageSubresourceLayout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource *pSubresource, VkSubresourceLayout *pLayout)
     * }
     */
    public static FunctionDescriptor vkGetImageSubresourceLayout$descriptor() {
        return vkGetImageSubresourceLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource *pSubresource, VkSubresourceLayout *pLayout)
     * }
     */
    public static MethodHandle vkGetImageSubresourceLayout$handle() {
        return vkGetImageSubresourceLayout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource *pSubresource, VkSubresourceLayout *pLayout)
     * }
     */
    public static void vkGetImageSubresourceLayout(MemorySegment device, MemorySegment image, MemorySegment pSubresource, MemorySegment pLayout) {
        var mh$ = vkGetImageSubresourceLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageSubresourceLayout", device, image, pSubresource, pLayout);
            }
            mh$.invokeExact(device, image, pSubresource, pLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateImageView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateImageView"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImageView *pView)
     * }
     */
    public static FunctionDescriptor vkCreateImageView$descriptor() {
        return vkCreateImageView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImageView *pView)
     * }
     */
    public static MethodHandle vkCreateImageView$handle() {
        return vkCreateImageView.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateImageView(VkDevice device, const VkImageViewCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkImageView *pView)
     * }
     */
    public static int vkCreateImageView(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pView) {
        var mh$ = vkCreateImageView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateImageView", device, pCreateInfo, pAllocator, pView);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pView);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyImageView {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyImageView"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyImageView$descriptor() {
        return vkDestroyImageView.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyImageView$handle() {
        return vkDestroyImageView.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyImageView(MemorySegment device, MemorySegment imageView, MemorySegment pAllocator) {
        var mh$ = vkDestroyImageView.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyImageView", device, imageView, pAllocator);
            }
            mh$.invokeExact(device, imageView, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateShaderModule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateShaderModule"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule)
     * }
     */
    public static FunctionDescriptor vkCreateShaderModule$descriptor() {
        return vkCreateShaderModule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule)
     * }
     */
    public static MethodHandle vkCreateShaderModule$handle() {
        return vkCreateShaderModule.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkShaderModule *pShaderModule)
     * }
     */
    public static int vkCreateShaderModule(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pShaderModule) {
        var mh$ = vkCreateShaderModule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateShaderModule", device, pCreateInfo, pAllocator, pShaderModule);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pShaderModule);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyShaderModule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyShaderModule"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyShaderModule$descriptor() {
        return vkDestroyShaderModule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyShaderModule$handle() {
        return vkDestroyShaderModule.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyShaderModule(MemorySegment device, MemorySegment shaderModule, MemorySegment pAllocator) {
        var mh$ = vkDestroyShaderModule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyShaderModule", device, shaderModule, pAllocator);
            }
            mh$.invokeExact(device, shaderModule, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreatePipelineCache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreatePipelineCache"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineCache *pPipelineCache)
     * }
     */
    public static FunctionDescriptor vkCreatePipelineCache$descriptor() {
        return vkCreatePipelineCache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineCache *pPipelineCache)
     * }
     */
    public static MethodHandle vkCreatePipelineCache$handle() {
        return vkCreatePipelineCache.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineCache *pPipelineCache)
     * }
     */
    public static int vkCreatePipelineCache(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPipelineCache) {
        var mh$ = vkCreatePipelineCache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreatePipelineCache", device, pCreateInfo, pAllocator, pPipelineCache);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPipelineCache);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyPipelineCache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyPipelineCache"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyPipelineCache$descriptor() {
        return vkDestroyPipelineCache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyPipelineCache$handle() {
        return vkDestroyPipelineCache.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyPipelineCache(MemorySegment device, MemorySegment pipelineCache, MemorySegment pAllocator) {
        var mh$ = vkDestroyPipelineCache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyPipelineCache", device, pipelineCache, pAllocator);
            }
            mh$.invokeExact(device, pipelineCache, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPipelineCacheData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPipelineCacheData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize, void *pData)
     * }
     */
    public static FunctionDescriptor vkGetPipelineCacheData$descriptor() {
        return vkGetPipelineCacheData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize, void *pData)
     * }
     */
    public static MethodHandle vkGetPipelineCacheData$handle() {
        return vkGetPipelineCacheData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t *pDataSize, void *pData)
     * }
     */
    public static int vkGetPipelineCacheData(MemorySegment device, MemorySegment pipelineCache, MemorySegment pDataSize, MemorySegment pData) {
        var mh$ = vkGetPipelineCacheData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPipelineCacheData", device, pipelineCache, pDataSize, pData);
            }
            return (int)mh$.invokeExact(device, pipelineCache, pDataSize, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkMergePipelineCaches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkMergePipelineCaches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache *pSrcCaches)
     * }
     */
    public static FunctionDescriptor vkMergePipelineCaches$descriptor() {
        return vkMergePipelineCaches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache *pSrcCaches)
     * }
     */
    public static MethodHandle vkMergePipelineCaches$handle() {
        return vkMergePipelineCaches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache *pSrcCaches)
     * }
     */
    public static int vkMergePipelineCaches(MemorySegment device, MemorySegment dstCache, int srcCacheCount, MemorySegment pSrcCaches) {
        var mh$ = vkMergePipelineCaches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkMergePipelineCaches", device, dstCache, srcCacheCount, pSrcCaches);
            }
            return (int)mh$.invokeExact(device, dstCache, srcCacheCount, pSrcCaches);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateGraphicsPipelines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateGraphicsPipelines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static FunctionDescriptor vkCreateGraphicsPipelines$descriptor() {
        return vkCreateGraphicsPipelines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static MethodHandle vkCreateGraphicsPipelines$handle() {
        return vkCreateGraphicsPipelines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static int vkCreateGraphicsPipelines(MemorySegment device, MemorySegment pipelineCache, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pPipelines) {
        var mh$ = vkCreateGraphicsPipelines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateGraphicsPipelines", device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
            }
            return (int)mh$.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateComputePipelines {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateComputePipelines"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static FunctionDescriptor vkCreateComputePipelines$descriptor() {
        return vkCreateComputePipelines.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static MethodHandle vkCreateComputePipelines$handle() {
        return vkCreateComputePipelines.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkPipeline *pPipelines)
     * }
     */
    public static int vkCreateComputePipelines(MemorySegment device, MemorySegment pipelineCache, int createInfoCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pPipelines) {
        var mh$ = vkCreateComputePipelines.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateComputePipelines", device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
            }
            return (int)mh$.invokeExact(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyPipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyPipeline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyPipeline$descriptor() {
        return vkDestroyPipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyPipeline$handle() {
        return vkDestroyPipeline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyPipeline(MemorySegment device, MemorySegment pipeline, MemorySegment pAllocator) {
        var mh$ = vkDestroyPipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyPipeline", device, pipeline, pAllocator);
            }
            mh$.invokeExact(device, pipeline, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreatePipelineLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreatePipelineLayout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineLayout *pPipelineLayout)
     * }
     */
    public static FunctionDescriptor vkCreatePipelineLayout$descriptor() {
        return vkCreatePipelineLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineLayout *pPipelineLayout)
     * }
     */
    public static MethodHandle vkCreatePipelineLayout$handle() {
        return vkCreatePipelineLayout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPipelineLayout *pPipelineLayout)
     * }
     */
    public static int vkCreatePipelineLayout(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPipelineLayout) {
        var mh$ = vkCreatePipelineLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreatePipelineLayout", device, pCreateInfo, pAllocator, pPipelineLayout);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPipelineLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyPipelineLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyPipelineLayout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout layout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyPipelineLayout$descriptor() {
        return vkDestroyPipelineLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout layout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyPipelineLayout$handle() {
        return vkDestroyPipelineLayout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout layout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyPipelineLayout(MemorySegment device, MemorySegment pipelineLayout, MemorySegment pAllocator) {
        var mh$ = vkDestroyPipelineLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyPipelineLayout", device, pipelineLayout, pAllocator);
            }
            mh$.invokeExact(device, pipelineLayout, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateSampler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateSampler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSampler *pSampler)
     * }
     */
    public static FunctionDescriptor vkCreateSampler$descriptor() {
        return vkCreateSampler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSampler *pSampler)
     * }
     */
    public static MethodHandle vkCreateSampler$handle() {
        return vkCreateSampler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateSampler(VkDevice device, const VkSamplerCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSampler *pSampler)
     * }
     */
    public static int vkCreateSampler(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSampler) {
        var mh$ = vkCreateSampler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateSampler", device, pCreateInfo, pAllocator, pSampler);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSampler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroySampler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroySampler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroySampler$descriptor() {
        return vkDestroySampler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroySampler$handle() {
        return vkDestroySampler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroySampler(MemorySegment device, MemorySegment sampler, MemorySegment pAllocator) {
        var mh$ = vkDestroySampler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroySampler", device, sampler, pAllocator);
            }
            mh$.invokeExact(device, sampler, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateDescriptorSetLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDescriptorSetLayout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorSetLayout *pSetLayout)
     * }
     */
    public static FunctionDescriptor vkCreateDescriptorSetLayout$descriptor() {
        return vkCreateDescriptorSetLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorSetLayout *pSetLayout)
     * }
     */
    public static MethodHandle vkCreateDescriptorSetLayout$handle() {
        return vkCreateDescriptorSetLayout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorSetLayout *pSetLayout)
     * }
     */
    public static int vkCreateDescriptorSetLayout(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSetLayout) {
        var mh$ = vkCreateDescriptorSetLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDescriptorSetLayout", device, pCreateInfo, pAllocator, pSetLayout);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSetLayout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDescriptorSetLayout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDescriptorSetLayout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDescriptorSetLayout$descriptor() {
        return vkDestroyDescriptorSetLayout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDescriptorSetLayout$handle() {
        return vkDestroyDescriptorSetLayout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDescriptorSetLayout(MemorySegment device, MemorySegment descriptorSetLayout, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorSetLayout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDescriptorSetLayout", device, descriptorSetLayout, pAllocator);
            }
            mh$.invokeExact(device, descriptorSetLayout, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateDescriptorPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDescriptorPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorPool *pDescriptorPool)
     * }
     */
    public static FunctionDescriptor vkCreateDescriptorPool$descriptor() {
        return vkCreateDescriptorPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorPool *pDescriptorPool)
     * }
     */
    public static MethodHandle vkCreateDescriptorPool$handle() {
        return vkCreateDescriptorPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorPool *pDescriptorPool)
     * }
     */
    public static int vkCreateDescriptorPool(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDescriptorPool) {
        var mh$ = vkCreateDescriptorPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDescriptorPool", device, pCreateInfo, pAllocator, pDescriptorPool);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pDescriptorPool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDescriptorPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDescriptorPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDescriptorPool$descriptor() {
        return vkDestroyDescriptorPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDescriptorPool$handle() {
        return vkDestroyDescriptorPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDescriptorPool(MemorySegment device, MemorySegment descriptorPool, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDescriptorPool", device, descriptorPool, pAllocator);
            }
            mh$.invokeExact(device, descriptorPool, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkResetDescriptorPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkResetDescriptorPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
     * }
     */
    public static FunctionDescriptor vkResetDescriptorPool$descriptor() {
        return vkResetDescriptorPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
     * }
     */
    public static MethodHandle vkResetDescriptorPool$handle() {
        return vkResetDescriptorPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
     * }
     */
    public static int vkResetDescriptorPool(MemorySegment device, MemorySegment descriptorPool, int flags) {
        var mh$ = vkResetDescriptorPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkResetDescriptorPool", device, descriptorPool, flags);
            }
            return (int)mh$.invokeExact(device, descriptorPool, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkAllocateDescriptorSets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAllocateDescriptorSets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo *pAllocateInfo, VkDescriptorSet *pDescriptorSets)
     * }
     */
    public static FunctionDescriptor vkAllocateDescriptorSets$descriptor() {
        return vkAllocateDescriptorSets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo *pAllocateInfo, VkDescriptorSet *pDescriptorSets)
     * }
     */
    public static MethodHandle vkAllocateDescriptorSets$handle() {
        return vkAllocateDescriptorSets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo *pAllocateInfo, VkDescriptorSet *pDescriptorSets)
     * }
     */
    public static int vkAllocateDescriptorSets(MemorySegment device, MemorySegment pAllocateInfo, MemorySegment pDescriptorSets) {
        var mh$ = vkAllocateDescriptorSets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAllocateDescriptorSets", device, pAllocateInfo, pDescriptorSets);
            }
            return (int)mh$.invokeExact(device, pAllocateInfo, pDescriptorSets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkFreeDescriptorSets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkFreeDescriptorSets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets)
     * }
     */
    public static FunctionDescriptor vkFreeDescriptorSets$descriptor() {
        return vkFreeDescriptorSets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets)
     * }
     */
    public static MethodHandle vkFreeDescriptorSets$handle() {
        return vkFreeDescriptorSets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets)
     * }
     */
    public static int vkFreeDescriptorSets(MemorySegment device, MemorySegment descriptorPool, int descriptorSetCount, MemorySegment pDescriptorSets) {
        var mh$ = vkFreeDescriptorSets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkFreeDescriptorSets", device, descriptorPool, descriptorSetCount, pDescriptorSets);
            }
            return (int)mh$.invokeExact(device, descriptorPool, descriptorSetCount, pDescriptorSets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkUpdateDescriptorSets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkUpdateDescriptorSets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet *pDescriptorCopies)
     * }
     */
    public static FunctionDescriptor vkUpdateDescriptorSets$descriptor() {
        return vkUpdateDescriptorSets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet *pDescriptorCopies)
     * }
     */
    public static MethodHandle vkUpdateDescriptorSets$handle() {
        return vkUpdateDescriptorSets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet *pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet *pDescriptorCopies)
     * }
     */
    public static void vkUpdateDescriptorSets(MemorySegment device, int descriptorWriteCount, MemorySegment pDescriptorWrites, int descriptorCopyCount, MemorySegment pDescriptorCopies) {
        var mh$ = vkUpdateDescriptorSets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkUpdateDescriptorSets", device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
            }
            mh$.invokeExact(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateFramebuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateFramebuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFramebuffer *pFramebuffer)
     * }
     */
    public static FunctionDescriptor vkCreateFramebuffer$descriptor() {
        return vkCreateFramebuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFramebuffer *pFramebuffer)
     * }
     */
    public static MethodHandle vkCreateFramebuffer$handle() {
        return vkCreateFramebuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkFramebuffer *pFramebuffer)
     * }
     */
    public static int vkCreateFramebuffer(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pFramebuffer) {
        var mh$ = vkCreateFramebuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateFramebuffer", device, pCreateInfo, pAllocator, pFramebuffer);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pFramebuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyFramebuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyFramebuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyFramebuffer$descriptor() {
        return vkDestroyFramebuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyFramebuffer$handle() {
        return vkDestroyFramebuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyFramebuffer(MemorySegment device, MemorySegment framebuffer, MemorySegment pAllocator) {
        var mh$ = vkDestroyFramebuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyFramebuffer", device, framebuffer, pAllocator);
            }
            mh$.invokeExact(device, framebuffer, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateRenderPass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateRenderPass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static FunctionDescriptor vkCreateRenderPass$descriptor() {
        return vkCreateRenderPass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static MethodHandle vkCreateRenderPass$handle() {
        return vkCreateRenderPass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static int vkCreateRenderPass(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pRenderPass) {
        var mh$ = vkCreateRenderPass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateRenderPass", device, pCreateInfo, pAllocator, pRenderPass);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pRenderPass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyRenderPass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyRenderPass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyRenderPass$descriptor() {
        return vkDestroyRenderPass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyRenderPass$handle() {
        return vkDestroyRenderPass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyRenderPass(MemorySegment device, MemorySegment renderPass, MemorySegment pAllocator) {
        var mh$ = vkDestroyRenderPass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyRenderPass", device, renderPass, pAllocator);
            }
            mh$.invokeExact(device, renderPass, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetRenderAreaGranularity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetRenderAreaGranularity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D *pGranularity)
     * }
     */
    public static FunctionDescriptor vkGetRenderAreaGranularity$descriptor() {
        return vkGetRenderAreaGranularity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D *pGranularity)
     * }
     */
    public static MethodHandle vkGetRenderAreaGranularity$handle() {
        return vkGetRenderAreaGranularity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D *pGranularity)
     * }
     */
    public static void vkGetRenderAreaGranularity(MemorySegment device, MemorySegment renderPass, MemorySegment pGranularity) {
        var mh$ = vkGetRenderAreaGranularity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetRenderAreaGranularity", device, renderPass, pGranularity);
            }
            mh$.invokeExact(device, renderPass, pGranularity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateCommandPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateCommandPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCommandPool *pCommandPool)
     * }
     */
    public static FunctionDescriptor vkCreateCommandPool$descriptor() {
        return vkCreateCommandPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCommandPool *pCommandPool)
     * }
     */
    public static MethodHandle vkCreateCommandPool$handle() {
        return vkCreateCommandPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkCommandPool *pCommandPool)
     * }
     */
    public static int vkCreateCommandPool(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pCommandPool) {
        var mh$ = vkCreateCommandPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateCommandPool", device, pCreateInfo, pAllocator, pCommandPool);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pCommandPool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyCommandPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyCommandPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyCommandPool$descriptor() {
        return vkDestroyCommandPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyCommandPool$handle() {
        return vkDestroyCommandPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyCommandPool(MemorySegment device, MemorySegment commandPool, MemorySegment pAllocator) {
        var mh$ = vkDestroyCommandPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyCommandPool", device, commandPool, pAllocator);
            }
            mh$.invokeExact(device, commandPool, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkResetCommandPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkResetCommandPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
     * }
     */
    public static FunctionDescriptor vkResetCommandPool$descriptor() {
        return vkResetCommandPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
     * }
     */
    public static MethodHandle vkResetCommandPool$handle() {
        return vkResetCommandPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
     * }
     */
    public static int vkResetCommandPool(MemorySegment device, MemorySegment commandPool, int flags) {
        var mh$ = vkResetCommandPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkResetCommandPool", device, commandPool, flags);
            }
            return (int)mh$.invokeExact(device, commandPool, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkAllocateCommandBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAllocateCommandBuffers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo *pAllocateInfo, VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static FunctionDescriptor vkAllocateCommandBuffers$descriptor() {
        return vkAllocateCommandBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo *pAllocateInfo, VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static MethodHandle vkAllocateCommandBuffers$handle() {
        return vkAllocateCommandBuffers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo *pAllocateInfo, VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static int vkAllocateCommandBuffers(MemorySegment device, MemorySegment pAllocateInfo, MemorySegment pCommandBuffers) {
        var mh$ = vkAllocateCommandBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAllocateCommandBuffers", device, pAllocateInfo, pCommandBuffers);
            }
            return (int)mh$.invokeExact(device, pAllocateInfo, pCommandBuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkFreeCommandBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkFreeCommandBuffers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static FunctionDescriptor vkFreeCommandBuffers$descriptor() {
        return vkFreeCommandBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static MethodHandle vkFreeCommandBuffers$handle() {
        return vkFreeCommandBuffers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static void vkFreeCommandBuffers(MemorySegment device, MemorySegment commandPool, int commandBufferCount, MemorySegment pCommandBuffers) {
        var mh$ = vkFreeCommandBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkFreeCommandBuffers", device, commandPool, commandBufferCount, pCommandBuffers);
            }
            mh$.invokeExact(device, commandPool, commandBufferCount, pCommandBuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBeginCommandBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBeginCommandBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo *pBeginInfo)
     * }
     */
    public static FunctionDescriptor vkBeginCommandBuffer$descriptor() {
        return vkBeginCommandBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo *pBeginInfo)
     * }
     */
    public static MethodHandle vkBeginCommandBuffer$handle() {
        return vkBeginCommandBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo *pBeginInfo)
     * }
     */
    public static int vkBeginCommandBuffer(MemorySegment commandBuffer, MemorySegment pBeginInfo) {
        var mh$ = vkBeginCommandBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBeginCommandBuffer", commandBuffer, pBeginInfo);
            }
            return (int)mh$.invokeExact(commandBuffer, pBeginInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEndCommandBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEndCommandBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkEndCommandBuffer$descriptor() {
        return vkEndCommandBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkEndCommandBuffer$handle() {
        return vkEndCommandBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)
     * }
     */
    public static int vkEndCommandBuffer(MemorySegment commandBuffer) {
        var mh$ = vkEndCommandBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEndCommandBuffer", commandBuffer);
            }
            return (int)mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkResetCommandBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkResetCommandBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
     * }
     */
    public static FunctionDescriptor vkResetCommandBuffer$descriptor() {
        return vkResetCommandBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
     * }
     */
    public static MethodHandle vkResetCommandBuffer$handle() {
        return vkResetCommandBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
     * }
     */
    public static int vkResetCommandBuffer(MemorySegment commandBuffer, int flags) {
        var mh$ = vkResetCommandBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkResetCommandBuffer", commandBuffer, flags);
            }
            return (int)mh$.invokeExact(commandBuffer, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindPipeline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindPipeline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
     * }
     */
    public static FunctionDescriptor vkCmdBindPipeline$descriptor() {
        return vkCmdBindPipeline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
     * }
     */
    public static MethodHandle vkCmdBindPipeline$handle() {
        return vkCmdBindPipeline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
     * }
     */
    public static void vkCmdBindPipeline(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment pipeline) {
        var mh$ = vkCmdBindPipeline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindPipeline", commandBuffer, pipelineBindPoint, pipeline);
            }
            mh$.invokeExact(commandBuffer, pipelineBindPoint, pipeline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetViewport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetViewport"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static FunctionDescriptor vkCmdSetViewport$descriptor() {
        return vkCmdSetViewport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static MethodHandle vkCmdSetViewport$handle() {
        return vkCmdSetViewport.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static void vkCmdSetViewport(MemorySegment commandBuffer, int firstViewport, int viewportCount, MemorySegment pViewports) {
        var mh$ = vkCmdSetViewport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetViewport", commandBuffer, firstViewport, viewportCount, pViewports);
            }
            mh$.invokeExact(commandBuffer, firstViewport, viewportCount, pViewports);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetScissor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetScissor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static FunctionDescriptor vkCmdSetScissor$descriptor() {
        return vkCmdSetScissor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static MethodHandle vkCmdSetScissor$handle() {
        return vkCmdSetScissor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static void vkCmdSetScissor(MemorySegment commandBuffer, int firstScissor, int scissorCount, MemorySegment pScissors) {
        var mh$ = vkCmdSetScissor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetScissor", commandBuffer, firstScissor, scissorCount, pScissors);
            }
            mh$.invokeExact(commandBuffer, firstScissor, scissorCount, pScissors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetLineWidth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetLineWidth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
     * }
     */
    public static FunctionDescriptor vkCmdSetLineWidth$descriptor() {
        return vkCmdSetLineWidth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
     * }
     */
    public static MethodHandle vkCmdSetLineWidth$handle() {
        return vkCmdSetLineWidth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
     * }
     */
    public static void vkCmdSetLineWidth(MemorySegment commandBuffer, float lineWidth) {
        var mh$ = vkCmdSetLineWidth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetLineWidth", commandBuffer, lineWidth);
            }
            mh$.invokeExact(commandBuffer, lineWidth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthBias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_FLOAT,
            vulkan_h.C_FLOAT,
            vulkan_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthBias"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthBias$descriptor() {
        return vkCmdSetDepthBias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
     * }
     */
    public static MethodHandle vkCmdSetDepthBias$handle() {
        return vkCmdSetDepthBias.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
     * }
     */
    public static void vkCmdSetDepthBias(MemorySegment commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
        var mh$ = vkCmdSetDepthBias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthBias", commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
            }
            mh$.invokeExact(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetBlendConstants {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetBlendConstants"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
     * }
     */
    public static FunctionDescriptor vkCmdSetBlendConstants$descriptor() {
        return vkCmdSetBlendConstants.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
     * }
     */
    public static MethodHandle vkCmdSetBlendConstants$handle() {
        return vkCmdSetBlendConstants.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4])
     * }
     */
    public static void vkCmdSetBlendConstants(MemorySegment commandBuffer, MemorySegment blendConstants) {
        var mh$ = vkCmdSetBlendConstants.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetBlendConstants", commandBuffer, blendConstants);
            }
            mh$.invokeExact(commandBuffer, blendConstants);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_FLOAT,
            vulkan_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthBounds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthBounds$descriptor() {
        return vkCmdSetDepthBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
     * }
     */
    public static MethodHandle vkCmdSetDepthBounds$handle() {
        return vkCmdSetDepthBounds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
     * }
     */
    public static void vkCmdSetDepthBounds(MemorySegment commandBuffer, float minDepthBounds, float maxDepthBounds) {
        var mh$ = vkCmdSetDepthBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthBounds", commandBuffer, minDepthBounds, maxDepthBounds);
            }
            mh$.invokeExact(commandBuffer, minDepthBounds, maxDepthBounds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetStencilCompareMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetStencilCompareMask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
     * }
     */
    public static FunctionDescriptor vkCmdSetStencilCompareMask$descriptor() {
        return vkCmdSetStencilCompareMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
     * }
     */
    public static MethodHandle vkCmdSetStencilCompareMask$handle() {
        return vkCmdSetStencilCompareMask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
     * }
     */
    public static void vkCmdSetStencilCompareMask(MemorySegment commandBuffer, int faceMask, int compareMask) {
        var mh$ = vkCmdSetStencilCompareMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetStencilCompareMask", commandBuffer, faceMask, compareMask);
            }
            mh$.invokeExact(commandBuffer, faceMask, compareMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetStencilWriteMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetStencilWriteMask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
     * }
     */
    public static FunctionDescriptor vkCmdSetStencilWriteMask$descriptor() {
        return vkCmdSetStencilWriteMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
     * }
     */
    public static MethodHandle vkCmdSetStencilWriteMask$handle() {
        return vkCmdSetStencilWriteMask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
     * }
     */
    public static void vkCmdSetStencilWriteMask(MemorySegment commandBuffer, int faceMask, int writeMask) {
        var mh$ = vkCmdSetStencilWriteMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetStencilWriteMask", commandBuffer, faceMask, writeMask);
            }
            mh$.invokeExact(commandBuffer, faceMask, writeMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetStencilReference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetStencilReference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
     * }
     */
    public static FunctionDescriptor vkCmdSetStencilReference$descriptor() {
        return vkCmdSetStencilReference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
     * }
     */
    public static MethodHandle vkCmdSetStencilReference$handle() {
        return vkCmdSetStencilReference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
     * }
     */
    public static void vkCmdSetStencilReference(MemorySegment commandBuffer, int faceMask, int reference) {
        var mh$ = vkCmdSetStencilReference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetStencilReference", commandBuffer, faceMask, reference);
            }
            mh$.invokeExact(commandBuffer, faceMask, reference);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindDescriptorSets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindDescriptorSets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets)
     * }
     */
    public static FunctionDescriptor vkCmdBindDescriptorSets$descriptor() {
        return vkCmdBindDescriptorSets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets)
     * }
     */
    public static MethodHandle vkCmdBindDescriptorSets$handle() {
        return vkCmdBindDescriptorSets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet *pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t *pDynamicOffsets)
     * }
     */
    public static void vkCmdBindDescriptorSets(MemorySegment commandBuffer, int pipelineBindPoint, MemorySegment layout, int firstSet, int descriptorSetCount, MemorySegment pDescriptorSets, int dynamicOffsetCount, MemorySegment pDynamicOffsets) {
        var mh$ = vkCmdBindDescriptorSets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindDescriptorSets", commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
            }
            mh$.invokeExact(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindIndexBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindIndexBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
     * }
     */
    public static FunctionDescriptor vkCmdBindIndexBuffer$descriptor() {
        return vkCmdBindIndexBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
     * }
     */
    public static MethodHandle vkCmdBindIndexBuffer$handle() {
        return vkCmdBindIndexBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
     * }
     */
    public static void vkCmdBindIndexBuffer(MemorySegment commandBuffer, MemorySegment buffer, long offset, int indexType) {
        var mh$ = vkCmdBindIndexBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindIndexBuffer", commandBuffer, buffer, offset, indexType);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, indexType);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindVertexBuffers {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindVertexBuffers"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets)
     * }
     */
    public static FunctionDescriptor vkCmdBindVertexBuffers$descriptor() {
        return vkCmdBindVertexBuffers.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets)
     * }
     */
    public static MethodHandle vkCmdBindVertexBuffers$handle() {
        return vkCmdBindVertexBuffers.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets)
     * }
     */
    public static void vkCmdBindVertexBuffers(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets) {
        var mh$ = vkCmdBindVertexBuffers.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindVertexBuffers", commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
            }
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDraw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static FunctionDescriptor vkCmdDraw$descriptor() {
        return vkCmdDraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static MethodHandle vkCmdDraw$handle() {
        return vkCmdDraw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
     * }
     */
    public static void vkCmdDraw(MemorySegment commandBuffer, int vertexCount, int instanceCount, int firstVertex, int firstInstance) {
        var mh$ = vkCmdDraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDraw", commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
            }
            mh$.invokeExact(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndexed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndexed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndexed$descriptor() {
        return vkCmdDrawIndexed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
     * }
     */
    public static MethodHandle vkCmdDrawIndexed$handle() {
        return vkCmdDrawIndexed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
     * }
     */
    public static void vkCmdDrawIndexed(MemorySegment commandBuffer, int indexCount, int instanceCount, int firstIndex, int vertexOffset, int firstInstance) {
        var mh$ = vkCmdDrawIndexed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndexed", commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
            }
            mh$.invokeExact(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndirect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndirect$descriptor() {
        return vkCmdDrawIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndirect$handle() {
        return vkCmdDrawIndirect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndirect(MemorySegment commandBuffer, MemorySegment buffer, long offset, int drawCount, int stride) {
        var mh$ = vkCmdDrawIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndirect", commandBuffer, buffer, offset, drawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, drawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndexedIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndexedIndirect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndexedIndirect$descriptor() {
        return vkCmdDrawIndexedIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndexedIndirect$handle() {
        return vkCmdDrawIndexedIndirect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndexedIndirect(MemorySegment commandBuffer, MemorySegment buffer, long offset, int drawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndexedIndirect", commandBuffer, buffer, offset, drawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, drawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDispatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDispatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static FunctionDescriptor vkCmdDispatch$descriptor() {
        return vkCmdDispatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static MethodHandle vkCmdDispatch$handle() {
        return vkCmdDispatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static void vkCmdDispatch(MemorySegment commandBuffer, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDispatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDispatch", commandBuffer, groupCountX, groupCountY, groupCountZ);
            }
            mh$.invokeExact(commandBuffer, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDispatchIndirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDispatchIndirect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
     * }
     */
    public static FunctionDescriptor vkCmdDispatchIndirect$descriptor() {
        return vkCmdDispatchIndirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
     * }
     */
    public static MethodHandle vkCmdDispatchIndirect$handle() {
        return vkCmdDispatchIndirect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
     * }
     */
    public static void vkCmdDispatchIndirect(MemorySegment commandBuffer, MemorySegment buffer, long offset) {
        var mh$ = vkCmdDispatchIndirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDispatchIndirect", commandBuffer, buffer, offset);
            }
            mh$.invokeExact(commandBuffer, buffer, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions)
     * }
     */
    public static FunctionDescriptor vkCmdCopyBuffer$descriptor() {
        return vkCmdCopyBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions)
     * }
     */
    public static MethodHandle vkCmdCopyBuffer$handle() {
        return vkCmdCopyBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy *pRegions)
     * }
     */
    public static void vkCmdCopyBuffer(MemorySegment commandBuffer, MemorySegment srcBuffer, MemorySegment dstBuffer, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyBuffer", commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
            }
            mh$.invokeExact(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy *pRegions)
     * }
     */
    public static FunctionDescriptor vkCmdCopyImage$descriptor() {
        return vkCmdCopyImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy *pRegions)
     * }
     */
    public static MethodHandle vkCmdCopyImage$handle() {
        return vkCmdCopyImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy *pRegions)
     * }
     */
    public static void vkCmdCopyImage(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
            }
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBlitImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBlitImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit *pRegions, VkFilter filter)
     * }
     */
    public static FunctionDescriptor vkCmdBlitImage$descriptor() {
        return vkCmdBlitImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit *pRegions, VkFilter filter)
     * }
     */
    public static MethodHandle vkCmdBlitImage$handle() {
        return vkCmdBlitImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit *pRegions, VkFilter filter)
     * }
     */
    public static void vkCmdBlitImage(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions, int filter) {
        var mh$ = vkCmdBlitImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBlitImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
            }
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyBufferToImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyBufferToImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy *pRegions)
     * }
     */
    public static FunctionDescriptor vkCmdCopyBufferToImage$descriptor() {
        return vkCmdCopyBufferToImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy *pRegions)
     * }
     */
    public static MethodHandle vkCmdCopyBufferToImage$handle() {
        return vkCmdCopyBufferToImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy *pRegions)
     * }
     */
    public static void vkCmdCopyBufferToImage(MemorySegment commandBuffer, MemorySegment srcBuffer, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyBufferToImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyBufferToImage", commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
            }
            mh$.invokeExact(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyImageToBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyImageToBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy *pRegions)
     * }
     */
    public static FunctionDescriptor vkCmdCopyImageToBuffer$descriptor() {
        return vkCmdCopyImageToBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy *pRegions)
     * }
     */
    public static MethodHandle vkCmdCopyImageToBuffer$handle() {
        return vkCmdCopyImageToBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy *pRegions)
     * }
     */
    public static void vkCmdCopyImageToBuffer(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstBuffer, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdCopyImageToBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyImageToBuffer", commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
            }
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdUpdateBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdUpdateBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData)
     * }
     */
    public static FunctionDescriptor vkCmdUpdateBuffer$descriptor() {
        return vkCmdUpdateBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData)
     * }
     */
    public static MethodHandle vkCmdUpdateBuffer$handle() {
        return vkCmdUpdateBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void *pData)
     * }
     */
    public static void vkCmdUpdateBuffer(MemorySegment commandBuffer, MemorySegment dstBuffer, long dstOffset, long dataSize, MemorySegment pData) {
        var mh$ = vkCmdUpdateBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdUpdateBuffer", commandBuffer, dstBuffer, dstOffset, dataSize, pData);
            }
            mh$.invokeExact(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdFillBuffer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdFillBuffer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
     * }
     */
    public static FunctionDescriptor vkCmdFillBuffer$descriptor() {
        return vkCmdFillBuffer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
     * }
     */
    public static MethodHandle vkCmdFillBuffer$handle() {
        return vkCmdFillBuffer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
     * }
     */
    public static void vkCmdFillBuffer(MemorySegment commandBuffer, MemorySegment dstBuffer, long dstOffset, long size, int data) {
        var mh$ = vkCmdFillBuffer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdFillBuffer", commandBuffer, dstBuffer, dstOffset, size, data);
            }
            mh$.invokeExact(commandBuffer, dstBuffer, dstOffset, size, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdClearColorImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdClearColorImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue *pColor, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
     * }
     */
    public static FunctionDescriptor vkCmdClearColorImage$descriptor() {
        return vkCmdClearColorImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue *pColor, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
     * }
     */
    public static MethodHandle vkCmdClearColorImage$handle() {
        return vkCmdClearColorImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue *pColor, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
     * }
     */
    public static void vkCmdClearColorImage(MemorySegment commandBuffer, MemorySegment image, int imageLayout, MemorySegment pColor, int rangeCount, MemorySegment pRanges) {
        var mh$ = vkCmdClearColorImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdClearColorImage", commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
            }
            mh$.invokeExact(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdClearDepthStencilImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdClearDepthStencilImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
     * }
     */
    public static FunctionDescriptor vkCmdClearDepthStencilImage$descriptor() {
        return vkCmdClearDepthStencilImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
     * }
     */
    public static MethodHandle vkCmdClearDepthStencilImage$handle() {
        return vkCmdClearDepthStencilImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue *pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange *pRanges)
     * }
     */
    public static void vkCmdClearDepthStencilImage(MemorySegment commandBuffer, MemorySegment image, int imageLayout, MemorySegment pDepthStencil, int rangeCount, MemorySegment pRanges) {
        var mh$ = vkCmdClearDepthStencilImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdClearDepthStencilImage", commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
            }
            mh$.invokeExact(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdClearAttachments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdClearAttachments"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment *pAttachments, uint32_t rectCount, const VkClearRect *pRects)
     * }
     */
    public static FunctionDescriptor vkCmdClearAttachments$descriptor() {
        return vkCmdClearAttachments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment *pAttachments, uint32_t rectCount, const VkClearRect *pRects)
     * }
     */
    public static MethodHandle vkCmdClearAttachments$handle() {
        return vkCmdClearAttachments.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment *pAttachments, uint32_t rectCount, const VkClearRect *pRects)
     * }
     */
    public static void vkCmdClearAttachments(MemorySegment commandBuffer, int attachmentCount, MemorySegment pAttachments, int rectCount, MemorySegment pRects) {
        var mh$ = vkCmdClearAttachments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdClearAttachments", commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
            }
            mh$.invokeExact(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdResolveImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdResolveImage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve *pRegions)
     * }
     */
    public static FunctionDescriptor vkCmdResolveImage$descriptor() {
        return vkCmdResolveImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve *pRegions)
     * }
     */
    public static MethodHandle vkCmdResolveImage$handle() {
        return vkCmdResolveImage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve *pRegions)
     * }
     */
    public static void vkCmdResolveImage(MemorySegment commandBuffer, MemorySegment srcImage, int srcImageLayout, MemorySegment dstImage, int dstImageLayout, int regionCount, MemorySegment pRegions) {
        var mh$ = vkCmdResolveImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdResolveImage", commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
            }
            mh$.invokeExact(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
     * }
     */
    public static FunctionDescriptor vkCmdSetEvent$descriptor() {
        return vkCmdSetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
     * }
     */
    public static MethodHandle vkCmdSetEvent$handle() {
        return vkCmdSetEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
     * }
     */
    public static void vkCmdSetEvent(MemorySegment commandBuffer, MemorySegment event, int stageMask) {
        var mh$ = vkCmdSetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetEvent", commandBuffer, event, stageMask);
            }
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdResetEvent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdResetEvent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
     * }
     */
    public static FunctionDescriptor vkCmdResetEvent$descriptor() {
        return vkCmdResetEvent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
     * }
     */
    public static MethodHandle vkCmdResetEvent$handle() {
        return vkCmdResetEvent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
     * }
     */
    public static void vkCmdResetEvent(MemorySegment commandBuffer, MemorySegment event, int stageMask) {
        var mh$ = vkCmdResetEvent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdResetEvent", commandBuffer, event, stageMask);
            }
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWaitEvents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWaitEvents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
     * }
     */
    public static FunctionDescriptor vkCmdWaitEvents$descriptor() {
        return vkCmdWaitEvents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
     * }
     */
    public static MethodHandle vkCmdWaitEvents$handle() {
        return vkCmdWaitEvents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
     * }
     */
    public static void vkCmdWaitEvents(MemorySegment commandBuffer, int eventCount, MemorySegment pEvents, int srcStageMask, int dstStageMask, int memoryBarrierCount, MemorySegment pMemoryBarriers, int bufferMemoryBarrierCount, MemorySegment pBufferMemoryBarriers, int imageMemoryBarrierCount, MemorySegment pImageMemoryBarriers) {
        var mh$ = vkCmdWaitEvents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWaitEvents", commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
            }
            mh$.invokeExact(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPipelineBarrier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPipelineBarrier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
     * }
     */
    public static FunctionDescriptor vkCmdPipelineBarrier$descriptor() {
        return vkCmdPipelineBarrier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
     * }
     */
    public static MethodHandle vkCmdPipelineBarrier$handle() {
        return vkCmdPipelineBarrier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier *pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier *pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier *pImageMemoryBarriers)
     * }
     */
    public static void vkCmdPipelineBarrier(MemorySegment commandBuffer, int srcStageMask, int dstStageMask, int dependencyFlags, int memoryBarrierCount, MemorySegment pMemoryBarriers, int bufferMemoryBarrierCount, MemorySegment pBufferMemoryBarriers, int imageMemoryBarrierCount, MemorySegment pImageMemoryBarriers) {
        var mh$ = vkCmdPipelineBarrier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPipelineBarrier", commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
            }
            mh$.invokeExact(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
     * }
     */
    public static FunctionDescriptor vkCmdBeginQuery$descriptor() {
        return vkCmdBeginQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
     * }
     */
    public static MethodHandle vkCmdBeginQuery$handle() {
        return vkCmdBeginQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
     * }
     */
    public static void vkCmdBeginQuery(MemorySegment commandBuffer, MemorySegment queryPool, int query, int flags) {
        var mh$ = vkCmdBeginQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginQuery", commandBuffer, queryPool, query, flags);
            }
            mh$.invokeExact(commandBuffer, queryPool, query, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndQuery {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndQuery"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static FunctionDescriptor vkCmdEndQuery$descriptor() {
        return vkCmdEndQuery.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static MethodHandle vkCmdEndQuery$handle() {
        return vkCmdEndQuery.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static void vkCmdEndQuery(MemorySegment commandBuffer, MemorySegment queryPool, int query) {
        var mh$ = vkCmdEndQuery.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndQuery", commandBuffer, queryPool, query);
            }
            mh$.invokeExact(commandBuffer, queryPool, query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdResetQueryPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdResetQueryPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static FunctionDescriptor vkCmdResetQueryPool$descriptor() {
        return vkCmdResetQueryPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static MethodHandle vkCmdResetQueryPool$handle() {
        return vkCmdResetQueryPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static void vkCmdResetQueryPool(MemorySegment commandBuffer, MemorySegment queryPool, int firstQuery, int queryCount) {
        var mh$ = vkCmdResetQueryPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdResetQueryPool", commandBuffer, queryPool, firstQuery, queryCount);
            }
            mh$.invokeExact(commandBuffer, queryPool, firstQuery, queryCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWriteTimestamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWriteTimestamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static FunctionDescriptor vkCmdWriteTimestamp$descriptor() {
        return vkCmdWriteTimestamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static MethodHandle vkCmdWriteTimestamp$handle() {
        return vkCmdWriteTimestamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static void vkCmdWriteTimestamp(MemorySegment commandBuffer, int pipelineStage, MemorySegment queryPool, int query) {
        var mh$ = vkCmdWriteTimestamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWriteTimestamp", commandBuffer, pipelineStage, queryPool, query);
            }
            mh$.invokeExact(commandBuffer, pipelineStage, queryPool, query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyQueryPoolResults {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyQueryPoolResults"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
     * }
     */
    public static FunctionDescriptor vkCmdCopyQueryPoolResults$descriptor() {
        return vkCmdCopyQueryPoolResults.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
     * }
     */
    public static MethodHandle vkCmdCopyQueryPoolResults$handle() {
        return vkCmdCopyQueryPoolResults.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
     * }
     */
    public static void vkCmdCopyQueryPoolResults(MemorySegment commandBuffer, MemorySegment queryPool, int firstQuery, int queryCount, MemorySegment dstBuffer, long dstOffset, long stride, int flags) {
        var mh$ = vkCmdCopyQueryPoolResults.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyQueryPoolResults", commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
            }
            mh$.invokeExact(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPushConstants {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPushConstants"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void *pValues)
     * }
     */
    public static FunctionDescriptor vkCmdPushConstants$descriptor() {
        return vkCmdPushConstants.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void *pValues)
     * }
     */
    public static MethodHandle vkCmdPushConstants$handle() {
        return vkCmdPushConstants.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void *pValues)
     * }
     */
    public static void vkCmdPushConstants(MemorySegment commandBuffer, MemorySegment layout, int stageFlags, int offset, int size, MemorySegment pValues) {
        var mh$ = vkCmdPushConstants.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPushConstants", commandBuffer, layout, stageFlags, offset, size, pValues);
            }
            mh$.invokeExact(commandBuffer, layout, stageFlags, offset, size, pValues);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginRenderPass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginRenderPass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents)
     * }
     */
    public static FunctionDescriptor vkCmdBeginRenderPass$descriptor() {
        return vkCmdBeginRenderPass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents)
     * }
     */
    public static MethodHandle vkCmdBeginRenderPass$handle() {
        return vkCmdBeginRenderPass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, VkSubpassContents contents)
     * }
     */
    public static void vkCmdBeginRenderPass(MemorySegment commandBuffer, MemorySegment pRenderPassBegin, int contents) {
        var mh$ = vkCmdBeginRenderPass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginRenderPass", commandBuffer, pRenderPassBegin, contents);
            }
            mh$.invokeExact(commandBuffer, pRenderPassBegin, contents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdNextSubpass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdNextSubpass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
     * }
     */
    public static FunctionDescriptor vkCmdNextSubpass$descriptor() {
        return vkCmdNextSubpass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
     * }
     */
    public static MethodHandle vkCmdNextSubpass$handle() {
        return vkCmdNextSubpass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
     * }
     */
    public static void vkCmdNextSubpass(MemorySegment commandBuffer, int contents) {
        var mh$ = vkCmdNextSubpass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdNextSubpass", commandBuffer, contents);
            }
            mh$.invokeExact(commandBuffer, contents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndRenderPass {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndRenderPass"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkCmdEndRenderPass$descriptor() {
        return vkCmdEndRenderPass.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkCmdEndRenderPass$handle() {
        return vkCmdEndRenderPass.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
     * }
     */
    public static void vkCmdEndRenderPass(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndRenderPass.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndRenderPass", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdExecuteCommands {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdExecuteCommands"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static FunctionDescriptor vkCmdExecuteCommands$descriptor() {
        return vkCmdExecuteCommands.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static MethodHandle vkCmdExecuteCommands$handle() {
        return vkCmdExecuteCommands.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer *pCommandBuffers)
     * }
     */
    public static void vkCmdExecuteCommands(MemorySegment commandBuffer, int commandBufferCount, MemorySegment pCommandBuffers) {
        var mh$ = vkCmdExecuteCommands.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdExecuteCommands", commandBuffer, commandBufferCount, pCommandBuffers);
            }
            mh$.invokeExact(commandBuffer, commandBufferCount, pCommandBuffers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkSamplerYcbcrConversion_T *VkSamplerYcbcrConversion
     * }
     */
    public static final AddressLayout VkSamplerYcbcrConversion = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct VkDescriptorUpdateTemplate_T *VkDescriptorUpdateTemplate
     * }
     */
    public static final AddressLayout VkDescriptorUpdateTemplate = vulkan_h.C_POINTER;
    private static final int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES() {
        return VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES;
    }
    private static final int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY() {
        return VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY;
    }
    private static final int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = 0
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR() {
        return VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR;
    }
    private static final int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = 1
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR() {
        return VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR;
    }
    private static final int VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPointClippingBehavior.VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM() {
        return VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM;
    }
    private static final int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT() {
        return VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT;
    }
    private static final int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT() {
        return VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT;
    }
    private static final int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = 0
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR() {
        return VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR;
    }
    private static final int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = 1
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR() {
        return VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR;
    }
    private static final int VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkTessellationDomainOrigin.VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM() {
        return VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = 0
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = 1
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = 2
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = 3
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = 4
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR;
    }
    private static final int VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrModelConversion.VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM() {
        return VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM;
    }
    private static final int VK_SAMPLER_YCBCR_RANGE_ITU_FULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_FULL() {
        return VK_SAMPLER_YCBCR_RANGE_ITU_FULL;
    }
    private static final int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW() {
        return VK_SAMPLER_YCBCR_RANGE_ITU_NARROW;
    }
    private static final int VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = 0
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR() {
        return VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR;
    }
    private static final int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = 1
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR() {
        return VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR;
    }
    private static final int VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerYcbcrRange.VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SAMPLER_YCBCR_RANGE_MAX_ENUM() {
        return VK_SAMPLER_YCBCR_RANGE_MAX_ENUM;
    }
    private static final int VK_CHROMA_LOCATION_COSITED_EVEN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN = 0
     * }
     */
    public static int VK_CHROMA_LOCATION_COSITED_EVEN() {
        return VK_CHROMA_LOCATION_COSITED_EVEN;
    }
    private static final int VK_CHROMA_LOCATION_MIDPOINT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT = 1
     * }
     */
    public static int VK_CHROMA_LOCATION_MIDPOINT() {
        return VK_CHROMA_LOCATION_MIDPOINT;
    }
    private static final int VK_CHROMA_LOCATION_COSITED_EVEN_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_COSITED_EVEN_KHR = 0
     * }
     */
    public static int VK_CHROMA_LOCATION_COSITED_EVEN_KHR() {
        return VK_CHROMA_LOCATION_COSITED_EVEN_KHR;
    }
    private static final int VK_CHROMA_LOCATION_MIDPOINT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_MIDPOINT_KHR = 1
     * }
     */
    public static int VK_CHROMA_LOCATION_MIDPOINT_KHR() {
        return VK_CHROMA_LOCATION_MIDPOINT_KHR;
    }
    private static final int VK_CHROMA_LOCATION_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkChromaLocation.VK_CHROMA_LOCATION_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_CHROMA_LOCATION_MAX_ENUM() {
        return VK_CHROMA_LOCATION_MAX_ENUM;
    }
    private static final int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET() {
        return VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET;
    }
    private static final int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR() {
        return VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR;
    }
    private static final int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = 0
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR() {
        return VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR;
    }
    private static final int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorUpdateTemplateType.VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM() {
        return VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM;
    }
    private static final int VK_SUBGROUP_FEATURE_BASIC_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BASIC_BIT = 1
     * }
     */
    public static int VK_SUBGROUP_FEATURE_BASIC_BIT() {
        return VK_SUBGROUP_FEATURE_BASIC_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_VOTE_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_VOTE_BIT = 2
     * }
     */
    public static int VK_SUBGROUP_FEATURE_VOTE_BIT() {
        return VK_SUBGROUP_FEATURE_VOTE_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 4
     * }
     */
    public static int VK_SUBGROUP_FEATURE_ARITHMETIC_BIT() {
        return VK_SUBGROUP_FEATURE_ARITHMETIC_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_BALLOT_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_BALLOT_BIT = 8
     * }
     */
    public static int VK_SUBGROUP_FEATURE_BALLOT_BIT() {
        return VK_SUBGROUP_FEATURE_BALLOT_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_SHUFFLE_BIT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 16
     * }
     */
    public static int VK_SUBGROUP_FEATURE_SHUFFLE_BIT() {
        return VK_SUBGROUP_FEATURE_SHUFFLE_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 32
     * }
     */
    public static int VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT() {
        return VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_CLUSTERED_BIT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 64
     * }
     */
    public static int VK_SUBGROUP_FEATURE_CLUSTERED_BIT() {
        return VK_SUBGROUP_FEATURE_CLUSTERED_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_QUAD_BIT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_QUAD_BIT = 128
     * }
     */
    public static int VK_SUBGROUP_FEATURE_QUAD_BIT() {
        return VK_SUBGROUP_FEATURE_QUAD_BIT;
    }
    private static final int VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 256
     * }
     */
    public static int VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV() {
        return VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV;
    }
    private static final int VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSubgroupFeatureFlagBits.VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM() {
        return VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSubgroupFeatureFlags
     * }
     */
    public static final OfInt VkSubgroupFeatureFlags = vulkan_h.C_INT;
    private static final int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 1
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT() {
        return VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT;
    }
    private static final int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 2
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT() {
        return VK_PEER_MEMORY_FEATURE_COPY_DST_BIT;
    }
    private static final int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 4
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT() {
        return VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT;
    }
    private static final int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 8
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT() {
        return VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT;
    }
    private static final int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = 1
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR() {
        return VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR;
    }
    private static final int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = 2
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR() {
        return VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR;
    }
    private static final int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = 4
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR() {
        return VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR;
    }
    private static final int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = 8
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR() {
        return VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR;
    }
    private static final int VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPeerMemoryFeatureFlagBits.VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM() {
        return VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPeerMemoryFeatureFlags
     * }
     */
    public static final OfInt VkPeerMemoryFeatureFlags = vulkan_h.C_INT;
    private static final int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 1
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT() {
        return VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT;
    }
    private static final int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 2
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT() {
        return VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT;
    }
    private static final int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 4
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT() {
        return VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT;
    }
    private static final int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = 1
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR() {
        return VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR;
    }
    private static final int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = 2
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR() {
        return VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR;
    }
    private static final int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 4
     * }
     */
    public static int VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR() {
        return VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR;
    }
    private static final int VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkMemoryAllocateFlagBits.VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM() {
        return VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkMemoryAllocateFlags
     * }
     */
    public static final OfInt VkMemoryAllocateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkCommandPoolTrimFlags
     * }
     */
    public static final OfInt VkCommandPoolTrimFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDescriptorUpdateTemplateCreateFlags
     * }
     */
    public static final OfInt VkDescriptorUpdateTemplateCreateFlags = vulkan_h.C_INT;
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 1
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 8
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 16
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 32
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 64
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 512
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 1024
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 128
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 256
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 2048
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 4096
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX = 16384
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_SCREEN_BUFFER_BIT_QNX;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = 8
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = 16
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = 32
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = 64
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryHandleTypeFlagBits.VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM() {
        return VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalMemoryHandleTypeFlags
     * }
     */
    public static final OfInt VkExternalMemoryHandleTypeFlags = vulkan_h.C_INT;
    private static final int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 1
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT() {
        return VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 2
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT() {
        return VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 4
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT() {
        return VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = 1
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = 2
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = 4
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR() {
        return VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalMemoryFeatureFlagBits.VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM() {
        return VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalMemoryFeatureFlags
     * }
     */
    public static final OfInt VkExternalMemoryFeatureFlags = vulkan_h.C_INT;
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 8
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 8
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR;
    }
    private static final int VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceHandleTypeFlagBits.VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM() {
        return VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalFenceHandleTypeFlags
     * }
     */
    public static final OfInt VkExternalFenceHandleTypeFlags = vulkan_h.C_INT;
    private static final int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 1
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT() {
        return VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT;
    }
    private static final int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 2
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT() {
        return VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT;
    }
    private static final int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = 1
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR() {
        return VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = 2
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR() {
        return VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalFenceFeatureFlagBits.VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM() {
        return VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalFenceFeatureFlags
     * }
     */
    public static final OfInt VkExternalFenceFeatureFlags = vulkan_h.C_INT;
    private static final int VK_FENCE_IMPORT_TEMPORARY_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT = 1
     * }
     */
    public static int VK_FENCE_IMPORT_TEMPORARY_BIT() {
        return VK_FENCE_IMPORT_TEMPORARY_BIT;
    }
    private static final int VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkFenceImportFlagBits.VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = 1
     * }
     */
    public static int VK_FENCE_IMPORT_TEMPORARY_BIT_KHR() {
        return VK_FENCE_IMPORT_TEMPORARY_BIT_KHR;
    }
    private static final int VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkFenceImportFlagBits.VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM() {
        return VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkFenceImportFlags
     * }
     */
    public static final OfInt VkFenceImportFlags = vulkan_h.C_INT;
    private static final int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 1
     * }
     */
    public static int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT() {
        return VK_SEMAPHORE_IMPORT_TEMPORARY_BIT;
    }
    private static final int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = 1
     * }
     */
    public static int VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR() {
        return VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR;
    }
    private static final int VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreImportFlagBits.VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM() {
        return VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSemaphoreImportFlags
     * }
     */
    public static final OfInt VkSemaphoreImportFlags = vulkan_h.C_INT;
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 1
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 2
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 4
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 8
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 16
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 128
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = 8
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = 1
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = 2
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = 4
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = 8
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = 16
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreHandleTypeFlagBits.VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM() {
        return VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalSemaphoreHandleTypeFlags
     * }
     */
    public static final OfInt VkExternalSemaphoreHandleTypeFlags = vulkan_h.C_INT;
    private static final int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 1
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT() {
        return VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 2
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT() {
        return VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = 1
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR() {
        return VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = 2
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR() {
        return VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR;
    }
    private static final int VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkExternalSemaphoreFeatureFlagBits.VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM() {
        return VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkExternalSemaphoreFeatureFlags
     * }
     */
    public static final OfInt VkExternalSemaphoreFeatureFlags = vulkan_h.C_INT;

    private static class vkEnumerateInstanceVersion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumerateInstanceVersion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceVersion(uint32_t *pApiVersion)
     * }
     */
    public static FunctionDescriptor vkEnumerateInstanceVersion$descriptor() {
        return vkEnumerateInstanceVersion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceVersion(uint32_t *pApiVersion)
     * }
     */
    public static MethodHandle vkEnumerateInstanceVersion$handle() {
        return vkEnumerateInstanceVersion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumerateInstanceVersion(uint32_t *pApiVersion)
     * }
     */
    public static int vkEnumerateInstanceVersion(MemorySegment pApiVersion) {
        var mh$ = vkEnumerateInstanceVersion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumerateInstanceVersion", pApiVersion);
            }
            return (int)mh$.invokeExact(pApiVersion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindBufferMemory2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindBufferMemory2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos)
     * }
     */
    public static FunctionDescriptor vkBindBufferMemory2$descriptor() {
        return vkBindBufferMemory2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos)
     * }
     */
    public static MethodHandle vkBindBufferMemory2$handle() {
        return vkBindBufferMemory2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfo *pBindInfos)
     * }
     */
    public static int vkBindBufferMemory2(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindBufferMemory2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindBufferMemory2", device, bindInfoCount, pBindInfos);
            }
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindImageMemory2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindImageMemory2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos)
     * }
     */
    public static FunctionDescriptor vkBindImageMemory2$descriptor() {
        return vkBindImageMemory2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos)
     * }
     */
    public static MethodHandle vkBindImageMemory2$handle() {
        return vkBindImageMemory2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfo *pBindInfos)
     * }
     */
    public static int vkBindImageMemory2(MemorySegment device, int bindInfoCount, MemorySegment pBindInfos) {
        var mh$ = vkBindImageMemory2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindImageMemory2", device, bindInfoCount, pBindInfos);
            }
            return (int)mh$.invokeExact(device, bindInfoCount, pBindInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceGroupPeerMemoryFeatures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceGroupPeerMemoryFeatures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures)
     * }
     */
    public static FunctionDescriptor vkGetDeviceGroupPeerMemoryFeatures$descriptor() {
        return vkGetDeviceGroupPeerMemoryFeatures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures)
     * }
     */
    public static MethodHandle vkGetDeviceGroupPeerMemoryFeatures$handle() {
        return vkGetDeviceGroupPeerMemoryFeatures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlags *pPeerMemoryFeatures)
     * }
     */
    public static void vkGetDeviceGroupPeerMemoryFeatures(MemorySegment device, int heapIndex, int localDeviceIndex, int remoteDeviceIndex, MemorySegment pPeerMemoryFeatures) {
        var mh$ = vkGetDeviceGroupPeerMemoryFeatures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceGroupPeerMemoryFeatures", device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
            }
            mh$.invokeExact(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDeviceMask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDeviceMask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
     * }
     */
    public static FunctionDescriptor vkCmdSetDeviceMask$descriptor() {
        return vkCmdSetDeviceMask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
     * }
     */
    public static MethodHandle vkCmdSetDeviceMask$handle() {
        return vkCmdSetDeviceMask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
     * }
     */
    public static void vkCmdSetDeviceMask(MemorySegment commandBuffer, int deviceMask) {
        var mh$ = vkCmdSetDeviceMask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDeviceMask", commandBuffer, deviceMask);
            }
            mh$.invokeExact(commandBuffer, deviceMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDispatchBase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDispatchBase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static FunctionDescriptor vkCmdDispatchBase$descriptor() {
        return vkCmdDispatchBase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static MethodHandle vkCmdDispatchBase$handle() {
        return vkCmdDispatchBase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
     * }
     */
    public static void vkCmdDispatchBase(MemorySegment commandBuffer, int baseGroupX, int baseGroupY, int baseGroupZ, int groupCountX, int groupCountY, int groupCountZ) {
        var mh$ = vkCmdDispatchBase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDispatchBase", commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
            }
            mh$.invokeExact(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkEnumeratePhysicalDeviceGroups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkEnumeratePhysicalDeviceGroups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t *pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties)
     * }
     */
    public static FunctionDescriptor vkEnumeratePhysicalDeviceGroups$descriptor() {
        return vkEnumeratePhysicalDeviceGroups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t *pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties)
     * }
     */
    public static MethodHandle vkEnumeratePhysicalDeviceGroups$handle() {
        return vkEnumeratePhysicalDeviceGroups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t *pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties *pPhysicalDeviceGroupProperties)
     * }
     */
    public static int vkEnumeratePhysicalDeviceGroups(MemorySegment instance, MemorySegment pPhysicalDeviceGroupCount, MemorySegment pPhysicalDeviceGroupProperties) {
        var mh$ = vkEnumeratePhysicalDeviceGroups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkEnumeratePhysicalDeviceGroups", instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
            }
            return (int)mh$.invokeExact(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageMemoryRequirements2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageMemoryRequirements2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetImageMemoryRequirements2$descriptor() {
        return vkGetImageMemoryRequirements2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetImageMemoryRequirements2$handle() {
        return vkGetImageMemoryRequirements2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetImageMemoryRequirements2(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetImageMemoryRequirements2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageMemoryRequirements2", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferMemoryRequirements2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferMemoryRequirements2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetBufferMemoryRequirements2$descriptor() {
        return vkGetBufferMemoryRequirements2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetBufferMemoryRequirements2$handle() {
        return vkGetBufferMemoryRequirements2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2 *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetBufferMemoryRequirements2(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetBufferMemoryRequirements2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferMemoryRequirements2", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetImageSparseMemoryRequirements2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetImageSparseMemoryRequirements2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetImageSparseMemoryRequirements2$descriptor() {
        return vkGetImageSparseMemoryRequirements2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetImageSparseMemoryRequirements2$handle() {
        return vkGetImageSparseMemoryRequirements2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2 *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static void vkGetImageSparseMemoryRequirements2(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetImageSparseMemoryRequirements2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetImageSparseMemoryRequirements2", device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceFeatures2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceFeatures2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceFeatures2$descriptor() {
        return vkGetPhysicalDeviceFeatures2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceFeatures2$handle() {
        return vkGetPhysicalDeviceFeatures2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2 *pFeatures)
     * }
     */
    public static void vkGetPhysicalDeviceFeatures2(MemorySegment physicalDevice, MemorySegment pFeatures) {
        var mh$ = vkGetPhysicalDeviceFeatures2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceFeatures2", physicalDevice, pFeatures);
            }
            mh$.invokeExact(physicalDevice, pFeatures);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceProperties2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceProperties2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceProperties2$descriptor() {
        return vkGetPhysicalDeviceProperties2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceProperties2$handle() {
        return vkGetPhysicalDeviceProperties2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2 *pProperties)
     * }
     */
    public static void vkGetPhysicalDeviceProperties2(MemorySegment physicalDevice, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceProperties2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceProperties2", physicalDevice, pProperties);
            }
            mh$.invokeExact(physicalDevice, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceFormatProperties2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceFormatProperties2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 *pFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceFormatProperties2$descriptor() {
        return vkGetPhysicalDeviceFormatProperties2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 *pFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceFormatProperties2$handle() {
        return vkGetPhysicalDeviceFormatProperties2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2 *pFormatProperties)
     * }
     */
    public static void vkGetPhysicalDeviceFormatProperties2(MemorySegment physicalDevice, int format, MemorySegment pFormatProperties) {
        var mh$ = vkGetPhysicalDeviceFormatProperties2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceFormatProperties2", physicalDevice, format, pFormatProperties);
            }
            mh$.invokeExact(physicalDevice, format, pFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceImageFormatProperties2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceImageFormatProperties2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkImageFormatProperties2 *pImageFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceImageFormatProperties2$descriptor() {
        return vkGetPhysicalDeviceImageFormatProperties2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkImageFormatProperties2 *pImageFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceImageFormatProperties2$handle() {
        return vkGetPhysicalDeviceImageFormatProperties2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2 *pImageFormatInfo, VkImageFormatProperties2 *pImageFormatProperties)
     * }
     */
    public static int vkGetPhysicalDeviceImageFormatProperties2(MemorySegment physicalDevice, MemorySegment pImageFormatInfo, MemorySegment pImageFormatProperties) {
        var mh$ = vkGetPhysicalDeviceImageFormatProperties2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceImageFormatProperties2", physicalDevice, pImageFormatInfo, pImageFormatProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pImageFormatInfo, pImageFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceQueueFamilyProperties2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceQueueFamilyProperties2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *pQueueFamilyProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceQueueFamilyProperties2$descriptor() {
        return vkGetPhysicalDeviceQueueFamilyProperties2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *pQueueFamilyProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceQueueFamilyProperties2$handle() {
        return vkGetPhysicalDeviceQueueFamilyProperties2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t *pQueueFamilyPropertyCount, VkQueueFamilyProperties2 *pQueueFamilyProperties)
     * }
     */
    public static void vkGetPhysicalDeviceQueueFamilyProperties2(MemorySegment physicalDevice, MemorySegment pQueueFamilyPropertyCount, MemorySegment pQueueFamilyProperties) {
        var mh$ = vkGetPhysicalDeviceQueueFamilyProperties2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceQueueFamilyProperties2", physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
            }
            mh$.invokeExact(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceMemoryProperties2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceMemoryProperties2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceMemoryProperties2$descriptor() {
        return vkGetPhysicalDeviceMemoryProperties2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceMemoryProperties2$handle() {
        return vkGetPhysicalDeviceMemoryProperties2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2 *pMemoryProperties)
     * }
     */
    public static void vkGetPhysicalDeviceMemoryProperties2(MemorySegment physicalDevice, MemorySegment pMemoryProperties) {
        var mh$ = vkGetPhysicalDeviceMemoryProperties2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceMemoryProperties2", physicalDevice, pMemoryProperties);
            }
            mh$.invokeExact(physicalDevice, pMemoryProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSparseImageFormatProperties2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSparseImageFormatProperties2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSparseImageFormatProperties2$descriptor() {
        return vkGetPhysicalDeviceSparseImageFormatProperties2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSparseImageFormatProperties2$handle() {
        return vkGetPhysicalDeviceSparseImageFormatProperties2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2 *pFormatInfo, uint32_t *pPropertyCount, VkSparseImageFormatProperties2 *pProperties)
     * }
     */
    public static void vkGetPhysicalDeviceSparseImageFormatProperties2(MemorySegment physicalDevice, MemorySegment pFormatInfo, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceSparseImageFormatProperties2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSparseImageFormatProperties2", physicalDevice, pFormatInfo, pPropertyCount, pProperties);
            }
            mh$.invokeExact(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkTrimCommandPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkTrimCommandPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
     * }
     */
    public static FunctionDescriptor vkTrimCommandPool$descriptor() {
        return vkTrimCommandPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
     * }
     */
    public static MethodHandle vkTrimCommandPool$handle() {
        return vkTrimCommandPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
     * }
     */
    public static void vkTrimCommandPool(MemorySegment device, MemorySegment commandPool, int flags) {
        var mh$ = vkTrimCommandPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkTrimCommandPool", device, commandPool, flags);
            }
            mh$.invokeExact(device, commandPool, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceQueue2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceQueue2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2 *pQueueInfo, VkQueue *pQueue)
     * }
     */
    public static FunctionDescriptor vkGetDeviceQueue2$descriptor() {
        return vkGetDeviceQueue2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2 *pQueueInfo, VkQueue *pQueue)
     * }
     */
    public static MethodHandle vkGetDeviceQueue2$handle() {
        return vkGetDeviceQueue2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2 *pQueueInfo, VkQueue *pQueue)
     * }
     */
    public static void vkGetDeviceQueue2(MemorySegment device, MemorySegment pQueueInfo, MemorySegment pQueue) {
        var mh$ = vkGetDeviceQueue2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceQueue2", device, pQueueInfo, pQueue);
            }
            mh$.invokeExact(device, pQueueInfo, pQueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateSamplerYcbcrConversion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateSamplerYcbcrConversion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSamplerYcbcrConversion *pYcbcrConversion)
     * }
     */
    public static FunctionDescriptor vkCreateSamplerYcbcrConversion$descriptor() {
        return vkCreateSamplerYcbcrConversion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSamplerYcbcrConversion *pYcbcrConversion)
     * }
     */
    public static MethodHandle vkCreateSamplerYcbcrConversion$handle() {
        return vkCreateSamplerYcbcrConversion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSamplerYcbcrConversion *pYcbcrConversion)
     * }
     */
    public static int vkCreateSamplerYcbcrConversion(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pYcbcrConversion) {
        var mh$ = vkCreateSamplerYcbcrConversion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateSamplerYcbcrConversion", device, pCreateInfo, pAllocator, pYcbcrConversion);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pYcbcrConversion);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroySamplerYcbcrConversion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroySamplerYcbcrConversion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroySamplerYcbcrConversion$descriptor() {
        return vkDestroySamplerYcbcrConversion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroySamplerYcbcrConversion$handle() {
        return vkDestroySamplerYcbcrConversion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroySamplerYcbcrConversion(MemorySegment device, MemorySegment ycbcrConversion, MemorySegment pAllocator) {
        var mh$ = vkDestroySamplerYcbcrConversion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroySamplerYcbcrConversion", device, ycbcrConversion, pAllocator);
            }
            mh$.invokeExact(device, ycbcrConversion, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateDescriptorUpdateTemplate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDescriptorUpdateTemplate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate)
     * }
     */
    public static FunctionDescriptor vkCreateDescriptorUpdateTemplate$descriptor() {
        return vkCreateDescriptorUpdateTemplate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate)
     * }
     */
    public static MethodHandle vkCreateDescriptorUpdateTemplate$handle() {
        return vkCreateDescriptorUpdateTemplate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDescriptorUpdateTemplate *pDescriptorUpdateTemplate)
     * }
     */
    public static int vkCreateDescriptorUpdateTemplate(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pDescriptorUpdateTemplate) {
        var mh$ = vkCreateDescriptorUpdateTemplate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDescriptorUpdateTemplate", device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyDescriptorUpdateTemplate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyDescriptorUpdateTemplate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyDescriptorUpdateTemplate$descriptor() {
        return vkDestroyDescriptorUpdateTemplate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyDescriptorUpdateTemplate$handle() {
        return vkDestroyDescriptorUpdateTemplate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyDescriptorUpdateTemplate(MemorySegment device, MemorySegment descriptorUpdateTemplate, MemorySegment pAllocator) {
        var mh$ = vkDestroyDescriptorUpdateTemplate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyDescriptorUpdateTemplate", device, descriptorUpdateTemplate, pAllocator);
            }
            mh$.invokeExact(device, descriptorUpdateTemplate, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkUpdateDescriptorSetWithTemplate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkUpdateDescriptorSetWithTemplate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
     * }
     */
    public static FunctionDescriptor vkUpdateDescriptorSetWithTemplate$descriptor() {
        return vkUpdateDescriptorSetWithTemplate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
     * }
     */
    public static MethodHandle vkUpdateDescriptorSetWithTemplate$handle() {
        return vkUpdateDescriptorSetWithTemplate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const void *pData)
     * }
     */
    public static void vkUpdateDescriptorSetWithTemplate(MemorySegment device, MemorySegment descriptorSet, MemorySegment descriptorUpdateTemplate, MemorySegment pData) {
        var mh$ = vkUpdateDescriptorSetWithTemplate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkUpdateDescriptorSetWithTemplate", device, descriptorSet, descriptorUpdateTemplate, pData);
            }
            mh$.invokeExact(device, descriptorSet, descriptorUpdateTemplate, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceExternalBufferProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceExternalBufferProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo, VkExternalBufferProperties *pExternalBufferProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceExternalBufferProperties$descriptor() {
        return vkGetPhysicalDeviceExternalBufferProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo, VkExternalBufferProperties *pExternalBufferProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceExternalBufferProperties$handle() {
        return vkGetPhysicalDeviceExternalBufferProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfo *pExternalBufferInfo, VkExternalBufferProperties *pExternalBufferProperties)
     * }
     */
    public static void vkGetPhysicalDeviceExternalBufferProperties(MemorySegment physicalDevice, MemorySegment pExternalBufferInfo, MemorySegment pExternalBufferProperties) {
        var mh$ = vkGetPhysicalDeviceExternalBufferProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceExternalBufferProperties", physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
            }
            mh$.invokeExact(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceExternalFenceProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceExternalFenceProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo, VkExternalFenceProperties *pExternalFenceProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceExternalFenceProperties$descriptor() {
        return vkGetPhysicalDeviceExternalFenceProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo, VkExternalFenceProperties *pExternalFenceProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceExternalFenceProperties$handle() {
        return vkGetPhysicalDeviceExternalFenceProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfo *pExternalFenceInfo, VkExternalFenceProperties *pExternalFenceProperties)
     * }
     */
    public static void vkGetPhysicalDeviceExternalFenceProperties(MemorySegment physicalDevice, MemorySegment pExternalFenceInfo, MemorySegment pExternalFenceProperties) {
        var mh$ = vkGetPhysicalDeviceExternalFenceProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceExternalFenceProperties", physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
            }
            mh$.invokeExact(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceExternalSemaphoreProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceExternalSemaphoreProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, VkExternalSemaphoreProperties *pExternalSemaphoreProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceExternalSemaphoreProperties$descriptor() {
        return vkGetPhysicalDeviceExternalSemaphoreProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, VkExternalSemaphoreProperties *pExternalSemaphoreProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceExternalSemaphoreProperties$handle() {
        return vkGetPhysicalDeviceExternalSemaphoreProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfo *pExternalSemaphoreInfo, VkExternalSemaphoreProperties *pExternalSemaphoreProperties)
     * }
     */
    public static void vkGetPhysicalDeviceExternalSemaphoreProperties(MemorySegment physicalDevice, MemorySegment pExternalSemaphoreInfo, MemorySegment pExternalSemaphoreProperties) {
        var mh$ = vkGetPhysicalDeviceExternalSemaphoreProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceExternalSemaphoreProperties", physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
            }
            mh$.invokeExact(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDescriptorSetLayoutSupport {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDescriptorSetLayoutSupport"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport)
     * }
     */
    public static FunctionDescriptor vkGetDescriptorSetLayoutSupport$descriptor() {
        return vkGetDescriptorSetLayoutSupport.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport)
     * }
     */
    public static MethodHandle vkGetDescriptorSetLayoutSupport$handle() {
        return vkGetDescriptorSetLayoutSupport.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo *pCreateInfo, VkDescriptorSetLayoutSupport *pSupport)
     * }
     */
    public static void vkGetDescriptorSetLayoutSupport(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pSupport) {
        var mh$ = vkGetDescriptorSetLayoutSupport.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDescriptorSetLayoutSupport", device, pCreateInfo, pSupport);
            }
            mh$.invokeExact(device, pCreateInfo, pSupport);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_DRIVER_ID_AMD_PROPRIETARY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY = 1
     * }
     */
    public static int VK_DRIVER_ID_AMD_PROPRIETARY() {
        return VK_DRIVER_ID_AMD_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_AMD_OPEN_SOURCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE = 2
     * }
     */
    public static int VK_DRIVER_ID_AMD_OPEN_SOURCE() {
        return VK_DRIVER_ID_AMD_OPEN_SOURCE;
    }
    private static final int VK_DRIVER_ID_MESA_RADV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_RADV = 3
     * }
     */
    public static int VK_DRIVER_ID_MESA_RADV() {
        return VK_DRIVER_ID_MESA_RADV;
    }
    private static final int VK_DRIVER_ID_NVIDIA_PROPRIETARY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4
     * }
     */
    public static int VK_DRIVER_ID_NVIDIA_PROPRIETARY() {
        return VK_DRIVER_ID_NVIDIA_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5
     * }
     */
    public static int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS() {
        return VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS;
    }
    private static final int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6
     * }
     */
    public static int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA() {
        return VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA;
    }
    private static final int VK_DRIVER_ID_IMAGINATION_PROPRIETARY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7
     * }
     */
    public static int VK_DRIVER_ID_IMAGINATION_PROPRIETARY() {
        return VK_DRIVER_ID_IMAGINATION_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_QUALCOMM_PROPRIETARY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8
     * }
     */
    public static int VK_DRIVER_ID_QUALCOMM_PROPRIETARY() {
        return VK_DRIVER_ID_QUALCOMM_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_ARM_PROPRIETARY = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY = 9
     * }
     */
    public static int VK_DRIVER_ID_ARM_PROPRIETARY() {
        return VK_DRIVER_ID_ARM_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_GOOGLE_SWIFTSHADER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10
     * }
     */
    public static int VK_DRIVER_ID_GOOGLE_SWIFTSHADER() {
        return VK_DRIVER_ID_GOOGLE_SWIFTSHADER;
    }
    private static final int VK_DRIVER_ID_GGP_PROPRIETARY = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY = 11
     * }
     */
    public static int VK_DRIVER_ID_GGP_PROPRIETARY() {
        return VK_DRIVER_ID_GGP_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_BROADCOM_PROPRIETARY = (int)12L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12
     * }
     */
    public static int VK_DRIVER_ID_BROADCOM_PROPRIETARY() {
        return VK_DRIVER_ID_BROADCOM_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_MESA_LLVMPIPE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_LLVMPIPE = 13
     * }
     */
    public static int VK_DRIVER_ID_MESA_LLVMPIPE() {
        return VK_DRIVER_ID_MESA_LLVMPIPE;
    }
    private static final int VK_DRIVER_ID_MOLTENVK = (int)14L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MOLTENVK = 14
     * }
     */
    public static int VK_DRIVER_ID_MOLTENVK() {
        return VK_DRIVER_ID_MOLTENVK;
    }
    private static final int VK_DRIVER_ID_COREAVI_PROPRIETARY = (int)15L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_COREAVI_PROPRIETARY = 15
     * }
     */
    public static int VK_DRIVER_ID_COREAVI_PROPRIETARY() {
        return VK_DRIVER_ID_COREAVI_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_JUICE_PROPRIETARY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_JUICE_PROPRIETARY = 16
     * }
     */
    public static int VK_DRIVER_ID_JUICE_PROPRIETARY() {
        return VK_DRIVER_ID_JUICE_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_VERISILICON_PROPRIETARY = (int)17L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17
     * }
     */
    public static int VK_DRIVER_ID_VERISILICON_PROPRIETARY() {
        return VK_DRIVER_ID_VERISILICON_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_MESA_TURNIP = (int)18L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_TURNIP = 18
     * }
     */
    public static int VK_DRIVER_ID_MESA_TURNIP() {
        return VK_DRIVER_ID_MESA_TURNIP;
    }
    private static final int VK_DRIVER_ID_MESA_V3DV = (int)19L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_V3DV = 19
     * }
     */
    public static int VK_DRIVER_ID_MESA_V3DV() {
        return VK_DRIVER_ID_MESA_V3DV;
    }
    private static final int VK_DRIVER_ID_MESA_PANVK = (int)20L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_PANVK = 20
     * }
     */
    public static int VK_DRIVER_ID_MESA_PANVK() {
        return VK_DRIVER_ID_MESA_PANVK;
    }
    private static final int VK_DRIVER_ID_SAMSUNG_PROPRIETARY = (int)21L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21
     * }
     */
    public static int VK_DRIVER_ID_SAMSUNG_PROPRIETARY() {
        return VK_DRIVER_ID_SAMSUNG_PROPRIETARY;
    }
    private static final int VK_DRIVER_ID_MESA_VENUS = (int)22L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_VENUS = 22
     * }
     */
    public static int VK_DRIVER_ID_MESA_VENUS() {
        return VK_DRIVER_ID_MESA_VENUS;
    }
    private static final int VK_DRIVER_ID_MESA_DOZEN = (int)23L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_DOZEN = 23
     * }
     */
    public static int VK_DRIVER_ID_MESA_DOZEN() {
        return VK_DRIVER_ID_MESA_DOZEN;
    }
    private static final int VK_DRIVER_ID_MESA_NVK = (int)24L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_NVK = 24
     * }
     */
    public static int VK_DRIVER_ID_MESA_NVK() {
        return VK_DRIVER_ID_MESA_NVK;
    }
    private static final int VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = (int)25L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA = 25
     * }
     */
    public static int VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA() {
        return VK_DRIVER_ID_IMAGINATION_OPEN_SOURCE_MESA;
    }
    private static final int VK_DRIVER_ID_MESA_AGXV = (int)26L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_AGXV = 26
     * }
     */
    public static int VK_DRIVER_ID_MESA_AGXV() {
        return VK_DRIVER_ID_MESA_AGXV;
    }
    private static final int VK_DRIVER_ID_AMD_PROPRIETARY_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_AMD_PROPRIETARY_KHR = 1
     * }
     */
    public static int VK_DRIVER_ID_AMD_PROPRIETARY_KHR() {
        return VK_DRIVER_ID_AMD_PROPRIETARY_KHR;
    }
    private static final int VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = 2
     * }
     */
    public static int VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR() {
        return VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR;
    }
    private static final int VK_DRIVER_ID_MESA_RADV_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MESA_RADV_KHR = 3
     * }
     */
    public static int VK_DRIVER_ID_MESA_RADV_KHR() {
        return VK_DRIVER_ID_MESA_RADV_KHR;
    }
    private static final int VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = 4
     * }
     */
    public static int VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR() {
        return VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR;
    }
    private static final int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = 5
     * }
     */
    public static int VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR() {
        return VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR;
    }
    private static final int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = 6
     * }
     */
    public static int VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR() {
        return VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR;
    }
    private static final int VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = (int)7L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = 7
     * }
     */
    public static int VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR() {
        return VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR;
    }
    private static final int VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = 8
     * }
     */
    public static int VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR() {
        return VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR;
    }
    private static final int VK_DRIVER_ID_ARM_PROPRIETARY_KHR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_ARM_PROPRIETARY_KHR = 9
     * }
     */
    public static int VK_DRIVER_ID_ARM_PROPRIETARY_KHR() {
        return VK_DRIVER_ID_ARM_PROPRIETARY_KHR;
    }
    private static final int VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = 10
     * }
     */
    public static int VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR() {
        return VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR;
    }
    private static final int VK_DRIVER_ID_GGP_PROPRIETARY_KHR = (int)11L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_GGP_PROPRIETARY_KHR = 11
     * }
     */
    public static int VK_DRIVER_ID_GGP_PROPRIETARY_KHR() {
        return VK_DRIVER_ID_GGP_PROPRIETARY_KHR;
    }
    private static final int VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = (int)12L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = 12
     * }
     */
    public static int VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR() {
        return VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR;
    }
    private static final int VK_DRIVER_ID_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDriverId.VK_DRIVER_ID_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_DRIVER_ID_MAX_ENUM() {
        return VK_DRIVER_ID_MAX_ENUM;
    }
    private static final int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY() {
        return VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY;
    }
    private static final int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL() {
        return VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL;
    }
    private static final int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE() {
        return VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE;
    }
    private static final int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = 0
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR() {
        return VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR;
    }
    private static final int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = 1
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR() {
        return VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR;
    }
    private static final int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = 2
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR() {
        return VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR;
    }
    private static final int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkShaderFloatControlsIndependence.VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM() {
        return VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE() {
        return VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_MIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN = 1
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MIN() {
        return VK_SAMPLER_REDUCTION_MODE_MIN;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX = 2
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MAX() {
        return VK_SAMPLER_REDUCTION_MODE_MAX;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = (int)1000521000L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM = 1000521000
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM() {
        return VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_RANGECLAMP_QCOM;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = 0
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT() {
        return VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_MIN_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MIN_EXT = 1
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MIN_EXT() {
        return VK_SAMPLER_REDUCTION_MODE_MIN_EXT;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_MAX_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_EXT = 2
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MAX_EXT() {
        return VK_SAMPLER_REDUCTION_MODE_MAX_EXT;
    }
    private static final int VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSamplerReductionMode.VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SAMPLER_REDUCTION_MODE_MAX_ENUM() {
        return VK_SAMPLER_REDUCTION_MODE_MAX_ENUM;
    }
    private static final int VK_SEMAPHORE_TYPE_BINARY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY = 0
     * }
     */
    public static int VK_SEMAPHORE_TYPE_BINARY() {
        return VK_SEMAPHORE_TYPE_BINARY;
    }
    private static final int VK_SEMAPHORE_TYPE_TIMELINE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE = 1
     * }
     */
    public static int VK_SEMAPHORE_TYPE_TIMELINE() {
        return VK_SEMAPHORE_TYPE_TIMELINE;
    }
    private static final int VK_SEMAPHORE_TYPE_BINARY_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_BINARY_KHR = 0
     * }
     */
    public static int VK_SEMAPHORE_TYPE_BINARY_KHR() {
        return VK_SEMAPHORE_TYPE_BINARY_KHR;
    }
    private static final int VK_SEMAPHORE_TYPE_TIMELINE_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_TIMELINE_KHR = 1
     * }
     */
    public static int VK_SEMAPHORE_TYPE_TIMELINE_KHR() {
        return VK_SEMAPHORE_TYPE_TIMELINE_KHR;
    }
    private static final int VK_SEMAPHORE_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreType.VK_SEMAPHORE_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SEMAPHORE_TYPE_MAX_ENUM() {
        return VK_SEMAPHORE_TYPE_MAX_ENUM;
    }
    private static final int VK_RESOLVE_MODE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE = 0
     * }
     */
    public static int VK_RESOLVE_MODE_NONE() {
        return VK_RESOLVE_MODE_NONE;
    }
    private static final int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 1
     * }
     */
    public static int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT() {
        return VK_RESOLVE_MODE_SAMPLE_ZERO_BIT;
    }
    private static final int VK_RESOLVE_MODE_AVERAGE_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT = 2
     * }
     */
    public static int VK_RESOLVE_MODE_AVERAGE_BIT() {
        return VK_RESOLVE_MODE_AVERAGE_BIT;
    }
    private static final int VK_RESOLVE_MODE_MIN_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT = 4
     * }
     */
    public static int VK_RESOLVE_MODE_MIN_BIT() {
        return VK_RESOLVE_MODE_MIN_BIT;
    }
    private static final int VK_RESOLVE_MODE_MAX_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT = 8
     * }
     */
    public static int VK_RESOLVE_MODE_MAX_BIT() {
        return VK_RESOLVE_MODE_MAX_BIT;
    }
    private static final int VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID = 16
     * }
     */
    public static int VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID() {
        return VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID;
    }
    private static final int VK_RESOLVE_MODE_NONE_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_NONE_KHR = 0
     * }
     */
    public static int VK_RESOLVE_MODE_NONE_KHR() {
        return VK_RESOLVE_MODE_NONE_KHR;
    }
    private static final int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = 1
     * }
     */
    public static int VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR() {
        return VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR;
    }
    private static final int VK_RESOLVE_MODE_AVERAGE_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_AVERAGE_BIT_KHR = 2
     * }
     */
    public static int VK_RESOLVE_MODE_AVERAGE_BIT_KHR() {
        return VK_RESOLVE_MODE_AVERAGE_BIT_KHR;
    }
    private static final int VK_RESOLVE_MODE_MIN_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MIN_BIT_KHR = 4
     * }
     */
    public static int VK_RESOLVE_MODE_MIN_BIT_KHR() {
        return VK_RESOLVE_MODE_MIN_BIT_KHR;
    }
    private static final int VK_RESOLVE_MODE_MAX_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_MAX_BIT_KHR = 8
     * }
     */
    public static int VK_RESOLVE_MODE_MAX_BIT_KHR() {
        return VK_RESOLVE_MODE_MAX_BIT_KHR;
    }
    private static final int VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkResolveModeFlagBits.VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM() {
        return VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkResolveModeFlags
     * }
     */
    public static final OfInt VkResolveModeFlags = vulkan_h.C_INT;
    private static final int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 1
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT() {
        return VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT;
    }
    private static final int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 2
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT() {
        return VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT;
    }
    private static final int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 4
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT() {
        return VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT;
    }
    private static final int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 8
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT() {
        return VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT;
    }
    private static final int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = 1
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT() {
        return VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = 2
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT() {
        return VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = 4
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT() {
        return VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = 8
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT() {
        return VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT;
    }
    private static final int VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDescriptorBindingFlagBits.VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM() {
        return VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDescriptorBindingFlags
     * }
     */
    public static final OfInt VkDescriptorBindingFlags = vulkan_h.C_INT;
    private static final int VK_SEMAPHORE_WAIT_ANY_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT = 1
     * }
     */
    public static int VK_SEMAPHORE_WAIT_ANY_BIT() {
        return VK_SEMAPHORE_WAIT_ANY_BIT;
    }
    private static final int VK_SEMAPHORE_WAIT_ANY_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_ANY_BIT_KHR = 1
     * }
     */
    public static int VK_SEMAPHORE_WAIT_ANY_BIT_KHR() {
        return VK_SEMAPHORE_WAIT_ANY_BIT_KHR;
    }
    private static final int VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSemaphoreWaitFlagBits.VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM() {
        return VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSemaphoreWaitFlags
     * }
     */
    public static final OfInt VkSemaphoreWaitFlags = vulkan_h.C_INT;

    private static class vkCmdDrawIndirectCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndirectCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndirectCount$descriptor() {
        return vkCmdDrawIndirectCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndirectCount$handle() {
        return vkCmdDrawIndirectCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndirectCount(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndirectCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndirectCount", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdDrawIndexedIndirectCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDrawIndexedIndirectCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static FunctionDescriptor vkCmdDrawIndexedIndirectCount$descriptor() {
        return vkCmdDrawIndexedIndirectCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static MethodHandle vkCmdDrawIndexedIndirectCount$handle() {
        return vkCmdDrawIndexedIndirectCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride)
     * }
     */
    public static void vkCmdDrawIndexedIndirectCount(MemorySegment commandBuffer, MemorySegment buffer, long offset, MemorySegment countBuffer, long countBufferOffset, int maxDrawCount, int stride) {
        var mh$ = vkCmdDrawIndexedIndirectCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDrawIndexedIndirectCount", commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
            }
            mh$.invokeExact(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateRenderPass2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateRenderPass2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static FunctionDescriptor vkCreateRenderPass2$descriptor() {
        return vkCreateRenderPass2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static MethodHandle vkCreateRenderPass2$handle() {
        return vkCreateRenderPass2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2 *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkRenderPass *pRenderPass)
     * }
     */
    public static int vkCreateRenderPass2(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pRenderPass) {
        var mh$ = vkCreateRenderPass2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateRenderPass2", device, pCreateInfo, pAllocator, pRenderPass);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pRenderPass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginRenderPass2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginRenderPass2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBeginRenderPass2$descriptor() {
        return vkCmdBeginRenderPass2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
     * }
     */
    public static MethodHandle vkCmdBeginRenderPass2$handle() {
        return vkCmdBeginRenderPass2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo *pRenderPassBegin, const VkSubpassBeginInfo *pSubpassBeginInfo)
     * }
     */
    public static void vkCmdBeginRenderPass2(MemorySegment commandBuffer, MemorySegment pRenderPassBegin, MemorySegment pSubpassBeginInfo) {
        var mh$ = vkCmdBeginRenderPass2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginRenderPass2", commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
            }
            mh$.invokeExact(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdNextSubpass2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdNextSubpass2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static FunctionDescriptor vkCmdNextSubpass2$descriptor() {
        return vkCmdNextSubpass2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static MethodHandle vkCmdNextSubpass2$handle() {
        return vkCmdNextSubpass2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfo *pSubpassBeginInfo, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static void vkCmdNextSubpass2(MemorySegment commandBuffer, MemorySegment pSubpassBeginInfo, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdNextSubpass2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdNextSubpass2", commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
            }
            mh$.invokeExact(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndRenderPass2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndRenderPass2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static FunctionDescriptor vkCmdEndRenderPass2$descriptor() {
        return vkCmdEndRenderPass2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static MethodHandle vkCmdEndRenderPass2$handle() {
        return vkCmdEndRenderPass2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfo *pSubpassEndInfo)
     * }
     */
    public static void vkCmdEndRenderPass2(MemorySegment commandBuffer, MemorySegment pSubpassEndInfo) {
        var mh$ = vkCmdEndRenderPass2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndRenderPass2", commandBuffer, pSubpassEndInfo);
            }
            mh$.invokeExact(commandBuffer, pSubpassEndInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkResetQueryPool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkResetQueryPool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static FunctionDescriptor vkResetQueryPool$descriptor() {
        return vkResetQueryPool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static MethodHandle vkResetQueryPool$handle() {
        return vkResetQueryPool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
     * }
     */
    public static void vkResetQueryPool(MemorySegment device, MemorySegment queryPool, int firstQuery, int queryCount) {
        var mh$ = vkResetQueryPool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkResetQueryPool", device, queryPool, firstQuery, queryCount);
            }
            mh$.invokeExact(device, queryPool, firstQuery, queryCount);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetSemaphoreCounterValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetSemaphoreCounterValue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t *pValue)
     * }
     */
    public static FunctionDescriptor vkGetSemaphoreCounterValue$descriptor() {
        return vkGetSemaphoreCounterValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t *pValue)
     * }
     */
    public static MethodHandle vkGetSemaphoreCounterValue$handle() {
        return vkGetSemaphoreCounterValue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t *pValue)
     * }
     */
    public static int vkGetSemaphoreCounterValue(MemorySegment device, MemorySegment semaphore, MemorySegment pValue) {
        var mh$ = vkGetSemaphoreCounterValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetSemaphoreCounterValue", device, semaphore, pValue);
            }
            return (int)mh$.invokeExact(device, semaphore, pValue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkWaitSemaphores {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkWaitSemaphores"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout)
     * }
     */
    public static FunctionDescriptor vkWaitSemaphores$descriptor() {
        return vkWaitSemaphores.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout)
     * }
     */
    public static MethodHandle vkWaitSemaphores$handle() {
        return vkWaitSemaphores.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfo *pWaitInfo, uint64_t timeout)
     * }
     */
    public static int vkWaitSemaphores(MemorySegment device, MemorySegment pWaitInfo, long timeout) {
        var mh$ = vkWaitSemaphores.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkWaitSemaphores", device, pWaitInfo, timeout);
            }
            return (int)mh$.invokeExact(device, pWaitInfo, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSignalSemaphore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSignalSemaphore"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo)
     * }
     */
    public static FunctionDescriptor vkSignalSemaphore$descriptor() {
        return vkSignalSemaphore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo)
     * }
     */
    public static MethodHandle vkSignalSemaphore$handle() {
        return vkSignalSemaphore.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfo *pSignalInfo)
     * }
     */
    public static int vkSignalSemaphore(MemorySegment device, MemorySegment pSignalInfo) {
        var mh$ = vkSignalSemaphore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSignalSemaphore", device, pSignalInfo);
            }
            return (int)mh$.invokeExact(device, pSignalInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferDeviceAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferDeviceAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetBufferDeviceAddress$descriptor() {
        return vkGetBufferDeviceAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static MethodHandle vkGetBufferDeviceAddress$handle() {
        return vkGetBufferDeviceAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static long vkGetBufferDeviceAddress(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferDeviceAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferDeviceAddress", device, pInfo);
            }
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetBufferOpaqueCaptureAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetBufferOpaqueCaptureAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetBufferOpaqueCaptureAddress$descriptor() {
        return vkGetBufferOpaqueCaptureAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static MethodHandle vkGetBufferOpaqueCaptureAddress$handle() {
        return vkGetBufferOpaqueCaptureAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_t vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfo *pInfo)
     * }
     */
    public static long vkGetBufferOpaqueCaptureAddress(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetBufferOpaqueCaptureAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetBufferOpaqueCaptureAddress", device, pInfo);
            }
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceMemoryOpaqueCaptureAddress {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceMemoryOpaqueCaptureAddress"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)
     * }
     */
    public static FunctionDescriptor vkGetDeviceMemoryOpaqueCaptureAddress$descriptor() {
        return vkGetDeviceMemoryOpaqueCaptureAddress.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)
     * }
     */
    public static MethodHandle vkGetDeviceMemoryOpaqueCaptureAddress$handle() {
        return vkGetDeviceMemoryOpaqueCaptureAddress.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * uint64_t vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfo *pInfo)
     * }
     */
    public static long vkGetDeviceMemoryOpaqueCaptureAddress(MemorySegment device, MemorySegment pInfo) {
        var mh$ = vkGetDeviceMemoryOpaqueCaptureAddress.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceMemoryOpaqueCaptureAddress", device, pInfo);
            }
            return (long)mh$.invokeExact(device, pInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef uint64_t VkFlags64
     * }
     */
    public static final OfLong VkFlags64 = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef struct VkPrivateDataSlot_T *VkPrivateDataSlot
     * }
     */
    public static final AddressLayout VkPrivateDataSlot = vulkan_h.C_POINTER;
    private static final int VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 1
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT() {
        return VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT;
    }
    private static final int VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 2
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT() {
        return VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT;
    }
    private static final int VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 4
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT() {
        return VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT;
    }
    private static final int VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = 1
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT() {
        return VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = 2
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT() {
        return VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = 4
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT() {
        return VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT;
    }
    private static final int VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPipelineCreationFeedbackFlagBits.VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM() {
        return VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPipelineCreationFeedbackFlags
     * }
     */
    public static final OfInt VkPipelineCreationFeedbackFlags = vulkan_h.C_INT;
    private static final int VK_TOOL_PURPOSE_VALIDATION_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT = 1
     * }
     */
    public static int VK_TOOL_PURPOSE_VALIDATION_BIT() {
        return VK_TOOL_PURPOSE_VALIDATION_BIT;
    }
    private static final int VK_TOOL_PURPOSE_PROFILING_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT = 2
     * }
     */
    public static int VK_TOOL_PURPOSE_PROFILING_BIT() {
        return VK_TOOL_PURPOSE_PROFILING_BIT;
    }
    private static final int VK_TOOL_PURPOSE_TRACING_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT = 4
     * }
     */
    public static int VK_TOOL_PURPOSE_TRACING_BIT() {
        return VK_TOOL_PURPOSE_TRACING_BIT;
    }
    private static final int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 8
     * }
     */
    public static int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT() {
        return VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT;
    }
    private static final int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 16
     * }
     */
    public static int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT() {
        return VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT;
    }
    private static final int VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 32
     * }
     */
    public static int VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT() {
        return VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT;
    }
    private static final int VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 64
     * }
     */
    public static int VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT() {
        return VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT;
    }
    private static final int VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = 1
     * }
     */
    public static int VK_TOOL_PURPOSE_VALIDATION_BIT_EXT() {
        return VK_TOOL_PURPOSE_VALIDATION_BIT_EXT;
    }
    private static final int VK_TOOL_PURPOSE_PROFILING_BIT_EXT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_PROFILING_BIT_EXT = 2
     * }
     */
    public static int VK_TOOL_PURPOSE_PROFILING_BIT_EXT() {
        return VK_TOOL_PURPOSE_PROFILING_BIT_EXT;
    }
    private static final int VK_TOOL_PURPOSE_TRACING_BIT_EXT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_TRACING_BIT_EXT = 4
     * }
     */
    public static int VK_TOOL_PURPOSE_TRACING_BIT_EXT() {
        return VK_TOOL_PURPOSE_TRACING_BIT_EXT;
    }
    private static final int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = 8
     * }
     */
    public static int VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT() {
        return VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT;
    }
    private static final int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = 16
     * }
     */
    public static int VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT() {
        return VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT;
    }
    private static final int VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkToolPurposeFlagBits.VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM() {
        return VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkToolPurposeFlags
     * }
     */
    public static final OfInt VkToolPurposeFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkPrivateDataSlotCreateFlags
     * }
     */
    public static final OfInt VkPrivateDataSlotCreateFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkPipelineStageFlags2
     * }
     */
    public static final OfLong VkPipelineStageFlags2 = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkPipelineStageFlagBits2
     * }
     */
    public static final OfLong VkPipelineStageFlagBits2 = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkAccessFlags2
     * }
     */
    public static final OfLong VkAccessFlags2 = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkAccessFlagBits2
     * }
     */
    public static final OfLong VkAccessFlagBits2 = vulkan_h.C_LONG_LONG;
    private static final int VK_SUBMIT_PROTECTED_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT = 1
     * }
     */
    public static int VK_SUBMIT_PROTECTED_BIT() {
        return VK_SUBMIT_PROTECTED_BIT;
    }
    private static final int VK_SUBMIT_PROTECTED_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSubmitFlagBits.VK_SUBMIT_PROTECTED_BIT_KHR = 1
     * }
     */
    public static int VK_SUBMIT_PROTECTED_BIT_KHR() {
        return VK_SUBMIT_PROTECTED_BIT_KHR;
    }
    private static final int VK_SUBMIT_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSubmitFlagBits.VK_SUBMIT_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_SUBMIT_FLAG_BITS_MAX_ENUM() {
        return VK_SUBMIT_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSubmitFlags
     * }
     */
    public static final OfInt VkSubmitFlags = vulkan_h.C_INT;
    private static final int VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 1
     * }
     */
    public static int VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT() {
        return VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT;
    }
    private static final int VK_RENDERING_SUSPENDING_BIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT = 2
     * }
     */
    public static int VK_RENDERING_SUSPENDING_BIT() {
        return VK_RENDERING_SUSPENDING_BIT;
    }
    private static final int VK_RENDERING_RESUMING_BIT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT = 4
     * }
     */
    public static int VK_RENDERING_RESUMING_BIT() {
        return VK_RENDERING_RESUMING_BIT;
    }
    private static final int VK_RENDERING_CONTENTS_INLINE_BIT_EXT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_CONTENTS_INLINE_BIT_EXT = 16
     * }
     */
    public static int VK_RENDERING_CONTENTS_INLINE_BIT_EXT() {
        return VK_RENDERING_CONTENTS_INLINE_BIT_EXT;
    }
    private static final int VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT = 8
     * }
     */
    public static int VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT() {
        return VK_RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT;
    }
    private static final int VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = 1
     * }
     */
    public static int VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR() {
        return VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR;
    }
    private static final int VK_RENDERING_SUSPENDING_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_SUSPENDING_BIT_KHR = 2
     * }
     */
    public static int VK_RENDERING_SUSPENDING_BIT_KHR() {
        return VK_RENDERING_SUSPENDING_BIT_KHR;
    }
    private static final int VK_RENDERING_RESUMING_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_RESUMING_BIT_KHR = 4
     * }
     */
    public static int VK_RENDERING_RESUMING_BIT_KHR() {
        return VK_RENDERING_RESUMING_BIT_KHR;
    }
    private static final int VK_RENDERING_FLAG_BITS_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkRenderingFlagBits.VK_RENDERING_FLAG_BITS_MAX_ENUM = 2147483647
     * }
     */
    public static int VK_RENDERING_FLAG_BITS_MAX_ENUM() {
        return VK_RENDERING_FLAG_BITS_MAX_ENUM;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkRenderingFlags
     * }
     */
    public static final OfInt VkRenderingFlags = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkFormatFeatureFlags2
     * }
     */
    public static final OfLong VkFormatFeatureFlags2 = vulkan_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef VkFlags64 VkFormatFeatureFlagBits2
     * }
     */
    public static final OfLong VkFormatFeatureFlagBits2 = vulkan_h.C_LONG_LONG;

    private static class vkGetPhysicalDeviceToolProperties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceToolProperties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceToolProperties$descriptor() {
        return vkGetPhysicalDeviceToolProperties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceToolProperties$handle() {
        return vkGetPhysicalDeviceToolProperties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t *pToolCount, VkPhysicalDeviceToolProperties *pToolProperties)
     * }
     */
    public static int vkGetPhysicalDeviceToolProperties(MemorySegment physicalDevice, MemorySegment pToolCount, MemorySegment pToolProperties) {
        var mh$ = vkGetPhysicalDeviceToolProperties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceToolProperties", physicalDevice, pToolCount, pToolProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pToolCount, pToolProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreatePrivateDataSlot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreatePrivateDataSlot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
     * }
     */
    public static FunctionDescriptor vkCreatePrivateDataSlot$descriptor() {
        return vkCreatePrivateDataSlot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
     * }
     */
    public static MethodHandle vkCreatePrivateDataSlot$handle() {
        return vkCreatePrivateDataSlot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfo *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkPrivateDataSlot *pPrivateDataSlot)
     * }
     */
    public static int vkCreatePrivateDataSlot(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pPrivateDataSlot) {
        var mh$ = vkCreatePrivateDataSlot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreatePrivateDataSlot", device, pCreateInfo, pAllocator, pPrivateDataSlot);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pPrivateDataSlot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyPrivateDataSlot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyPrivateDataSlot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyPrivateDataSlot$descriptor() {
        return vkDestroyPrivateDataSlot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyPrivateDataSlot$handle() {
        return vkDestroyPrivateDataSlot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyPrivateDataSlot(MemorySegment device, MemorySegment privateDataSlot, MemorySegment pAllocator) {
        var mh$ = vkDestroyPrivateDataSlot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyPrivateDataSlot", device, privateDataSlot, pAllocator);
            }
            mh$.invokeExact(device, privateDataSlot, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkSetPrivateData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkSetPrivateData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
     * }
     */
    public static FunctionDescriptor vkSetPrivateData$descriptor() {
        return vkSetPrivateData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
     * }
     */
    public static MethodHandle vkSetPrivateData$handle() {
        return vkSetPrivateData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t data)
     * }
     */
    public static int vkSetPrivateData(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, long data) {
        var mh$ = vkSetPrivateData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkSetPrivateData", device, objectType, objectHandle, privateDataSlot, data);
            }
            return (int)mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPrivateData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPrivateData"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
     * }
     */
    public static FunctionDescriptor vkGetPrivateData$descriptor() {
        return vkGetPrivateData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
     * }
     */
    public static MethodHandle vkGetPrivateData$handle() {
        return vkGetPrivateData.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlot privateDataSlot, uint64_t *pData)
     * }
     */
    public static void vkGetPrivateData(MemorySegment device, int objectType, long objectHandle, MemorySegment privateDataSlot, MemorySegment pData) {
        var mh$ = vkGetPrivateData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPrivateData", device, objectType, objectHandle, privateDataSlot, pData);
            }
            mh$.invokeExact(device, objectType, objectHandle, privateDataSlot, pData);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetEvent2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetEvent2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static FunctionDescriptor vkCmdSetEvent2$descriptor() {
        return vkCmdSetEvent2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static MethodHandle vkCmdSetEvent2$handle() {
        return vkCmdSetEvent2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static void vkCmdSetEvent2(MemorySegment commandBuffer, MemorySegment event, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdSetEvent2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetEvent2", commandBuffer, event, pDependencyInfo);
            }
            mh$.invokeExact(commandBuffer, event, pDependencyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdResetEvent2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdResetEvent2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
     * }
     */
    public static FunctionDescriptor vkCmdResetEvent2$descriptor() {
        return vkCmdResetEvent2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
     * }
     */
    public static MethodHandle vkCmdResetEvent2$handle() {
        return vkCmdResetEvent2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask)
     * }
     */
    public static void vkCmdResetEvent2(MemorySegment commandBuffer, MemorySegment event, long stageMask) {
        var mh$ = vkCmdResetEvent2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdResetEvent2", commandBuffer, event, stageMask);
            }
            mh$.invokeExact(commandBuffer, event, stageMask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWaitEvents2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWaitEvents2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
     * }
     */
    public static FunctionDescriptor vkCmdWaitEvents2$descriptor() {
        return vkCmdWaitEvents2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
     * }
     */
    public static MethodHandle vkCmdWaitEvents2$handle() {
        return vkCmdWaitEvents2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent *pEvents, const VkDependencyInfo *pDependencyInfos)
     * }
     */
    public static void vkCmdWaitEvents2(MemorySegment commandBuffer, int eventCount, MemorySegment pEvents, MemorySegment pDependencyInfos) {
        var mh$ = vkCmdWaitEvents2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWaitEvents2", commandBuffer, eventCount, pEvents, pDependencyInfos);
            }
            mh$.invokeExact(commandBuffer, eventCount, pEvents, pDependencyInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdPipelineBarrier2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdPipelineBarrier2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static FunctionDescriptor vkCmdPipelineBarrier2$descriptor() {
        return vkCmdPipelineBarrier2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static MethodHandle vkCmdPipelineBarrier2$handle() {
        return vkCmdPipelineBarrier2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfo *pDependencyInfo)
     * }
     */
    public static void vkCmdPipelineBarrier2(MemorySegment commandBuffer, MemorySegment pDependencyInfo) {
        var mh$ = vkCmdPipelineBarrier2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdPipelineBarrier2", commandBuffer, pDependencyInfo);
            }
            mh$.invokeExact(commandBuffer, pDependencyInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdWriteTimestamp2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdWriteTimestamp2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static FunctionDescriptor vkCmdWriteTimestamp2$descriptor() {
        return vkCmdWriteTimestamp2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static MethodHandle vkCmdWriteTimestamp2$handle() {
        return vkCmdWriteTimestamp2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint32_t query)
     * }
     */
    public static void vkCmdWriteTimestamp2(MemorySegment commandBuffer, long stage, MemorySegment queryPool, int query) {
        var mh$ = vkCmdWriteTimestamp2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdWriteTimestamp2", commandBuffer, stage, queryPool, query);
            }
            mh$.invokeExact(commandBuffer, stage, queryPool, query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueueSubmit2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueueSubmit2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
     * }
     */
    public static FunctionDescriptor vkQueueSubmit2$descriptor() {
        return vkQueueSubmit2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
     * }
     */
    public static MethodHandle vkQueueSubmit2$handle() {
        return vkQueueSubmit2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2 *pSubmits, VkFence fence)
     * }
     */
    public static int vkQueueSubmit2(MemorySegment queue, int submitCount, MemorySegment pSubmits, MemorySegment fence) {
        var mh$ = vkQueueSubmit2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueueSubmit2", queue, submitCount, pSubmits, fence);
            }
            return (int)mh$.invokeExact(queue, submitCount, pSubmits, fence);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyBuffer2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyBuffer2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyBuffer2$descriptor() {
        return vkCmdCopyBuffer2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
     * }
     */
    public static MethodHandle vkCmdCopyBuffer2$handle() {
        return vkCmdCopyBuffer2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2 *pCopyBufferInfo)
     * }
     */
    public static void vkCmdCopyBuffer2(MemorySegment commandBuffer, MemorySegment pCopyBufferInfo) {
        var mh$ = vkCmdCopyBuffer2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyBuffer2", commandBuffer, pCopyBufferInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyBufferInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyImage2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyImage2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyImage2$descriptor() {
        return vkCmdCopyImage2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
     * }
     */
    public static MethodHandle vkCmdCopyImage2$handle() {
        return vkCmdCopyImage2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2 *pCopyImageInfo)
     * }
     */
    public static void vkCmdCopyImage2(MemorySegment commandBuffer, MemorySegment pCopyImageInfo) {
        var mh$ = vkCmdCopyImage2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyImage2", commandBuffer, pCopyImageInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyBufferToImage2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyBufferToImage2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyBufferToImage2$descriptor() {
        return vkCmdCopyBufferToImage2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
     * }
     */
    public static MethodHandle vkCmdCopyBufferToImage2$handle() {
        return vkCmdCopyBufferToImage2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2 *pCopyBufferToImageInfo)
     * }
     */
    public static void vkCmdCopyBufferToImage2(MemorySegment commandBuffer, MemorySegment pCopyBufferToImageInfo) {
        var mh$ = vkCmdCopyBufferToImage2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyBufferToImage2", commandBuffer, pCopyBufferToImageInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyBufferToImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdCopyImageToBuffer2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdCopyImageToBuffer2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
     * }
     */
    public static FunctionDescriptor vkCmdCopyImageToBuffer2$descriptor() {
        return vkCmdCopyImageToBuffer2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
     * }
     */
    public static MethodHandle vkCmdCopyImageToBuffer2$handle() {
        return vkCmdCopyImageToBuffer2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2 *pCopyImageToBufferInfo)
     * }
     */
    public static void vkCmdCopyImageToBuffer2(MemorySegment commandBuffer, MemorySegment pCopyImageToBufferInfo) {
        var mh$ = vkCmdCopyImageToBuffer2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdCopyImageToBuffer2", commandBuffer, pCopyImageToBufferInfo);
            }
            mh$.invokeExact(commandBuffer, pCopyImageToBufferInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBlitImage2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBlitImage2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBlitImage2$descriptor() {
        return vkCmdBlitImage2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
     * }
     */
    public static MethodHandle vkCmdBlitImage2$handle() {
        return vkCmdBlitImage2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2 *pBlitImageInfo)
     * }
     */
    public static void vkCmdBlitImage2(MemorySegment commandBuffer, MemorySegment pBlitImageInfo) {
        var mh$ = vkCmdBlitImage2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBlitImage2", commandBuffer, pBlitImageInfo);
            }
            mh$.invokeExact(commandBuffer, pBlitImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdResolveImage2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdResolveImage2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
     * }
     */
    public static FunctionDescriptor vkCmdResolveImage2$descriptor() {
        return vkCmdResolveImage2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
     * }
     */
    public static MethodHandle vkCmdResolveImage2$handle() {
        return vkCmdResolveImage2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2 *pResolveImageInfo)
     * }
     */
    public static void vkCmdResolveImage2(MemorySegment commandBuffer, MemorySegment pResolveImageInfo) {
        var mh$ = vkCmdResolveImage2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdResolveImage2", commandBuffer, pResolveImageInfo);
            }
            mh$.invokeExact(commandBuffer, pResolveImageInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginRendering {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginRendering"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBeginRendering$descriptor() {
        return vkCmdBeginRendering.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
     * }
     */
    public static MethodHandle vkCmdBeginRendering$handle() {
        return vkCmdBeginRendering.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfo *pRenderingInfo)
     * }
     */
    public static void vkCmdBeginRendering(MemorySegment commandBuffer, MemorySegment pRenderingInfo) {
        var mh$ = vkCmdBeginRendering.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginRendering", commandBuffer, pRenderingInfo);
            }
            mh$.invokeExact(commandBuffer, pRenderingInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndRendering {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndRendering"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndRendering(VkCommandBuffer commandBuffer)
     * }
     */
    public static FunctionDescriptor vkCmdEndRendering$descriptor() {
        return vkCmdEndRendering.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndRendering(VkCommandBuffer commandBuffer)
     * }
     */
    public static MethodHandle vkCmdEndRendering$handle() {
        return vkCmdEndRendering.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndRendering(VkCommandBuffer commandBuffer)
     * }
     */
    public static void vkCmdEndRendering(MemorySegment commandBuffer) {
        var mh$ = vkCmdEndRendering.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndRendering", commandBuffer);
            }
            mh$.invokeExact(commandBuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetCullMode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetCullMode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
     * }
     */
    public static FunctionDescriptor vkCmdSetCullMode$descriptor() {
        return vkCmdSetCullMode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
     * }
     */
    public static MethodHandle vkCmdSetCullMode$handle() {
        return vkCmdSetCullMode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
     * }
     */
    public static void vkCmdSetCullMode(MemorySegment commandBuffer, int cullMode) {
        var mh$ = vkCmdSetCullMode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetCullMode", commandBuffer, cullMode);
            }
            mh$.invokeExact(commandBuffer, cullMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetFrontFace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetFrontFace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
     * }
     */
    public static FunctionDescriptor vkCmdSetFrontFace$descriptor() {
        return vkCmdSetFrontFace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
     * }
     */
    public static MethodHandle vkCmdSetFrontFace$handle() {
        return vkCmdSetFrontFace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
     * }
     */
    public static void vkCmdSetFrontFace(MemorySegment commandBuffer, int frontFace) {
        var mh$ = vkCmdSetFrontFace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetFrontFace", commandBuffer, frontFace);
            }
            mh$.invokeExact(commandBuffer, frontFace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetPrimitiveTopology {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetPrimitiveTopology"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
     * }
     */
    public static FunctionDescriptor vkCmdSetPrimitiveTopology$descriptor() {
        return vkCmdSetPrimitiveTopology.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
     * }
     */
    public static MethodHandle vkCmdSetPrimitiveTopology$handle() {
        return vkCmdSetPrimitiveTopology.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
     * }
     */
    public static void vkCmdSetPrimitiveTopology(MemorySegment commandBuffer, int primitiveTopology) {
        var mh$ = vkCmdSetPrimitiveTopology.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetPrimitiveTopology", commandBuffer, primitiveTopology);
            }
            mh$.invokeExact(commandBuffer, primitiveTopology);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetViewportWithCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetViewportWithCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static FunctionDescriptor vkCmdSetViewportWithCount$descriptor() {
        return vkCmdSetViewportWithCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static MethodHandle vkCmdSetViewportWithCount$handle() {
        return vkCmdSetViewportWithCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport *pViewports)
     * }
     */
    public static void vkCmdSetViewportWithCount(MemorySegment commandBuffer, int viewportCount, MemorySegment pViewports) {
        var mh$ = vkCmdSetViewportWithCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetViewportWithCount", commandBuffer, viewportCount, pViewports);
            }
            mh$.invokeExact(commandBuffer, viewportCount, pViewports);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetScissorWithCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetScissorWithCount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static FunctionDescriptor vkCmdSetScissorWithCount$descriptor() {
        return vkCmdSetScissorWithCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static MethodHandle vkCmdSetScissorWithCount$handle() {
        return vkCmdSetScissorWithCount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D *pScissors)
     * }
     */
    public static void vkCmdSetScissorWithCount(MemorySegment commandBuffer, int scissorCount, MemorySegment pScissors) {
        var mh$ = vkCmdSetScissorWithCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetScissorWithCount", commandBuffer, scissorCount, pScissors);
            }
            mh$.invokeExact(commandBuffer, scissorCount, pScissors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBindVertexBuffers2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBindVertexBuffers2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
     * }
     */
    public static FunctionDescriptor vkCmdBindVertexBuffers2$descriptor() {
        return vkCmdBindVertexBuffers2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
     * }
     */
    public static MethodHandle vkCmdBindVertexBuffers2$handle() {
        return vkCmdBindVertexBuffers2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer *pBuffers, const VkDeviceSize *pOffsets, const VkDeviceSize *pSizes, const VkDeviceSize *pStrides)
     * }
     */
    public static void vkCmdBindVertexBuffers2(MemorySegment commandBuffer, int firstBinding, int bindingCount, MemorySegment pBuffers, MemorySegment pOffsets, MemorySegment pSizes, MemorySegment pStrides) {
        var mh$ = vkCmdBindVertexBuffers2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBindVertexBuffers2", commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
            }
            mh$.invokeExact(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthTestEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthTestEnable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthTestEnable$descriptor() {
        return vkCmdSetDepthTestEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthTestEnable$handle() {
        return vkCmdSetDepthTestEnable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
     * }
     */
    public static void vkCmdSetDepthTestEnable(MemorySegment commandBuffer, int depthTestEnable) {
        var mh$ = vkCmdSetDepthTestEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthTestEnable", commandBuffer, depthTestEnable);
            }
            mh$.invokeExact(commandBuffer, depthTestEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthWriteEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthWriteEnable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthWriteEnable$descriptor() {
        return vkCmdSetDepthWriteEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthWriteEnable$handle() {
        return vkCmdSetDepthWriteEnable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
     * }
     */
    public static void vkCmdSetDepthWriteEnable(MemorySegment commandBuffer, int depthWriteEnable) {
        var mh$ = vkCmdSetDepthWriteEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthWriteEnable", commandBuffer, depthWriteEnable);
            }
            mh$.invokeExact(commandBuffer, depthWriteEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthCompareOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthCompareOp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthCompareOp$descriptor() {
        return vkCmdSetDepthCompareOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
     * }
     */
    public static MethodHandle vkCmdSetDepthCompareOp$handle() {
        return vkCmdSetDepthCompareOp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
     * }
     */
    public static void vkCmdSetDepthCompareOp(MemorySegment commandBuffer, int depthCompareOp) {
        var mh$ = vkCmdSetDepthCompareOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthCompareOp", commandBuffer, depthCompareOp);
            }
            mh$.invokeExact(commandBuffer, depthCompareOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthBoundsTestEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthBoundsTestEnable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthBoundsTestEnable$descriptor() {
        return vkCmdSetDepthBoundsTestEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthBoundsTestEnable$handle() {
        return vkCmdSetDepthBoundsTestEnable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
     * }
     */
    public static void vkCmdSetDepthBoundsTestEnable(MemorySegment commandBuffer, int depthBoundsTestEnable) {
        var mh$ = vkCmdSetDepthBoundsTestEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthBoundsTestEnable", commandBuffer, depthBoundsTestEnable);
            }
            mh$.invokeExact(commandBuffer, depthBoundsTestEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetStencilTestEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetStencilTestEnable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetStencilTestEnable$descriptor() {
        return vkCmdSetStencilTestEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
     * }
     */
    public static MethodHandle vkCmdSetStencilTestEnable$handle() {
        return vkCmdSetStencilTestEnable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
     * }
     */
    public static void vkCmdSetStencilTestEnable(MemorySegment commandBuffer, int stencilTestEnable) {
        var mh$ = vkCmdSetStencilTestEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetStencilTestEnable", commandBuffer, stencilTestEnable);
            }
            mh$.invokeExact(commandBuffer, stencilTestEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetStencilOp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetStencilOp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
     * }
     */
    public static FunctionDescriptor vkCmdSetStencilOp$descriptor() {
        return vkCmdSetStencilOp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
     * }
     */
    public static MethodHandle vkCmdSetStencilOp$handle() {
        return vkCmdSetStencilOp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
     * }
     */
    public static void vkCmdSetStencilOp(MemorySegment commandBuffer, int faceMask, int failOp, int passOp, int depthFailOp, int compareOp) {
        var mh$ = vkCmdSetStencilOp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetStencilOp", commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
            }
            mh$.invokeExact(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetRasterizerDiscardEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetRasterizerDiscardEnable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetRasterizerDiscardEnable$descriptor() {
        return vkCmdSetRasterizerDiscardEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
     * }
     */
    public static MethodHandle vkCmdSetRasterizerDiscardEnable$handle() {
        return vkCmdSetRasterizerDiscardEnable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
     * }
     */
    public static void vkCmdSetRasterizerDiscardEnable(MemorySegment commandBuffer, int rasterizerDiscardEnable) {
        var mh$ = vkCmdSetRasterizerDiscardEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetRasterizerDiscardEnable", commandBuffer, rasterizerDiscardEnable);
            }
            mh$.invokeExact(commandBuffer, rasterizerDiscardEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetDepthBiasEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetDepthBiasEnable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetDepthBiasEnable$descriptor() {
        return vkCmdSetDepthBiasEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
     * }
     */
    public static MethodHandle vkCmdSetDepthBiasEnable$handle() {
        return vkCmdSetDepthBiasEnable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
     * }
     */
    public static void vkCmdSetDepthBiasEnable(MemorySegment commandBuffer, int depthBiasEnable) {
        var mh$ = vkCmdSetDepthBiasEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetDepthBiasEnable", commandBuffer, depthBiasEnable);
            }
            mh$.invokeExact(commandBuffer, depthBiasEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdSetPrimitiveRestartEnable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdSetPrimitiveRestartEnable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
     * }
     */
    public static FunctionDescriptor vkCmdSetPrimitiveRestartEnable$descriptor() {
        return vkCmdSetPrimitiveRestartEnable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
     * }
     */
    public static MethodHandle vkCmdSetPrimitiveRestartEnable$handle() {
        return vkCmdSetPrimitiveRestartEnable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
     * }
     */
    public static void vkCmdSetPrimitiveRestartEnable(MemorySegment commandBuffer, int primitiveRestartEnable) {
        var mh$ = vkCmdSetPrimitiveRestartEnable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdSetPrimitiveRestartEnable", commandBuffer, primitiveRestartEnable);
            }
            mh$.invokeExact(commandBuffer, primitiveRestartEnable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceBufferMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceBufferMemoryRequirements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetDeviceBufferMemoryRequirements$descriptor() {
        return vkGetDeviceBufferMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetDeviceBufferMemoryRequirements$handle() {
        return vkGetDeviceBufferMemoryRequirements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetDeviceBufferMemoryRequirements(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceBufferMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceBufferMemoryRequirements", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceImageMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceImageMemoryRequirements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetDeviceImageMemoryRequirements$descriptor() {
        return vkGetDeviceImageMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetDeviceImageMemoryRequirements$handle() {
        return vkGetDeviceImageMemoryRequirements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, VkMemoryRequirements2 *pMemoryRequirements)
     * }
     */
    public static void vkGetDeviceImageMemoryRequirements(MemorySegment device, MemorySegment pInfo, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetDeviceImageMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceImageMemoryRequirements", device, pInfo, pMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceImageSparseMemoryRequirements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceImageSparseMemoryRequirements"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetDeviceImageSparseMemoryRequirements$descriptor() {
        return vkGetDeviceImageSparseMemoryRequirements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetDeviceImageSparseMemoryRequirements$handle() {
        return vkGetDeviceImageSparseMemoryRequirements.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirements *pInfo, uint32_t *pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 *pSparseMemoryRequirements)
     * }
     */
    public static void vkGetDeviceImageSparseMemoryRequirements(MemorySegment device, MemorySegment pInfo, MemorySegment pSparseMemoryRequirementCount, MemorySegment pSparseMemoryRequirements) {
        var mh$ = vkGetDeviceImageSparseMemoryRequirements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceImageSparseMemoryRequirements", device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
            }
            mh$.invokeExact(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkSurfaceKHR_T *VkSurfaceKHR
     * }
     */
    public static final AddressLayout VkSurfaceKHR = vulkan_h.C_POINTER;
    private static final int VK_PRESENT_MODE_IMMEDIATE_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_IMMEDIATE_KHR = 0
     * }
     */
    public static int VK_PRESENT_MODE_IMMEDIATE_KHR() {
        return VK_PRESENT_MODE_IMMEDIATE_KHR;
    }
    private static final int VK_PRESENT_MODE_MAILBOX_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_MAILBOX_KHR = 1
     * }
     */
    public static int VK_PRESENT_MODE_MAILBOX_KHR() {
        return VK_PRESENT_MODE_MAILBOX_KHR;
    }
    private static final int VK_PRESENT_MODE_FIFO_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_FIFO_KHR = 2
     * }
     */
    public static int VK_PRESENT_MODE_FIFO_KHR() {
        return VK_PRESENT_MODE_FIFO_KHR;
    }
    private static final int VK_PRESENT_MODE_FIFO_RELAXED_KHR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
     * }
     */
    public static int VK_PRESENT_MODE_FIFO_RELAXED_KHR() {
        return VK_PRESENT_MODE_FIFO_RELAXED_KHR;
    }
    private static final int VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = (int)1000111000L;
    /**
     * {@snippet lang=c :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000
     * }
     */
    public static int VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR() {
        return VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR;
    }
    private static final int VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = (int)1000111001L;
    /**
     * {@snippet lang=c :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001
     * }
     */
    public static int VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR() {
        return VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR;
    }
    private static final int VK_PRESENT_MODE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkPresentModeKHR.VK_PRESENT_MODE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_PRESENT_MODE_MAX_ENUM_KHR() {
        return VK_PRESENT_MODE_MAX_ENUM_KHR;
    }
    private static final int VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0
     * }
     */
    public static int VK_COLOR_SPACE_SRGB_NONLINEAR_KHR() {
        return VK_COLOR_SPACE_SRGB_NONLINEAR_KHR;
    }
    private static final int VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = (int)1000104001L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001
     * }
     */
    public static int VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT() {
        return VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = (int)1000104002L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002
     * }
     */
    public static int VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT() {
        return VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = (int)1000104003L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003
     * }
     */
    public static int VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT() {
        return VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = (int)1000104004L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004
     * }
     */
    public static int VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT() {
        return VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_BT709_LINEAR_EXT = (int)1000104005L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005
     * }
     */
    public static int VK_COLOR_SPACE_BT709_LINEAR_EXT() {
        return VK_COLOR_SPACE_BT709_LINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_BT709_NONLINEAR_EXT = (int)1000104006L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006
     * }
     */
    public static int VK_COLOR_SPACE_BT709_NONLINEAR_EXT() {
        return VK_COLOR_SPACE_BT709_NONLINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_BT2020_LINEAR_EXT = (int)1000104007L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007
     * }
     */
    public static int VK_COLOR_SPACE_BT2020_LINEAR_EXT() {
        return VK_COLOR_SPACE_BT2020_LINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_HDR10_ST2084_EXT = (int)1000104008L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008
     * }
     */
    public static int VK_COLOR_SPACE_HDR10_ST2084_EXT() {
        return VK_COLOR_SPACE_HDR10_ST2084_EXT;
    }
    private static final int VK_COLOR_SPACE_DOLBYVISION_EXT = (int)1000104009L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009
     * }
     */
    public static int VK_COLOR_SPACE_DOLBYVISION_EXT() {
        return VK_COLOR_SPACE_DOLBYVISION_EXT;
    }
    private static final int VK_COLOR_SPACE_HDR10_HLG_EXT = (int)1000104010L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010
     * }
     */
    public static int VK_COLOR_SPACE_HDR10_HLG_EXT() {
        return VK_COLOR_SPACE_HDR10_HLG_EXT;
    }
    private static final int VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = (int)1000104011L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011
     * }
     */
    public static int VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT() {
        return VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = (int)1000104012L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012
     * }
     */
    public static int VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT() {
        return VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_PASS_THROUGH_EXT = (int)1000104013L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013
     * }
     */
    public static int VK_COLOR_SPACE_PASS_THROUGH_EXT() {
        return VK_COLOR_SPACE_PASS_THROUGH_EXT;
    }
    private static final int VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = (int)1000104014L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014
     * }
     */
    public static int VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT() {
        return VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = (int)1000213000L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000
     * }
     */
    public static int VK_COLOR_SPACE_DISPLAY_NATIVE_AMD() {
        return VK_COLOR_SPACE_DISPLAY_NATIVE_AMD;
    }
    private static final int VK_COLORSPACE_SRGB_NONLINEAR_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLORSPACE_SRGB_NONLINEAR_KHR = 0
     * }
     */
    public static int VK_COLORSPACE_SRGB_NONLINEAR_KHR() {
        return VK_COLORSPACE_SRGB_NONLINEAR_KHR;
    }
    private static final int VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = (int)1000104003L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = 1000104003
     * }
     */
    public static int VK_COLOR_SPACE_DCI_P3_LINEAR_EXT() {
        return VK_COLOR_SPACE_DCI_P3_LINEAR_EXT;
    }
    private static final int VK_COLOR_SPACE_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkColorSpaceKHR.VK_COLOR_SPACE_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_COLOR_SPACE_MAX_ENUM_KHR() {
        return VK_COLOR_SPACE_MAX_ENUM_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 1
     * }
     */
    public static int VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 2
     * }
     */
    public static int VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 4
     * }
     */
    public static int VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 8
     * }
     */
    public static int VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 16
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 32
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 64
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 128
     * }
     */
    public static int VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 256
     * }
     */
    public static int VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR() {
        return VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR;
    }
    private static final int VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSurfaceTransformFlagBitsKHR.VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR;
    }
    private static final int VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 1
     * }
     */
    public static int VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR() {
        return VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;
    }
    private static final int VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 2
     * }
     */
    public static int VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR() {
        return VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR;
    }
    private static final int VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 4
     * }
     */
    public static int VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR() {
        return VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR;
    }
    private static final int VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 8
     * }
     */
    public static int VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR() {
        return VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR;
    }
    private static final int VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkCompositeAlphaFlagBitsKHR.VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkCompositeAlphaFlagsKHR
     * }
     */
    public static final OfInt VkCompositeAlphaFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSurfaceTransformFlagsKHR
     * }
     */
    public static final OfInt VkSurfaceTransformFlagsKHR = vulkan_h.C_INT;

    private static class vkDestroySurfaceKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroySurfaceKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroySurfaceKHR$descriptor() {
        return vkDestroySurfaceKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroySurfaceKHR$handle() {
        return vkDestroySurfaceKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroySurfaceKHR(MemorySegment instance, MemorySegment surface, MemorySegment pAllocator) {
        var mh$ = vkDestroySurfaceKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroySurfaceKHR", instance, surface, pAllocator);
            }
            mh$.invokeExact(instance, surface, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSurfaceSupportKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSurfaceSupportKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 *pSupported)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSurfaceSupportKHR$descriptor() {
        return vkGetPhysicalDeviceSurfaceSupportKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 *pSupported)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSurfaceSupportKHR$handle() {
        return vkGetPhysicalDeviceSurfaceSupportKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32 *pSupported)
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceSupportKHR(MemorySegment physicalDevice, int queueFamilyIndex, MemorySegment surface, MemorySegment pSupported) {
        var mh$ = vkGetPhysicalDeviceSurfaceSupportKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSurfaceSupportKHR", physicalDevice, queueFamilyIndex, surface, pSupported);
            }
            return (int)mh$.invokeExact(physicalDevice, queueFamilyIndex, surface, pSupported);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSurfaceCapabilitiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSurfaceCapabilitiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR *pSurfaceCapabilities)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSurfaceCapabilitiesKHR$descriptor() {
        return vkGetPhysicalDeviceSurfaceCapabilitiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR *pSurfaceCapabilities)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSurfaceCapabilitiesKHR$handle() {
        return vkGetPhysicalDeviceSurfaceCapabilitiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR *pSurfaceCapabilities)
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceCapabilitiesKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pSurfaceCapabilities) {
        var mh$ = vkGetPhysicalDeviceSurfaceCapabilitiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSurfaceCapabilitiesKHR", physicalDevice, surface, pSurfaceCapabilities);
            }
            return (int)mh$.invokeExact(physicalDevice, surface, pSurfaceCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSurfaceFormatsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSurfaceFormatsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pSurfaceFormatCount, VkSurfaceFormatKHR *pSurfaceFormats)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSurfaceFormatsKHR$descriptor() {
        return vkGetPhysicalDeviceSurfaceFormatsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pSurfaceFormatCount, VkSurfaceFormatKHR *pSurfaceFormats)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSurfaceFormatsKHR$handle() {
        return vkGetPhysicalDeviceSurfaceFormatsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pSurfaceFormatCount, VkSurfaceFormatKHR *pSurfaceFormats)
     * }
     */
    public static int vkGetPhysicalDeviceSurfaceFormatsKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pSurfaceFormatCount, MemorySegment pSurfaceFormats) {
        var mh$ = vkGetPhysicalDeviceSurfaceFormatsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSurfaceFormatsKHR", physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
            }
            return (int)mh$.invokeExact(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceSurfacePresentModesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceSurfacePresentModesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceSurfacePresentModesKHR$descriptor() {
        return vkGetPhysicalDeviceSurfacePresentModesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceSurfacePresentModesKHR$handle() {
        return vkGetPhysicalDeviceSurfacePresentModesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pPresentModeCount, VkPresentModeKHR *pPresentModes)
     * }
     */
    public static int vkGetPhysicalDeviceSurfacePresentModesKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pPresentModeCount, MemorySegment pPresentModes) {
        var mh$ = vkGetPhysicalDeviceSurfacePresentModesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceSurfacePresentModesKHR", physicalDevice, surface, pPresentModeCount, pPresentModes);
            }
            return (int)mh$.invokeExact(physicalDevice, surface, pPresentModeCount, pPresentModes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkSwapchainKHR_T *VkSwapchainKHR
     * }
     */
    public static final AddressLayout VkSwapchainKHR = vulkan_h.C_POINTER;
    private static final int VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 1
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR() {
        return VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR;
    }
    private static final int VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 2
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR() {
        return VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR;
    }
    private static final int VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 4
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR() {
        return VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR;
    }
    private static final int VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT = 8
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT() {
        return VK_SWAPCHAIN_CREATE_DEFERRED_MEMORY_ALLOCATION_BIT_EXT;
    }
    private static final int VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkSwapchainCreateFlagBitsKHR.VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkSwapchainCreateFlagsKHR
     * }
     */
    public static final OfInt VkSwapchainCreateFlagsKHR = vulkan_h.C_INT;
    private static final int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 1
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR() {
        return VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR;
    }
    private static final int VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 2
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR() {
        return VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR;
    }
    private static final int VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 4
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR() {
        return VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR;
    }
    private static final int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 8
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR() {
        return VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR;
    }
    private static final int VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDeviceGroupPresentModeFlagBitsKHR.VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDeviceGroupPresentModeFlagsKHR
     * }
     */
    public static final OfInt VkDeviceGroupPresentModeFlagsKHR = vulkan_h.C_INT;

    private static class vkCreateSwapchainKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateSwapchainKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchain)
     * }
     */
    public static FunctionDescriptor vkCreateSwapchainKHR$descriptor() {
        return vkCreateSwapchainKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchain)
     * }
     */
    public static MethodHandle vkCreateSwapchainKHR$handle() {
        return vkCreateSwapchainKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchain)
     * }
     */
    public static int vkCreateSwapchainKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSwapchain) {
        var mh$ = vkCreateSwapchainKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateSwapchainKHR", device, pCreateInfo, pAllocator, pSwapchain);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pSwapchain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroySwapchainKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroySwapchainKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroySwapchainKHR$descriptor() {
        return vkDestroySwapchainKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroySwapchainKHR$handle() {
        return vkDestroySwapchainKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroySwapchainKHR(MemorySegment device, MemorySegment swapchain, MemorySegment pAllocator) {
        var mh$ = vkDestroySwapchainKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroySwapchainKHR", device, swapchain, pAllocator);
            }
            mh$.invokeExact(device, swapchain, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetSwapchainImagesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetSwapchainImagesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pSwapchainImageCount, VkImage *pSwapchainImages)
     * }
     */
    public static FunctionDescriptor vkGetSwapchainImagesKHR$descriptor() {
        return vkGetSwapchainImagesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pSwapchainImageCount, VkImage *pSwapchainImages)
     * }
     */
    public static MethodHandle vkGetSwapchainImagesKHR$handle() {
        return vkGetSwapchainImagesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t *pSwapchainImageCount, VkImage *pSwapchainImages)
     * }
     */
    public static int vkGetSwapchainImagesKHR(MemorySegment device, MemorySegment swapchain, MemorySegment pSwapchainImageCount, MemorySegment pSwapchainImages) {
        var mh$ = vkGetSwapchainImagesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetSwapchainImagesKHR", device, swapchain, pSwapchainImageCount, pSwapchainImages);
            }
            return (int)mh$.invokeExact(device, swapchain, pSwapchainImageCount, pSwapchainImages);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkAcquireNextImageKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_LONG_LONG,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAcquireNextImageKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t *pImageIndex)
     * }
     */
    public static FunctionDescriptor vkAcquireNextImageKHR$descriptor() {
        return vkAcquireNextImageKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t *pImageIndex)
     * }
     */
    public static MethodHandle vkAcquireNextImageKHR$handle() {
        return vkAcquireNextImageKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t *pImageIndex)
     * }
     */
    public static int vkAcquireNextImageKHR(MemorySegment device, MemorySegment swapchain, long timeout, MemorySegment semaphore, MemorySegment fence, MemorySegment pImageIndex) {
        var mh$ = vkAcquireNextImageKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAcquireNextImageKHR", device, swapchain, timeout, semaphore, fence, pImageIndex);
            }
            return (int)mh$.invokeExact(device, swapchain, timeout, semaphore, fence, pImageIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkQueuePresentKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkQueuePresentKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo)
     * }
     */
    public static FunctionDescriptor vkQueuePresentKHR$descriptor() {
        return vkQueuePresentKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo)
     * }
     */
    public static MethodHandle vkQueuePresentKHR$handle() {
        return vkQueuePresentKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR *pPresentInfo)
     * }
     */
    public static int vkQueuePresentKHR(MemorySegment queue, MemorySegment pPresentInfo) {
        var mh$ = vkQueuePresentKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkQueuePresentKHR", queue, pPresentInfo);
            }
            return (int)mh$.invokeExact(queue, pPresentInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceGroupPresentCapabilitiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceGroupPresentCapabilitiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities)
     * }
     */
    public static FunctionDescriptor vkGetDeviceGroupPresentCapabilitiesKHR$descriptor() {
        return vkGetDeviceGroupPresentCapabilitiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities)
     * }
     */
    public static MethodHandle vkGetDeviceGroupPresentCapabilitiesKHR$handle() {
        return vkGetDeviceGroupPresentCapabilitiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR *pDeviceGroupPresentCapabilities)
     * }
     */
    public static int vkGetDeviceGroupPresentCapabilitiesKHR(MemorySegment device, MemorySegment pDeviceGroupPresentCapabilities) {
        var mh$ = vkGetDeviceGroupPresentCapabilitiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceGroupPresentCapabilitiesKHR", device, pDeviceGroupPresentCapabilities);
            }
            return (int)mh$.invokeExact(device, pDeviceGroupPresentCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDeviceGroupSurfacePresentModesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDeviceGroupSurfacePresentModesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR *pModes)
     * }
     */
    public static FunctionDescriptor vkGetDeviceGroupSurfacePresentModesKHR$descriptor() {
        return vkGetDeviceGroupSurfacePresentModesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR *pModes)
     * }
     */
    public static MethodHandle vkGetDeviceGroupSurfacePresentModesKHR$handle() {
        return vkGetDeviceGroupSurfacePresentModesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR *pModes)
     * }
     */
    public static int vkGetDeviceGroupSurfacePresentModesKHR(MemorySegment device, MemorySegment surface, MemorySegment pModes) {
        var mh$ = vkGetDeviceGroupSurfacePresentModesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDeviceGroupSurfacePresentModesKHR", device, surface, pModes);
            }
            return (int)mh$.invokeExact(device, surface, pModes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDevicePresentRectanglesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDevicePresentRectanglesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pRectCount, VkRect2D *pRects)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDevicePresentRectanglesKHR$descriptor() {
        return vkGetPhysicalDevicePresentRectanglesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pRectCount, VkRect2D *pRects)
     * }
     */
    public static MethodHandle vkGetPhysicalDevicePresentRectanglesKHR$handle() {
        return vkGetPhysicalDevicePresentRectanglesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t *pRectCount, VkRect2D *pRects)
     * }
     */
    public static int vkGetPhysicalDevicePresentRectanglesKHR(MemorySegment physicalDevice, MemorySegment surface, MemorySegment pRectCount, MemorySegment pRects) {
        var mh$ = vkGetPhysicalDevicePresentRectanglesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDevicePresentRectanglesKHR", physicalDevice, surface, pRectCount, pRects);
            }
            return (int)mh$.invokeExact(physicalDevice, surface, pRectCount, pRects);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkAcquireNextImage2KHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkAcquireNextImage2KHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR *pAcquireInfo, uint32_t *pImageIndex)
     * }
     */
    public static FunctionDescriptor vkAcquireNextImage2KHR$descriptor() {
        return vkAcquireNextImage2KHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR *pAcquireInfo, uint32_t *pImageIndex)
     * }
     */
    public static MethodHandle vkAcquireNextImage2KHR$handle() {
        return vkAcquireNextImage2KHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR *pAcquireInfo, uint32_t *pImageIndex)
     * }
     */
    public static int vkAcquireNextImage2KHR(MemorySegment device, MemorySegment pAcquireInfo, MemorySegment pImageIndex) {
        var mh$ = vkAcquireNextImage2KHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkAcquireNextImage2KHR", device, pAcquireInfo, pImageIndex);
            }
            return (int)mh$.invokeExact(device, pAcquireInfo, pImageIndex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkDisplayKHR_T *VkDisplayKHR
     * }
     */
    public static final AddressLayout VkDisplayKHR = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct VkDisplayModeKHR_T *VkDisplayModeKHR
     * }
     */
    public static final AddressLayout VkDisplayModeKHR = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDisplayModeCreateFlagsKHR
     * }
     */
    public static final OfInt VkDisplayModeCreateFlagsKHR = vulkan_h.C_INT;
    private static final int VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 1
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR() {
        return VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR;
    }
    private static final int VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 2
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR() {
        return VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR;
    }
    private static final int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 4
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR() {
        return VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR;
    }
    private static final int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 8
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR() {
        return VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR;
    }
    private static final int VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkDisplayPlaneAlphaFlagBitsKHR.VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDisplayPlaneAlphaFlagsKHR
     * }
     */
    public static final OfInt VkDisplayPlaneAlphaFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkDisplaySurfaceCreateFlagsKHR
     * }
     */
    public static final OfInt VkDisplaySurfaceCreateFlagsKHR = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceDisplayPropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceDisplayPropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPropertiesKHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceDisplayPropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceDisplayPropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPropertiesKHR *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceDisplayPropertiesKHR$handle() {
        return vkGetPhysicalDeviceDisplayPropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPropertiesKHR *pProperties)
     * }
     */
    public static int vkGetPhysicalDeviceDisplayPropertiesKHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayPropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceDisplayPropertiesKHR", physicalDevice, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceDisplayPlanePropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceDisplayPlanePropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPlanePropertiesKHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceDisplayPlanePropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceDisplayPlanePropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPlanePropertiesKHR *pProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceDisplayPlanePropertiesKHR$handle() {
        return vkGetPhysicalDeviceDisplayPlanePropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t *pPropertyCount, VkDisplayPlanePropertiesKHR *pProperties)
     * }
     */
    public static int vkGetPhysicalDeviceDisplayPlanePropertiesKHR(MemorySegment physicalDevice, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetPhysicalDeviceDisplayPlanePropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceDisplayPlanePropertiesKHR", physicalDevice, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDisplayPlaneSupportedDisplaysKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDisplayPlaneSupportedDisplaysKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t *pDisplayCount, VkDisplayKHR *pDisplays)
     * }
     */
    public static FunctionDescriptor vkGetDisplayPlaneSupportedDisplaysKHR$descriptor() {
        return vkGetDisplayPlaneSupportedDisplaysKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t *pDisplayCount, VkDisplayKHR *pDisplays)
     * }
     */
    public static MethodHandle vkGetDisplayPlaneSupportedDisplaysKHR$handle() {
        return vkGetDisplayPlaneSupportedDisplaysKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t *pDisplayCount, VkDisplayKHR *pDisplays)
     * }
     */
    public static int vkGetDisplayPlaneSupportedDisplaysKHR(MemorySegment physicalDevice, int planeIndex, MemorySegment pDisplayCount, MemorySegment pDisplays) {
        var mh$ = vkGetDisplayPlaneSupportedDisplaysKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDisplayPlaneSupportedDisplaysKHR", physicalDevice, planeIndex, pDisplayCount, pDisplays);
            }
            return (int)mh$.invokeExact(physicalDevice, planeIndex, pDisplayCount, pDisplays);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDisplayModePropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDisplayModePropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t *pPropertyCount, VkDisplayModePropertiesKHR *pProperties)
     * }
     */
    public static FunctionDescriptor vkGetDisplayModePropertiesKHR$descriptor() {
        return vkGetDisplayModePropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t *pPropertyCount, VkDisplayModePropertiesKHR *pProperties)
     * }
     */
    public static MethodHandle vkGetDisplayModePropertiesKHR$handle() {
        return vkGetDisplayModePropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t *pPropertyCount, VkDisplayModePropertiesKHR *pProperties)
     * }
     */
    public static int vkGetDisplayModePropertiesKHR(MemorySegment physicalDevice, MemorySegment display, MemorySegment pPropertyCount, MemorySegment pProperties) {
        var mh$ = vkGetDisplayModePropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDisplayModePropertiesKHR", physicalDevice, display, pPropertyCount, pProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, display, pPropertyCount, pProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateDisplayModeKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDisplayModeKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDisplayModeKHR *pMode)
     * }
     */
    public static FunctionDescriptor vkCreateDisplayModeKHR$descriptor() {
        return vkCreateDisplayModeKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDisplayModeKHR *pMode)
     * }
     */
    public static MethodHandle vkCreateDisplayModeKHR$handle() {
        return vkCreateDisplayModeKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkDisplayModeKHR *pMode)
     * }
     */
    public static int vkCreateDisplayModeKHR(MemorySegment physicalDevice, MemorySegment display, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pMode) {
        var mh$ = vkCreateDisplayModeKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDisplayModeKHR", physicalDevice, display, pCreateInfo, pAllocator, pMode);
            }
            return (int)mh$.invokeExact(physicalDevice, display, pCreateInfo, pAllocator, pMode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetDisplayPlaneCapabilitiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetDisplayPlaneCapabilitiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR *pCapabilities)
     * }
     */
    public static FunctionDescriptor vkGetDisplayPlaneCapabilitiesKHR$descriptor() {
        return vkGetDisplayPlaneCapabilitiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR *pCapabilities)
     * }
     */
    public static MethodHandle vkGetDisplayPlaneCapabilitiesKHR$handle() {
        return vkGetDisplayPlaneCapabilitiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR *pCapabilities)
     * }
     */
    public static int vkGetDisplayPlaneCapabilitiesKHR(MemorySegment physicalDevice, MemorySegment mode, int planeIndex, MemorySegment pCapabilities) {
        var mh$ = vkGetDisplayPlaneCapabilitiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetDisplayPlaneCapabilitiesKHR", physicalDevice, mode, planeIndex, pCapabilities);
            }
            return (int)mh$.invokeExact(physicalDevice, mode, planeIndex, pCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateDisplayPlaneSurfaceKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateDisplayPlaneSurfaceKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface)
     * }
     */
    public static FunctionDescriptor vkCreateDisplayPlaneSurfaceKHR$descriptor() {
        return vkCreateDisplayPlaneSurfaceKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface)
     * }
     */
    public static MethodHandle vkCreateDisplayPlaneSurfaceKHR$handle() {
        return vkCreateDisplayPlaneSurfaceKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkSurfaceKHR *pSurface)
     * }
     */
    public static int vkCreateDisplayPlaneSurfaceKHR(MemorySegment instance, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pSurface) {
        var mh$ = vkCreateDisplayPlaneSurfaceKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateDisplayPlaneSurfaceKHR", instance, pCreateInfo, pAllocator, pSurface);
            }
            return (int)mh$.invokeExact(instance, pCreateInfo, pAllocator, pSurface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateSharedSwapchainsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateSharedSwapchainsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchains)
     * }
     */
    public static FunctionDescriptor vkCreateSharedSwapchainsKHR$descriptor() {
        return vkCreateSharedSwapchainsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchains)
     * }
     */
    public static MethodHandle vkCreateSharedSwapchainsKHR$handle() {
        return vkCreateSharedSwapchainsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR *pCreateInfos, const VkAllocationCallbacks *pAllocator, VkSwapchainKHR *pSwapchains)
     * }
     */
    public static int vkCreateSharedSwapchainsKHR(MemorySegment device, int swapchainCount, MemorySegment pCreateInfos, MemorySegment pAllocator, MemorySegment pSwapchains) {
        var mh$ = vkCreateSharedSwapchainsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateSharedSwapchainsKHR", device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
            }
            return (int)mh$.invokeExact(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct VkVideoSessionKHR_T *VkVideoSessionKHR
     * }
     */
    public static final AddressLayout VkVideoSessionKHR = vulkan_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct VkVideoSessionParametersKHR_T *VkVideoSessionParametersKHR
     * }
     */
    public static final AddressLayout VkVideoSessionParametersKHR = vulkan_h.C_POINTER;
    private static final int VK_QUERY_RESULT_STATUS_ERROR_KHR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_ERROR_KHR = -1
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_ERROR_KHR() {
        return VK_QUERY_RESULT_STATUS_ERROR_KHR;
    }
    private static final int VK_QUERY_RESULT_STATUS_NOT_READY_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_NOT_READY_KHR() {
        return VK_QUERY_RESULT_STATUS_NOT_READY_KHR;
    }
    private static final int VK_QUERY_RESULT_STATUS_COMPLETE_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_COMPLETE_KHR() {
        return VK_QUERY_RESULT_STATUS_COMPLETE_KHR;
    }
    private static final int VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = (int)-1000299000L;
    /**
     * {@snippet lang=c :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR = -1000299000
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR() {
        return VK_QUERY_RESULT_STATUS_INSUFFICIENT_BITSTREAM_BUFFER_RANGE_KHR;
    }
    private static final int VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkQueryResultStatusKHR.VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR() {
        return VK_QUERY_RESULT_STATUS_MAX_ENUM_KHR;
    }
    private static final int VK_VIDEO_CODEC_OPERATION_NONE_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_NONE_KHR = 0
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_NONE_KHR() {
        return VK_VIDEO_CODEC_OPERATION_NONE_KHR;
    }
    private static final int VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR = 65536
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR() {
        return VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR;
    }
    private static final int VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR = 131072
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR() {
        return VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR;
    }
    private static final int VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR() {
        return VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR;
    }
    private static final int VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR() {
        return VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR;
    }
    private static final int VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodecOperationFlagBitsKHR.VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_CODEC_OPERATION_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoCodecOperationFlagsKHR
     * }
     */
    public static final OfInt VkVideoCodecOperationFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR = 0
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR() {
        return VK_VIDEO_CHROMA_SUBSAMPLING_INVALID_KHR;
    }
    private static final int VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR() {
        return VK_VIDEO_CHROMA_SUBSAMPLING_MONOCHROME_BIT_KHR;
    }
    private static final int VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR() {
        return VK_VIDEO_CHROMA_SUBSAMPLING_420_BIT_KHR;
    }
    private static final int VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR() {
        return VK_VIDEO_CHROMA_SUBSAMPLING_422_BIT_KHR;
    }
    private static final int VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR() {
        return VK_VIDEO_CHROMA_SUBSAMPLING_444_BIT_KHR;
    }
    private static final int VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoChromaSubsamplingFlagBitsKHR.VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_CHROMA_SUBSAMPLING_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoChromaSubsamplingFlagsKHR
     * }
     */
    public static final OfInt VkVideoChromaSubsamplingFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR = 0
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR() {
        return VK_VIDEO_COMPONENT_BIT_DEPTH_INVALID_KHR;
    }
    private static final int VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR() {
        return VK_VIDEO_COMPONENT_BIT_DEPTH_8_BIT_KHR;
    }
    private static final int VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR() {
        return VK_VIDEO_COMPONENT_BIT_DEPTH_10_BIT_KHR;
    }
    private static final int VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR = 16
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR() {
        return VK_VIDEO_COMPONENT_BIT_DEPTH_12_BIT_KHR;
    }
    private static final int VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoComponentBitDepthFlagBitsKHR.VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_COMPONENT_BIT_DEPTH_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoComponentBitDepthFlagsKHR
     * }
     */
    public static final OfInt VkVideoComponentBitDepthFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR() {
        return VK_VIDEO_CAPABILITY_PROTECTED_CONTENT_BIT_KHR;
    }
    private static final int VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR() {
        return VK_VIDEO_CAPABILITY_SEPARATE_REFERENCE_IMAGES_BIT_KHR;
    }
    private static final int VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCapabilityFlagBitsKHR.VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoCapabilityFlagsKHR
     * }
     */
    public static final OfInt VkVideoCapabilityFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR() {
        return VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR;
    }
    private static final int VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR() {
        return VK_VIDEO_SESSION_CREATE_ALLOW_ENCODE_PARAMETER_OPTIMIZATIONS_BIT_KHR;
    }
    private static final int VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR() {
        return VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR;
    }
    private static final int VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoSessionCreateFlagBitsKHR.VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_SESSION_CREATE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoSessionCreateFlagsKHR
     * }
     */
    public static final OfInt VkVideoSessionCreateFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoSessionParametersCreateFlagsKHR
     * }
     */
    public static final OfInt VkVideoSessionParametersCreateFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoBeginCodingFlagsKHR
     * }
     */
    public static final OfInt VkVideoBeginCodingFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEndCodingFlagsKHR
     * }
     */
    public static final OfInt VkVideoEndCodingFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR() {
        return VK_VIDEO_CODING_CONTROL_RESET_BIT_KHR;
    }
    private static final int VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR() {
        return VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR;
    }
    private static final int VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR() {
        return VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR;
    }
    private static final int VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoCodingControlFlagBitsKHR.VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_CODING_CONTROL_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoCodingControlFlagsKHR
     * }
     */
    public static final OfInt VkVideoCodingControlFlagsKHR = vulkan_h.C_INT;

    private static class vkGetPhysicalDeviceVideoCapabilitiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceVideoCapabilitiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR *pVideoProfile, VkVideoCapabilitiesKHR *pCapabilities)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceVideoCapabilitiesKHR$descriptor() {
        return vkGetPhysicalDeviceVideoCapabilitiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR *pVideoProfile, VkVideoCapabilitiesKHR *pCapabilities)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceVideoCapabilitiesKHR$handle() {
        return vkGetPhysicalDeviceVideoCapabilitiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR *pVideoProfile, VkVideoCapabilitiesKHR *pCapabilities)
     * }
     */
    public static int vkGetPhysicalDeviceVideoCapabilitiesKHR(MemorySegment physicalDevice, MemorySegment pVideoProfile, MemorySegment pCapabilities) {
        var mh$ = vkGetPhysicalDeviceVideoCapabilitiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceVideoCapabilitiesKHR", physicalDevice, pVideoProfile, pCapabilities);
            }
            return (int)mh$.invokeExact(physicalDevice, pVideoProfile, pCapabilities);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetPhysicalDeviceVideoFormatPropertiesKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetPhysicalDeviceVideoFormatPropertiesKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR *pVideoFormatInfo, uint32_t *pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR *pVideoFormatProperties)
     * }
     */
    public static FunctionDescriptor vkGetPhysicalDeviceVideoFormatPropertiesKHR$descriptor() {
        return vkGetPhysicalDeviceVideoFormatPropertiesKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR *pVideoFormatInfo, uint32_t *pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR *pVideoFormatProperties)
     * }
     */
    public static MethodHandle vkGetPhysicalDeviceVideoFormatPropertiesKHR$handle() {
        return vkGetPhysicalDeviceVideoFormatPropertiesKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR *pVideoFormatInfo, uint32_t *pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR *pVideoFormatProperties)
     * }
     */
    public static int vkGetPhysicalDeviceVideoFormatPropertiesKHR(MemorySegment physicalDevice, MemorySegment pVideoFormatInfo, MemorySegment pVideoFormatPropertyCount, MemorySegment pVideoFormatProperties) {
        var mh$ = vkGetPhysicalDeviceVideoFormatPropertiesKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetPhysicalDeviceVideoFormatPropertiesKHR", physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
            }
            return (int)mh$.invokeExact(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateVideoSessionKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateVideoSessionKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkVideoSessionKHR *pVideoSession)
     * }
     */
    public static FunctionDescriptor vkCreateVideoSessionKHR$descriptor() {
        return vkCreateVideoSessionKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkVideoSessionKHR *pVideoSession)
     * }
     */
    public static MethodHandle vkCreateVideoSessionKHR$handle() {
        return vkCreateVideoSessionKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkVideoSessionKHR *pVideoSession)
     * }
     */
    public static int vkCreateVideoSessionKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pVideoSession) {
        var mh$ = vkCreateVideoSessionKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateVideoSessionKHR", device, pCreateInfo, pAllocator, pVideoSession);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pVideoSession);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyVideoSessionKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyVideoSessionKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyVideoSessionKHR$descriptor() {
        return vkDestroyVideoSessionKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyVideoSessionKHR$handle() {
        return vkDestroyVideoSessionKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyVideoSessionKHR(MemorySegment device, MemorySegment videoSession, MemorySegment pAllocator) {
        var mh$ = vkDestroyVideoSessionKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyVideoSessionKHR", device, videoSession, pAllocator);
            }
            mh$.invokeExact(device, videoSession, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkGetVideoSessionMemoryRequirementsKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkGetVideoSessionMemoryRequirementsKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t *pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR *pMemoryRequirements)
     * }
     */
    public static FunctionDescriptor vkGetVideoSessionMemoryRequirementsKHR$descriptor() {
        return vkGetVideoSessionMemoryRequirementsKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t *pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR *pMemoryRequirements)
     * }
     */
    public static MethodHandle vkGetVideoSessionMemoryRequirementsKHR$handle() {
        return vkGetVideoSessionMemoryRequirementsKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t *pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR *pMemoryRequirements)
     * }
     */
    public static int vkGetVideoSessionMemoryRequirementsKHR(MemorySegment device, MemorySegment videoSession, MemorySegment pMemoryRequirementsCount, MemorySegment pMemoryRequirements) {
        var mh$ = vkGetVideoSessionMemoryRequirementsKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkGetVideoSessionMemoryRequirementsKHR", device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
            }
            return (int)mh$.invokeExact(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkBindVideoSessionMemoryKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_INT,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkBindVideoSessionMemoryKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR *pBindSessionMemoryInfos)
     * }
     */
    public static FunctionDescriptor vkBindVideoSessionMemoryKHR$descriptor() {
        return vkBindVideoSessionMemoryKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR *pBindSessionMemoryInfos)
     * }
     */
    public static MethodHandle vkBindVideoSessionMemoryKHR$handle() {
        return vkBindVideoSessionMemoryKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR *pBindSessionMemoryInfos)
     * }
     */
    public static int vkBindVideoSessionMemoryKHR(MemorySegment device, MemorySegment videoSession, int bindSessionMemoryInfoCount, MemorySegment pBindSessionMemoryInfos) {
        var mh$ = vkBindVideoSessionMemoryKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkBindVideoSessionMemoryKHR", device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
            }
            return (int)mh$.invokeExact(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCreateVideoSessionParametersKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCreateVideoSessionParametersKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkVideoSessionParametersKHR *pVideoSessionParameters)
     * }
     */
    public static FunctionDescriptor vkCreateVideoSessionParametersKHR$descriptor() {
        return vkCreateVideoSessionParametersKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkVideoSessionParametersKHR *pVideoSessionParameters)
     * }
     */
    public static MethodHandle vkCreateVideoSessionParametersKHR$handle() {
        return vkCreateVideoSessionParametersKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR *pCreateInfo, const VkAllocationCallbacks *pAllocator, VkVideoSessionParametersKHR *pVideoSessionParameters)
     * }
     */
    public static int vkCreateVideoSessionParametersKHR(MemorySegment device, MemorySegment pCreateInfo, MemorySegment pAllocator, MemorySegment pVideoSessionParameters) {
        var mh$ = vkCreateVideoSessionParametersKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCreateVideoSessionParametersKHR", device, pCreateInfo, pAllocator, pVideoSessionParameters);
            }
            return (int)mh$.invokeExact(device, pCreateInfo, pAllocator, pVideoSessionParameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkUpdateVideoSessionParametersKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            vulkan_h.C_INT,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkUpdateVideoSessionParametersKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR *pUpdateInfo)
     * }
     */
    public static FunctionDescriptor vkUpdateVideoSessionParametersKHR$descriptor() {
        return vkUpdateVideoSessionParametersKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR *pUpdateInfo)
     * }
     */
    public static MethodHandle vkUpdateVideoSessionParametersKHR$handle() {
        return vkUpdateVideoSessionParametersKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * VkResult vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR *pUpdateInfo)
     * }
     */
    public static int vkUpdateVideoSessionParametersKHR(MemorySegment device, MemorySegment videoSessionParameters, MemorySegment pUpdateInfo) {
        var mh$ = vkUpdateVideoSessionParametersKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkUpdateVideoSessionParametersKHR", device, videoSessionParameters, pUpdateInfo);
            }
            return (int)mh$.invokeExact(device, videoSessionParameters, pUpdateInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkDestroyVideoSessionParametersKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkDestroyVideoSessionParametersKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static FunctionDescriptor vkDestroyVideoSessionParametersKHR$descriptor() {
        return vkDestroyVideoSessionParametersKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static MethodHandle vkDestroyVideoSessionParametersKHR$handle() {
        return vkDestroyVideoSessionParametersKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks *pAllocator)
     * }
     */
    public static void vkDestroyVideoSessionParametersKHR(MemorySegment device, MemorySegment videoSessionParameters, MemorySegment pAllocator) {
        var mh$ = vkDestroyVideoSessionParametersKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkDestroyVideoSessionParametersKHR", device, videoSessionParameters, pAllocator);
            }
            mh$.invokeExact(device, videoSessionParameters, pAllocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdBeginVideoCodingKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdBeginVideoCodingKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR *pBeginInfo)
     * }
     */
    public static FunctionDescriptor vkCmdBeginVideoCodingKHR$descriptor() {
        return vkCmdBeginVideoCodingKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR *pBeginInfo)
     * }
     */
    public static MethodHandle vkCmdBeginVideoCodingKHR$handle() {
        return vkCmdBeginVideoCodingKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR *pBeginInfo)
     * }
     */
    public static void vkCmdBeginVideoCodingKHR(MemorySegment commandBuffer, MemorySegment pBeginInfo) {
        var mh$ = vkCmdBeginVideoCodingKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdBeginVideoCodingKHR", commandBuffer, pBeginInfo);
            }
            mh$.invokeExact(commandBuffer, pBeginInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdEndVideoCodingKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdEndVideoCodingKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR *pEndCodingInfo)
     * }
     */
    public static FunctionDescriptor vkCmdEndVideoCodingKHR$descriptor() {
        return vkCmdEndVideoCodingKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR *pEndCodingInfo)
     * }
     */
    public static MethodHandle vkCmdEndVideoCodingKHR$handle() {
        return vkCmdEndVideoCodingKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR *pEndCodingInfo)
     * }
     */
    public static void vkCmdEndVideoCodingKHR(MemorySegment commandBuffer, MemorySegment pEndCodingInfo) {
        var mh$ = vkCmdEndVideoCodingKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdEndVideoCodingKHR", commandBuffer, pEndCodingInfo);
            }
            mh$.invokeExact(commandBuffer, pEndCodingInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class vkCmdControlVideoCodingKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdControlVideoCodingKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR *pCodingControlInfo)
     * }
     */
    public static FunctionDescriptor vkCmdControlVideoCodingKHR$descriptor() {
        return vkCmdControlVideoCodingKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR *pCodingControlInfo)
     * }
     */
    public static MethodHandle vkCmdControlVideoCodingKHR$handle() {
        return vkCmdControlVideoCodingKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR *pCodingControlInfo)
     * }
     */
    public static void vkCmdControlVideoCodingKHR(MemorySegment commandBuffer, MemorySegment pCodingControlInfo) {
        var mh$ = vkCmdControlVideoCodingKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdControlVideoCodingKHR", commandBuffer, pCodingControlInfo);
            }
            mh$.invokeExact(commandBuffer, pCodingControlInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR() {
        return VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_COINCIDE_BIT_KHR;
    }
    private static final int VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR() {
        return VK_VIDEO_DECODE_CAPABILITY_DPB_AND_OUTPUT_DISTINCT_BIT_KHR;
    }
    private static final int VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeCapabilityFlagBitsKHR.VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_DECODE_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoDecodeCapabilityFlagsKHR
     * }
     */
    public static final OfInt VkVideoDecodeCapabilityFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_DEFAULT_KHR = 0
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_DEFAULT_KHR() {
        return VK_VIDEO_DECODE_USAGE_DEFAULT_KHR;
    }
    private static final int VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR() {
        return VK_VIDEO_DECODE_USAGE_TRANSCODING_BIT_KHR;
    }
    private static final int VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR() {
        return VK_VIDEO_DECODE_USAGE_OFFLINE_BIT_KHR;
    }
    private static final int VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR() {
        return VK_VIDEO_DECODE_USAGE_STREAMING_BIT_KHR;
    }
    private static final int VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoDecodeUsageFlagBitsKHR.VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_DECODE_USAGE_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoDecodeUsageFlagsKHR
     * }
     */
    public static final OfInt VkVideoDecodeUsageFlagsKHR = vulkan_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoDecodeFlagsKHR
     * }
     */
    public static final OfInt VkVideoDecodeFlagsKHR = vulkan_h.C_INT;

    private static class vkCmdDecodeVideoKHR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            vulkan_h.C_POINTER,
            vulkan_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    vulkan_h.findOrThrow("vkCmdDecodeVideoKHR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR *pDecodeInfo)
     * }
     */
    public static FunctionDescriptor vkCmdDecodeVideoKHR$descriptor() {
        return vkCmdDecodeVideoKHR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR *pDecodeInfo)
     * }
     */
    public static MethodHandle vkCmdDecodeVideoKHR$handle() {
        return vkCmdDecodeVideoKHR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR *pDecodeInfo)
     * }
     */
    public static void vkCmdDecodeVideoKHR(MemorySegment commandBuffer, MemorySegment pDecodeInfo) {
        var mh$ = vkCmdDecodeVideoKHR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("vkCmdDecodeVideoKHR", commandBuffer, pDecodeInfo);
            }
            mh$.invokeExact(commandBuffer, pDecodeInfo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME = 0
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME() {
        return STD_VIDEO_H264_CHROMA_FORMAT_IDC_MONOCHROME;
    }
    private static final int STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_420 = 1
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_420() {
        return STD_VIDEO_H264_CHROMA_FORMAT_IDC_420;
    }
    private static final int STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_422 = 2
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_422() {
        return STD_VIDEO_H264_CHROMA_FORMAT_IDC_422;
    }
    private static final int STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_444 = 3
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_444() {
        return STD_VIDEO_H264_CHROMA_FORMAT_IDC_444;
    }
    private static final int STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID() {
        return STD_VIDEO_H264_CHROMA_FORMAT_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ChromaFormatIdc.STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_CHROMA_FORMAT_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_PROFILE_IDC_BASELINE = (int)66L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_BASELINE = 66
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_BASELINE() {
        return STD_VIDEO_H264_PROFILE_IDC_BASELINE;
    }
    private static final int STD_VIDEO_H264_PROFILE_IDC_MAIN = (int)77L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAIN = 77
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_MAIN() {
        return STD_VIDEO_H264_PROFILE_IDC_MAIN;
    }
    private static final int STD_VIDEO_H264_PROFILE_IDC_HIGH = (int)100L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH = 100
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_HIGH() {
        return STD_VIDEO_H264_PROFILE_IDC_HIGH;
    }
    private static final int STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = (int)244L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE = 244
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE() {
        return STD_VIDEO_H264_PROFILE_IDC_HIGH_444_PREDICTIVE;
    }
    private static final int STD_VIDEO_H264_PROFILE_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_INVALID() {
        return STD_VIDEO_H264_PROFILE_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ProfileIdc.STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_PROFILE_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_1_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_0 = 0
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_0() {
        return STD_VIDEO_H264_LEVEL_IDC_1_0;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_1_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_1 = 1
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_1() {
        return STD_VIDEO_H264_LEVEL_IDC_1_1;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_1_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_2 = 2
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_2() {
        return STD_VIDEO_H264_LEVEL_IDC_1_2;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_1_3 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_1_3 = 3
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_1_3() {
        return STD_VIDEO_H264_LEVEL_IDC_1_3;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_2_0 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_0 = 4
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_2_0() {
        return STD_VIDEO_H264_LEVEL_IDC_2_0;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_2_1 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_1 = 5
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_2_1() {
        return STD_VIDEO_H264_LEVEL_IDC_2_1;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_2_2 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_2_2 = 6
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_2_2() {
        return STD_VIDEO_H264_LEVEL_IDC_2_2;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_3_0 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_0 = 7
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_3_0() {
        return STD_VIDEO_H264_LEVEL_IDC_3_0;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_3_1 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_1 = 8
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_3_1() {
        return STD_VIDEO_H264_LEVEL_IDC_3_1;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_3_2 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_3_2 = 9
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_3_2() {
        return STD_VIDEO_H264_LEVEL_IDC_3_2;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_4_0 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_0 = 10
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_4_0() {
        return STD_VIDEO_H264_LEVEL_IDC_4_0;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_4_1 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_1 = 11
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_4_1() {
        return STD_VIDEO_H264_LEVEL_IDC_4_1;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_4_2 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_4_2 = 12
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_4_2() {
        return STD_VIDEO_H264_LEVEL_IDC_4_2;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_5_0 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_0 = 13
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_5_0() {
        return STD_VIDEO_H264_LEVEL_IDC_5_0;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_5_1 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_1 = 14
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_5_1() {
        return STD_VIDEO_H264_LEVEL_IDC_5_1;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_5_2 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_5_2 = 15
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_5_2() {
        return STD_VIDEO_H264_LEVEL_IDC_5_2;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_6_0 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_0 = 16
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_6_0() {
        return STD_VIDEO_H264_LEVEL_IDC_6_0;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_6_1 = (int)17L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_1 = 17
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_6_1() {
        return STD_VIDEO_H264_LEVEL_IDC_6_1;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_6_2 = (int)18L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_6_2 = 18
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_6_2() {
        return STD_VIDEO_H264_LEVEL_IDC_6_2;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_INVALID() {
        return STD_VIDEO_H264_LEVEL_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264LevelIdc.STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_LEVEL_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_POC_TYPE_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_0 = 0
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_0() {
        return STD_VIDEO_H264_POC_TYPE_0;
    }
    private static final int STD_VIDEO_H264_POC_TYPE_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_1 = 1
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_1() {
        return STD_VIDEO_H264_POC_TYPE_1;
    }
    private static final int STD_VIDEO_H264_POC_TYPE_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_2 = 2
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_2() {
        return STD_VIDEO_H264_POC_TYPE_2;
    }
    private static final int STD_VIDEO_H264_POC_TYPE_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_INVALID() {
        return STD_VIDEO_H264_POC_TYPE_INVALID;
    }
    private static final int STD_VIDEO_H264_POC_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PocType.STD_VIDEO_H264_POC_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_POC_TYPE_MAX_ENUM() {
        return STD_VIDEO_H264_POC_TYPE_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED = 0
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_UNSPECIFIED;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE = 1
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_SQUARE;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11 = 2
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_12_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11 = 3
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_10_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11 = 4
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_16_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33 = 5
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_40_33;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11 = 6
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_24_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11 = 7
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_20_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11 = 8
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_32_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = (int)9L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33 = 9
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_80_33;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11 = 10
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_18_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11 = 11
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_15_11;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = (int)12L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33 = 12
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_64_33;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = (int)13L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99 = 13
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_160_99;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = (int)14L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3 = 14
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_4_3;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = (int)15L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2 = 15
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_3_2;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = (int)16L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1 = 16
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_2_1;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = (int)255L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR = 255
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_EXTENDED_SAR;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264AspectRatioIdc.STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_ASPECT_RATIO_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT = 0
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT() {
        return STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_DEFAULT;
    }
    private static final int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT = 1
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT() {
        return STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_EXPLICIT;
    }
    private static final int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT = 2
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT() {
        return STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_IMPLICIT;
    }
    private static final int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID() {
        return STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264WeightedBipredIdc.STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_WEIGHTED_BIPRED_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT = 0
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT() {
        return STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_SUBTRACT;
    }
    private static final int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD = 1
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD() {
        return STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_SHORT_TERM_ADD;
    }
    private static final int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM = 2
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM() {
        return STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_LONG_TERM;
    }
    private static final int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END = 3
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END() {
        return STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_END;
    }
    private static final int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID() {
        return STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264ModificationOfPicNumsIdc.STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_MODIFICATION_OF_PIC_NUMS_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END = 0
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_END;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM = 1
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_SHORT_TERM;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM = 2
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_LONG_TERM;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM = 3
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_LONG_TERM;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX = 4
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_SET_MAX_LONG_TERM_INDEX;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL = 5
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_UNMARK_ALL;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = (int)6L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM = 6
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MARK_CURRENT_AS_LONG_TERM;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_INVALID;
    }
    private static final int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264MemMgmtControlOp.STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM() {
        return STD_VIDEO_H264_MEM_MGMT_CONTROL_OP_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_CABAC_INIT_IDC_0 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_0 = 0
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_0() {
        return STD_VIDEO_H264_CABAC_INIT_IDC_0;
    }
    private static final int STD_VIDEO_H264_CABAC_INIT_IDC_1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_1 = 1
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_1() {
        return STD_VIDEO_H264_CABAC_INIT_IDC_1;
    }
    private static final int STD_VIDEO_H264_CABAC_INIT_IDC_2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_2 = 2
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_2() {
        return STD_VIDEO_H264_CABAC_INIT_IDC_2;
    }
    private static final int STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_INVALID() {
        return STD_VIDEO_H264_CABAC_INIT_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264CabacInitIdc.STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_CABAC_INIT_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED = 0
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED() {
        return STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_DISABLED;
    }
    private static final int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED = 1
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED() {
        return STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_ENABLED;
    }
    private static final int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL = 2
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL() {
        return STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_PARTIAL;
    }
    private static final int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID() {
        return STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_INVALID;
    }
    private static final int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264DisableDeblockingFilterIdc.STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM() {
        return STD_VIDEO_H264_DISABLE_DEBLOCKING_FILTER_IDC_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_SLICE_TYPE_P = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_P = 0
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_P() {
        return STD_VIDEO_H264_SLICE_TYPE_P;
    }
    private static final int STD_VIDEO_H264_SLICE_TYPE_B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_B = 1
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_B() {
        return STD_VIDEO_H264_SLICE_TYPE_B;
    }
    private static final int STD_VIDEO_H264_SLICE_TYPE_I = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_I = 2
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_I() {
        return STD_VIDEO_H264_SLICE_TYPE_I;
    }
    private static final int STD_VIDEO_H264_SLICE_TYPE_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_INVALID() {
        return STD_VIDEO_H264_SLICE_TYPE_INVALID;
    }
    private static final int STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264SliceType.STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM() {
        return STD_VIDEO_H264_SLICE_TYPE_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_PICTURE_TYPE_P = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_P = 0
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_P() {
        return STD_VIDEO_H264_PICTURE_TYPE_P;
    }
    private static final int STD_VIDEO_H264_PICTURE_TYPE_B = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_B = 1
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_B() {
        return STD_VIDEO_H264_PICTURE_TYPE_B;
    }
    private static final int STD_VIDEO_H264_PICTURE_TYPE_I = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_I = 2
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_I() {
        return STD_VIDEO_H264_PICTURE_TYPE_I;
    }
    private static final int STD_VIDEO_H264_PICTURE_TYPE_IDR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_IDR = 5
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_IDR() {
        return STD_VIDEO_H264_PICTURE_TYPE_IDR;
    }
    private static final int STD_VIDEO_H264_PICTURE_TYPE_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_INVALID() {
        return STD_VIDEO_H264_PICTURE_TYPE_INVALID;
    }
    private static final int STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264PictureType.STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM() {
        return STD_VIDEO_H264_PICTURE_TYPE_MAX_ENUM;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS = 0
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_SPS;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS = 1
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_PPS;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD = 2
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_AUD;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = (int)3L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX = 3
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_PREFIX;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE = 4
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_SEQUENCE;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = (int)5L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM = 5
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_END_OF_STREAM;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED = 6
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_PRECODED;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_INVALID;
    }
    private static final int STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum StdVideoH264NonVclNaluType.STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM = 2147483647
     * }
     */
    public static int STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM() {
        return STD_VIDEO_H264_NON_VCL_NALU_TYPE_MAX_ENUM;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_HRD_COMPLIANCE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_ROW_UNALIGNED_SLICE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_DIFFERENT_SLICE_TYPE_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR = 16
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L0_LIST_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR = 32
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_B_FRAME_IN_L1_LIST_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR = 64
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR = 128
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_PER_SLICE_CONSTANT_QP_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR = 256
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_GENERATE_PREFIX_NALU_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = (int)2147483647L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264CapabilityFlagBitsKHR.VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR = 2147483647
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR() {
        return VK_VIDEO_ENCODE_H264_CAPABILITY_FLAG_BITS_MAX_ENUM_KHR;
    }
    /**
     * {@snippet lang=c :
     * typedef VkFlags VkVideoEncodeH264CapabilityFlagsKHR
     * }
     */
    public static final OfInt VkVideoEncodeH264CapabilityFlagsKHR = vulkan_h.C_INT;
    private static final int VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR = 1
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_SEPARATE_COLOR_PLANE_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR = 2
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_QPPRIME_Y_ZERO_TRANSFORM_BYPASS_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR = 4
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_SCALING_MATRIX_PRESENT_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 8
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_CHROMA_QP_INDEX_OFFSET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR = 16
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_SECOND_CHROMA_QP_INDEX_OFFSET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = (int)32L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR = 32
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_PIC_INIT_QP_MINUS26_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = (int)64L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR = 64
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_WEIGHTED_PRED_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR = 128
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_EXPLICIT_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR = 256
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_WEIGHTED_BIPRED_IDC_IMPLICIT_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = (int)512L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR = 512
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_TRANSFORM_8X8_MODE_FLAG_SET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR = 1024
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_DIRECT_SPATIAL_MV_PRED_FLAG_UNSET_BIT_KHR;
    }
    private static final int VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum VkVideoEncodeH264StdFlagBitsKHR.VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR = 2048
     * }
     */
    public static int VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR() {
        return VK_VIDEO_ENCODE_H264_STD_ENTROPY_CODING_MODE_FLAG_UNSET_BIT_KHR;
    }
}

